
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a38  08000000  0c000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  00020430  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  00020430  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  00020430  2**0
                  CONTENTS
  5 .data         00000430  20000000  0c000a38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000008  20000430  0c000e68  00020430  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  00020430  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000000  30000000  30000000  00020430  2**0
                  CONTENTS
 10 .debug_aranges 00000108  00000000  00000000  00020430  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00004383  00000000  00000000  00020538  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000a73  00000000  00000000  000248bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000120b  00000000  00000000  0002532e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000002ac  00000000  00000000  0002653c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0007586c  00000000  00000000  000267e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000043c  00000000  00000000  0009c054  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000098  00000000  00000000  0009c490  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .build_attributes 000001c2  00000000  00000000  0009c528  2**0
                  CONTENTS, READONLY
 19 .debug_macro  000189de  00000000  00000000  0009c6ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c000a38 	.word	0x0c000a38
 800024c:	20000000 	.word	0x20000000
 8000250:	00000430 	.word	0x00000430
 8000254:	0c000e68 	.word	0x0c000e68
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c000a38 	.word	0x0c000a38
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c000a38 	.word	0x0c000a38
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000430 	.word	0x20000430
 800027c:	00000008 	.word	0x00000008
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	080005d9 	.word	0x080005d9
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	080009e1 	.word	0x080009e1
    ldr  r0, =main
 80002ac:	080002d9 	.word	0x080002d9

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>

080002b2 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80002b2:	b480      	push	{r7}
 80002b4:	b083      	sub	sp, #12
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
 80002ba:	460b      	mov	r3, r1
 80002bc:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 80002be:	78fb      	ldrb	r3, [r7, #3]
 80002c0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80002c4:	409a      	lsls	r2, r3
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	605a      	str	r2, [r3, #4]
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
	...

080002d8 <main>:
#include <xmc_gpio.h>

int main(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
  const XMC_GPIO_CONFIG_t LED_config = \
 80002de:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <main+0x3c>)
 80002e0:	463b      	mov	r3, r7
 80002e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        {.mode=XMC_GPIO_MODE_OUTPUT_PUSH_PULL,\
         .output_level=XMC_GPIO_OUTPUT_LEVEL_LOW,\
         .output_strength=XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE};

  XMC_GPIO_Init(XMC_GPIO_PORT1, 0, &LED_config);
 80002e8:	463b      	mov	r3, r7
 80002ea:	461a      	mov	r2, r3
 80002ec:	2100      	movs	r1, #0
 80002ee:	480a      	ldr	r0, [pc, #40]	; (8000318 <main+0x40>)
 80002f0:	f000 f878 	bl	80003e4 <XMC_GPIO_Init>

  while(1) {
    for(int32_t waiter=(1<<20); waiter >= 0; waiter--);
 80002f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	e002      	b.n	8000302 <main+0x2a>
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	3b01      	subs	r3, #1
 8000300:	60fb      	str	r3, [r7, #12]
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	2b00      	cmp	r3, #0
 8000306:	daf9      	bge.n	80002fc <main+0x24>
    XMC_GPIO_ToggleOutput(XMC_GPIO_PORT1, 0);
 8000308:	2100      	movs	r1, #0
 800030a:	4803      	ldr	r0, [pc, #12]	; (8000318 <main+0x40>)
 800030c:	f7ff ffd1 	bl	80002b2 <XMC_GPIO_ToggleOutput>
    for(int32_t waiter=(1<<20); waiter >= 0; waiter--);
 8000310:	e7f0      	b.n	80002f4 <main+0x1c>
 8000312:	bf00      	nop
 8000314:	08000a28 	.word	0x08000a28
 8000318:	48028100 	.word	0x48028100

0800031c <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	460b      	mov	r3, r1
 8000326:	70fb      	strb	r3, [r7, #3]
 8000328:	4613      	mov	r3, r2
 800032a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 800032c:	78fb      	ldrb	r3, [r7, #3]
 800032e:	089b      	lsrs	r3, r3, #2
 8000330:	b2db      	uxtb	r3, r3
 8000332:	461a      	mov	r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3204      	adds	r2, #4
 8000338:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800033c:	78fb      	ldrb	r3, [r7, #3]
 800033e:	f003 0303 	and.w	r3, r3, #3
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	21f8      	movs	r1, #248	; 0xf8
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	43db      	mvns	r3, r3
 800034c:	78f9      	ldrb	r1, [r7, #3]
 800034e:	0889      	lsrs	r1, r1, #2
 8000350:	b2c9      	uxtb	r1, r1
 8000352:	4608      	mov	r0, r1
 8000354:	ea02 0103 	and.w	r1, r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	1d02      	adds	r2, r0, #4
 800035c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000360:	78fb      	ldrb	r3, [r7, #3]
 8000362:	089b      	lsrs	r3, r3, #2
 8000364:	b2db      	uxtb	r3, r3
 8000366:	461a      	mov	r2, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	3204      	adds	r2, #4
 800036c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000370:	78b9      	ldrb	r1, [r7, #2]
 8000372:	78fb      	ldrb	r3, [r7, #3]
 8000374:	f003 0303 	and.w	r3, r3, #3
 8000378:	00db      	lsls	r3, r3, #3
 800037a:	fa01 f303 	lsl.w	r3, r1, r3
 800037e:	78f9      	ldrb	r1, [r7, #3]
 8000380:	0889      	lsrs	r1, r1, #2
 8000382:	b2c9      	uxtb	r1, r1
 8000384:	4608      	mov	r0, r1
 8000386:	ea42 0103 	orr.w	r1, r2, r3
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	1d02      	adds	r2, r0, #4
 800038e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr

0800039e <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 800039e:	b480      	push	{r7}
 80003a0:	b083      	sub	sp, #12
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
 80003a6:	460b      	mov	r3, r1
 80003a8:	70fb      	strb	r3, [r7, #3]
 80003aa:	4613      	mov	r3, r2
 80003ac:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003b2:	78fb      	ldrb	r3, [r7, #3]
 80003b4:	005b      	lsls	r3, r3, #1
 80003b6:	2103      	movs	r1, #3
 80003b8:	fa01 f303 	lsl.w	r3, r1, r3
 80003bc:	43db      	mvns	r3, r3
 80003be:	401a      	ands	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003c8:	78b9      	ldrb	r1, [r7, #2]
 80003ca:	78fb      	ldrb	r3, [r7, #3]
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	fa01 f303 	lsl.w	r3, r1, r3
 80003d2:	431a      	orrs	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr

080003e4 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	460b      	mov	r3, r1
 80003ee:	607a      	str	r2, [r7, #4]
 80003f0:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003f2:	7afb      	ldrb	r3, [r7, #11]
 80003f4:	089b      	lsrs	r3, r3, #2
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	461a      	mov	r2, r3
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	3204      	adds	r2, #4
 80003fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000402:	7afb      	ldrb	r3, [r7, #11]
 8000404:	f003 0303 	and.w	r3, r3, #3
 8000408:	00db      	lsls	r3, r3, #3
 800040a:	21f8      	movs	r1, #248	; 0xf8
 800040c:	fa01 f303 	lsl.w	r3, r1, r3
 8000410:	43db      	mvns	r3, r3
 8000412:	7af9      	ldrb	r1, [r7, #11]
 8000414:	0889      	lsrs	r1, r1, #2
 8000416:	b2c9      	uxtb	r1, r1
 8000418:	4608      	mov	r0, r1
 800041a:	ea02 0103 	and.w	r1, r2, r3
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	1d02      	adds	r2, r0, #4
 8000422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800042a:	7afb      	ldrb	r3, [r7, #11]
 800042c:	005b      	lsls	r3, r3, #1
 800042e:	2103      	movs	r1, #3
 8000430:	fa01 f303 	lsl.w	r3, r1, r3
 8000434:	43db      	mvns	r3, r3
 8000436:	401a      	ands	r2, r3
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	4a38      	ldr	r2, [pc, #224]	; (8000520 <XMC_GPIO_Init+0x13c>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d003      	beq.n	800044c <XMC_GPIO_Init+0x68>
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	4a37      	ldr	r2, [pc, #220]	; (8000524 <XMC_GPIO_Init+0x140>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d10a      	bne.n	8000462 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000450:	7afb      	ldrb	r3, [r7, #11]
 8000452:	2101      	movs	r1, #1
 8000454:	fa01 f303 	lsl.w	r3, r1, r3
 8000458:	43db      	mvns	r3, r3
 800045a:	401a      	ands	r2, r3
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	661a      	str	r2, [r3, #96]	; 0x60
 8000460:	e03c      	b.n	80004dc <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	685a      	ldr	r2, [r3, #4]
 8000466:	7afb      	ldrb	r3, [r7, #11]
 8000468:	409a      	lsls	r2, r3
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800046e:	7afb      	ldrb	r3, [r7, #11]
 8000470:	08db      	lsrs	r3, r3, #3
 8000472:	b2db      	uxtb	r3, r3
 8000474:	461a      	mov	r2, r3
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	3210      	adds	r2, #16
 800047a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800047e:	7afb      	ldrb	r3, [r7, #11]
 8000480:	f003 0307 	and.w	r3, r3, #7
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	2107      	movs	r1, #7
 8000488:	fa01 f303 	lsl.w	r3, r1, r3
 800048c:	43db      	mvns	r3, r3
 800048e:	7af9      	ldrb	r1, [r7, #11]
 8000490:	08c9      	lsrs	r1, r1, #3
 8000492:	b2c9      	uxtb	r1, r1
 8000494:	4608      	mov	r0, r1
 8000496:	ea02 0103 	and.w	r1, r2, r3
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	f100 0210 	add.w	r2, r0, #16
 80004a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80004a4:	7afb      	ldrb	r3, [r7, #11]
 80004a6:	08db      	lsrs	r3, r3, #3
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	461a      	mov	r2, r3
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	3210      	adds	r2, #16
 80004b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	7a1b      	ldrb	r3, [r3, #8]
 80004b8:	4619      	mov	r1, r3
 80004ba:	7afb      	ldrb	r3, [r7, #11]
 80004bc:	f003 0307 	and.w	r3, r3, #7
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	fa01 f303 	lsl.w	r3, r1, r3
 80004c6:	7af9      	ldrb	r1, [r7, #11]
 80004c8:	08c9      	lsrs	r1, r1, #3
 80004ca:	b2c9      	uxtb	r1, r1
 80004cc:	4608      	mov	r0, r1
 80004ce:	ea42 0103 	orr.w	r1, r2, r3
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	f100 0210 	add.w	r2, r0, #16
 80004d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004dc:	7afb      	ldrb	r3, [r7, #11]
 80004de:	089b      	lsrs	r3, r3, #2
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	461a      	mov	r2, r3
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	3204      	adds	r2, #4
 80004e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4619      	mov	r1, r3
 80004f2:	7afb      	ldrb	r3, [r7, #11]
 80004f4:	f003 0303 	and.w	r3, r3, #3
 80004f8:	00db      	lsls	r3, r3, #3
 80004fa:	fa01 f303 	lsl.w	r3, r1, r3
 80004fe:	7af9      	ldrb	r1, [r7, #11]
 8000500:	0889      	lsrs	r1, r1, #2
 8000502:	b2c9      	uxtb	r1, r1
 8000504:	4608      	mov	r0, r1
 8000506:	ea42 0103 	orr.w	r1, r2, r3
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	1d02      	adds	r2, r0, #4
 800050e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	48028e00 	.word	0x48028e00
 8000524:	48028f00 	.word	0x48028f00

08000528 <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	460b      	mov	r3, r1
 8000532:	70fb      	strb	r3, [r7, #3]
 8000534:	4613      	mov	r3, r2
 8000536:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000538:	78fb      	ldrb	r3, [r7, #3]
 800053a:	08db      	lsrs	r3, r3, #3
 800053c:	b2db      	uxtb	r3, r3
 800053e:	461a      	mov	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	3210      	adds	r2, #16
 8000544:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000548:	78fb      	ldrb	r3, [r7, #3]
 800054a:	f003 0307 	and.w	r3, r3, #7
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	2107      	movs	r1, #7
 8000552:	fa01 f303 	lsl.w	r3, r1, r3
 8000556:	43db      	mvns	r3, r3
 8000558:	78f9      	ldrb	r1, [r7, #3]
 800055a:	08c9      	lsrs	r1, r1, #3
 800055c:	b2c9      	uxtb	r1, r1
 800055e:	4608      	mov	r0, r1
 8000560:	ea02 0103 	and.w	r1, r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f100 0210 	add.w	r2, r0, #16
 800056a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800056e:	78fb      	ldrb	r3, [r7, #3]
 8000570:	08db      	lsrs	r3, r3, #3
 8000572:	b2db      	uxtb	r3, r3
 8000574:	461a      	mov	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	3210      	adds	r2, #16
 800057a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800057e:	78b9      	ldrb	r1, [r7, #2]
 8000580:	78fb      	ldrb	r3, [r7, #3]
 8000582:	f003 0307 	and.w	r3, r3, #7
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	fa01 f303 	lsl.w	r3, r1, r3
 800058c:	78f9      	ldrb	r1, [r7, #3]
 800058e:	08c9      	lsrs	r1, r1, #3
 8000590:	b2c9      	uxtb	r1, r1
 8000592:	4608      	mov	r0, r1
 8000594:	ea42 0103 	orr.w	r1, r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f100 0210 	add.w	r2, r0, #16
 800059e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b085      	sub	sp, #20
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	e003      	b.n	80005c4 <delay+0x16>
  {
    __NOP();
 80005bc:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d8f7      	bhi.n	80005bc <delay+0xe>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80005d8:	b598      	push	{r3, r4, r7, lr}
 80005da:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80005dc:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <SystemInit+0x20>)
 80005de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80005e2:	4614      	mov	r4, r2
 80005e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80005ea:	f000 f807 	bl	80005fc <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80005ee:	f000 f83d 	bl	800066c <SystemCoreClockSetup>
}
 80005f2:	bf00      	nop
 80005f4:	bd98      	pop	{r3, r4, r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000ffc4 	.word	0x2000ffc4

080005fc <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000602:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <SystemCoreSetup+0x64>)
 8000606:	4a17      	ldr	r2, [pc, #92]	; (8000664 <SystemCoreSetup+0x68>)
 8000608:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800060a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 800060e:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <SystemCoreSetup+0x64>)
 8000612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <SystemCoreSetup+0x64>)
 8000618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800061c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <SystemCoreSetup+0x64>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <SystemCoreSetup+0x64>)
 8000626:	f023 0308 	bic.w	r3, r3, #8
 800062a:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <SystemCoreSetup+0x6c>)
 800062e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000632:	3314      	adds	r3, #20
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f043 0303 	orr.w	r3, r3, #3
 8000646:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <SystemCoreSetup+0x6c>)
 800064a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800064e:	3314      	adds	r3, #20
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	601a      	str	r2, [r3, #0]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00
 8000664:	08000000 	.word	0x08000000
 8000668:	58001000 	.word	0x58001000

0800066c <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000670:	4b75      	ldr	r3, [pc, #468]	; (8000848 <SystemCoreClockSetup+0x1dc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f003 0301 	and.w	r3, r3, #1
 8000678:	2b00      	cmp	r3, #0
 800067a:	d10c      	bne.n	8000696 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 800067c:	4b72      	ldr	r3, [pc, #456]	; (8000848 <SystemCoreClockSetup+0x1dc>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	4a71      	ldr	r2, [pc, #452]	; (8000848 <SystemCoreClockSetup+0x1dc>)
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000688:	bf00      	nop
 800068a:	4b6f      	ldr	r3, [pc, #444]	; (8000848 <SystemCoreClockSetup+0x1dc>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f9      	beq.n	800068a <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000696:	4b6d      	ldr	r3, [pc, #436]	; (800084c <SystemCoreClockSetup+0x1e0>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d009      	beq.n	80006b6 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80006a2:	4b6a      	ldr	r3, [pc, #424]	; (800084c <SystemCoreClockSetup+0x1e0>)
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	4a69      	ldr	r2, [pc, #420]	; (800084c <SystemCoreClockSetup+0x1e0>)
 80006a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006ac:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80006ae:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80006b2:	f7ff ff7c 	bl	80005ae <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80006b6:	4b66      	ldr	r3, [pc, #408]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	4a65      	ldr	r2, [pc, #404]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 80006bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006c0:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80006c2:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80006c6:	f7ff ff72 	bl	80005ae <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80006ca:	4b61      	ldr	r3, [pc, #388]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	4a60      	ldr	r2, [pc, #384]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 80006d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006d4:	f023 0302 	bic.w	r3, r3, #2
 80006d8:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80006da:	4b5e      	ldr	r3, [pc, #376]	; (8000854 <SystemCoreClockSetup+0x1e8>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d029      	beq.n	800073a <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80006e6:	4b5b      	ldr	r3, [pc, #364]	; (8000854 <SystemCoreClockSetup+0x1e8>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	4a5a      	ldr	r2, [pc, #360]	; (8000854 <SystemCoreClockSetup+0x1e8>)
 80006ec:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80006f0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80006f4:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80006f6:	f000 f927 	bl	8000948 <OSCHP_GetFrequency>
 80006fa:	4602      	mov	r2, r0
 80006fc:	4b56      	ldr	r3, [pc, #344]	; (8000858 <SystemCoreClockSetup+0x1ec>)
 80006fe:	fba3 2302 	umull	r2, r3, r3, r2
 8000702:	0d1b      	lsrs	r3, r3, #20
 8000704:	3b01      	subs	r3, #1
 8000706:	041a      	lsls	r2, r3, #16
 8000708:	4b52      	ldr	r3, [pc, #328]	; (8000854 <SystemCoreClockSetup+0x1e8>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	4951      	ldr	r1, [pc, #324]	; (8000854 <SystemCoreClockSetup+0x1e8>)
 800070e:	4313      	orrs	r3, r2
 8000710:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8000712:	4b4f      	ldr	r3, [pc, #316]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	4a4e      	ldr	r2, [pc, #312]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 8000718:	f023 0301 	bic.w	r3, r3, #1
 800071c:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800071e:	4b4c      	ldr	r3, [pc, #304]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	4a4b      	ldr	r2, [pc, #300]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 8000724:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000728:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 800072a:	bf00      	nop
 800072c:	4b48      	ldr	r3, [pc, #288]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000734:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000738:	d1f8      	bne.n	800072c <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 800073a:	4b45      	ldr	r3, [pc, #276]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	4a44      	ldr	r2, [pc, #272]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8000746:	4b42      	ldr	r3, [pc, #264]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	4a41      	ldr	r2, [pc, #260]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000752:	4b3f      	ldr	r3, [pc, #252]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 8000754:	4a41      	ldr	r2, [pc, #260]	; (800085c <SystemCoreClockSetup+0x1f0>)
 8000756:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000758:	4b3d      	ldr	r3, [pc, #244]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	4a3c      	ldr	r2, [pc, #240]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 800075e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000762:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000764:	4b3a      	ldr	r3, [pc, #232]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	4a39      	ldr	r2, [pc, #228]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 800076a:	f023 0310 	bic.w	r3, r3, #16
 800076e:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000770:	4b37      	ldr	r3, [pc, #220]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	4a36      	ldr	r2, [pc, #216]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 8000776:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800077a:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800077c:	bf00      	nop
 800077e:	4b34      	ldr	r3, [pc, #208]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	2b00      	cmp	r3, #0
 8000788:	d0f9      	beq.n	800077e <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800078a:	4b31      	ldr	r3, [pc, #196]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	4a30      	ldr	r2, [pc, #192]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 8000790:	f023 0301 	bic.w	r3, r3, #1
 8000794:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000796:	bf00      	nop
 8000798:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1f9      	bne.n	8000798 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80007a4:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <SystemCoreClockSetup+0x1f4>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	4a2d      	ldr	r2, [pc, #180]	; (8000860 <SystemCoreClockSetup+0x1f4>)
 80007aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ae:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80007b0:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <SystemCoreClockSetup+0x1f4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <SystemCoreClockSetup+0x1f4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <SystemCoreClockSetup+0x1f4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80007c2:	4b27      	ldr	r3, [pc, #156]	; (8000860 <SystemCoreClockSetup+0x1f4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <SystemCoreClockSetup+0x1f4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <SystemCoreClockSetup+0x1f4>)
 80007d0:	2203      	movs	r2, #3
 80007d2:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	4a1d      	ldr	r2, [pc, #116]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 80007da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007de:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 80007e2:	4a20      	ldr	r2, [pc, #128]	; (8000864 <SystemCoreClockSetup+0x1f8>)
 80007e4:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 80007e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007ea:	f7ff fee0 	bl	80005ae <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80007ee:	bf00      	nop
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f003 0304 	and.w	r3, r3, #4
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d0f9      	beq.n	80007f0 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 80007fe:	4a1a      	ldr	r2, [pc, #104]	; (8000868 <SystemCoreClockSetup+0x1fc>)
 8000800:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8000802:	f241 1094 	movw	r0, #4500	; 0x1194
 8000806:	f7ff fed2 	bl	80005ae <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800080a:	bf00      	nop
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f003 0304 	and.w	r3, r3, #4
 8000814:	2b00      	cmp	r3, #0
 8000816:	d0f9      	beq.n	800080c <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <SystemCoreClockSetup+0x200>)
 800081c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 800081e:	f241 7070 	movw	r0, #6000	; 0x1770
 8000822:	f7ff fec4 	bl	80005ae <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000826:	bf00      	nop
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <SystemCoreClockSetup+0x1e4>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	2b00      	cmp	r3, #0
 8000832:	d0f9      	beq.n	8000828 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <SystemCoreClockSetup+0x204>)
 8000836:	2205      	movs	r2, #5
 8000838:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <SystemCoreClockSetup+0x1f4>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8000840:	f000 f818 	bl	8000874 <SystemCoreClockUpdate>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	50004200 	.word	0x50004200
 800084c:	50004400 	.word	0x50004400
 8000850:	50004710 	.word	0x50004710
 8000854:	50004700 	.word	0x50004700
 8000858:	6b5fca6b 	.word	0x6b5fca6b
 800085c:	01134f00 	.word	0x01134f00
 8000860:	50004600 	.word	0x50004600
 8000864:	01074f00 	.word	0x01074f00
 8000868:	01044f00 	.word	0x01044f00
 800086c:	01034f00 	.word	0x01034f00
 8000870:	50004160 	.word	0x50004160

08000874 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800087a:	4b2f      	ldr	r3, [pc, #188]	; (8000938 <SystemCoreClockUpdate+0xc4>)
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000882:	2b00      	cmp	r3, #0
 8000884:	d03e      	beq.n	8000904 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <SystemCoreClockUpdate+0xc8>)
 8000888:	68db      	ldr	r3, [r3, #12]
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	2b00      	cmp	r3, #0
 8000890:	d002      	beq.n	8000898 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8000892:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <SystemCoreClockUpdate+0xcc>)
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	e002      	b.n	800089e <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000898:	f000 f856 	bl	8000948 <OSCHP_GetFrequency>
 800089c:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 800089e:	4b27      	ldr	r3, [pc, #156]	; (800093c <SystemCoreClockUpdate+0xc8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d020      	beq.n	80008ec <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80008aa:	4b24      	ldr	r3, [pc, #144]	; (800093c <SystemCoreClockUpdate+0xc8>)
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	0e1b      	lsrs	r3, r3, #24
 80008b0:	f003 030f 	and.w	r3, r3, #15
 80008b4:	3301      	adds	r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80008b8:	4b20      	ldr	r3, [pc, #128]	; (800093c <SystemCoreClockUpdate+0xc8>)
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	0a1b      	lsrs	r3, r3, #8
 80008be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008c2:	3301      	adds	r3, #1
 80008c4:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <SystemCoreClockUpdate+0xc8>)
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	0c1b      	lsrs	r3, r3, #16
 80008cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008d0:	3301      	adds	r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	fb02 f303 	mul.w	r3, r2, r3
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	fbb2 f2f3 	udiv	r2, r2, r3
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	fb02 f303 	mul.w	r3, r2, r3
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	e00d      	b.n	8000908 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <SystemCoreClockUpdate+0xc8>)
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f4:	3301      	adds	r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	e001      	b.n	8000908 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <SystemCoreClockUpdate+0xcc>)
 8000906:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <SystemCoreClockUpdate+0xc4>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	3301      	adds	r3, #1
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <SystemCoreClockUpdate+0xc4>)
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	3301      	adds	r3, #1
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	fbb2 f3f3 	udiv	r3, r2, r3
 8000928:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800092a:	4a06      	ldr	r2, [pc, #24]	; (8000944 <SystemCoreClockUpdate+0xd0>)
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	50004600 	.word	0x50004600
 800093c:	50004710 	.word	0x50004710
 8000940:	016e3600 	.word	0x016e3600
 8000944:	2000ffc0 	.word	0x2000ffc0

08000948 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <OSCHP_GetFrequency+0x10>)
}
 800094e:	4618      	mov	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	00b71b00 	.word	0x00b71b00

0800095c <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <_sbrk+0x5c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <_sbrk+0x5c>)
 800096e:	4a13      	ldr	r2, [pc, #76]	; (80009bc <_sbrk+0x60>)
 8000970:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <_sbrk+0x5c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3303      	adds	r3, #3
 800097c:	f023 0303 	bic.w	r3, r3, #3
 8000980:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <_sbrk+0x5c>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <_sbrk+0x64>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d207      	bcs.n	80009a0 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <_sbrk+0x5c>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4413      	add	r3, r2
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <_sbrk+0x5c>)
 800099a:	6013      	str	r3, [r2, #0]
    return (base);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	e006      	b.n	80009ae <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 80009a0:	f000 f818 	bl	80009d4 <__errno>
 80009a4:	4602      	mov	r2, r0
 80009a6:	230c      	movs	r3, #12
 80009a8:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 80009aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000434 	.word	0x20000434
 80009bc:	20000438 	.word	0x20000438
 80009c0:	2000ffc0 	.word	0x2000ffc0

080009c4 <_init>:

/* Init */
void _init(void)
{}
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
	...

080009d4 <__errno>:
 80009d4:	4b01      	ldr	r3, [pc, #4]	; (80009dc <__errno+0x8>)
 80009d6:	6818      	ldr	r0, [r3, #0]
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000000 	.word	0x20000000

080009e0 <__libc_init_array>:
 80009e0:	b570      	push	{r4, r5, r6, lr}
 80009e2:	4e0d      	ldr	r6, [pc, #52]	; (8000a18 <__libc_init_array+0x38>)
 80009e4:	4d0d      	ldr	r5, [pc, #52]	; (8000a1c <__libc_init_array+0x3c>)
 80009e6:	1b76      	subs	r6, r6, r5
 80009e8:	10b6      	asrs	r6, r6, #2
 80009ea:	d006      	beq.n	80009fa <__libc_init_array+0x1a>
 80009ec:	2400      	movs	r4, #0
 80009ee:	3401      	adds	r4, #1
 80009f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f4:	4798      	blx	r3
 80009f6:	42a6      	cmp	r6, r4
 80009f8:	d1f9      	bne.n	80009ee <__libc_init_array+0xe>
 80009fa:	4e09      	ldr	r6, [pc, #36]	; (8000a20 <__libc_init_array+0x40>)
 80009fc:	4d09      	ldr	r5, [pc, #36]	; (8000a24 <__libc_init_array+0x44>)
 80009fe:	1b76      	subs	r6, r6, r5
 8000a00:	f7ff ffe0 	bl	80009c4 <_init>
 8000a04:	10b6      	asrs	r6, r6, #2
 8000a06:	d006      	beq.n	8000a16 <__libc_init_array+0x36>
 8000a08:	2400      	movs	r4, #0
 8000a0a:	3401      	adds	r4, #1
 8000a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a10:	4798      	blx	r3
 8000a12:	42a6      	cmp	r6, r4
 8000a14:	d1f9      	bne.n	8000a0a <__libc_init_array+0x2a>
 8000a16:	bd70      	pop	{r4, r5, r6, pc}
 8000a18:	20000430 	.word	0x20000430
 8000a1c:	20000430 	.word	0x20000430
 8000a20:	20000430 	.word	0x20000430
 8000a24:	20000430 	.word	0x20000430
 8000a28:	00000080 	.word	0x00000080
 8000a2c:	00010000 	.word	0x00010000
 8000a30:	00000000 	.word	0x00000000

08000a34 <_global_impure_ptr>:
 8000a34:	20000008                                ... 
