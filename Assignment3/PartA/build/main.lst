
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006e00  08000000  0c000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  00020480  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  00020480  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  00020480  2**0
                  CONTENTS
  5 .data         00000480  20000000  0c006e00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000e48  20000480  0c007280  00020480  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  00020480  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000e00  30000000  0c007280  00030000  2**2
                  ALLOC
 10 .debug_aranges 00000908  00000000  00000000  00020480  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001ef1a  00000000  00000000  00020d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002f3e  00000000  00000000  0003fca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a072  00000000  00000000  00042be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002630  00000000  00000000  0004cc54  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00083b1a  00000000  00000000  0004f284  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000048ae  00000000  00000000  000d2d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000007d0  00000000  00000000  000d764c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .build_attributes 0000050a  00000000  00000000  000d7e1c  2**0
                  CONTENTS, READONLY
 19 .debug_macro  0001ccfe  00000000  00000000  000d8326  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	95 03 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	a5 09 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c006e00 	.word	0x0c006e00
 800024c:	20000000 	.word	0x20000000
 8000250:	00000480 	.word	0x00000480
 8000254:	0c007280 	.word	0x0c007280
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c006e00 	.word	0x0c006e00
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c006e00 	.word	0x0c006e00
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000480 	.word	0x20000480
 800027c:	00000e48 	.word	0x00000e48
 8000280:	30000000 	.word	0x30000000
 8000284:	00000e00 	.word	0x00000e00
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	0800612d 	.word	0x0800612d
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	080069bd 	.word	0x080069bd
    ldr  r0, =main
 80002ac:	080003b1 	.word	0x080003b1

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	6039      	str	r1, [r7, #0]
 80002be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	db0a      	blt.n	80002de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	490c      	ldr	r1, [pc, #48]	; (8000300 <__NVIC_SetPriority+0x4c>)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	0092      	lsls	r2, r2, #2
 80002d4:	b2d2      	uxtb	r2, r2
 80002d6:	440b      	add	r3, r1
 80002d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002dc:	e00a      	b.n	80002f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4908      	ldr	r1, [pc, #32]	; (8000304 <__NVIC_SetPriority+0x50>)
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	f003 030f 	and.w	r3, r3, #15
 80002ea:	3b04      	subs	r3, #4
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	440b      	add	r3, r1
 80002f2:	761a      	strb	r2, [r3, #24]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	e000e100 	.word	0xe000e100
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3b01      	subs	r3, #1
 8000314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000318:	d301      	bcc.n	800031e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800031a:	2301      	movs	r3, #1
 800031c:	e00f      	b.n	800033e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <SysTick_Config+0x40>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3b01      	subs	r3, #1
 8000324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000326:	213f      	movs	r1, #63	; 0x3f
 8000328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800032c:	f7ff ffc2 	bl	80002b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <SysTick_Config+0x40>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <SysTick_Config+0x40>)
 8000338:	2207      	movs	r2, #7
 800033a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800033c:	2300      	movs	r3, #0
}
 800033e:	4618      	mov	r0, r3
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	e000e010 	.word	0xe000e010

0800034c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	2201      	movs	r2, #1
 800035c:	409a      	lsls	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	605a      	str	r2, [r3, #4]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
 8000376:	460b      	mov	r3, r1
 8000378:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800037a:	78fb      	ldrb	r3, [r7, #3]
 800037c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000380:	409a      	lsls	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
	...

08000394 <SysTick_Handler>:
/* SysTick Counter */
uint32_t volatile msTicks = 0;
uint32_t curTicks = 0;
int zwTicks[85] = {0};
void SysTick_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	msTicks++;
 8000398:	4b04      	ldr	r3, [pc, #16]	; (80003ac <SysTick_Handler+0x18>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	3301      	adds	r3, #1
 800039e:	4a03      	ldr	r2, [pc, #12]	; (80003ac <SysTick_Handler+0x18>)
 80003a0:	6013      	str	r3, [r2, #0]
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	20000480 	.word	0x20000480

080003b0 <main>:

/**
 * Main program entry point. This routine configures the hardware required by
 * the application, then enters a loop to run the application tasks in sequence.
 */
int main(void) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
	// Init LED pins for debugging and NUM/CAPS visual report
	XMC_GPIO_SetMode(LED1,XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 80003b6:	2280      	movs	r2, #128	; 0x80
 80003b8:	2101      	movs	r1, #1
 80003ba:	4827      	ldr	r0, [pc, #156]	; (8000458 <main+0xa8>)
 80003bc:	f002 f880 	bl	80024c0 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(LED2,XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 80003c0:	2280      	movs	r2, #128	; 0x80
 80003c2:	2100      	movs	r1, #0
 80003c4:	4824      	ldr	r0, [pc, #144]	; (8000458 <main+0xa8>)
 80003c6:	f002 f87b 	bl	80024c0 <XMC_GPIO_SetMode>
	USB_Init();
 80003ca:	f000 faf5 	bl	80009b8 <USB_Init>
	
	// Init SysTick
	SysTick_Config(SystemCoreClock / 1000);
 80003ce:	4b23      	ldr	r3, [pc, #140]	; (800045c <main+0xac>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a23      	ldr	r2, [pc, #140]	; (8000460 <main+0xb0>)
 80003d4:	fba2 2303 	umull	r2, r3, r2, r3
 80003d8:	099b      	lsrs	r3, r3, #6
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff ff94 	bl	8000308 <SysTick_Config>

		
	// Wait until host has enumerated HID device
	for(int i = 0; i < 10e6; ++i)
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	e002      	b.n	80003ec <main+0x3c>
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	3301      	adds	r3, #1
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68f8      	ldr	r0, [r7, #12]
 80003ee:	f006 f9ed 	bl	80067cc <__aeabi_i2d>
 80003f2:	a317      	add	r3, pc, #92	; (adr r3, 8000450 <main+0xa0>)
 80003f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003f8:	f006 fab2 	bl	8006960 <__aeabi_dcmplt>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d1f1      	bne.n	80003e6 <main+0x36>
		; 

	// pwToSend
	for(int j = 0; j < 20; j++) {
 8000402:	2300      	movs	r3, #0
 8000404:	60bb      	str	r3, [r7, #8]
 8000406:	e01a      	b.n	800043e <main+0x8e>
        	for(int i = 0; i < 85; i++) {
 8000408:	2300      	movs	r3, #0
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	e011      	b.n	8000432 <main+0x82>
                        pwToSend[i][j] = pwchars[i];
 800040e:	4a15      	ldr	r2, [pc, #84]	; (8000464 <main+0xb4>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4413      	add	r3, r2
 8000414:	7818      	ldrb	r0, [r3, #0]
 8000416:	4914      	ldr	r1, [pc, #80]	; (8000468 <main+0xb8>)
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	4613      	mov	r3, r2
 800041c:	009b      	lsls	r3, r3, #2
 800041e:	4413      	add	r3, r2
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	18ca      	adds	r2, r1, r3
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	4413      	add	r3, r2
 8000428:	4602      	mov	r2, r0
 800042a:	701a      	strb	r2, [r3, #0]
        	for(int i = 0; i < 85; i++) {
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3301      	adds	r3, #1
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2b54      	cmp	r3, #84	; 0x54
 8000436:	ddea      	ble.n	800040e <main+0x5e>
	for(int j = 0; j < 20; j++) {
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	3301      	adds	r3, #1
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	2b13      	cmp	r3, #19
 8000442:	dde1      	ble.n	8000408 <main+0x58>
                }
	}

	while (1) {
		HID_Device_USBTask(&Keyboard_HID_Interface);
 8000444:	4809      	ldr	r0, [pc, #36]	; (800046c <main+0xbc>)
 8000446:	f002 faa7 	bl	8002998 <HID_Device_USBTask>
 800044a:	e7fb      	b.n	8000444 <main+0x94>
 800044c:	f3af 8000 	nop.w
 8000450:	00000000 	.word	0x00000000
 8000454:	416312d0 	.word	0x416312d0
 8000458:	48028100 	.word	0x48028100
 800045c:	2000ffc0 	.word	0x2000ffc0
 8000460:	10624dd3 	.word	0x10624dd3
 8000464:	08006c44 	.word	0x08006c44
 8000468:	200005f8 	.word	0x200005f8
 800046c:	2000002c 	.word	0x2000002c

08000470 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(
							USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
							uint8_t* const ReportID,
							const uint8_t ReportType,
							void* ReportData,
							uint16_t* const ReportSize ) {
 8000470:	b480      	push	{r7}
 8000472:	b089      	sub	sp, #36	; 0x24
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	603b      	str	r3, [r7, #0]
 800047c:	4613      	mov	r3, r2
 800047e:	71fb      	strb	r3, [r7, #7]
	USB_KeyboardReport_Data_t* report = (USB_KeyboardReport_Data_t *)ReportData;
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	613b      	str	r3, [r7, #16]
	*ReportSize = sizeof(USB_KeyboardReport_Data_t); 
 8000484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000486:	2208      	movs	r2, #8
 8000488:	801a      	strh	r2, [r3, #0]

	if(success == 0) {
 800048a:	4ba0      	ldr	r3, [pc, #640]	; (800070c <CALLBACK_HID_Device_CreateHIDReport+0x29c>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	f040 80d9 	bne.w	8000646 <CALLBACK_HID_Device_CreateHIDReport+0x1d6>
		if(indexToSend_i < 85) {
 8000494:	4b9e      	ldr	r3, [pc, #632]	; (8000710 <CALLBACK_HID_Device_CreateHIDReport+0x2a0>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b54      	cmp	r3, #84	; 0x54
 800049a:	f200 80b6 	bhi.w	800060a <CALLBACK_HID_Device_CreateHIDReport+0x19a>
			if(reset) {
 800049e:	4b9d      	ldr	r3, [pc, #628]	; (8000714 <CALLBACK_HID_Device_CreateHIDReport+0x2a4>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d015      	beq.n	80004d2 <CALLBACK_HID_Device_CreateHIDReport+0x62>

				report->Modifier = 0;
 80004a6:	693b      	ldr	r3, [r7, #16]
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
				report->Reserved = 0;
 80004ac:	693b      	ldr	r3, [r7, #16]
 80004ae:	2200      	movs	r2, #0
 80004b0:	705a      	strb	r2, [r3, #1]
				report->KeyCode[0] = 0;
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	2200      	movs	r2, #0
 80004b6:	709a      	strb	r2, [r3, #2]
				reset = 0;
 80004b8:	4b96      	ldr	r3, [pc, #600]	; (8000714 <CALLBACK_HID_Device_CreateHIDReport+0x2a4>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	701a      	strb	r2, [r3, #0]
				++indexlocal;
 80004be:	4b96      	ldr	r3, [pc, #600]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 80004c0:	f993 3000 	ldrsb.w	r3, [r3]
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	3301      	adds	r3, #1
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	b25a      	sxtb	r2, r3
 80004cc:	4b92      	ldr	r3, [pc, #584]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 80004ce:	701a      	strb	r2, [r3, #0]
 80004d0:	e115      	b.n	80006fe <CALLBACK_HID_Device_CreateHIDReport+0x28e>

			} else {
				
				if(indexlocal < indexToSend_j) {
 80004d2:	4b91      	ldr	r3, [pc, #580]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 80004d4:	f993 3000 	ldrsb.w	r3, [r3]
 80004d8:	461a      	mov	r2, r3
 80004da:	4b90      	ldr	r3, [pc, #576]	; (800071c <CALLBACK_HID_Device_CreateHIDReport+0x2ac>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	429a      	cmp	r2, r3
 80004e0:	da3b      	bge.n	800055a <CALLBACK_HID_Device_CreateHIDReport+0xea>
					if(maxTime[indexlocal] < 41) {
 80004e2:	4b8d      	ldr	r3, [pc, #564]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 80004e4:	f993 3000 	ldrsb.w	r3, [r3]
 80004e8:	461a      	mov	r2, r3
 80004ea:	4b8d      	ldr	r3, [pc, #564]	; (8000720 <CALLBACK_HID_Device_CreateHIDReport+0x2b0>)
 80004ec:	5c9b      	ldrb	r3, [r3, r2]
 80004ee:	2b28      	cmp	r3, #40	; 0x28
 80004f0:	d803      	bhi.n	80004fa <CALLBACK_HID_Device_CreateHIDReport+0x8a>
                                		report->Modifier = 0;
 80004f2:	693b      	ldr	r3, [r7, #16]
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
 80004f8:	e016      	b.n	8000528 <CALLBACK_HID_Device_CreateHIDReport+0xb8>
                        		} else if(maxTime[indexlocal] >= 41 && maxTime[indexlocal] <= 79) {
 80004fa:	4b87      	ldr	r3, [pc, #540]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 80004fc:	f993 3000 	ldrsb.w	r3, [r3]
 8000500:	461a      	mov	r2, r3
 8000502:	4b87      	ldr	r3, [pc, #540]	; (8000720 <CALLBACK_HID_Device_CreateHIDReport+0x2b0>)
 8000504:	5c9b      	ldrb	r3, [r3, r2]
 8000506:	2b28      	cmp	r3, #40	; 0x28
 8000508:	d90b      	bls.n	8000522 <CALLBACK_HID_Device_CreateHIDReport+0xb2>
 800050a:	4b83      	ldr	r3, [pc, #524]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 800050c:	f993 3000 	ldrsb.w	r3, [r3]
 8000510:	461a      	mov	r2, r3
 8000512:	4b83      	ldr	r3, [pc, #524]	; (8000720 <CALLBACK_HID_Device_CreateHIDReport+0x2b0>)
 8000514:	5c9b      	ldrb	r3, [r3, r2]
 8000516:	2b4f      	cmp	r3, #79	; 0x4f
 8000518:	d803      	bhi.n	8000522 <CALLBACK_HID_Device_CreateHIDReport+0xb2>
                                		report->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	2202      	movs	r2, #2
 800051e:	701a      	strb	r2, [r3, #0]
 8000520:	e002      	b.n	8000528 <CALLBACK_HID_Device_CreateHIDReport+0xb8>
                        		} else {
                                		report->Modifier = HID_KEYBOARD_MODIFIER_RIGHTALT;
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	2240      	movs	r2, #64	; 0x40
 8000526:	701a      	strb	r2, [r3, #0]
                        		}

					report->Reserved = 0;
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	2200      	movs	r2, #0
 800052c:	705a      	strb	r2, [r3, #1]
					report->KeyCode[0] = pwToSend[maxTime[indexlocal]][indexlocal];
 800052e:	4b7a      	ldr	r3, [pc, #488]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 8000530:	f993 3000 	ldrsb.w	r3, [r3]
 8000534:	461a      	mov	r2, r3
 8000536:	4b7a      	ldr	r3, [pc, #488]	; (8000720 <CALLBACK_HID_Device_CreateHIDReport+0x2b0>)
 8000538:	5c9b      	ldrb	r3, [r3, r2]
 800053a:	4619      	mov	r1, r3
 800053c:	4b76      	ldr	r3, [pc, #472]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 800053e:	f993 3000 	ldrsb.w	r3, [r3]
 8000542:	4618      	mov	r0, r3
 8000544:	4a77      	ldr	r2, [pc, #476]	; (8000724 <CALLBACK_HID_Device_CreateHIDReport+0x2b4>)
 8000546:	460b      	mov	r3, r1
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	440b      	add	r3, r1
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	4413      	add	r3, r2
 8000550:	4403      	add	r3, r0
 8000552:	781a      	ldrb	r2, [r3, #0]
 8000554:	693b      	ldr	r3, [r7, #16]
 8000556:	709a      	strb	r2, [r3, #2]
 8000558:	e053      	b.n	8000602 <CALLBACK_HID_Device_CreateHIDReport+0x192>

				} else if(indexlocal == indexToSend_j) {
 800055a:	4b6f      	ldr	r3, [pc, #444]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 800055c:	f993 3000 	ldrsb.w	r3, [r3]
 8000560:	461a      	mov	r2, r3
 8000562:	4b6e      	ldr	r3, [pc, #440]	; (800071c <CALLBACK_HID_Device_CreateHIDReport+0x2ac>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	429a      	cmp	r2, r3
 8000568:	d12b      	bne.n	80005c2 <CALLBACK_HID_Device_CreateHIDReport+0x152>
					if(indexToSend_i < 41) {
 800056a:	4b69      	ldr	r3, [pc, #420]	; (8000710 <CALLBACK_HID_Device_CreateHIDReport+0x2a0>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b28      	cmp	r3, #40	; 0x28
 8000570:	d803      	bhi.n	800057a <CALLBACK_HID_Device_CreateHIDReport+0x10a>
                                		report->Modifier = 0;
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
 8000578:	e00e      	b.n	8000598 <CALLBACK_HID_Device_CreateHIDReport+0x128>
                        		} else if(indexToSend_i >= 41 && indexToSend_i <= 79) {
 800057a:	4b65      	ldr	r3, [pc, #404]	; (8000710 <CALLBACK_HID_Device_CreateHIDReport+0x2a0>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b28      	cmp	r3, #40	; 0x28
 8000580:	d907      	bls.n	8000592 <CALLBACK_HID_Device_CreateHIDReport+0x122>
 8000582:	4b63      	ldr	r3, [pc, #396]	; (8000710 <CALLBACK_HID_Device_CreateHIDReport+0x2a0>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b4f      	cmp	r3, #79	; 0x4f
 8000588:	d803      	bhi.n	8000592 <CALLBACK_HID_Device_CreateHIDReport+0x122>
                                		report->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	2202      	movs	r2, #2
 800058e:	701a      	strb	r2, [r3, #0]
 8000590:	e002      	b.n	8000598 <CALLBACK_HID_Device_CreateHIDReport+0x128>
                        		} else {
                                		report->Modifier = HID_KEYBOARD_MODIFIER_RIGHTALT;
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	2240      	movs	r2, #64	; 0x40
 8000596:	701a      	strb	r2, [r3, #0]
                        		}

			 		report->Reserved = 0;
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	2200      	movs	r2, #0
 800059c:	705a      	strb	r2, [r3, #1]
                                	report->KeyCode[0] = pwToSend[indexToSend_i][indexlocal];
 800059e:	4b5c      	ldr	r3, [pc, #368]	; (8000710 <CALLBACK_HID_Device_CreateHIDReport+0x2a0>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	4619      	mov	r1, r3
 80005a4:	4b5c      	ldr	r3, [pc, #368]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 80005a6:	f993 3000 	ldrsb.w	r3, [r3]
 80005aa:	4618      	mov	r0, r3
 80005ac:	4a5d      	ldr	r2, [pc, #372]	; (8000724 <CALLBACK_HID_Device_CreateHIDReport+0x2b4>)
 80005ae:	460b      	mov	r3, r1
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	440b      	add	r3, r1
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	4413      	add	r3, r2
 80005b8:	4403      	add	r3, r0
 80005ba:	781a      	ldrb	r2, [r3, #0]
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	709a      	strb	r2, [r3, #2]
 80005c0:	e01f      	b.n	8000602 <CALLBACK_HID_Device_CreateHIDReport+0x192>
				} else {
					report->Modifier = 0;
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
					report->Reserved = 0;
 80005c8:	693b      	ldr	r3, [r7, #16]
 80005ca:	2200      	movs	r2, #0
 80005cc:	705a      	strb	r2, [r3, #1]
					int32_t waiter = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
                                        while(waiter < (1<<22)) {
 80005d2:	e002      	b.n	80005da <CALLBACK_HID_Device_CreateHIDReport+0x16a>
                                                waiter++;
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	3301      	adds	r3, #1
 80005d8:	61fb      	str	r3, [r7, #28]
                                        while(waiter < (1<<22)) {
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80005e0:	dbf8      	blt.n	80005d4 <CALLBACK_HID_Device_CreateHIDReport+0x164>
                                        }
					curTicks = msTicks;
 80005e2:	4b51      	ldr	r3, [pc, #324]	; (8000728 <CALLBACK_HID_Device_CreateHIDReport+0x2b8>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a51      	ldr	r2, [pc, #324]	; (800072c <CALLBACK_HID_Device_CreateHIDReport+0x2bc>)
 80005e8:	6013      	str	r3, [r2, #0]
					report->KeyCode[0] = GERMAN_KEYBOARD_SC_ENTER;
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	2228      	movs	r2, #40	; 0x28
 80005ee:	709a      	strb	r2, [r3, #2]
					++indexToSend_i;
 80005f0:	4b47      	ldr	r3, [pc, #284]	; (8000710 <CALLBACK_HID_Device_CreateHIDReport+0x2a0>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	3301      	adds	r3, #1
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b45      	ldr	r3, [pc, #276]	; (8000710 <CALLBACK_HID_Device_CreateHIDReport+0x2a0>)
 80005fa:	701a      	strb	r2, [r3, #0]
					indexlocal = -1;
 80005fc:	4b46      	ldr	r3, [pc, #280]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 80005fe:	22ff      	movs	r2, #255	; 0xff
 8000600:	701a      	strb	r2, [r3, #0]
				}

				reset = 1;
 8000602:	4b44      	ldr	r3, [pc, #272]	; (8000714 <CALLBACK_HID_Device_CreateHIDReport+0x2a4>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
 8000608:	e079      	b.n	80006fe <CALLBACK_HID_Device_CreateHIDReport+0x28e>
			}
		}
		else {
			++indexToSend_j;
 800060a:	4b44      	ldr	r3, [pc, #272]	; (800071c <CALLBACK_HID_Device_CreateHIDReport+0x2ac>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4b42      	ldr	r3, [pc, #264]	; (800071c <CALLBACK_HID_Device_CreateHIDReport+0x2ac>)
 8000614:	701a      	strb	r2, [r3, #0]
			indexToSend_i = 0;
 8000616:	4b3e      	ldr	r3, [pc, #248]	; (8000710 <CALLBACK_HID_Device_CreateHIDReport+0x2a0>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
			reset = 0;
 800061c:	4b3d      	ldr	r3, [pc, #244]	; (8000714 <CALLBACK_HID_Device_CreateHIDReport+0x2a4>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
			indexlocal = 0;
 8000622:	4b3d      	ldr	r3, [pc, #244]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 85; i++) {
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
 800062c:	e007      	b.n	800063e <CALLBACK_HID_Device_CreateHIDReport+0x1ce>
				zwTicks[i] = 0;
 800062e:	4a40      	ldr	r2, [pc, #256]	; (8000730 <CALLBACK_HID_Device_CreateHIDReport+0x2c0>)
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	2100      	movs	r1, #0
 8000634:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i = 0; i < 85; i++) {
 8000638:	69bb      	ldr	r3, [r7, #24]
 800063a:	3301      	adds	r3, #1
 800063c:	61bb      	str	r3, [r7, #24]
 800063e:	69bb      	ldr	r3, [r7, #24]
 8000640:	2b54      	cmp	r3, #84	; 0x54
 8000642:	ddf4      	ble.n	800062e <CALLBACK_HID_Device_CreateHIDReport+0x1be>
 8000644:	e05b      	b.n	80006fe <CALLBACK_HID_Device_CreateHIDReport+0x28e>
                        GERMAN_KEYBOARD_SC_1_AND_EXCLAMATION, //40
			GERMAN_KEYBOARD_SC_ENTER

		};

		if(indexlocal < 42) {
 8000646:	4b34      	ldr	r3, [pc, #208]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 8000648:	f993 3000 	ldrsb.w	r3, [r3]
 800064c:	2b29      	cmp	r3, #41	; 0x29
 800064e:	dc56      	bgt.n	80006fe <CALLBACK_HID_Device_CreateHIDReport+0x28e>
			if(reset) {
 8000650:	4b30      	ldr	r3, [pc, #192]	; (8000714 <CALLBACK_HID_Device_CreateHIDReport+0x2a4>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d015      	beq.n	8000684 <CALLBACK_HID_Device_CreateHIDReport+0x214>
				report->Modifier = 0; 
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
				report->Reserved = 0; 
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	2200      	movs	r2, #0
 8000662:	705a      	strb	r2, [r3, #1]
				report->KeyCode[0] = 0; 
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	2200      	movs	r2, #0
 8000668:	709a      	strb	r2, [r3, #2]
				reset = 0;
 800066a:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <CALLBACK_HID_Device_CreateHIDReport+0x2a4>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
				++indexlocal;
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 8000672:	f993 3000 	ldrsb.w	r3, [r3]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	3301      	adds	r3, #1
 800067a:	b2db      	uxtb	r3, r3
 800067c:	b25a      	sxtb	r2, r3
 800067e:	4b26      	ldr	r3, [pc, #152]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 8000680:	701a      	strb	r2, [r3, #0]
 8000682:	e03c      	b.n	80006fe <CALLBACK_HID_Device_CreateHIDReport+0x28e>
			} else {

				int32_t waiter = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
                                while(waiter < (1<<22)) {
 8000688:	e002      	b.n	8000690 <CALLBACK_HID_Device_CreateHIDReport+0x220>
                                        waiter++;
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	3301      	adds	r3, #1
 800068e:	617b      	str	r3, [r7, #20]
                                while(waiter < (1<<22)) {
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000696:	dbf8      	blt.n	800068a <CALLBACK_HID_Device_CreateHIDReport+0x21a>
                                }
				
				if((indexlocal >= 4 && indexlocal <= 7) || (indexlocal == 18) || (indexlocal == 25) || (indexlocal >= 33 && indexlocal <= 40)) {
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 800069a:	f993 3000 	ldrsb.w	r3, [r3]
 800069e:	2b03      	cmp	r3, #3
 80006a0:	dd04      	ble.n	80006ac <CALLBACK_HID_Device_CreateHIDReport+0x23c>
 80006a2:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 80006a4:	f993 3000 	ldrsb.w	r3, [r3]
 80006a8:	2b07      	cmp	r3, #7
 80006aa:	dd13      	ble.n	80006d4 <CALLBACK_HID_Device_CreateHIDReport+0x264>
 80006ac:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 80006ae:	f993 3000 	ldrsb.w	r3, [r3]
 80006b2:	2b12      	cmp	r3, #18
 80006b4:	d00e      	beq.n	80006d4 <CALLBACK_HID_Device_CreateHIDReport+0x264>
 80006b6:	4b18      	ldr	r3, [pc, #96]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 80006b8:	f993 3000 	ldrsb.w	r3, [r3]
 80006bc:	2b19      	cmp	r3, #25
 80006be:	d009      	beq.n	80006d4 <CALLBACK_HID_Device_CreateHIDReport+0x264>
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 80006c2:	f993 3000 	ldrsb.w	r3, [r3]
 80006c6:	2b20      	cmp	r3, #32
 80006c8:	dd08      	ble.n	80006dc <CALLBACK_HID_Device_CreateHIDReport+0x26c>
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 80006cc:	f993 3000 	ldrsb.w	r3, [r3]
 80006d0:	2b28      	cmp	r3, #40	; 0x28
 80006d2:	dc03      	bgt.n	80006dc <CALLBACK_HID_Device_CreateHIDReport+0x26c>
				       report->Modifier = 0;
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	e002      	b.n	80006e2 <CALLBACK_HID_Device_CreateHIDReport+0x272>
				} else {		
					report->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	2202      	movs	r2, #2
 80006e0:	701a      	strb	r2, [r3, #0]
				}
				report->Reserved = 0;
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	2200      	movs	r2, #0
 80006e6:	705a      	strb	r2, [r3, #1]
				report->KeyCode[0] = stringToSend[indexlocal];
 80006e8:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 80006ea:	f993 3000 	ldrsb.w	r3, [r3]
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <CALLBACK_HID_Device_CreateHIDReport+0x2c4>)
 80006f2:	5c9a      	ldrb	r2, [r3, r2]
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	709a      	strb	r2, [r3, #2]
				reset = 1;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <CALLBACK_HID_Device_CreateHIDReport+0x2a4>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
			}
		}
	}


	return true;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	3724      	adds	r7, #36	; 0x24
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	200005dc 	.word	0x200005dc
 8000710:	200005dd 	.word	0x200005dd
 8000714:	200005df 	.word	0x200005df
 8000718:	200005e0 	.word	0x200005e0
 800071c:	200005de 	.word	0x200005de
 8000720:	200005e4 	.word	0x200005e4
 8000724:	200005f8 	.word	0x200005f8
 8000728:	20000480 	.word	0x20000480
 800072c:	20000484 	.word	0x20000484
 8000730:	20000488 	.word	0x20000488
 8000734:	20000000 	.word	0x20000000

08000738 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(
						USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
						const uint8_t ReportID,
						const uint8_t ReportType,
						const void* ReportData,
						const uint16_t ReportSize ) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	460b      	mov	r3, r1
 8000744:	72fb      	strb	r3, [r7, #11]
 8000746:	4613      	mov	r3, r2
 8000748:	72bb      	strb	r3, [r7, #10]
	uint8_t *report = (uint8_t*)ReportData;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	617b      	str	r3, [r7, #20]

	if(*report & HID_KEYBOARD_LED_NUMLOCK) { 	
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	2b00      	cmp	r3, #0
 8000758:	d02d      	beq.n	80007b6 <CALLBACK_HID_Device_ProcessHIDReport+0x7e>
		XMC_GPIO_SetOutputHigh(LED1);
 800075a:	2101      	movs	r1, #1
 800075c:	4826      	ldr	r0, [pc, #152]	; (80007f8 <CALLBACK_HID_Device_ProcessHIDReport+0xc0>)
 800075e:	f7ff fdf5 	bl	800034c <XMC_GPIO_SetOutputHigh>
		if(indexToSend_i > 0) {
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <CALLBACK_HID_Device_ProcessHIDReport+0xc4>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d029      	beq.n	80007be <CALLBACK_HID_Device_ProcessHIDReport+0x86>
			zwTicks[indexToSend_i - 1] = msTicks - curTicks;
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <CALLBACK_HID_Device_ProcessHIDReport+0xc8>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <CALLBACK_HID_Device_ProcessHIDReport+0xcc>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	1ad2      	subs	r2, r2, r3
 8000774:	4b21      	ldr	r3, [pc, #132]	; (80007fc <CALLBACK_HID_Device_ProcessHIDReport+0xc4>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	3b01      	subs	r3, #1
 800077a:	4611      	mov	r1, r2
 800077c:	4a22      	ldr	r2, [pc, #136]	; (8000808 <CALLBACK_HID_Device_ProcessHIDReport+0xd0>)
 800077e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(zwTicks[maxTime[indexToSend_j]] < zwTicks[indexToSend_i - 1]) {
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <CALLBACK_HID_Device_ProcessHIDReport+0xd4>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <CALLBACK_HID_Device_ProcessHIDReport+0xd8>)
 800078a:	5c9b      	ldrb	r3, [r3, r2]
 800078c:	461a      	mov	r2, r3
 800078e:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <CALLBACK_HID_Device_ProcessHIDReport+0xd0>)
 8000790:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000794:	4b19      	ldr	r3, [pc, #100]	; (80007fc <CALLBACK_HID_Device_ProcessHIDReport+0xc4>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	3b01      	subs	r3, #1
 800079a:	491b      	ldr	r1, [pc, #108]	; (8000808 <CALLBACK_HID_Device_ProcessHIDReport+0xd0>)
 800079c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	da0c      	bge.n	80007be <CALLBACK_HID_Device_ProcessHIDReport+0x86>
				maxTime[indexToSend_j] = indexToSend_i - 1;	
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <CALLBACK_HID_Device_ProcessHIDReport+0xc4>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	4a18      	ldr	r2, [pc, #96]	; (800080c <CALLBACK_HID_Device_ProcessHIDReport+0xd4>)
 80007aa:	7812      	ldrb	r2, [r2, #0]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	b2d9      	uxtb	r1, r3
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <CALLBACK_HID_Device_ProcessHIDReport+0xd8>)
 80007b2:	5499      	strb	r1, [r3, r2]
 80007b4:	e003      	b.n	80007be <CALLBACK_HID_Device_ProcessHIDReport+0x86>
			}
		}
	}		
	else 
		XMC_GPIO_SetOutputLow(LED1);
 80007b6:	2101      	movs	r1, #1
 80007b8:	480f      	ldr	r0, [pc, #60]	; (80007f8 <CALLBACK_HID_Device_ProcessHIDReport+0xc0>)
 80007ba:	f7ff fdd8 	bl	800036e <XMC_GPIO_SetOutputLow>

	if(*report & HID_KEYBOARD_LED_CAPSLOCK) {
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d00d      	beq.n	80007e6 <CALLBACK_HID_Device_ProcessHIDReport+0xae>
		success = 1;
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <CALLBACK_HID_Device_ProcessHIDReport+0xdc>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
		reset = 0;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <CALLBACK_HID_Device_ProcessHIDReport+0xe0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
		indexlocal = 0;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <CALLBACK_HID_Device_ProcessHIDReport+0xe4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
		XMC_GPIO_SetOutputHigh(LED2);
 80007dc:	2100      	movs	r1, #0
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <CALLBACK_HID_Device_ProcessHIDReport+0xc0>)
 80007e0:	f7ff fdb4 	bl	800034c <XMC_GPIO_SetOutputHigh>
	}
	else 
		XMC_GPIO_SetOutputLow(LED2);
}
 80007e4:	e003      	b.n	80007ee <CALLBACK_HID_Device_ProcessHIDReport+0xb6>
		XMC_GPIO_SetOutputLow(LED2);
 80007e6:	2100      	movs	r1, #0
 80007e8:	4803      	ldr	r0, [pc, #12]	; (80007f8 <CALLBACK_HID_Device_ProcessHIDReport+0xc0>)
 80007ea:	f7ff fdc0 	bl	800036e <XMC_GPIO_SetOutputLow>
}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	48028100 	.word	0x48028100
 80007fc:	200005dd 	.word	0x200005dd
 8000800:	20000480 	.word	0x20000480
 8000804:	20000484 	.word	0x20000484
 8000808:	20000488 	.word	0x20000488
 800080c:	200005de 	.word	0x200005de
 8000810:	200005e4 	.word	0x200005e4
 8000814:	200005dc 	.word	0x200005dc
 8000818:	200005df 	.word	0x200005df
 800081c:	200005e0 	.word	0x200005e0

08000820 <SystemCoreClockSetup>:

void SystemCoreClockSetup(void) {
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	/* Setup settings for USB clock */
	XMC_SCU_CLOCK_Init(&clock_config);
 8000824:	480a      	ldr	r0, [pc, #40]	; (8000850 <SystemCoreClockSetup+0x30>)
 8000826:	f000 fc41 	bl	80010ac <XMC_SCU_CLOCK_Init>

	XMC_SCU_CLOCK_EnableUsbPll();
 800082a:	f001 f905 	bl	8001a38 <XMC_SCU_CLOCK_EnableUsbPll>
	XMC_SCU_CLOCK_StartUsbPll(2, 64);
 800082e:	2140      	movs	r1, #64	; 0x40
 8000830:	2002      	movs	r0, #2
 8000832:	f001 f925 	bl	8001a80 <XMC_SCU_CLOCK_StartUsbPll>
	XMC_SCU_CLOCK_SetUsbClockDivider(4);
 8000836:	2004      	movs	r0, #4
 8000838:	f001 f83c 	bl	80018b4 <XMC_SCU_CLOCK_SetUsbClockDivider>
	XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800083c:	2000      	movs	r0, #0
 800083e:	f000 ff41 	bl	80016c4 <XMC_SCU_CLOCK_SetUsbClockSource>
	XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 8000842:	2001      	movs	r0, #1
 8000844:	f001 f890 	bl	8001968 <XMC_SCU_CLOCK_EnableClock>

	SystemCoreClockUpdate();
 8000848:	f005 fdbe 	bl	80063c8 <SystemCoreClockUpdate>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	08006c30 	.word	0x08006c30

08000854 <__NVIC_GetPriorityGrouping>:
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <__NVIC_GetPriorityGrouping+0x18>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	f003 0307 	and.w	r3, r3, #7
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_EnableIRQ>:
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	2b00      	cmp	r3, #0
 8000880:	db0b      	blt.n	800089a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	f003 021f 	and.w	r2, r3, #31
 8000888:	4907      	ldr	r1, [pc, #28]	; (80008a8 <__NVIC_EnableIRQ+0x38>)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	095b      	lsrs	r3, r3, #5
 8000890:	2001      	movs	r0, #1
 8000892:	fa00 f202 	lsl.w	r2, r0, r2
 8000896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000e100 	.word	0xe000e100

080008ac <__NVIC_ClearPendingIRQ>:
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db0c      	blt.n	80008d8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	f003 021f 	and.w	r2, r3, #31
 80008c4:	4907      	ldr	r1, [pc, #28]	; (80008e4 <__NVIC_ClearPendingIRQ+0x38>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	095b      	lsrs	r3, r3, #5
 80008cc:	2001      	movs	r0, #1
 80008ce:	fa00 f202 	lsl.w	r2, r0, r2
 80008d2:	3360      	adds	r3, #96	; 0x60
 80008d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000e100 	.word	0xe000e100

080008e8 <__NVIC_SetPriority>:
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	db0a      	blt.n	8000912 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	490c      	ldr	r1, [pc, #48]	; (8000934 <__NVIC_SetPriority+0x4c>)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	0092      	lsls	r2, r2, #2
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	440b      	add	r3, r1
 800090c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000910:	e00a      	b.n	8000928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4908      	ldr	r1, [pc, #32]	; (8000938 <__NVIC_SetPriority+0x50>)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	f003 030f 	and.w	r3, r3, #15
 800091e:	3b04      	subs	r3, #4
 8000920:	0092      	lsls	r2, r2, #2
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	440b      	add	r3, r1
 8000926:	761a      	strb	r2, [r3, #24]
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000e100 	.word	0xe000e100
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <NVIC_EncodePriority>:
{
 800093c:	b480      	push	{r7}
 800093e:	b089      	sub	sp, #36	; 0x24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	f1c3 0307 	rsb	r3, r3, #7
 8000956:	2b06      	cmp	r3, #6
 8000958:	bf28      	it	cs
 800095a:	2306      	movcs	r3, #6
 800095c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3306      	adds	r3, #6
 8000962:	2b06      	cmp	r3, #6
 8000964:	d902      	bls.n	800096c <NVIC_EncodePriority+0x30>
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3b01      	subs	r3, #1
 800096a:	e000      	b.n	800096e <NVIC_EncodePriority+0x32>
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43da      	mvns	r2, r3
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	401a      	ands	r2, r3
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	fa01 f303 	lsl.w	r3, r1, r3
 800098e:	43d9      	mvns	r1, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	4313      	orrs	r3, r2
}
 8000996:	4618      	mov	r0, r3
 8000998:	3724      	adds	r7, #36	; 0x24
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
	...

080009a4 <USB0_0_IRQHandler>:
	.usbd_transfer_mode = XMC_USBD_USE_FIFO,
	.cb_xmc_device_event = USBD_SignalDeviceEventHandler,
	.cb_endpoint_event = USBD_SignalEndpointEvent_Handler
};

void USB0_0_IRQHandler(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	XMC_USBD_IRQHandler(&USB_runtime);
 80009a8:	4802      	ldr	r0, [pc, #8]	; (80009b4 <USB0_0_IRQHandler+0x10>)
 80009aa:	f004 faf1 	bl	8004f90 <XMC_USBD_IRQHandler>
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000044 	.word	0x20000044

080009b8 <USB_Init>:

/*The function initializes the USB core layer and register call backs. */
void USB_Init(void) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	USBD_Initialize(&USB_runtime);
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <USB_Init+0x3c>)
 80009be:	f003 fbe5 	bl	800418c <USBD_Initialize>

	/* Interrupts configuration*/
	NVIC_SetPriority( USB0_0_IRQn,
 80009c2:	f7ff ff47 	bl	8000854 <__NVIC_GetPriorityGrouping>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2200      	movs	r2, #0
 80009ca:	213f      	movs	r1, #63	; 0x3f
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ffb5 	bl	800093c <NVIC_EncodePriority>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4619      	mov	r1, r3
 80009d6:	206b      	movs	r0, #107	; 0x6b
 80009d8:	f7ff ff86 	bl	80008e8 <__NVIC_SetPriority>
					  NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63, 0) );
	NVIC_ClearPendingIRQ(USB0_0_IRQn);
 80009dc:	206b      	movs	r0, #107	; 0x6b
 80009de:	f7ff ff65 	bl	80008ac <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(USB0_0_IRQn);
 80009e2:	206b      	movs	r0, #107	; 0x6b
 80009e4:	f7ff ff44 	bl	8000870 <__NVIC_EnableIRQ>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				device.Driver->DeviceConnect();
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <USB_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	4798      	blx	r3

	/* USB Connection*/
	USB_Attach();
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000044 	.word	0x20000044
 80009f8:	20000f70 	.word	0x20000f70

080009fc <EVENT_USB_Device_>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_(void) {
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <EVENT_USB_Device_Connect>:
/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void) {
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
	//Device is ready!
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <EVENT_USB_Device_Reset>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Reset(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	if(device.IsConfigured) {
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <EVENT_USB_Device_Reset+0x2c>)
 8000a1e:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d008      	beq.n	8000a3e <EVENT_USB_Device_Reset+0x26>
		USB_Init();
 8000a2c:	f7ff ffc4 	bl	80009b8 <USB_Init>
		device.IsConfigured=0;
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <EVENT_USB_Device_Reset+0x2c>)
 8000a32:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000a36:	f36f 0300 	bfc	r3, #0, #1
 8000a3a:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	}
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000f70 	.word	0x20000f70

08000a48 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
	bool ConfigSuccess = true;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	71fb      	strb	r3, [r7, #7]

	USBD_SetEndpointBuffer(KEYBOARD_IN_EPADDR, buffer, KEYBOARD_REPORT_SIZE);
 8000a52:	2208      	movs	r2, #8
 8000a54:	490d      	ldr	r1, [pc, #52]	; (8000a8c <EVENT_USB_Device_ConfigurationChanged+0x44>)
 8000a56:	2081      	movs	r0, #129	; 0x81
 8000a58:	f003 fc0e 	bl	8004278 <USBD_SetEndpointBuffer>

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <EVENT_USB_Device_ConfigurationChanged+0x48>)
 8000a5e:	f001 ff73 	bl	8002948 <HID_Device_ConfigureEndpoints>
 8000a62:	4603      	mov	r3, r0
 8000a64:	461a      	mov	r2, r3
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	bf14      	ite	ne
 8000a6e:	2301      	movne	r3, #1
 8000a70:	2300      	moveq	r3, #0
 8000a72:	71fb      	strb	r3, [r7, #7]

	device.IsConfigured = ConfigSuccess;
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <EVENT_USB_Device_ConfigurationChanged+0x4c>)
 8000a76:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000a7a:	79f9      	ldrb	r1, [r7, #7]
 8000a7c:	f361 0300 	bfi	r3, r1, #0, #1
 8000a80:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000ce8 	.word	0x20000ce8
 8000a90:	2000002c 	.word	0x2000002c
 8000a94:	20000f70 	.word	0x20000f70

08000a98 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <EVENT_USB_Device_ControlRequest+0x10>)
 8000a9e:	f001 fd73 	bl	8002588 <HID_Device_ProcessControlRequest>
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000002c 	.word	0x2000002c

08000aac <CALLBACK_HIDParser_FilterHIDReportItem>:

bool CALLBACK_HIDParser_FilterHIDReportItem(
									HID_ReportItem_t* const CurrentItem ) {
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	return true;
 8000ab4:	2301      	movs	r3, #1
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <CALLBACK_USB_GetDescriptor>:
  *  the control endpoint, this function is called so that the descriptor details
  *  can be passed back and the appropriate descriptor sent back to the USB host.
  **/
uint16_t CALLBACK_USB_GetDescriptor( const uint16_t wValue,
									 const uint8_t wIndex,
									 const void** const DescriptorAddress ) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	603a      	str	r2, [r7, #0]
 8000ace:	80fb      	strh	r3, [r7, #6]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	717b      	strb	r3, [r7, #5]
	const uint8_t  DescriptorType   = (wValue >> 8);
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	0a1b      	lsrs	r3, r3, #8
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	727b      	strb	r3, [r7, #9]
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	723b      	strb	r3, [r7, #8]

	const void* Address = NULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
	uint16_t    Size    = NO_DESCRIPTOR;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	817b      	strh	r3, [r7, #10]

	switch (DescriptorType) {
 8000ae8:	7a7b      	ldrb	r3, [r7, #9]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	2b21      	cmp	r3, #33	; 0x21
 8000aee:	d873      	bhi.n	8000bd8 <CALLBACK_USB_GetDescriptor+0x114>
 8000af0:	a201      	add	r2, pc, #4	; (adr r2, 8000af8 <CALLBACK_USB_GetDescriptor+0x34>)
 8000af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af6:	bf00      	nop
 8000af8:	08000b81 	.word	0x08000b81
 8000afc:	08000b8b 	.word	0x08000b8b
 8000b00:	08000b95 	.word	0x08000b95
 8000b04:	08000bd9 	.word	0x08000bd9
 8000b08:	08000bd9 	.word	0x08000bd9
 8000b0c:	08000bd9 	.word	0x08000bd9
 8000b10:	08000bd9 	.word	0x08000bd9
 8000b14:	08000bd9 	.word	0x08000bd9
 8000b18:	08000bd9 	.word	0x08000bd9
 8000b1c:	08000bd9 	.word	0x08000bd9
 8000b20:	08000bd9 	.word	0x08000bd9
 8000b24:	08000bd9 	.word	0x08000bd9
 8000b28:	08000bd9 	.word	0x08000bd9
 8000b2c:	08000bd9 	.word	0x08000bd9
 8000b30:	08000bd9 	.word	0x08000bd9
 8000b34:	08000bd9 	.word	0x08000bd9
 8000b38:	08000bd9 	.word	0x08000bd9
 8000b3c:	08000bd9 	.word	0x08000bd9
 8000b40:	08000bd9 	.word	0x08000bd9
 8000b44:	08000bd9 	.word	0x08000bd9
 8000b48:	08000bd9 	.word	0x08000bd9
 8000b4c:	08000bd9 	.word	0x08000bd9
 8000b50:	08000bd9 	.word	0x08000bd9
 8000b54:	08000bd9 	.word	0x08000bd9
 8000b58:	08000bd9 	.word	0x08000bd9
 8000b5c:	08000bd9 	.word	0x08000bd9
 8000b60:	08000bd9 	.word	0x08000bd9
 8000b64:	08000bd9 	.word	0x08000bd9
 8000b68:	08000bd9 	.word	0x08000bd9
 8000b6c:	08000bd9 	.word	0x08000bd9
 8000b70:	08000bd9 	.word	0x08000bd9
 8000b74:	08000bd9 	.word	0x08000bd9
 8000b78:	08000bc5 	.word	0x08000bc5
 8000b7c:	08000bcf 	.word	0x08000bcf
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <CALLBACK_USB_GetDescriptor+0x128>)
 8000b82:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_Descriptor_Device_t);
 8000b84:	2312      	movs	r3, #18
 8000b86:	817b      	strh	r3, [r7, #10]
			break;
 8000b88:	e026      	b.n	8000bd8 <CALLBACK_USB_GetDescriptor+0x114>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <CALLBACK_USB_GetDescriptor+0x12c>)
 8000b8c:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_Descriptor_Configuration_t);
 8000b8e:	2322      	movs	r3, #34	; 0x22
 8000b90:	817b      	strh	r3, [r7, #10]
			break;
 8000b92:	e021      	b.n	8000bd8 <CALLBACK_USB_GetDescriptor+0x114>
		case DTYPE_String:
			switch (DescriptorNumber) {
 8000b94:	7a3b      	ldrb	r3, [r7, #8]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d009      	beq.n	8000bae <CALLBACK_USB_GetDescriptor+0xea>
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d00c      	beq.n	8000bb8 <CALLBACK_USB_GetDescriptor+0xf4>
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d000      	beq.n	8000ba4 <CALLBACK_USB_GetDescriptor+0xe0>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = ProductString.Header.Size;
					break;
			}
			break;
 8000ba2:	e019      	b.n	8000bd8 <CALLBACK_USB_GetDescriptor+0x114>
					Address = &LanguageString;
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <CALLBACK_USB_GetDescriptor+0x130>)
 8000ba6:	60fb      	str	r3, [r7, #12]
					Size    = LanguageString.Header.Size;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	817b      	strh	r3, [r7, #10]
					break;
 8000bac:	e009      	b.n	8000bc2 <CALLBACK_USB_GetDescriptor+0xfe>
					Address = &ManufacturerString;
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <CALLBACK_USB_GetDescriptor+0x134>)
 8000bb0:	60fb      	str	r3, [r7, #12]
					Size    = ManufacturerString.Header.Size;
 8000bb2:	2350      	movs	r3, #80	; 0x50
 8000bb4:	817b      	strh	r3, [r7, #10]
					break;
 8000bb6:	e004      	b.n	8000bc2 <CALLBACK_USB_GetDescriptor+0xfe>
					Address = &ProductString;
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <CALLBACK_USB_GetDescriptor+0x138>)
 8000bba:	60fb      	str	r3, [r7, #12]
					Size    = ProductString.Header.Size;
 8000bbc:	2348      	movs	r3, #72	; 0x48
 8000bbe:	817b      	strh	r3, [r7, #10]
					break;
 8000bc0:	bf00      	nop
			break;
 8000bc2:	e009      	b.n	8000bd8 <CALLBACK_USB_GetDescriptor+0x114>
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <CALLBACK_USB_GetDescriptor+0x13c>)
 8000bc6:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 8000bc8:	2309      	movs	r3, #9
 8000bca:	817b      	strh	r3, [r7, #10]
			break;
 8000bcc:	e004      	b.n	8000bd8 <CALLBACK_USB_GetDescriptor+0x114>
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <CALLBACK_USB_GetDescriptor+0x140>)
 8000bd0:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(KeyboardReport);
 8000bd2:	233f      	movs	r3, #63	; 0x3f
 8000bd4:	817b      	strh	r3, [r7, #10]
			break;
 8000bd6:	bf00      	nop
	}

	*DescriptorAddress = Address;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	601a      	str	r2, [r3, #0]
	return Size;
 8000bde:	897b      	ldrh	r3, [r7, #10]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	08006cdc 	.word	0x08006cdc
 8000bf0:	08006cf0 	.word	0x08006cf0
 8000bf4:	08006d14 	.word	0x08006d14
 8000bf8:	08006d1c 	.word	0x08006d1c
 8000bfc:	08006d70 	.word	0x08006d70
 8000c00:	08006d02 	.word	0x08006d02
 8000c04:	08006c9c 	.word	0x08006c9c

08000c08 <XMC_SCU_CLOCK_GetUsbClockSource>:
 * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <XMC_SCU_CLOCK_GetUsbClockSource+0x18>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	50004600 	.word	0x50004600

08000c24 <XMC_SCU_CLOCK_GetWdtClockSource>:
 * the clock source selected.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <XMC_SCU_CLOCK_GetWdtClockSource+0x18>)
 8000c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	50004600 	.word	0x50004600

08000c40 <XMC_SCU_CLOCK_GetExternalOutputClockSource>:
 * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <XMC_SCU_CLOCK_GetExternalOutputClockSource+0x1c>)
 8000c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	b2db      	uxtb	r3, r3
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	50004600 	.word	0x50004600

08000c60 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	2000ffc0 	.word	0x2000ffc0
 8000c84:	50004600 	.word	0x50004600

08000c88 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	2000ffc0 	.word	0x2000ffc0

08000ca0 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <XMC_SCU_GetMirrorStatus+0x14>)
 8000ca6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	50004000 	.word	0x50004000

08000cb8 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000cc0:	f005 fb82 	bl	80063c8 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <XMC_SCU_lDelay+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0c      	ldr	r2, [pc, #48]	; (8000cfc <XMC_SCU_lDelay+0x44>)
 8000cca:	fba2 2303 	umull	r2, r3, r2, r3
 8000cce:	0c9a      	lsrs	r2, r3, #18
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	fb02 f303 	mul.w	r3, r2, r3
 8000cd6:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	e003      	b.n	8000ce6 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000cde:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d3f7      	bcc.n	8000cde <XMC_SCU_lDelay+0x26>
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2000ffc0 	.word	0x2000ffc0
 8000cfc:	431bde83 	.word	0x431bde83

08000d00 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	4904      	ldr	r1, [pc, #16]	; (8000d20 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	608b      	str	r3, [r1, #8]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	50004074 	.word	0x50004074

08000d24 <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	43db      	mvns	r3, r3
 8000d34:	4904      	ldr	r1, [pc, #16]	; (8000d48 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 8000d36:	4013      	ands	r3, r2
 8000d38:	608b      	str	r3, [r1, #8]
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	50004074 	.word	0x50004074

08000d4c <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 8000d56:	691a      	ldr	r2, [r3, #16]
 8000d58:	4904      	ldr	r1, [pc, #16]	; (8000d6c <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	610b      	str	r3, [r1, #16]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	50004074 	.word	0x50004074

08000d70 <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000d76:	685b      	ldr	r3, [r3, #4]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	50004074 	.word	0x50004074

08000d88 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <XMC_SCU_INTERRUPT_ClearEventStatus+0x1c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60d3      	str	r3, [r2, #12]
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	50004074 	.word	0x50004074

08000da8 <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <XMC_SCU_GetBootMode+0x18>)
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	50004000 	.word	0x50004000

08000dc4 <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	80fb      	strh	r3, [r7, #6]
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <XMC_SCU_SetBootMode+0x1c>)
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	6113      	str	r3, [r2, #16]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	50004000 	.word	0x50004000

08000de4 <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  return (SCU_GENERAL->GPR[index]);
 8000dec:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <XMC_SCU_ReadGPR+0x20>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	330a      	adds	r3, #10
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	685b      	ldr	r3, [r3, #4]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	50004000 	.word	0x50004000

08000e08 <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->GPR[index] = data;
 8000e12:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <XMC_SCU_WriteGPR+0x24>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	330a      	adds	r3, #10
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	50004000 	.word	0x50004000

08000e30 <XMC_SCU_EnableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3328      	adds	r3, #40	; 0x28
 8000e40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e44:	2101      	movs	r1, #1
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4c:	4905      	ldr	r1, [pc, #20]	; (8000e64 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3328      	adds	r3, #40	; 0x28
 8000e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	50004000 	.word	0x50004000

08000e68 <XMC_SCU_DisableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3328      	adds	r3, #40	; 0x28
 8000e78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	fa01 f303 	lsl.w	r3, r1, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	4906      	ldr	r1, [pc, #24]	; (8000ea0 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8000e88:	401a      	ands	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3328      	adds	r3, #40	; 0x28
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	50004000 	.word	0x50004000

08000ea4 <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	011a      	lsls	r2, r3, #4
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	02db      	lsls	r3, r3, #11
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <XMC_SCU_CalibrateTemperatureSensor+0x2c>)
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 8000eba:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8000ebe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	50004000 	.word	0x50004000

08000ed4 <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <XMC_SCU_EnableTemperatureSensor+0x20>)
 8000eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <XMC_SCU_EnableTemperatureSensor+0x20>)
 8000ee0:	f023 0301 	bic.w	r3, r3, #1
 8000ee4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	50004000 	.word	0x50004000

08000ef8 <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <XMC_SCU_DisableTemperatureSensor+0x20>)
 8000efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <XMC_SCU_DisableTemperatureSensor+0x20>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	50004000 	.word	0x50004000

08000f1c <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <XMC_SCU_IsTemperatureSensorEnabled+0x24>)
 8000f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	bf0c      	ite	eq
 8000f2e:	2301      	moveq	r3, #1
 8000f30:	2300      	movne	r3, #0
 8000f32:	b2db      	uxtb	r3, r3
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	50004000 	.word	0x50004000

08000f44 <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <XMC_SCU_IsTemperatureSensorReady+0x24>)
 8000f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bf14      	ite	ne
 8000f56:	2301      	movne	r3, #1
 8000f58:	2300      	moveq	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	50004000 	.word	0x50004000

08000f6c <XMC_SCU_StartTemperatureMeasurement>:
/* API to start device temperature measurements */
XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71fb      	strb	r3, [r7, #7]

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8000f76:	f7ff ffd1 	bl	8000f1c <XMC_SCU_IsTemperatureSensorEnabled>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f083 0301 	eor.w	r3, r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <XMC_SCU_StartTemperatureMeasurement+0x1e>
  {
    status = XMC_SCU_STATUS_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	71fb      	strb	r3, [r7, #7]
  }
   
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 8000f8a:	f000 f831 	bl	8000ff0 <XMC_SCU_IsTemperatureSensorBusy>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <XMC_SCU_StartTemperatureMeasurement+0x2c>
  {
    status = XMC_SCU_STATUS_BUSY;
 8000f94:	2302      	movs	r3, #2
 8000f96:	71fb      	strb	r3, [r7, #7]
  }

  /* And start the measurement */
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8000f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  return (status);
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	50004000 	.word	0x50004000

08000fb8 <XMC_SCU_GetTemperatureMeasurement>:

/* API to retrieve the temperature measured */
uint32_t XMC_SCU_GetTemperatureMeasurement(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  uint32_t temperature;

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8000fbe:	f7ff ffad 	bl	8000f1c <XMC_SCU_IsTemperatureSensorEnabled>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	f083 0301 	eor.w	r3, r3, #1
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <XMC_SCU_GetTemperatureMeasurement+0x1e>
  {
    temperature = 0x7FFFFFFFUL;
 8000fce:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	e005      	b.n	8000fe2 <XMC_SCU_GetTemperatureMeasurement+0x2a>
  }
  else
  {
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <XMC_SCU_GetTemperatureMeasurement+0x34>)
 8000fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fe0:	607b      	str	r3, [r7, #4]
  }
  
  return ((uint32_t)temperature);
 8000fe2:	687b      	ldr	r3, [r7, #4]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	50004000 	.word	0x50004000

08000ff0 <XMC_SCU_IsTemperatureSensorBusy>:

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <XMC_SCU_IsTemperatureSensorBusy+0x24>)
 8000ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ffa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bf14      	ite	ne
 8001002:	2301      	movne	r3, #1
 8001004:	2300      	moveq	r3, #0
 8001006:	b2db      	uxtb	r3, r3
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	50004000 	.word	0x50004000

08001018 <XMC_SCU_WriteToRetentionMemory>:
}
#endif  

/* API to write into Retention memory in hibernate domain */
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	041b      	lsls	r3, r3, #16
 8001026:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800102a:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 8001034:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <XMC_SCU_WriteToRetentionMemory+0x48>)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 800103c:	4a08      	ldr	r2, [pc, #32]	; (8001060 <XMC_SCU_WriteToRetentionMemory+0x48>)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8001044:	bf00      	nop
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <XMC_SCU_WriteToRetentionMemory+0x48>)
 8001048:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800104c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1f8      	bne.n	8001046 <XMC_SCU_WriteToRetentionMemory+0x2e>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	50004000 	.word	0x50004000

08001064 <XMC_SCU_ReadFromRetentionMemory>:

/* API to read from Retention memory in hibernate domain */
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	041b      	lsls	r3, r3, #16
 8001070:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001074:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f023 0301 	bic.w	r3, r3, #1
 800107c:	60fb      	str	r3, [r7, #12]
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8001086:	bf00      	nop
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 800108a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800108e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f8      	bne.n	8001088 <XMC_SCU_ReadFromRetentionMemory+0x24>
  {
  }

  return (SCU_GENERAL->RMDATA);
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8001098:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
}
 800109c:	4618      	mov	r0, r3
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	50004000 	.word	0x50004000

080010ac <XMC_SCU_CLOCK_Init>:

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80010b4:	2000      	movs	r0, #0
 80010b6:	f000 faf1 	bl	800169c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80010ba:	f000 fd7f 	bl	8001bbc <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	79db      	ldrb	r3, [r3, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00a      	beq.n	80010dc <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80010c6:	f000 ff77 	bl	8001fb8 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80010ca:	bf00      	nop
 80010cc:	f000 ff62 	bl	8001f94 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80010d0:	4603      	mov	r3, r0
 80010d2:	f083 0301 	eor.w	r3, r3, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1f7      	bne.n	80010cc <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7a5b      	ldrb	r3, [r3, #9]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fb6f 	bl	80017c4 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80010e6:	bf00      	nop
 80010e8:	f7ff fdda 	bl	8000ca0 <XMC_SCU_GetMirrorStatus>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1fa      	bne.n	80010e8 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7a1b      	ldrb	r3, [r3, #8]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fd0c 	bl	8001b14 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	7c1b      	ldrb	r3, [r3, #16]
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fb7f 	bl	8001804 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7c5b      	ldrb	r3, [r3, #17]
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fba6 	bl	800185c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7c9b      	ldrb	r3, [r3, #18]
 8001114:	4618      	mov	r0, r3
 8001116:	f000 fb8b 	bl	8001830 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7cdb      	ldrb	r3, [r3, #19]
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fbb2 	bl	8001888 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	799b      	ldrb	r3, [r3, #6]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00a      	beq.n	8001142 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 800112c:	f000 ffd8 	bl	80020e0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8001130:	bf00      	nop
 8001132:	f000 fffd 	bl	8002130 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8001136:	4603      	mov	r3, r0
 8001138:	f083 0301 	eor.w	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f7      	bne.n	8001132 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	78db      	ldrb	r3, [r3, #3]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d102      	bne.n	8001150 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 800114a:	f001 f855 	bl	80021f8 <XMC_SCU_CLOCK_DisableSystemPll>
 800114e:	e011      	b.n	8001174 <XMC_SCU_CLOCK_Init+0xc8>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8001150:	f001 f840 	bl	80021d4 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	8898      	ldrh	r0, [r3, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	78d9      	ldrb	r1, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	785b      	ldrb	r3, [r3, #1]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001160:	461a      	mov	r2, r3
                                 (uint32_t)config->syspll_config.n_div,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	781b      	ldrb	r3, [r3, #0]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001166:	461c      	mov	r4, r3
                                 (uint32_t)config->syspll_config.k_div);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	789b      	ldrb	r3, [r3, #2]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	4623      	mov	r3, r4
 8001170:	f001 f854 	bl	800221c <XMC_SCU_CLOCK_StartSystemPll>
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800117c:	d103      	bne.n	8001186 <XMC_SCU_CLOCK_Init+0xda>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 800117e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001182:	f000 fa8b 	bl	800169c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8001186:	f005 f91f 	bl	80063c8 <SystemCoreClockUpdate>
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}
	...

08001194 <XMC_SCU_TRAP_Enable>:

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <XMC_SCU_TRAP_Enable+0x24>)
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	4904      	ldr	r1, [pc, #16]	; (80011b8 <XMC_SCU_TRAP_Enable+0x24>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	608b      	str	r3, [r1, #8]
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	50004160 	.word	0x50004160

080011bc <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <XMC_SCU_TRAP_Disable+0x20>)
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	4904      	ldr	r1, [pc, #16]	; (80011dc <XMC_SCU_TRAP_Disable+0x20>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	608b      	str	r3, [r1, #8]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	50004160 	.word	0x50004160

080011e0 <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return (SCU_TRAP->TRAPRAW);
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <XMC_SCU_TRAP_GetStatus+0x14>)
 80011e6:	685b      	ldr	r3, [r3, #4]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	50004160 	.word	0x50004160

080011f8 <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <XMC_SCU_TRAP_Trigger+0x1c>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6113      	str	r3, [r2, #16]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	50004160 	.word	0x50004160

08001218 <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <XMC_SCU_TRAP_ClearStatus+0x1c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60d3      	str	r3, [r2, #12]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	50004160 	.word	0x50004160

08001238 <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <XMC_SCU_PARITY_ClearStatus+0x20>)
 8001242:	695a      	ldr	r2, [r3, #20]
 8001244:	4904      	ldr	r1, [pc, #16]	; (8001258 <XMC_SCU_PARITY_ClearStatus+0x20>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4313      	orrs	r3, r2
 800124a:	614b      	str	r3, [r1, #20]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	5000413c 	.word	0x5000413c

0800125c <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return (SCU_PARITY->PEFLAG);
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <XMC_SCU_PARITY_GetStatus+0x14>)
 8001262:	695b      	ldr	r3, [r3, #20]
} 
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	5000413c 	.word	0x5000413c

08001274 <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <XMC_SCU_PARITY_Enable+0x20>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4904      	ldr	r1, [pc, #16]	; (8001294 <XMC_SCU_PARITY_Enable+0x20>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4313      	orrs	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	5000413c 	.word	0x5000413c

08001298 <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <XMC_SCU_PARITY_Disable+0x24>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	4904      	ldr	r1, [pc, #16]	; (80012bc <XMC_SCU_PARITY_Disable+0x24>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	5000413c 	.word	0x5000413c

080012c0 <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE |= (uint32_t)memory; 
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	4904      	ldr	r1, [pc, #16]	; (80012e0 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	608b      	str	r3, [r1, #8]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	5000413c 	.word	0x5000413c

080012e4 <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	4904      	ldr	r1, [pc, #16]	; (8001308 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 80012f6:	4013      	ands	r3, r2
 80012f8:	608b      	str	r3, [r1, #8]
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	5000413c 	.word	0x5000413c

0800130c <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8001316:	695a      	ldr	r2, [r3, #20]
 8001318:	4904      	ldr	r1, [pc, #16]	; (800132c <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4313      	orrs	r3, r2
 800131e:	614b      	str	r3, [r1, #20]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	50004074 	.word	0x50004074

08001330 <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 800133a:	695a      	ldr	r2, [r3, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	43db      	mvns	r3, r3
 8001340:	4904      	ldr	r1, [pc, #16]	; (8001354 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8001342:	4013      	ands	r3, r2
 8001344:	614b      	str	r3, [r1, #20]
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	50004074 	.word	0x50004074

08001358 <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	0f1b      	lsrs	r3, r3, #28
 8001364:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800136c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	461a      	mov	r2, r3
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <XMC_SCU_RESET_AssertPeripheralReset+0x38>)
 800137c:	4413      	add	r3, r2
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	601a      	str	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	50004410 	.word	0x50004410

08001394 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	0f1b      	lsrs	r3, r3, #28
 80013a0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80013a8:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 80013b8:	4413      	add	r3, r2
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	601a      	str	r2, [r3, #0]
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	50004414 	.word	0x50004414

080013d0 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	0f1b      	lsrs	r3, r3, #28
 80013dc:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80013e4:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	4613      	mov	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80013f4:	4413      	add	r3, r2
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	bf14      	ite	ne
 8001400:	2301      	movne	r3, #1
 8001402:	2300      	moveq	r3, #0
 8001404:	b2db      	uxtb	r3, r3
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	5000440c 	.word	0x5000440c

08001418 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:

/*
 * API to retrieve frequency of System PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t p_div;
  uint32_t n_div;
  uint32_t k2_div;

  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 800141e:	f000 f839 	bl	8001494 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>
 8001422:	60f8      	str	r0, [r7, #12]
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d009      	beq.n	8001444 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x2c>
  {
    /* Prescalar mode - fOSC is the parent*/
    clock_frequency = (uint32_t)(clock_frequency / 
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001438:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	e01f      	b.n	8001484 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x6c>
  }
  else
  {
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	0e1b      	lsrs	r3, r3, #24
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3301      	adds	r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	0a1b      	lsrs	r3, r3, #8
 8001458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800145c:	3301      	adds	r3, #1
 800145e:	607b      	str	r3, [r7, #4]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	0c1b      	lsrs	r3, r3, #16
 8001466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800146a:	3301      	adds	r3, #1
 800146c:	603b      	str	r3, [r7, #0]
       
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	fb02 f203 	mul.w	r2, r2, r3
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	6839      	ldr	r1, [r7, #0]
 800147a:	fb01 f303 	mul.w	r3, r1, r3
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	60fb      	str	r3, [r7, #12]
  }

  return (clock_frequency);
 8001484:	68fb      	ldr	r3, [r7, #12]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	50004710 	.word	0x50004710

08001494 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:

/**
 * API to retrieve frequency of System PLL VCO input clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x28>)
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d103      	bne.n	80014ae <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1a>
  {
    clock_frequency = OSCHP_GetFrequency();
 80014a6:	f004 fff9 	bl	800649c <OSCHP_GetFrequency>
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	e001      	b.n	80014b2 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1e>
  }
  else
  {
    clock_frequency = OFI_FREQUENCY;
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x2c>)
 80014b0:	607b      	str	r3, [r7, #4]
  }
  
  return (clock_frequency);
 80014b2:	687b      	ldr	r3, [r7, #4]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	50004710 	.word	0x50004710
 80014c0:	016e3600 	.word	0x016e3600

080014c4 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 80014ca:	f004 ffe7 	bl	800649c <OSCHP_GetFrequency>
 80014ce:	60f8      	str	r0, [r7, #12]
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d116      	bne.n	800150a <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x46>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 80014dc:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014e6:	3301      	adds	r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	0e1b      	lsrs	r3, r3, #24
 80014f0:	f003 030f 	and.w	r3, r3, #15
 80014f4:	3301      	adds	r3, #1
 80014f6:	607b      	str	r3, [r7, #4]
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	fb02 f203 	mul.w	r2, r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	fbb2 f3f3 	udiv	r3, r2, r3
 8001508:	60fb      	str	r3, [r7, #12]
  }
  return (clock_frequency);
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	50004710 	.word	0x50004710

08001518 <XMC_SCU_CLOCK_GetCcuClockFrequency>:

/*
 * API to retrieve frequency of CCU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8001522:	f7ff fb9d 	bl	8000c60 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8001526:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <XMC_SCU_CLOCK_GetCcuClockFrequency+0x28>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	fa22 f303 	lsr.w	r3, r2, r3
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	50004600 	.word	0x50004600

08001544 <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 800154e:	f7ff fb5b 	bl	8000c08 <XMC_SCU_CLOCK_GetUsbClockSource>
 8001552:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155a:	d103      	bne.n	8001564 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 800155c:	f7ff ff5c 	bl	8001418 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	e005      	b.n	8001570 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  }
  else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 800156a:	f7ff ffab 	bl	80014c4 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 800156e:	6078      	str	r0, [r7, #4]
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x44>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 8001578:	3301      	adds	r3, #1
  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	50004600 	.word	0x50004600

0800158c <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001592:	f7ff ff41 	bl	8001418 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001596:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <XMC_SCU_CLOCK_GetEbuClockFrequency+0x24>)
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 80015a0:	3301      	adds	r3, #1
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	50004600 	.word	0x50004600

080015b4 <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 80015be:	f7ff fb31 	bl	8000c24 <XMC_SCU_CLOCK_GetWdtClockSource>
 80015c2:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015ca:	d103      	bne.n	80015d4 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 80015cc:	f7ff ff24 	bl	8001418 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	e00c      	b.n	80015ee <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = OFI_FREQUENCY;
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x50>)
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	e006      	b.n	80015ee <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e6:	d102      	bne.n	80015ee <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  {
    frequency = OSI_FREQUENCY;
 80015e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015ec:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x54>)
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 80015f4:	3301      	adds	r3, #1
  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	016e3600 	.word	0x016e3600
 8001608:	50004600 	.word	0x50004600

0800160c <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 8001616:	f7ff fb13 	bl	8000c40 <XMC_SCU_CLOCK_GetExternalOutputClockSource>
 800161a:	4603      	mov	r3, r0
 800161c:	70fb      	strb	r3, [r7, #3]

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	2b03      	cmp	r3, #3
 8001622:	d10d      	bne.n	8001640 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x34>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001624:	f7ff fef8 	bl	8001418 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001628:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	0c1b      	lsrs	r3, r3, #16
 8001630:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8001634:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	fbb2 f3f3 	udiv	r3, r2, r3
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	e016      	b.n	800166e <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 8001640:	78fb      	ldrb	r3, [r7, #3]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d103      	bne.n	800164e <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x42>
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8001646:	f7ff fb0b 	bl	8000c60 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	e00f      	b.n	800166e <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d10c      	bne.n	800166e <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8001654:	f7ff ff36 	bl	80014c4 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8001658:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 800165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165e:	0c1b      	lsrs	r3, r3, #16
 8001660:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8001664:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	fbb2 f3f3 	udiv	r3, r2, r3
 800166c:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (frequency);
 800166e:	687b      	ldr	r3, [r7, #4]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	50004600 	.word	0x50004600

0800167c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001680:	f7ff fb02 	bl	8000c88 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8001684:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800168e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001692:	4618      	mov	r0, r3
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	50004600 	.word	0x50004600

0800169c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80016ac:	4904      	ldr	r1, [pc, #16]	; (80016c0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	50004600 	.word	0x50004600

080016c4 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80016d4:	4904      	ldr	r1, [pc, #16]	; (80016e8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4313      	orrs	r3, r2
 80016da:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	50004600 	.word	0x50004600

080016ec <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016fc:	4904      	ldr	r1, [pc, #16]	; (8001710 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4313      	orrs	r3, r2
 8001702:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	50004600 	.word	0x50004600

08001714 <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	f023 0203 	bic.w	r2, r3, #3
                      ((uint32_t)source);
 8001726:	79fb      	ldrb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8001728:	4904      	ldr	r1, [pc, #16]	; (800173c <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 800172a:	4313      	orrs	r3, r2
 800172c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	50004600 	.word	0x50004600

08001740 <XMC_SCU_CLOCK_SetSystemPllClockSource>:

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d108      	bne.n	8001762 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
}
 8001760:	e007      	b.n	8001772 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8001762:	4b07      	ldr	r3, [pc, #28]	; (8001780 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	4a06      	ldr	r2, [pc, #24]	; (8001780 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	60d3      	str	r3, [r2, #12]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	50004710 	.word	0x50004710

08001784 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800178e:	bf00      	nop
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8001792:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f8      	bne.n	8001790 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80017a6:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80017a8:	4905      	ldr	r1, [pc, #20]	; (80017c0 <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60cb      	str	r3, [r1, #12]
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	50004000 	.word	0x50004000
 80017c0:	50004300 	.word	0x50004300

080017c4 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80017ce:	bf00      	nop
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80017d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f8      	bne.n	80017d0 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80017e6:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80017e8:	4905      	ldr	r1, [pc, #20]	; (8001800 <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	60cb      	str	r3, [r1, #12]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	50004000 	.word	0x50004000
 8001800:	50004300 	.word	0x50004300

08001804 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001818:	4904      	ldr	r1, [pc, #16]	; (800182c <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 800181a:	4313      	orrs	r3, r2
 800181c:	60cb      	str	r3, [r1, #12]
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	50004600 	.word	0x50004600

08001830 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8001844:	4904      	ldr	r1, [pc, #16]	; (8001858 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 8001846:	4313      	orrs	r3, r2
 8001848:	620b      	str	r3, [r1, #32]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	50004600 	.word	0x50004600

0800185c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8001870:	4904      	ldr	r1, [pc, #16]	; (8001884 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 8001872:	4313      	orrs	r3, r2
 8001874:	610b      	str	r3, [r1, #16]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	50004600 	.word	0x50004600

08001888 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800189c:	4904      	ldr	r1, [pc, #16]	; (80018b0 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	614b      	str	r3, [r1, #20]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	50004600 	.word	0x50004600

080018b4 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80018c8:	4904      	ldr	r1, [pc, #16]	; (80018dc <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	618b      	str	r3, [r1, #24]
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	50004600 	.word	0x50004600

080018e0 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80018f4:	4904      	ldr	r1, [pc, #16]	; (8001908 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61cb      	str	r3, [r1, #28]
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	50004600 	.word	0x50004600

0800190c <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8001914:	4b07      	ldr	r3, [pc, #28]	; (8001934 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8001920:	4904      	ldr	r1, [pc, #16]	; (8001934 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 8001922:	4313      	orrs	r3, r2
 8001924:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	50004600 	.word	0x50004600

08001938 <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:

/* API to program the divider placed between fext and its parent */
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	3a01      	subs	r2, #1
 8001950:	0412      	lsls	r2, r2, #16
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8001952:	4904      	ldr	r1, [pc, #16]	; (8001964 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 8001954:	4313      	orrs	r3, r2
 8001956:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	50004600 	.word	0x50004600

08001968 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8001972:	4a04      	ldr	r2, [pc, #16]	; (8001984 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	6053      	str	r3, [r2, #4]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	50004600 	.word	0x50004600

08001988 <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <XMC_SCU_CLOCK_DisableClock+0x1c>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	6093      	str	r3, [r2, #8]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	50004600 	.word	0x50004600

080019a8 <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <XMC_SCU_CLOCK_IsClockEnabled+0x28>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	bf14      	ite	ne
 80019be:	2301      	movne	r3, #1
 80019c0:	2300      	moveq	r3, #0
 80019c2:	b2db      	uxtb	r3, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	50004600 	.word	0x50004600

080019d4 <XMC_SCU_POWER_GetEVR13Voltage>:
  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <XMC_SCU_POWER_GetEVR13Voltage+0x28>)
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001a00 <XMC_SCU_POWER_GetEVR13Voltage+0x2c>
 80019ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ee:	ee17 3a90 	vmov	r3, s15
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	50004200 	.word	0x50004200
 8001a00:	3bbe0ded 	.word	0x3bbe0ded

08001a04 <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <XMC_SCU_POWER_GetEVR33Voltage+0x2c>)
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	ee07 3a90 	vmov	s15, r3
 8001a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a18:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001a34 <XMC_SCU_POWER_GetEVR33Voltage+0x30>
 8001a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a20:	ee17 3a90 	vmov	r3, s15
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	50004200 	.word	0x50004200
 8001a34:	3cb851ec 	.word	0x3cb851ec

08001a38 <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a46:	f023 0302 	bic.w	r3, r3, #2
 8001a4a:	6153      	str	r3, [r2, #20]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	50004710 	.word	0x50004710

08001a5c <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 8001a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6a:	f043 0302 	orr.w	r3, r3, #2
 8001a6e:	6153      	str	r3, [r2, #20]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	50004710 	.word	0x50004710

08001a80 <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	4a19      	ldr	r2, [pc, #100]	; (8001af4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8001a96:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	4a16      	ldr	r2, [pc, #88]	; (8001af4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001a9c:	f043 0310 	orr.w	r3, r3, #16
 8001aa0:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	061b      	lsls	r3, r3, #24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8001aae:	4911      	ldr	r1, [pc, #68]	; (8001af4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	614b      	str	r3, [r1, #20]

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001abe:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001ac6:	f023 0310 	bic.w	r3, r3, #16
 8001aca:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001ad2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad6:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8001ad8:	bf00      	nop
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f9      	beq.n	8001ada <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	50004710 	.word	0x50004710

08001af8 <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <XMC_SCU_CLOCK_StopUsbPll+0x14>)
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <XMC_SCU_CLOCK_StopUsbPll+0x18>)
 8001b00:	615a      	str	r2, [r3, #20]
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	50004710 	.word	0x50004710
 8001b10:	00010003 	.word	0x00010003

08001b14 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001b24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b28:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d10e      	bne.n	8001b4e <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	4a09      	ldr	r2, [pc, #36]	; (8001b5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001b36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b3a:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8001b3c:	2064      	movs	r0, #100	; 0x64
 8001b3e:	f7ff f8bb 	bl	8000cb8 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001b48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b4c:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8001b4e:	2064      	movs	r0, #100	; 0x64
 8001b50:	f7ff f8b2 	bl	8000cb8 <XMC_SCU_lDelay>
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	50004710 	.word	0x50004710

08001b60 <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <XMC_SCU_POWER_EnableUsb+0x18>)
 8001b66:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b6a:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	50004200 	.word	0x50004200

08001b7c <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <XMC_SCU_POWER_DisableUsb+0x18>)
 8001b82:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b86:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	50004200 	.word	0x50004200

08001b98 <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <XMC_SCU_CLOCK_IsUsbPllLocked+0x20>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf14      	ite	ne
 8001ba8:	2301      	movne	r3, #1
 8001baa:	2300      	moveq	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	50004710 	.word	0x50004710

08001bbc <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d109      	bne.n	8001be0 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8001bd2:	bf00      	nop
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f9      	beq.n	8001bd4 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00a      	beq.n	8001c02 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf2:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8001bf4:	bf00      	nop
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f9      	bne.n	8001bf6 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	50004200 	.word	0x50004200
 8001c10:	50004400 	.word	0x50004400

08001c14 <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <XMC_SCU_HIB_DisableHibernateDomain+0x1c>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	609a      	str	r2, [r3, #8]
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <XMC_SCU_HIB_DisableHibernateDomain+0x20>)
 8001c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c24:	605a      	str	r2, [r3, #4]
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	50004200 	.word	0x50004200
 8001c34:	50004400 	.word	0x50004400

08001c38 <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d007      	beq.n	8001c58 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	50004200 	.word	0x50004200
 8001c70:	50004400 	.word	0x50004400

08001c74 <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8001c78:	bf00      	nop
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <XMC_SCU_HIB_EnableInternalSlowClock+0x2c>)
 8001c7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f8      	bne.n	8001c7a <XMC_SCU_HIB_EnableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	6153      	str	r3, [r2, #20]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	50004000 	.word	0x50004000
 8001ca4:	50004300 	.word	0x50004300

08001ca8 <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8001cac:	bf00      	nop
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <XMC_SCU_HIB_DisableInternalSlowClock+0x2c>)
 8001cb0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001cb4:	f003 0320 	and.w	r3, r3, #32
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f8      	bne.n	8001cae <XMC_SCU_HIB_DisableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6153      	str	r3, [r2, #20]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	50004000 	.word	0x50004000
 8001cd8:	50004300 	.word	0x50004300

08001cdc <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8001ce4:	bf00      	nop
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <XMC_SCU_HIB_ClearEventStatus+0x2c>)
 8001ce8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f8      	bne.n	8001ce6 <XMC_SCU_HIB_ClearEventStatus+0xa>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 8001cf4:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <XMC_SCU_HIB_ClearEventStatus+0x30>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6053      	str	r3, [r2, #4]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	50004000 	.word	0x50004000
 8001d0c:	50004300 	.word	0x50004300

08001d10 <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8001d18:	bf00      	nop
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <XMC_SCU_HIB_TriggerEvent+0x2c>)
 8001d1c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f8      	bne.n	8001d1a <XMC_SCU_HIB_TriggerEvent+0xa>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 8001d28:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <XMC_SCU_HIB_TriggerEvent+0x30>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6093      	str	r3, [r2, #8]
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	50004000 	.word	0x50004000
 8001d40:	50004300 	.word	0x50004300

08001d44 <XMC_SCU_HIB_EnableEvent>:

void XMC_SCU_HIB_EnableEvent(int32_t event)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001d4c:	bf00      	nop
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <XMC_SCU_HIB_EnableEvent+0x30>)
 8001d50:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f8      	bne.n	8001d4e <XMC_SCU_HIB_EnableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <XMC_SCU_HIB_EnableEvent+0x34>)
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4905      	ldr	r1, [pc, #20]	; (8001d78 <XMC_SCU_HIB_EnableEvent+0x34>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60cb      	str	r3, [r1, #12]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	50004000 	.word	0x50004000
 8001d78:	50004300 	.word	0x50004300

08001d7c <XMC_SCU_HIB_DisableEvent>:

void XMC_SCU_HIB_DisableEvent(int32_t event)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001d84:	bf00      	nop
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <XMC_SCU_HIB_DisableEvent+0x34>)
 8001d88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1f8      	bne.n	8001d86 <XMC_SCU_HIB_DisableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <XMC_SCU_HIB_DisableEvent+0x38>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	43d2      	mvns	r2, r2
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <XMC_SCU_HIB_DisableEvent+0x38>)
 8001da0:	400b      	ands	r3, r1
 8001da2:	60d3      	str	r3, [r2, #12]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	50004000 	.word	0x50004000
 8001db4:	50004300 	.word	0x50004300

08001db8 <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001dbc:	bf00      	nop
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <XMC_SCU_HIB_EnterHibernateState+0x2c>)
 8001dc0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f8      	bne.n	8001dbe <XMC_SCU_HIB_EnterHibernateState+0x6>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 8001dd2:	f043 0310 	orr.w	r3, r3, #16
 8001dd6:	60d3      	str	r3, [r2, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	50004000 	.word	0x50004000
 8001de8:	50004300 	.word	0x50004300

08001dec <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <XMC_SCU_HIB_EnterHibernateStateEx+0x14>
  {
    XMC_SCU_HIB_EnterHibernateState();
 8001dfc:	f7ff ffdc 	bl	8001db8 <XMC_SCU_HIB_EnterHibernateState>
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001e12:	bf00      	nop
 8001e14:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <XMC_SCU_HIB_SetWakeupTriggerInput+0x48>)
 8001e16:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f8      	bne.n	8001e14 <XMC_SCU_HIB_SetWakeupTriggerInput+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d106      	bne.n	8001e36 <XMC_SCU_HIB_SetWakeupTriggerInput+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e32:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
  }
}
 8001e34:	e005      	b.n	8001e42 <XMC_SCU_HIB_SetWakeupTriggerInput+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 8001e36:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	4a06      	ldr	r2, [pc, #24]	; (8001e54 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e40:	60d3      	str	r3, [r2, #12]
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	50004000 	.word	0x50004000
 8001e54:	50004300 	.word	0x50004300

08001e58 <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	6039      	str	r1, [r7, #0]
 8001e62:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001e64:	bf00      	nop
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <XMC_SCU_HIB_SetPinMode+0x4c>)
 8001e68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f8      	bne.n	8001e66 <XMC_SCU_HIB_SetPinMode+0xe>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <XMC_SCU_HIB_SetPinMode+0x50>)
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	6839      	ldr	r1, [r7, #0]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8001e92:	4905      	ldr	r1, [pc, #20]	; (8001ea8 <XMC_SCU_HIB_SetPinMode+0x50>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60cb      	str	r3, [r1, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	50004000 	.word	0x50004000
 8001ea8:	50004300 	.word	0x50004300

08001eac <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	71fb      	strb	r3, [r7, #7]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	80bb      	strh	r3, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001ebc:	bf00      	nop
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <XMC_SCU_HIB_SetPinOutputLevel+0x50>)
 8001ec0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f8      	bne.n	8001ebe <XMC_SCU_HIB_SetPinOutputLevel+0x12>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	4013      	ands	r3, r2
                        (level << pin);
 8001ede:	88b9      	ldrh	r1, [r7, #4]
 8001ee0:	79fa      	ldrb	r2, [r7, #7]
 8001ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee6:	4611      	mov	r1, r2
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8001ee8:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 8001eea:	430b      	orrs	r3, r1
 8001eec:	60d3      	str	r3, [r2, #12]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	50004000 	.word	0x50004000
 8001f00:	50004300 	.word	0x50004300

08001f04 <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001f0e:	bf00      	nop
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <XMC_SCU_HIB_SetInput0+0x48>)
 8001f12:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f8      	bne.n	8001f10 <XMC_SCU_HIB_SetInput0+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d106      	bne.n	8001f32 <XMC_SCU_HIB_SetInput0+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 8001f24:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <XMC_SCU_HIB_SetInput0+0x4c>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <XMC_SCU_HIB_SetInput0+0x4c>)
 8001f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f2e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
  }
}
 8001f30:	e005      	b.n	8001f3e <XMC_SCU_HIB_SetInput0+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <XMC_SCU_HIB_SetInput0+0x4c>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	4a06      	ldr	r2, [pc, #24]	; (8001f50 <XMC_SCU_HIB_SetInput0+0x4c>)
 8001f38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f3c:	60d3      	str	r3, [r2, #12]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	50004000 	.word	0x50004000
 8001f50:	50004300 	.word	0x50004300

08001f54 <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	80fb      	strh	r3, [r7, #6]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001f5e:	bf00      	nop
 8001f60:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <XMC_SCU_HIB_SetSR0Input+0x38>)
 8001f62:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f8      	bne.n	8001f60 <XMC_SCU_HIB_SetSR0Input+0xc>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	4905      	ldr	r1, [pc, #20]	; (8001f90 <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60cb      	str	r3, [r1, #12]
#endif  
                        input;
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	50004000 	.word	0x50004000
 8001f90:	50004300 	.word	0x50004300

08001f94 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	50004300 	.word	0x50004300

08001fb8 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8001fbc:	bf00      	nop
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8001fc0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f8      	bne.n	8001fbe <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	4a13      	ldr	r2, [pc, #76]	; (8002020 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8001fd2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001fd6:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001fd8:	bf00      	nop
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8001fdc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f8      	bne.n	8001fda <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8001fee:	f043 0308 	orr.w	r3, r3, #8
 8001ff2:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8001ff4:	bf00      	nop
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8001ff8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f8      	bne.n	8001ff6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8002006:	2208      	movs	r2, #8
 8002008:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 800200a:	bf00      	nop
 800200c:	f7fe fe48 	bl	8000ca0 <XMC_SCU_GetMirrorStatus>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1fa      	bne.n	800200c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	50004000 	.word	0x50004000
 8002020:	50004300 	.word	0x50004300

08002024 <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002028:	bf00      	nop
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2c>)
 800202c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f8      	bne.n	800202a <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	4a05      	ldr	r2, [pc, #20]	; (8002054 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 800203e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002042:	61d3      	str	r3, [r2, #28]
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	50004000 	.word	0x50004000
 8002054:	50004300 	.word	0x50004300

08002058 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 800205c:	bf00      	nop
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2c>)
 8002060:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f8      	bne.n	800205e <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	4a05      	ldr	r2, [pc, #20]	; (8002088 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 8002072:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 8002076:	61d3      	str	r3, [r2, #28]
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	50004000 	.word	0x50004000
 8002088:	50004300 	.word	0x50004300

0800208c <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002090:	bf00      	nop
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x30>)
 8002094:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f8      	bne.n	8002092 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 80020a8:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 80020aa:	f043 0320 	orr.w	r3, r3, #32
 80020ae:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	50004000 	.word	0x50004000
 80020c0:	50004300 	.word	0x50004300

080020c4 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0x18>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0301 	and.w	r3, r3, #1
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	50004300 	.word	0x50004300

080020e0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 80020e0:	b598      	push	{r3, r4, r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80020ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ee:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 80020f8:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80020fc:	f004 f9ce 	bl	800649c <OSCHP_GetFrequency>
 8002100:	4602      	mov	r2, r0
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8002104:	fba3 2302 	umull	r2, r3, r3, r2
 8002108:	0d1b      	lsrs	r3, r3, #20
 800210a:	3b01      	subs	r3, #1
 800210c:	041b      	lsls	r3, r3, #16
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 800210e:	4a06      	ldr	r2, [pc, #24]	; (8002128 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8002110:	4323      	orrs	r3, r4
 8002112:	6053      	str	r3, [r2, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a02      	ldr	r2, [pc, #8]	; (8002124 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800211a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800211e:	6053      	str	r3, [r2, #4]
}
 8002120:	bf00      	nop
 8002122:	bd98      	pop	{r3, r4, r7, pc}
 8002124:	50004710 	.word	0x50004710
 8002128:	50004700 	.word	0x50004700
 800212c:	6b5fca6b 	.word	0x6b5fca6b

08002130 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800213c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002140:	bf0c      	ite	eq
 8002142:	2301      	moveq	r3, #1
 8002144:	2300      	movne	r3, #0
 8002146:	b2db      	uxtb	r3, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	50004710 	.word	0x50004710

08002158 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 8002162:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002166:	6053      	str	r3, [r2, #4]
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	50004700 	.word	0x50004700

08002178 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a04      	ldr	r2, [pc, #16]	; (8002194 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6053      	str	r3, [r2, #4]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	50004700 	.word	0x50004700

08002198 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	6053      	str	r3, [r2, #4]
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	50004700 	.word	0x50004700

080021b8 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0x18>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0301 	and.w	r3, r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	50004700 	.word	0x50004700

080021d4 <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 80021de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e2:	f023 0302 	bic.w	r3, r3, #2
 80021e6:	6053      	str	r3, [r2, #4]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	50004710 	.word	0x50004710

080021f8 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a05      	ldr	r2, [pc, #20]	; (8002218 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 8002202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002206:	f043 0302 	orr.w	r3, r3, #2
 800220a:	6053      	str	r3, [r2, #4]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	50004710 	.word	0x50004710

0800221c <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60ba      	str	r2, [r7, #8]
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	4603      	mov	r3, r0
 8002228:	81fb      	strh	r3, [r7, #14]
 800222a:	460b      	mov	r3, r1
 800222c:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 800222e:	89fb      	ldrh	r3, [r7, #14]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fa85 	bl	8001740 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8002236:	7b7b      	ldrb	r3, [r7, #13]
 8002238:	2b01      	cmp	r3, #1
 800223a:	f040 8084 	bne.w	8002346 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 800223e:	89fb      	ldrh	r3, [r7, #14]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d109      	bne.n	8002258 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8002244:	f004 f92a 	bl	800649c <OSCHP_GetFrequency>
 8002248:	4602      	mov	r2, r0
 800224a:	4b4c      	ldr	r3, [pc, #304]	; (800237c <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 800224c:	fba3 2302 	umull	r2, r3, r3, r2
 8002250:	0c9b      	lsrs	r3, r3, #18
 8002252:	059b      	lsls	r3, r3, #22
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	e002      	b.n	800225e <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8002258:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800225c:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	fb02 f203 	mul.w	r2, r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	fbb2 f3f3 	udiv	r3, r2, r3
 800226c:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	4a43      	ldr	r2, [pc, #268]	; (8002380 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	0d9b      	lsrs	r3, r3, #22
 800227a:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 800227c:	4b41      	ldr	r3, [pc, #260]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4a40      	ldr	r2, [pc, #256]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8002288:	4b3e      	ldr	r3, [pc, #248]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4a3d      	ldr	r2, [pc, #244]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800228e:	f043 0310 	orr.w	r3, r3, #16
 8002292:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002294:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 800229a:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	3a01      	subs	r2, #1
 80022a0:	0212      	lsls	r2, r2, #8
 80022a2:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	041b      	lsls	r3, r3, #16
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 80022aa:	431a      	orrs	r2, r3
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	061b      	lsls	r3, r3, #24
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80022b2:	4934      	ldr	r1, [pc, #208]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	608b      	str	r3, [r1, #8]

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80022b8:	4b32      	ldr	r3, [pc, #200]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a31      	ldr	r2, [pc, #196]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022c2:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 80022c4:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a2e      	ldr	r2, [pc, #184]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022ca:	f023 0310 	bic.w	r3, r3, #16
 80022ce:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 80022d0:	4b2c      	ldr	r3, [pc, #176]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4a2b      	ldr	r2, [pc, #172]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022da:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80022dc:	bf00      	nop
 80022de:	4b29      	ldr	r3, [pc, #164]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f9      	beq.n	80022de <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4a25      	ldr	r2, [pc, #148]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80022f6:	bf00      	nop
 80022f8:	4b22      	ldr	r3, [pc, #136]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f9      	bne.n	80022f8 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	4a21      	ldr	r2, [pc, #132]	; (800238c <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8002308:	fba2 2303 	umull	r2, r3, r2, r3
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	0d9b      	lsrs	r3, r3, #22
 8002310:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8002312:	6a3a      	ldr	r2, [r7, #32]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	429a      	cmp	r2, r3
 8002318:	d202      	bcs.n	8002320 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 800231a:	6938      	ldr	r0, [r7, #16]
 800231c:	f000 f84a 	bl	80023b4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	085b      	lsrs	r3, r3, #1
 8002324:	4a1a      	ldr	r2, [pc, #104]	; (8002390 <XMC_SCU_CLOCK_StartSystemPll+0x174>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	0d9b      	lsrs	r3, r3, #22
 800232e:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8002330:	6a3a      	ldr	r2, [r7, #32]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	429a      	cmp	r2, r3
 8002336:	d202      	bcs.n	800233e <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002338:	6938      	ldr	r0, [r7, #16]
 800233a:	f000 f83b 	bl	80023b4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 800233e:	6a38      	ldr	r0, [r7, #32]
 8002340:	f000 f838 	bl	80023b4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 8002344:	e015      	b.n	8002372 <XMC_SCU_CLOCK_StartSystemPll+0x156>
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	3b01      	subs	r3, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002352:	490c      	ldr	r1, [pc, #48]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002354:	4313      	orrs	r3, r2
 8002356:	608b      	str	r3, [r1, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	4a09      	ldr	r2, [pc, #36]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8002364:	bf00      	nop
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f9      	beq.n	8002366 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
}
 8002372:	bf00      	nop
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	431bde83 	.word	0x431bde83
 8002380:	aaaaaaab 	.word	0xaaaaaaab
 8002384:	50004710 	.word	0x50004710
 8002388:	f08080ff 	.word	0xf08080ff
 800238c:	88888889 	.word	0x88888889
 8002390:	b60b60b7 	.word	0xb60b60b7

08002394 <XMC_SCU_CLOCK_StopSystemPll>:

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 800239e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a2:	6053      	str	r3, [r2, #4]
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	50004710 	.word	0x50004710

080023b4 <XMC_SCU_CLOCK_StepSystemPllFrequency>:

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	041b      	lsls	r3, r3, #16
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80023ca:	4905      	ldr	r1, [pc, #20]	; (80023e0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	608b      	str	r3, [r1, #8]

  XMC_SCU_lDelay(50U);
 80023d0:	2032      	movs	r0, #50	; 0x32
 80023d2:	f7fe fc71 	bl	8000cb8 <XMC_SCU_lDelay>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	50004710 	.word	0x50004710

080023e4 <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <XMC_SCU_CLOCK_IsSystemPllLocked+0x20>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf14      	ite	ne
 80023f4:	2301      	movne	r3, #1
 80023f6:	2300      	moveq	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	50004710 	.word	0x50004710

08002408 <XMC_SCU_INTERRUPT_SetEventHandler>:
/*
 * API to assign the event handler function to be executed on occurrence of the selected event.
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
                                                   const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8002416:	e002      	b.n	800241e <XMC_SCU_INTERRUPT_SetEventHandler+0x16>
  {
    index++;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3301      	adds	r3, #1
 800241c:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	fa22 f303 	lsr.w	r3, r2, r3
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2b1f      	cmp	r3, #31
 8002432:	d9f1      	bls.n	8002418 <XMC_SCU_INTERRUPT_SetEventHandler+0x10>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b20      	cmp	r3, #32
 8002438:	d102      	bne.n	8002440 <XMC_SCU_INTERRUPT_SetEventHandler+0x38>
  {
    status = XMC_SCU_STATUS_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	72fb      	strb	r3, [r7, #11]
 800243e:	e006      	b.n	800244e <XMC_SCU_INTERRUPT_SetEventHandler+0x46>
  }
  else
  {
    event_handler_list[index] = handler;
 8002440:	4906      	ldr	r1, [pc, #24]	; (800245c <XMC_SCU_INTERRUPT_SetEventHandler+0x54>)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 800244a:	2300      	movs	r3, #0
 800244c:	72fb      	strb	r3, [r7, #11]
  }
  
  return (status);
 800244e:	7afb      	ldrb	r3, [r7, #11]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	20000cf0 	.word	0x20000cf0

08002460 <XMC_SCU_IRQHandler>:

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
  event = XMC_SCU_INTERUPT_GetEventStatus();
 800246c:	f7fe fc80 	bl	8000d70 <XMC_SCU_INTERUPT_GetEventStatus>
 8002470:	6138      	str	r0, [r7, #16]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 8002472:	e01c      	b.n	80024ae <XMC_SCU_IRQHandler+0x4e>
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d011      	beq.n	80024a8 <XMC_SCU_IRQHandler+0x48>
    {
      event_handler = event_handler_list[index];
 8002484:	4a0d      	ldr	r2, [pc, #52]	; (80024bc <XMC_SCU_IRQHandler+0x5c>)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248c:	60fb      	str	r3, [r7, #12]
      if (event_handler != NULL)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <XMC_SCU_IRQHandler+0x38>
      {
          (event_handler)();
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4798      	blx	r3
      }
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 8002498:	2201      	movs	r2, #1
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe fc71 	bl	8000d88 <XMC_SCU_INTERRUPT_ClearEventStatus>
      
      break;
 80024a6:	e005      	b.n	80024b4 <XMC_SCU_IRQHandler+0x54>
    }   
    index++;    
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	3301      	adds	r3, #1
 80024ac:	617b      	str	r3, [r7, #20]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b1f      	cmp	r3, #31
 80024b2:	d9df      	bls.n	8002474 <XMC_SCU_IRQHandler+0x14>
  }
}
 80024b4:	bf00      	nop
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000cf0 	.word	0x20000cf0

080024c0 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70fb      	strb	r3, [r7, #3]
 80024cc:	4613      	mov	r3, r2
 80024ce:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3204      	adds	r2, #4
 80024dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	21f8      	movs	r1, #248	; 0xf8
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	78f9      	ldrb	r1, [r7, #3]
 80024f2:	0889      	lsrs	r1, r1, #2
 80024f4:	b2c9      	uxtb	r1, r1
 80024f6:	4608      	mov	r0, r1
 80024f8:	ea02 0103 	and.w	r1, r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	1d02      	adds	r2, r0, #4
 8002500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	b2db      	uxtb	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3204      	adds	r2, #4
 8002510:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002514:	78b9      	ldrb	r1, [r7, #2]
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	78f9      	ldrb	r1, [r7, #3]
 8002524:	0889      	lsrs	r1, r1, #2
 8002526:	b2c9      	uxtb	r1, r1
 8002528:	4608      	mov	r0, r1
 800252a:	ea42 0103 	orr.w	r1, r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	1d02      	adds	r2, r0, #4
 8002532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	70fb      	strb	r3, [r7, #3]
 800254e:	4613      	mov	r3, r2
 8002550:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002556:	78fb      	ldrb	r3, [r7, #3]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	2103      	movs	r1, #3
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	401a      	ands	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800256c:	78b9      	ldrb	r1, [r7, #2]
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 8002588:	b5b0      	push	{r4, r5, r7, lr}
 800258a:	b08e      	sub	sp, #56	; 0x38
 800258c:	af02      	add	r7, sp, #8
 800258e:	6078      	str	r0, [r7, #4]
	 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 8002590:	4bb7      	ldr	r3, [pc, #732]	; (8002870 <HID_Device_ProcessControlRequest+0x2e8>)
 8002592:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8002596:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	bf14      	ite	ne
 80025a0:	2301      	movne	r3, #1
 80025a2:	2300      	moveq	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
	if (!(Endpoint_IsSETUPReceived()))
 80025a6:	f083 0301 	eor.w	r3, r3, #1
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f040 81b5 	bne.w	800291c <HID_Device_ProcessControlRequest+0x394>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
 80025b2:	4bb0      	ldr	r3, [pc, #704]	; (8002874 <HID_Device_ProcessControlRequest+0x2ec>)
 80025b4:	889b      	ldrh	r3, [r3, #4]
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	429a      	cmp	r2, r3
 80025c0:	f040 81ae 	bne.w	8002920 <HID_Device_ProcessControlRequest+0x398>
	  return;

	switch (USB_ControlRequest.bRequest)
 80025c4:	4bab      	ldr	r3, [pc, #684]	; (8002874 <HID_Device_ProcessControlRequest+0x2ec>)
 80025c6:	785b      	ldrb	r3, [r3, #1]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	2b0a      	cmp	r3, #10
 80025cc:	f200 81b5 	bhi.w	800293a <HID_Device_ProcessControlRequest+0x3b2>
 80025d0:	a201      	add	r2, pc, #4	; (adr r2, 80025d8 <HID_Device_ProcessControlRequest+0x50>)
 80025d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d6:	bf00      	nop
 80025d8:	08002605 	.word	0x08002605
 80025dc:	080028a5 	.word	0x080028a5
 80025e0:	080027d1 	.word	0x080027d1
 80025e4:	0800293b 	.word	0x0800293b
 80025e8:	0800293b 	.word	0x0800293b
 80025ec:	0800293b 	.word	0x0800293b
 80025f0:	0800293b 	.word	0x0800293b
 80025f4:	0800293b 	.word	0x0800293b
 80025f8:	080026f7 	.word	0x080026f7
 80025fc:	08002879 	.word	0x08002879
 8002600:	08002843 	.word	0x08002843
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 8002604:	4b9b      	ldr	r3, [pc, #620]	; (8002874 <HID_Device_ProcessControlRequest+0x2ec>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2ba1      	cmp	r3, #161	; 0xa1
 800260a:	f040 818b 	bne.w	8002924 <HID_Device_ProcessControlRequest+0x39c>
			{
 800260e:	466b      	mov	r3, sp
 8002610:	461d      	mov	r5, r3
				uint16_t ReportSize = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	81fb      	strh	r3, [r7, #14]
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 8002616:	4b97      	ldr	r3, [pc, #604]	; (8002874 <HID_Device_ProcessControlRequest+0x2ec>)
 8002618:	885b      	ldrh	r3, [r3, #2]
 800261a:	b29b      	uxth	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	737b      	strb	r3, [r7, #13]
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 8002620:	4b94      	ldr	r3, [pc, #592]	; (8002874 <HID_Device_ProcessControlRequest+0x2ec>)
 8002622:	885b      	ldrh	r3, [r3, #2]
 8002624:	b29b      	uxth	r3, r3
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	b29b      	uxth	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	7b18      	ldrb	r0, [r3, #12]
 8002636:	4603      	mov	r3, r0
 8002638:	3b01      	subs	r3, #1
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	b2c1      	uxtb	r1, r0
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	f04f 0400 	mov.w	r4, #0
 800264a:	00d4      	lsls	r4, r2, #3
 800264c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002650:	00cb      	lsls	r3, r1, #3
 8002652:	b2c1      	uxtb	r1, r0
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	f04f 0400 	mov.w	r4, #0
 8002660:	00d4      	lsls	r4, r2, #3
 8002662:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002666:	00cb      	lsls	r3, r1, #3
 8002668:	4603      	mov	r3, r0
 800266a:	3307      	adds	r3, #7
 800266c:	08db      	lsrs	r3, r3, #3
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	ebad 0d03 	sub.w	sp, sp, r3
 8002674:	ab02      	add	r3, sp, #8
 8002676:	3300      	adds	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]

				memset(ReportData, 0, sizeof(ReportData));
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	4602      	mov	r2, r0
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f004 fa8b 	bl	8006b9c <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
 8002686:	69b8      	ldr	r0, [r7, #24]
 8002688:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800268c:	f107 010d 	add.w	r1, r7, #13
 8002690:	f107 030e 	add.w	r3, r7, #14
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	4603      	mov	r3, r0
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7fd fee9 	bl	8000470 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d007      	beq.n	80026b6 <HID_Device_ProcessControlRequest+0x12e>
				{
					MEMCPY(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6898      	ldr	r0, [r3, #8]
 80026aa:	69b9      	ldr	r1, [r7, #24]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7b1b      	ldrb	r3, [r3, #12]
 80026b0:	461a      	mov	r2, r3
 80026b2:	f000 fa49 	bl	8002b48 <thumb2_memcpy>
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80026b6:	2200      	movs	r2, #0
 80026b8:	4b6d      	ldr	r3, [pc, #436]	; (8002870 <HID_Device_ProcessControlRequest+0x2e8>)
 80026ba:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80026be:	2200      	movs	r2, #0
 80026c0:	4b6b      	ldr	r3, [pc, #428]	; (8002870 <HID_Device_ProcessControlRequest+0x2e8>)
 80026c2:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 80026c6:	4a6a      	ldr	r2, [pc, #424]	; (8002870 <HID_Device_ProcessControlRequest+0x2e8>)
 80026c8:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80026cc:	f36f 0341 	bfc	r3, #1, #1
 80026d0:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
 80026d4:	7b7b      	ldrb	r3, [r7, #13]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HID_Device_ProcessControlRequest+0x15a>
				  Endpoint_Write_8(ReportID);
 80026da:	7b7b      	ldrb	r3, [r7, #13]
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 fc1b 	bl	8002f18 <Endpoint_Write_8>

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	89fa      	ldrh	r2, [r7, #14]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 ffa5 	bl	8003638 <Endpoint_Write_Control_Stream_LE>
				Endpoint_ClearOUT();
 80026ee:	f000 fb1d 	bl	8002d2c <Endpoint_ClearOUT>
 80026f2:	46ad      	mov	sp, r5
			}

			break;
 80026f4:	e116      	b.n	8002924 <HID_Device_ProcessControlRequest+0x39c>
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 80026f6:	4b5f      	ldr	r3, [pc, #380]	; (8002874 <HID_Device_ProcessControlRequest+0x2ec>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b21      	cmp	r3, #33	; 0x21
 80026fc:	f040 8114 	bne.w	8002928 <HID_Device_ProcessControlRequest+0x3a0>
			{
 8002700:	466b      	mov	r3, sp
 8002702:	461d      	mov	r5, r3
				uint16_t ReportSize = USB_ControlRequest.wLength;
 8002704:	4b5b      	ldr	r3, [pc, #364]	; (8002874 <HID_Device_ProcessControlRequest+0x2ec>)
 8002706:	799a      	ldrb	r2, [r3, #6]
 8002708:	79db      	ldrb	r3, [r3, #7]
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	4313      	orrs	r3, r2
 800270e:	85fb      	strh	r3, [r7, #46]	; 0x2e
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 8002710:	4b58      	ldr	r3, [pc, #352]	; (8002874 <HID_Device_ProcessControlRequest+0x2ec>)
 8002712:	885b      	ldrh	r3, [r3, #2]
 8002714:	b29b      	uxth	r3, r3
 8002716:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 800271a:	4b56      	ldr	r3, [pc, #344]	; (8002874 <HID_Device_ProcessControlRequest+0x2ec>)
 800271c:	885b      	ldrh	r3, [r3, #2]
 800271e:	b29b      	uxth	r3, r3
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	b29b      	uxth	r3, r3
 8002724:	b2db      	uxtb	r3, r3
 8002726:	3b01      	subs	r3, #1
 8002728:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				uint8_t  ReportData[ReportSize];
 800272c:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800272e:	4603      	mov	r3, r0
 8002730:	3b01      	subs	r3, #1
 8002732:	62bb      	str	r3, [r7, #40]	; 0x28
 8002734:	b281      	uxth	r1, r0
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	f04f 0400 	mov.w	r4, #0
 8002742:	00d4      	lsls	r4, r2, #3
 8002744:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002748:	00cb      	lsls	r3, r1, #3
 800274a:	b281      	uxth	r1, r0
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	f04f 0400 	mov.w	r4, #0
 8002758:	00d4      	lsls	r4, r2, #3
 800275a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800275e:	00cb      	lsls	r3, r1, #3
 8002760:	4603      	mov	r3, r0
 8002762:	3307      	adds	r3, #7
 8002764:	08db      	lsrs	r3, r3, #3
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	ebad 0d03 	sub.w	sp, sp, r3
 800276c:	ab02      	add	r3, sp, #8
 800276e:	3300      	adds	r3, #0
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
 8002772:	4a3f      	ldr	r2, [pc, #252]	; (8002870 <HID_Device_ProcessControlRequest+0x2e8>)
 8002774:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002778:	f36f 0341 	bfc	r3, #1, #1
 800277c:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f000 ff9e 	bl	80036c8 <Endpoint_Read_Control_Stream_LE>
				Endpoint_ClearIN();
 800278c:	f000 fb1a 	bl	8002dc4 <Endpoint_ClearIN>

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
 8002790:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf14      	ite	ne
 8002798:	2301      	movne	r3, #1
 800279a:	2300      	moveq	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	1898      	adds	r0, r3, r2
 80027a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf14      	ite	ne
 80027ac:	2301      	movne	r3, #1
 80027ae:	2300      	moveq	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	b29b      	uxth	r3, r3
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
 80027b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80027be:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	4603      	mov	r3, r0
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fd ffb6 	bl	8000738 <CALLBACK_HID_Device_ProcessHIDReport>
 80027cc:	46ad      	mov	sp, r5
			}

			break;
 80027ce:	e0ab      	b.n	8002928 <HID_Device_ProcessControlRequest+0x3a0>
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 80027d0:	4b28      	ldr	r3, [pc, #160]	; (8002874 <HID_Device_ProcessControlRequest+0x2ec>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2ba1      	cmp	r3, #161	; 0xa1
 80027d6:	f040 80a9 	bne.w	800292c <HID_Device_ProcessControlRequest+0x3a4>
 80027da:	4a25      	ldr	r2, [pc, #148]	; (8002870 <HID_Device_ProcessControlRequest+0x2e8>)
 80027dc:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80027e0:	f36f 0341 	bfc	r3, #1, #1
 80027e4:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
 80027e8:	bf00      	nop
	 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80027ea:	4b21      	ldr	r3, [pc, #132]	; (8002870 <HID_Device_ProcessControlRequest+0x2e8>)
 80027ec:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80027f0:	461a      	mov	r2, r3
 80027f2:	232c      	movs	r3, #44	; 0x2c
 80027f4:	fb03 f302 	mul.w	r3, r3, r2
 80027f8:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HID_Device_ProcessControlRequest+0x2e8>)
 80027fa:	4413      	add	r3, r2
 80027fc:	3304      	adds	r3, #4
 80027fe:	617b      	str	r3, [r7, #20]
		return ep->InInUse == 0 && ep->IsEnabled;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d108      	bne.n	8002820 <HID_Device_ProcessControlRequest+0x298>
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	791b      	ldrb	r3, [r3, #4]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HID_Device_ProcessControlRequest+0x298>
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <HID_Device_ProcessControlRequest+0x29a>
 8002820:	2300      	movs	r3, #0
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f083 0301 	eor.w	r3, r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1db      	bne.n	80027ea <HID_Device_ProcessControlRequest+0x262>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	7c1b      	ldrb	r3, [r3, #16]
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fb6e 	bl	8002f18 <Endpoint_Write_8>
				Endpoint_ClearIN();
 800283c:	f000 fac2 	bl	8002dc4 <Endpoint_ClearIN>
				Endpoint_ClearStatusStage();
			}

			break;
 8002840:	e074      	b.n	800292c <HID_Device_ProcessControlRequest+0x3a4>
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <HID_Device_ProcessControlRequest+0x2ec>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b21      	cmp	r3, #33	; 0x21
 8002848:	d172      	bne.n	8002930 <HID_Device_ProcessControlRequest+0x3a8>
		device.IsSetupRecieved = 0;
 800284a:	4a09      	ldr	r2, [pc, #36]	; (8002870 <HID_Device_ProcessControlRequest+0x2e8>)
 800284c:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002850:	f36f 0341 	bfc	r3, #1, #1
 8002854:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HID_Device_ProcessControlRequest+0x2ec>)
 800285a:	885b      	ldrh	r3, [r3, #2]
 800285c:	b29b      	uxth	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf14      	ite	ne
 8002864:	2301      	movne	r3, #1
 8002866:	2300      	moveq	r3, #0
 8002868:	b2da      	uxtb	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	741a      	strb	r2, [r3, #16]
			}

			break;
 800286e:	e05f      	b.n	8002930 <HID_Device_ProcessControlRequest+0x3a8>
 8002870:	20000f70 	.word	0x20000f70
 8002874:	200012c0 	.word	0x200012c0
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8002878:	4b31      	ldr	r3, [pc, #196]	; (8002940 <HID_Device_ProcessControlRequest+0x3b8>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b21      	cmp	r3, #33	; 0x21
 800287e:	d159      	bne.n	8002934 <HID_Device_ProcessControlRequest+0x3ac>
 8002880:	4a30      	ldr	r2, [pc, #192]	; (8002944 <HID_Device_ProcessControlRequest+0x3bc>)
 8002882:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002886:	f36f 0341 	bfc	r3, #1, #1
 800288a:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 800288e:	4b2c      	ldr	r3, [pc, #176]	; (8002940 <HID_Device_ProcessControlRequest+0x3b8>)
 8002890:	885b      	ldrh	r3, [r3, #2]
 8002892:	b29b      	uxth	r3, r3
 8002894:	119b      	asrs	r3, r3, #6
 8002896:	b29b      	uxth	r3, r3
 8002898:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 800289c:	b29a      	uxth	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	829a      	strh	r2, [r3, #20]
			}

			break;
 80028a2:	e047      	b.n	8002934 <HID_Device_ProcessControlRequest+0x3ac>
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 80028a4:	4b26      	ldr	r3, [pc, #152]	; (8002940 <HID_Device_ProcessControlRequest+0x3b8>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2ba1      	cmp	r3, #161	; 0xa1
 80028aa:	d145      	bne.n	8002938 <HID_Device_ProcessControlRequest+0x3b0>
 80028ac:	4a25      	ldr	r2, [pc, #148]	; (8002944 <HID_Device_ProcessControlRequest+0x3bc>)
 80028ae:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80028b2:	f36f 0341 	bfc	r3, #1, #1
 80028b6:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
 80028ba:	bf00      	nop
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80028bc:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HID_Device_ProcessControlRequest+0x3bc>)
 80028be:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80028c2:	461a      	mov	r2, r3
 80028c4:	232c      	movs	r3, #44	; 0x2c
 80028c6:	fb03 f302 	mul.w	r3, r3, r2
 80028ca:	4a1e      	ldr	r2, [pc, #120]	; (8002944 <HID_Device_ProcessControlRequest+0x3bc>)
 80028cc:	4413      	add	r3, r2
 80028ce:	3304      	adds	r3, #4
 80028d0:	613b      	str	r3, [r7, #16]
		return ep->InInUse == 0 && ep->IsEnabled;
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d108      	bne.n	80028f2 <HID_Device_ProcessControlRequest+0x36a>
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	791b      	ldrb	r3, [r3, #4]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HID_Device_ProcessControlRequest+0x36a>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <HID_Device_ProcessControlRequest+0x36c>
 80028f2:	2300      	movs	r3, #0
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f083 0301 	eor.w	r3, r3, #1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1db      	bne.n	80028bc <HID_Device_ProcessControlRequest+0x334>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	8a9b      	ldrh	r3, [r3, #20]
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	b29b      	uxth	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	4618      	mov	r0, r3
 8002910:	f000 fb02 	bl	8002f18 <Endpoint_Write_8>
				Endpoint_ClearIN();
 8002914:	f000 fa56 	bl	8002dc4 <Endpoint_ClearIN>
				Endpoint_ClearStatusStage();
			}

			break;
 8002918:	bf00      	nop
 800291a:	e00d      	b.n	8002938 <HID_Device_ProcessControlRequest+0x3b0>
	  return;
 800291c:	bf00      	nop
 800291e:	e00c      	b.n	800293a <HID_Device_ProcessControlRequest+0x3b2>
	  return;
 8002920:	bf00      	nop
 8002922:	e00a      	b.n	800293a <HID_Device_ProcessControlRequest+0x3b2>
			break;
 8002924:	bf00      	nop
 8002926:	e008      	b.n	800293a <HID_Device_ProcessControlRequest+0x3b2>
			break;
 8002928:	bf00      	nop
 800292a:	e006      	b.n	800293a <HID_Device_ProcessControlRequest+0x3b2>
			break;
 800292c:	bf00      	nop
 800292e:	e004      	b.n	800293a <HID_Device_ProcessControlRequest+0x3b2>
			break;
 8002930:	bf00      	nop
 8002932:	e002      	b.n	800293a <HID_Device_ProcessControlRequest+0x3b2>
			break;
 8002934:	bf00      	nop
 8002936:	e000      	b.n	800293a <HID_Device_ProcessControlRequest+0x3b2>
			break;
 8002938:	bf00      	nop
	}
}
 800293a:	3730      	adds	r7, #48	; 0x30
 800293c:	46bd      	mov	sp, r7
 800293e:	bdb0      	pop	{r4, r5, r7, pc}
 8002940:	200012c0 	.word	0x200012c0
 8002944:	20000f70 	.word	0x20000f70

08002948 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3310      	adds	r3, #16
 8002954:	2208      	movs	r2, #8
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f004 f91f 	bl	8006b9c <memset>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	741a      	strb	r2, [r3, #16]
	HIDInterfaceInfo->State.IdleCount           = 750;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f240 22ee 	movw	r2, #750	; 0x2ee
 800296a:	829a      	strh	r2, [r3, #20]

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2203      	movs	r2, #3
 8002970:	719a      	strb	r2, [r3, #6]

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3302      	adds	r3, #2
 8002976:	2101      	movs	r1, #1
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fba5 	bl	80030c8 <Endpoint_ConfigureEndpointTable>
 800297e:	4603      	mov	r3, r0
 8002980:	f083 0301 	eor.w	r3, r3, #1
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HID_Device_ConfigureEndpoints+0x46>
	  return false;
 800298a:	2300      	movs	r3, #0
 800298c:	e000      	b.n	8002990 <HID_Device_ConfigureEndpoints+0x48>

	return true;
 800298e:	2301      	movs	r3, #1
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 8002998:	b5b0      	push	{r4, r5, r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af02      	add	r7, sp, #8
 800299e:	6078      	str	r0, [r7, #4]
	if (USB_DeviceState != DEVICE_STATE_Configured)
 80029a0:	4b67      	ldr	r3, [pc, #412]	; (8002b40 <HID_Device_USBTask+0x1a8>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	f040 80c3 	bne.w	8002b32 <HID_Device_USBTask+0x19a>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	8a5c      	ldrh	r4, [r3, #18]
			 *  \return Current USB frame number from the USB controller.
			 */
    
            static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE;
            static inline uint16_t USB_Device_GetFrameNumber(void) {
                return device.Driver->GetFrameNumber();
 80029b0:	4b64      	ldr	r3, [pc, #400]	; (8002b44 <HID_Device_USBTask+0x1ac>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	4798      	blx	r3
 80029b8:	4603      	mov	r3, r0
 80029ba:	429c      	cmp	r4, r3
 80029bc:	f000 80bb 	beq.w	8002b36 <HID_Device_USBTask+0x19e>
		#else
		return;
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	789b      	ldrb	r3, [r3, #2]
 80029c4:	747b      	strb	r3, [r7, #17]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80029c6:	7c7b      	ldrb	r3, [r7, #17]
 80029c8:	f003 030f 	and.w	r3, r3, #15
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4b5d      	ldr	r3, [pc, #372]	; (8002b44 <HID_Device_USBTask+0x1ac>)
 80029d0:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80029d4:	7c7b      	ldrb	r3, [r7, #17]
 80029d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	4b59      	ldr	r3, [pc, #356]	; (8002b44 <HID_Device_USBTask+0x1ac>)
 80029de:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

	if (Endpoint_IsReadWriteAllowed())
 80029e2:	f000 fa67 	bl	8002eb4 <Endpoint_IsReadWriteAllowed>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80a5 	beq.w	8002b38 <HID_Device_USBTask+0x1a0>
	{
 80029ee:	466b      	mov	r3, sp
 80029f0:	461d      	mov	r5, r3
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	7b18      	ldrb	r0, [r3, #12]
 80029f6:	4603      	mov	r3, r0
 80029f8:	3b01      	subs	r3, #1
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	b2c1      	uxtb	r1, r0
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	f04f 0400 	mov.w	r4, #0
 8002a0a:	00d4      	lsls	r4, r2, #3
 8002a0c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002a10:	00cb      	lsls	r3, r1, #3
 8002a12:	b2c1      	uxtb	r1, r0
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	00d4      	lsls	r4, r2, #3
 8002a22:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002a26:	00cb      	lsls	r3, r1, #3
 8002a28:	4603      	mov	r3, r0
 8002a2a:	3307      	adds	r3, #7
 8002a2c:	08db      	lsrs	r3, r3, #3
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	ebad 0d03 	sub.w	sp, sp, r3
 8002a34:	ab02      	add	r3, sp, #8
 8002a36:	3300      	adds	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
		uint8_t  ReportID     = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73fb      	strb	r3, [r7, #15]
		uint16_t ReportINSize = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	81bb      	strh	r3, [r7, #12]

		memset(ReportINData, 0, sizeof(ReportINData));
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	4602      	mov	r2, r0
 8002a46:	2100      	movs	r1, #0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f004 f8a7 	bl	8006b9c <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	f107 010f 	add.w	r1, r7, #15
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fd fd06 	bl	8000470 <CALLBACK_HID_Device_CreateHIDReport>
 8002a64:	4603      	mov	r3, r0
 8002a66:	74fb      	strb	r3, [r7, #19]
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	77fb      	strb	r3, [r7, #31]
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	8a9b      	ldrh	r3, [r3, #20]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HID_Device_USBTask+0xe8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8adb      	ldrh	r3, [r3, #22]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HID_Device_USBTask+0xe8>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HID_Device_USBTask+0xea>
 8002a80:	2300      	movs	r3, #0
 8002a82:	74bb      	strb	r3, [r7, #18]
 8002a84:	7cbb      	ldrb	r3, [r7, #18]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	74bb      	strb	r3, [r7, #18]

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d014      	beq.n	8002abe <HID_Device_USBTask+0x126>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
 8002a94:	6978      	ldr	r0, [r7, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	89ba      	ldrh	r2, [r7, #12]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f003 ffb1 	bl	8006a04 <memcmp>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf14      	ite	ne
 8002aa8:	2301      	movne	r3, #1
 8002aaa:	2300      	moveq	r3, #0
 8002aac:	77fb      	strb	r3, [r7, #31]
			MEMCPY(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6898      	ldr	r0, [r3, #8]
 8002ab2:	6979      	ldr	r1, [r7, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7b1b      	ldrb	r3, [r3, #12]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	f000 f845 	bl	8002b48 <thumb2_memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 8002abe:	89bb      	ldrh	r3, [r7, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d02c      	beq.n	8002b1e <HID_Device_USBTask+0x186>
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d105      	bne.n	8002ad6 <HID_Device_USBTask+0x13e>
 8002aca:	7ffb      	ldrb	r3, [r7, #31]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d102      	bne.n	8002ad6 <HID_Device_USBTask+0x13e>
 8002ad0:	7cbb      	ldrb	r3, [r7, #18]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d023      	beq.n	8002b1e <HID_Device_USBTask+0x186>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	8a9a      	ldrh	r2, [r3, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	82da      	strh	r2, [r3, #22]

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	789b      	ldrb	r3, [r3, #2]
 8002ae2:	743b      	strb	r3, [r7, #16]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002ae4:	7c3b      	ldrb	r3, [r7, #16]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <HID_Device_USBTask+0x1ac>)
 8002aee:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002af2:	7c3b      	ldrb	r3, [r7, #16]
 8002af4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <HID_Device_USBTask+0x1ac>)
 8002afc:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

			if (ReportID)
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HID_Device_USBTask+0x176>
			  Endpoint_Write_8(ReportID);
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 fa05 	bl	8002f18 <Endpoint_Write_8>

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	89b9      	ldrh	r1, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fb7f 	bl	8003218 <Endpoint_Write_Stream_LE>

			Endpoint_ClearIN();
 8002b1a:	f000 f953 	bl	8002dc4 <Endpoint_ClearIN>
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <HID_Device_USBTask+0x1ac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	4798      	blx	r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	461a      	mov	r2, r3
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	825a      	strh	r2, [r3, #18]
 8002b2e:	46ad      	mov	sp, r5
 8002b30:	e002      	b.n	8002b38 <HID_Device_USBTask+0x1a0>
	  return;
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <HID_Device_USBTask+0x1a0>
		return;
 8002b36:	bf00      	nop
	}
}
 8002b38:	3720      	adds	r7, #32
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200012bd 	.word	0x200012bd
 8002b44:	20000f70 	.word	0x20000f70

08002b48 <thumb2_memcpy>:
   stack to improve its performance.  It copies 4 bytes at a time and
   unrolls the loop to perform 4 of these copies per loop iteration.
*/
__attribute__((naked)) void thumb2_memcpy(void* pDest, const void* pSource, size_t length)
{
    __asm (
 8002b48:	0913      	lsrs	r3, r2, #4
 8002b4a:	d011      	beq.n	8002b70 <thumb2_memcpy+0x28>
 8002b4c:	f851 cb04 	ldr.w	ip, [r1], #4
 8002b50:	f840 cb04 	str.w	ip, [r0], #4
 8002b54:	f851 cb04 	ldr.w	ip, [r1], #4
 8002b58:	f840 cb04 	str.w	ip, [r0], #4
 8002b5c:	f851 cb04 	ldr.w	ip, [r1], #4
 8002b60:	f840 cb04 	str.w	ip, [r0], #4
 8002b64:	f851 cb04 	ldr.w	ip, [r1], #4
 8002b68:	f840 cb04 	str.w	ip, [r0], #4
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	d1ed      	bne.n	8002b4c <thumb2_memcpy+0x4>
 8002b70:	f012 030f 	ands.w	r3, r2, #15
 8002b74:	d005      	beq.n	8002b82 <thumb2_memcpy+0x3a>
 8002b76:	f811 cb01 	ldrb.w	ip, [r1], #1
 8002b7a:	f800 cb01 	strb.w	ip, [r0], #1
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	d1f9      	bne.n	8002b76 <thumb2_memcpy+0x2e>
 8002b82:	4770      	bx	lr
        "    bne     3$\n"

        // Return to caller.
        "4$: bx      lr\n"
    );
}
 8002b84:	bf00      	nop
	...

08002b88 <__NVIC_EnableIRQ>:
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	db0b      	blt.n	8002bb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4907      	ldr	r1, [pc, #28]	; (8002bc0 <__NVIC_EnableIRQ+0x38>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2001      	movs	r0, #1
 8002baa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000e100 	.word	0xe000e100

08002bc4 <__NVIC_DisableIRQ>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	db10      	blt.n	8002bf8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	f003 021f 	and.w	r2, r3, #31
 8002bdc:	4909      	ldr	r1, [pc, #36]	; (8002c04 <__NVIC_DisableIRQ+0x40>)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	2001      	movs	r0, #1
 8002be6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bea:	3320      	adds	r3, #32
 8002bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002bf0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002bf4:	f3bf 8f6f 	isb	sy
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000e100 	.word	0xe000e100

08002c08 <Endpoint_WaitUntilReady>:
#define USB_STREAM_TIMEOUT_MS 100

extern volatile uint8_t zlp_flag;

uint8_t Endpoint_WaitUntilReady(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 8002c0e:	2364      	movs	r3, #100	; 0x64
 8002c10:	75fb      	strb	r3, [r7, #23]
			 *  \return Current USB frame number from the USB controller.
			 */
    
            static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE;
            static inline uint16_t USB_Device_GetFrameNumber(void) {
                return device.Driver->GetFrameNumber();
 8002c12:	4b44      	ldr	r3, [pc, #272]	; (8002d24 <Endpoint_WaitUntilReady+0x11c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	4798      	blx	r3
 8002c1a:	4603      	mov	r3, r0
	#else
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();
 8002c1c:	82bb      	strh	r3, [r7, #20]
	 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002c1e:	4b41      	ldr	r3, [pc, #260]	; (8002d24 <Endpoint_WaitUntilReady+0x11c>)
 8002c20:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002c24:	461a      	mov	r2, r3
 8002c26:	232c      	movs	r3, #44	; 0x2c
 8002c28:	fb03 f302 	mul.w	r3, r3, r2
 8002c2c:	4a3d      	ldr	r2, [pc, #244]	; (8002d24 <Endpoint_WaitUntilReady+0x11c>)
 8002c2e:	4413      	add	r3, r2
 8002c30:	3304      	adds	r3, #4
 8002c32:	60fb      	str	r3, [r7, #12]
		return ep->Address & ENDPOINT_DIR_MASK;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c3c:	b2db      	uxtb	r3, r3

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 8002c3e:	2b80      	cmp	r3, #128	; 0x80
 8002c40:	d122      	bne.n	8002c88 <Endpoint_WaitUntilReady+0x80>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002c42:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <Endpoint_WaitUntilReady+0x11c>)
 8002c44:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002c48:	461a      	mov	r2, r3
 8002c4a:	232c      	movs	r3, #44	; 0x2c
 8002c4c:	fb03 f302 	mul.w	r3, r3, r2
 8002c50:	4a34      	ldr	r2, [pc, #208]	; (8002d24 <Endpoint_WaitUntilReady+0x11c>)
 8002c52:	4413      	add	r3, r2
 8002c54:	3304      	adds	r3, #4
 8002c56:	60bb      	str	r3, [r7, #8]
		return ep->InInUse == 0 && ep->IsEnabled;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d108      	bne.n	8002c78 <Endpoint_WaitUntilReady+0x70>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	791b      	ldrb	r3, [r3, #4]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <Endpoint_WaitUntilReady+0x70>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <Endpoint_WaitUntilReady+0x72>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	b2db      	uxtb	r3, r3
		{
			if (Endpoint_IsINReady())
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d01a      	beq.n	8002cba <Endpoint_WaitUntilReady+0xb2>
			  return ENDPOINT_READYWAIT_NoError;
 8002c84:	2300      	movs	r3, #0
 8002c86:	e048      	b.n	8002d1a <Endpoint_WaitUntilReady+0x112>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002c88:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <Endpoint_WaitUntilReady+0x11c>)
 8002c8a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002c8e:	461a      	mov	r2, r3
 8002c90:	232c      	movs	r3, #44	; 0x2c
 8002c92:	fb03 f302 	mul.w	r3, r3, r2
 8002c96:	4a23      	ldr	r2, [pc, #140]	; (8002d24 <Endpoint_WaitUntilReady+0x11c>)
 8002c98:	4413      	add	r3, r2
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	607b      	str	r3, [r7, #4]
		return ep->IsOutRecieved;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf14      	ite	ne
 8002cac:	2301      	movne	r3, #1
 8002cae:	2300      	moveq	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <Endpoint_WaitUntilReady+0xb2>
			  return ENDPOINT_READYWAIT_NoError;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e02f      	b.n	8002d1a <Endpoint_WaitUntilReady+0x112>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8002cba:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <Endpoint_WaitUntilReady+0x120>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	74fb      	strb	r3, [r7, #19]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <Endpoint_WaitUntilReady+0xc2>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e027      	b.n	8002d1a <Endpoint_WaitUntilReady+0x112>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8002cca:	7cfb      	ldrb	r3, [r7, #19]
 8002ccc:	2b05      	cmp	r3, #5
 8002cce:	d101      	bne.n	8002cd4 <Endpoint_WaitUntilReady+0xcc>
		  return ENDPOINT_READYWAIT_BusSuspended;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e022      	b.n	8002d1a <Endpoint_WaitUntilReady+0x112>
	 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
	 */
	static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsStalled(void)
	{
		return device.Endpoints[device.CurrentEndpoint].IsHalted == 1 ? true : false;
 8002cd4:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <Endpoint_WaitUntilReady+0x11c>)
 8002cd6:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4a11      	ldr	r2, [pc, #68]	; (8002d24 <Endpoint_WaitUntilReady+0x11c>)
 8002cde:	232c      	movs	r3, #44	; 0x2c
 8002ce0:	fb03 f301 	mul.w	r3, r3, r1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	7a1b      	ldrb	r3, [r3, #8]
 8002ce8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002cec:	b2db      	uxtb	r3, r3
		else if (Endpoint_IsStalled())
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <Endpoint_WaitUntilReady+0xee>
		  return ENDPOINT_READYWAIT_EndpointStalled;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e011      	b.n	8002d1a <Endpoint_WaitUntilReady+0x112>
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <Endpoint_WaitUntilReady+0x11c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	4798      	blx	r3
 8002cfe:	4603      	mov	r3, r0

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();
 8002d00:	823b      	strh	r3, [r7, #16]

		if (CurrentFrameNumber != PreviousFrameNumber)
 8002d02:	8a3a      	ldrh	r2, [r7, #16]
 8002d04:	8abb      	ldrh	r3, [r7, #20]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d089      	beq.n	8002c1e <Endpoint_WaitUntilReady+0x16>
		{
			PreviousFrameNumber = CurrentFrameNumber;
 8002d0a:	8a3b      	ldrh	r3, [r7, #16]
 8002d0c:	82bb      	strh	r3, [r7, #20]

			if (!(TimeoutMSRem--))
 8002d0e:	7dfb      	ldrb	r3, [r7, #23]
 8002d10:	1e5a      	subs	r2, r3, #1
 8002d12:	75fa      	strb	r2, [r7, #23]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d182      	bne.n	8002c1e <Endpoint_WaitUntilReady+0x16>
			  return ENDPOINT_READYWAIT_Timeout;
 8002d18:	2304      	movs	r3, #4
		}
	}
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000f70 	.word	0x20000f70
 8002d28:	200012bd 	.word	0x200012bd

08002d2c <Endpoint_ClearOUT>:

void Endpoint_ClearOUT(void) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002d32:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <Endpoint_ClearOUT+0x94>)
 8002d34:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002d38:	461a      	mov	r2, r3
 8002d3a:	232c      	movs	r3, #44	; 0x2c
 8002d3c:	fb03 f302 	mul.w	r3, r3, r2
 8002d40:	4a1f      	ldr	r2, [pc, #124]	; (8002dc0 <Endpoint_ClearOUT+0x94>)
 8002d42:	4413      	add	r3, r2
 8002d44:	3304      	adds	r3, #4
 8002d46:	607b      	str	r3, [r7, #4]
	/* if we have data left which isn't read yet, we leave this routine to not override it */
	if (ep->IsEnabled == 0)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	791b      	ldrb	r3, [r3, #4]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d02f      	beq.n	8002db6 <Endpoint_ClearOUT+0x8a>
		return;
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8002d56:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <Endpoint_ClearOUT+0x94>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	7810      	ldrb	r0, [r2, #0]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6911      	ldr	r1, [r2, #16]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6952      	ldr	r2, [r2, #20]
 8002d68:	4798      	blx	r3
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	609a      	str	r2, [r3, #8]
	ep->OutOffset = 0;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	60da      	str	r2, [r3, #12]
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) {
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d118      	bne.n	8002db8 <Endpoint_ClearOUT+0x8c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d114      	bne.n	8002db8 <Endpoint_ClearOUT+0x8c>
		ep->OutInUse = true;
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	8893      	ldrh	r3, [r2, #4]
 8002d92:	f043 0308 	orr.w	r3, r3, #8
 8002d96:	8093      	strh	r3, [r2, #4]
		ep->IsOutRecieved = 0;
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	8893      	ldrh	r3, [r2, #4]
 8002d9c:	f36f 1345 	bfc	r3, #5, #1
 8002da0:	8093      	strh	r3, [r2, #4]
		device.Driver->EndpointReadStart(ep->Address,
 8002da2:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <Endpoint_ClearOUT+0x94>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	7810      	ldrb	r0, [r2, #0]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6952      	ldr	r2, [r2, #20]
 8002db0:	4611      	mov	r1, r2
 8002db2:	4798      	blx	r3
 8002db4:	e000      	b.n	8002db8 <Endpoint_ClearOUT+0x8c>
		return;
 8002db6:	bf00      	nop
				ep->OutBufferLength);
	}
}
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000f70 	.word	0x20000f70

08002dc4 <Endpoint_ClearIN>:

void Endpoint_ClearIN(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002dca:	4b38      	ldr	r3, [pc, #224]	; (8002eac <Endpoint_ClearIN+0xe8>)
 8002dcc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	232c      	movs	r3, #44	; 0x2c
 8002dd4:	fb03 f302 	mul.w	r3, r3, r2
 8002dd8:	4a34      	ldr	r2, [pc, #208]	; (8002eac <Endpoint_ClearIN+0xe8>)
 8002dda:	4413      	add	r3, r2
 8002ddc:	3304      	adds	r3, #4
 8002dde:	607b      	str	r3, [r7, #4]
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d059      	beq.n	8002ea2 <Endpoint_ClearIN+0xde>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	791b      	ldrb	r3, [r3, #4]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d052      	beq.n	8002ea2 <Endpoint_ClearIN+0xde>
		return;
	ep->InInUse = true;
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	8893      	ldrh	r3, [r2, #4]
 8002e00:	f043 0310 	orr.w	r3, r3, #16
 8002e04:	8093      	strh	r3, [r2, #4]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft = ep->InBytesAvailable;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24
	ep->InBytesAvailable = 0;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	619a      	str	r2, [r3, #24]
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
 8002e1c:	206b      	movs	r0, #107	; 0x6b
 8002e1e:	f7ff fed1 	bl	8002bc4 <__NVIC_DisableIRQ>
	data_count = device.Driver->EndpointWrite(ep->Address,
 8002e22:	4b22      	ldr	r3, [pc, #136]	; (8002eac <Endpoint_ClearIN+0xe8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	7810      	ldrb	r0, [r2, #0]
			ep->InDataBuffer,ep->InDataLeft);
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6a91      	ldr	r1, [r2, #40]	; 0x28
	data_count = device.Driver->EndpointWrite(ep->Address,
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e34:	4798      	blx	r3
 8002e36:	6038      	str	r0, [r7, #0]
	ep->InDataBuffer += data_count;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	441a      	add	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft -= data_count;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	1ad2      	subs	r2, r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24
	NVIC_EnableIRQ(USB0_0_IRQn);
 8002e50:	206b      	movs	r0, #107	; 0x6b
 8002e52:	f7ff fe99 	bl	8002b88 <__NVIC_EnableIRQ>
	if((zlp_flag == true) && (ep->Number != 0))
 8002e56:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <Endpoint_ClearIN+0xec>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d121      	bne.n	8002ea4 <Endpoint_ClearIN+0xe0>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01a      	beq.n	8002ea4 <Endpoint_ClearIN+0xe0>
	{
		/*Send a ZLP from here*/
	  while(ep->InInUse)
 8002e6e:	bf00      	nop
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f8      	bne.n	8002e70 <Endpoint_ClearIN+0xac>
	  {
		;
	  }
	  ep->InInUse = true;
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	8893      	ldrh	r3, [r2, #4]
 8002e82:	f043 0310 	orr.w	r3, r3, #16
 8002e86:	8093      	strh	r3, [r2, #4]
	  device.Driver->EndpointWrite(ep->Address,
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <Endpoint_ClearIN+0xe8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	7810      	ldrb	r0, [r2, #0]
	  			ep->InDataBuffer,0);
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6a91      	ldr	r1, [r2, #40]	; 0x28
	  device.Driver->EndpointWrite(ep->Address,
 8002e96:	2200      	movs	r2, #0
 8002e98:	4798      	blx	r3
	  zlp_flag = false;
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <Endpoint_ClearIN+0xec>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e000      	b.n	8002ea4 <Endpoint_ClearIN+0xe0>
		return;
 8002ea2:	bf00      	nop
	}
}
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000f70 	.word	0x20000f70
 8002eb0:	20000ca4 	.word	0x20000ca4

08002eb4 <Endpoint_IsReadWriteAllowed>:

bool Endpoint_IsReadWriteAllowed(void) {
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002eba:	4b16      	ldr	r3, [pc, #88]	; (8002f14 <Endpoint_IsReadWriteAllowed+0x60>)
 8002ebc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	232c      	movs	r3, #44	; 0x2c
 8002ec4:	fb03 f302 	mul.w	r3, r3, r2
 8002ec8:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <Endpoint_IsReadWriteAllowed+0x60>)
 8002eca:	4413      	add	r3, r2
 8002ecc:	3304      	adds	r3, #4
 8002ece:	603b      	str	r3, [r7, #0]
	bool Retval = false;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	71fb      	strb	r3, [r7, #7]

	if(EndPoint->Direction)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <Endpoint_IsReadWriteAllowed+0x42>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength) ? true : false;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	bf34      	ite	cc
 8002eee:	2301      	movcc	r3, #1
 8002ef0:	2300      	movcs	r3, #0
 8002ef2:	71fb      	strb	r3, [r7, #7]
 8002ef4:	e006      	b.n	8002f04 <Endpoint_IsReadWriteAllowed+0x50>
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	bf14      	ite	ne
 8002efe:	2301      	movne	r3, #1
 8002f00:	2300      	moveq	r3, #0
 8002f02:	71fb      	strb	r3, [r7, #7]
	}
	return Retval;
 8002f04:	79fb      	ldrb	r3, [r7, #7]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000f70 	.word	0x20000f70

08002f18 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71fb      	strb	r3, [r7, #7]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002f22:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <Endpoint_Write_8+0x64>)
 8002f24:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002f28:	461a      	mov	r2, r3
 8002f2a:	232c      	movs	r3, #44	; 0x2c
 8002f2c:	fb03 f302 	mul.w	r3, r3, r2
 8002f30:	4a12      	ldr	r2, [pc, #72]	; (8002f7c <Endpoint_Write_8+0x64>)
 8002f32:	4413      	add	r3, r2
 8002f34:	3304      	adds	r3, #4
 8002f36:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	73fb      	strb	r3, [r7, #15]

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	699a      	ldr	r2, [r3, #24]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d20d      	bcs.n	8002f64 <Endpoint_Write_8+0x4c>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	69da      	ldr	r2, [r3, #28]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	4413      	add	r3, r2
 8002f52:	79fa      	ldrb	r2, [r7, #7]
 8002f54:	701a      	strb	r2, [r3, #0]
	      EndPoint->InBytesAvailable++;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	619a      	str	r2, [r3, #24]

	      Success = true;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
	    }
	  }while(!Success);
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	f083 0301 	eor.w	r3, r3, #1
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e5      	bne.n	8002f3c <Endpoint_Write_8+0x24>
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	20000f70 	.word	0x20000f70

08002f80 <Endpoint_Read_8>:

uint8_t Endpoint_Read_8(void) {
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002f86:	4b19      	ldr	r3, [pc, #100]	; (8002fec <Endpoint_Read_8+0x6c>)
 8002f88:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	232c      	movs	r3, #44	; 0x2c
 8002f90:	fb03 f302 	mul.w	r3, r3, r2
 8002f94:	4a15      	ldr	r2, [pc, #84]	; (8002fec <Endpoint_Read_8+0x6c>)
 8002f96:	4413      	add	r3, r2
 8002f98:	3304      	adds	r3, #4
 8002f9a:	603b      	str	r3, [r7, #0]
	bool Success = false;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	71bb      	strb	r3, [r7, #6]
	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d012      	beq.n	8002fd2 <Endpoint_Read_8+0x52>
		{
          data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	71bb      	strb	r3, [r7, #6]
          EndPoint->OutOffset++;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	60da      	str	r2, [r3, #12]
          EndPoint->OutBytesAvailable--;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	1e5a      	subs	r2, r3, #1
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	609a      	str	r2, [r3, #8]
		  Success = true;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	71fb      	strb	r3, [r7, #7]
		}
	  }while(!Success);
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	f083 0301 	eor.w	r3, r3, #1
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1e2      	bne.n	8002fa4 <Endpoint_Read_8+0x24>
	 return data;
 8002fde:	79bb      	ldrb	r3, [r7, #6]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	20000f70 	.word	0x20000f70

08002ff0 <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002ff8:	4b16      	ldr	r3, [pc, #88]	; (8003054 <Endpoint_Write_32_LE+0x64>)
 8002ffa:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002ffe:	461a      	mov	r2, r3
 8003000:	232c      	movs	r3, #44	; 0x2c
 8003002:	fb03 f302 	mul.w	r3, r3, r2
 8003006:	4a13      	ldr	r2, [pc, #76]	; (8003054 <Endpoint_Write_32_LE+0x64>)
 8003008:	4413      	add	r3, r2
 800300a:	3304      	adds	r3, #4
 800300c:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 800300e:	2300      	movs	r3, #0
 8003010:	73fb      	strb	r3, [r7, #15]

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	3b03      	subs	r3, #3
 800301c:	429a      	cmp	r2, r3
 800301e:	d20d      	bcs.n	800303c <Endpoint_Write_32_LE+0x4c>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) = Data;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	69da      	ldr	r2, [r3, #28]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	4413      	add	r3, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	601a      	str	r2, [r3, #0]
			EndPoint->InBytesAvailable+=4;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	1d1a      	adds	r2, r3, #4
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	619a      	str	r2, [r3, #24]

			Success = true;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
		}
	}while(!Success);
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	f083 0301 	eor.w	r3, r3, #1
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1e4      	bne.n	8003012 <Endpoint_Write_32_LE+0x22>
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	20000f70 	.word	0x20000f70

08003058 <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE(void) {
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 800305e:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <Endpoint_Read_32_LE+0x6c>)
 8003060:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003064:	461a      	mov	r2, r3
 8003066:	232c      	movs	r3, #44	; 0x2c
 8003068:	fb03 f302 	mul.w	r3, r3, r2
 800306c:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <Endpoint_Read_32_LE+0x6c>)
 800306e:	4413      	add	r3, r2
 8003070:	3304      	adds	r3, #4
 8003072:	607b      	str	r3, [r7, #4]
	bool Success = false;
 8003074:	2300      	movs	r3, #0
 8003076:	73fb      	strb	r3, [r7, #15]
	uint32_t data = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	60bb      	str	r3, [r7, #8]

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d912      	bls.n	80030aa <Endpoint_Read_32_LE+0x52>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4413      	add	r3, r2
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60bb      	str	r3, [r7, #8]
			EndPoint->OutOffset+=4;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	1d1a      	adds	r2, r3, #4
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	60da      	str	r2, [r3, #12]
			EndPoint->OutBytesAvailable-=4;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	1f1a      	subs	r2, r3, #4
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	609a      	str	r2, [r3, #8]

			Success = true;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
		}
	} while(!Success);
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	f083 0301 	eor.w	r3, r3, #1
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e2      	bne.n	800307c <Endpoint_Read_32_LE+0x24>
	return data;
 80030b6:	68bb      	ldr	r3, [r7, #8]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	20000f70 	.word	0x20000f70

080030c8 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 80030d4:	2300      	movs	r3, #0
 80030d6:	73fb      	strb	r3, [r7, #15]
 80030d8:	e091      	b.n	80031fe <Endpoint_ConfigureEndpointTable+0x136>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	4613      	mov	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	461a      	mov	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	73bb      	strb	r3, [r7, #14]
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 80030f2:	4b48      	ldr	r3, [pc, #288]	; (8003214 <Endpoint_ConfigureEndpointTable+0x14c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69dc      	ldr	r4, [r3, #28]
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	461a      	mov	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4413      	add	r3, r2
 8003108:	7818      	ldrb	r0, [r3, #0]
 800310a:	7bfa      	ldrb	r2, [r7, #15]
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	461a      	mov	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4413      	add	r3, r2
 800311a:	7919      	ldrb	r1, [r3, #4]
 800311c:	7bfa      	ldrb	r2, [r7, #15]
 800311e:	4613      	mov	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4413      	add	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	461a      	mov	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4413      	add	r3, r2
 800312c:	885b      	ldrh	r3, [r3, #2]
 800312e:	461a      	mov	r2, r3
 8003130:	47a0      	blx	r4
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <Endpoint_ConfigureEndpointTable+0x74>
			return false;
 8003138:	2300      	movs	r3, #0
 800313a:	e066      	b.n	800320a <Endpoint_ConfigureEndpointTable+0x142>
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 800313c:	7bfa      	ldrb	r2, [r7, #15]
 800313e:	4613      	mov	r3, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	4413      	add	r3, r2
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	461a      	mov	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	441a      	add	r2, r3
 800314c:	7bbb      	ldrb	r3, [r7, #14]
 800314e:	7810      	ldrb	r0, [r2, #0]
 8003150:	4a30      	ldr	r2, [pc, #192]	; (8003214 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003152:	212c      	movs	r1, #44	; 0x2c
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4413      	add	r3, r2
 800315a:	3304      	adds	r3, #4
 800315c:	4602      	mov	r2, r0
 800315e:	701a      	strb	r2, [r3, #0]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	4613      	mov	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4413      	add	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	461a      	mov	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4413      	add	r3, r2
 8003170:	885a      	ldrh	r2, [r3, #2]
 8003172:	7bbb      	ldrb	r3, [r7, #14]
 8003174:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003178:	b2d1      	uxtb	r1, r2
 800317a:	4a26      	ldr	r2, [pc, #152]	; (8003214 <Endpoint_ConfigureEndpointTable+0x14c>)
 800317c:	202c      	movs	r0, #44	; 0x2c
 800317e:	fb00 f303 	mul.w	r3, r0, r3
 8003182:	441a      	add	r2, r3
 8003184:	8913      	ldrh	r3, [r2, #8]
 8003186:	f361 138c 	bfi	r3, r1, #6, #7
 800318a:	8113      	strh	r3, [r2, #8]
		device.Endpoints[Number].IsConfigured = 1;
 800318c:	7bbb      	ldrb	r3, [r7, #14]
 800318e:	4a21      	ldr	r2, [pc, #132]	; (8003214 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	441a      	add	r2, r3
 8003198:	7a13      	ldrb	r3, [r2, #8]
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	7213      	strb	r3, [r2, #8]
		device.Endpoints[Number].IsEnabled = 1;
 80031a0:	7bbb      	ldrb	r3, [r7, #14]
 80031a2:	4a1c      	ldr	r2, [pc, #112]	; (8003214 <Endpoint_ConfigureEndpointTable+0x14c>)
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	441a      	add	r2, r3
 80031ac:	7a13      	ldrb	r3, [r2, #8]
 80031ae:	f043 0302 	orr.w	r3, r3, #2
 80031b2:	7213      	strb	r3, [r2, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	4613      	mov	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	461a      	mov	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4413      	add	r3, r2
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	b25b      	sxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	db15      	blt.n	80031f8 <Endpoint_ConfigureEndpointTable+0x130>
			device.Driver->EndpointReadStart(Table[i].Address,
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <Endpoint_ConfigureEndpointTable+0x14c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	461a      	mov	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	7818      	ldrb	r0, [r3, #0]
 80031e4:	7bbb      	ldrb	r3, [r7, #14]
 80031e6:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <Endpoint_ConfigureEndpointTable+0x14c>)
 80031e8:	212c      	movs	r1, #44	; 0x2c
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	3318      	adds	r3, #24
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4619      	mov	r1, r3
 80031f6:	47a0      	blx	r4
	for (i=0;i<Entries;i++) {
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	3301      	adds	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
 80031fe:	7bfa      	ldrb	r2, [r7, #15]
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	429a      	cmp	r2, r3
 8003204:	f4ff af69 	bcc.w	80030da <Endpoint_ConfigureEndpointTable+0x12>
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 8003208:	2301      	movs	r3, #1
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	bd90      	pop	{r4, r7, pc}
 8003212:	bf00      	nop
 8003214:	20000f70 	.word	0x20000f70

08003218 <Endpoint_Write_Stream_LE>:

#if defined(USB_CAN_BE_DEVICE)

#include "EndpointStream_XMC4000.h"

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed)  {
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	460b      	mov	r3, r1
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003226:	4b3f      	ldr	r3, [pc, #252]	; (8003324 <Endpoint_Write_Stream_LE+0x10c>)
 8003228:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800322c:	461a      	mov	r2, r3
 800322e:	232c      	movs	r3, #44	; 0x2c
 8003230:	fb03 f302 	mul.w	r3, r3, r2
 8003234:	4a3b      	ldr	r2, [pc, #236]	; (8003324 <Endpoint_Write_Stream_LE+0x10c>)
 8003236:	4413      	add	r3, r2
 8003238:	3304      	adds	r3, #4
 800323a:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;
	uint16_t prev_length = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	83bb      	strh	r3, [r7, #28]
	if (BytesProcessed!=NULL) {
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d052      	beq.n	80032f4 <Endpoint_Write_Stream_LE+0xdc>
		Length -= *BytesProcessed;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	897a      	ldrh	r2, [r7, #10]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 800325e:	e049      	b.n	80032f4 <Endpoint_Write_Stream_LE+0xdc>
		if (ep->InInUse)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d000      	beq.n	8003270 <Endpoint_Write_Stream_LE+0x58>
			continue;
 800326e:	e041      	b.n	80032f4 <Endpoint_Write_Stream_LE+0xdc>
		if (Endpoint_IsReadWriteAllowed()) {
 8003270:	f7ff fe20 	bl	8002eb4 <Endpoint_IsReadWriteAllowed>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d029      	beq.n	80032ce <Endpoint_Write_Stream_LE+0xb6>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	6a1a      	ldr	r2, [r3, #32]
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	1ad2      	subs	r2, r2, r3
 8003284:	897b      	ldrh	r3, [r7, #10]
 8003286:	4293      	cmp	r3, r2
 8003288:	bf28      	it	cs
 800328a:	4613      	movcs	r3, r2
 800328c:	82fb      	strh	r3, [r7, #22]
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	461a      	mov	r2, r3
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	4413      	add	r3, r2
 800329a:	4618      	mov	r0, r3
 800329c:	8bfa      	ldrh	r2, [r7, #30]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4413      	add	r3, r2
 80032a2:	4619      	mov	r1, r3
 80032a4:	8afb      	ldrh	r3, [r7, #22]
 80032a6:	461a      	mov	r2, r3
 80032a8:	f7ff fc4e 	bl	8002b48 <thumb2_memcpy>
			ep->InBytesAvailable += Bytes;
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	699a      	ldr	r2, [r3, #24]
 80032b0:	8afb      	ldrh	r3, [r7, #22]
 80032b2:	441a      	add	r2, r3
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 80032b8:	8bfa      	ldrh	r2, [r7, #30]
 80032ba:	8afb      	ldrh	r3, [r7, #22]
 80032bc:	4413      	add	r3, r2
 80032be:	83fb      	strh	r3, [r7, #30]
			prev_length = Length;
 80032c0:	897b      	ldrh	r3, [r7, #10]
 80032c2:	83bb      	strh	r3, [r7, #28]
			Length -= Bytes;
 80032c4:	897a      	ldrh	r2, [r7, #10]
 80032c6:	8afb      	ldrh	r3, [r7, #22]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	817b      	strh	r3, [r7, #10]
 80032cc:	e012      	b.n	80032f4 <Endpoint_Write_Stream_LE+0xdc>
		}
		else {
			Endpoint_ClearIN();
 80032ce:	f7ff fd79 	bl	8002dc4 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d004      	beq.n	80032e2 <Endpoint_Write_Stream_LE+0xca>
				*BytesProcessed = BytesTransfered;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8bfa      	ldrh	r2, [r7, #30]
 80032dc:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 80032de:	2305      	movs	r3, #5
 80032e0:	e01b      	b.n	800331a <Endpoint_Write_Stream_LE+0x102>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 80032e2:	f7ff fc91 	bl	8002c08 <Endpoint_WaitUntilReady>
 80032e6:	4603      	mov	r3, r0
 80032e8:	757b      	strb	r3, [r7, #21]
 80032ea:	7d7b      	ldrb	r3, [r7, #21]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <Endpoint_Write_Stream_LE+0xdc>
				return ErrorCode;
 80032f0:	7d7b      	ldrb	r3, [r7, #21]
 80032f2:	e012      	b.n	800331a <Endpoint_Write_Stream_LE+0x102>
	while (Length) {
 80032f4:	897b      	ldrh	r3, [r7, #10]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1b2      	bne.n	8003260 <Endpoint_Write_Stream_LE+0x48>


		}
	}
	
	if((Length == 0) && (prev_length == ep->MaxPacketSize))
 80032fa:	897b      	ldrh	r3, [r7, #10]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10b      	bne.n	8003318 <Endpoint_Write_Stream_LE+0x100>
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	889b      	ldrh	r3, [r3, #4]
 8003304:	f3c3 1386 	ubfx	r3, r3, #6, #7
 8003308:	b2db      	uxtb	r3, r3
 800330a:	b29b      	uxth	r3, r3
 800330c:	8bba      	ldrh	r2, [r7, #28]
 800330e:	429a      	cmp	r2, r3
 8003310:	d102      	bne.n	8003318 <Endpoint_Write_Stream_LE+0x100>
	{
	   zlp_flag = true;
 8003312:	4b05      	ldr	r3, [pc, #20]	; (8003328 <Endpoint_Write_Stream_LE+0x110>)
 8003314:	2201      	movs	r2, #1
 8003316:	701a      	strb	r2, [r3, #0]
	}
	return ENDPOINT_RWSTREAM_NoError;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3720      	adds	r7, #32
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000f70 	.word	0x20000f70
 8003328:	20000ca4 	.word	0x20000ca4

0800332c <SwapCopy>:

void SwapCopy(void *const Dest, const void *const Src,uint32_t Length) {
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]
	while(i<Length) {
 800333c:	e00e      	b.n	800335c <SwapCopy+0x30>
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	4413      	add	r3, r2
 8003344:	4619      	mov	r1, r3
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	1ad2      	subs	r2, r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	3b01      	subs	r3, #1
 8003352:	780a      	ldrb	r2, [r1, #0]
 8003354:	701a      	strb	r2, [r3, #0]
		i++;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	3301      	adds	r3, #1
 800335a:	617b      	str	r3, [r7, #20]
	while(i<Length) {
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	429a      	cmp	r2, r3
 8003362:	d3ec      	bcc.n	800333e <SwapCopy+0x12>
	}
}
 8003364:	bf00      	nop
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <Endpoint_Write_Stream_BE>:
uint8_t	Endpoint_Write_Stream_BE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	460b      	mov	r3, r1
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 800337e:	4b35      	ldr	r3, [pc, #212]	; (8003454 <Endpoint_Write_Stream_BE+0xe4>)
 8003380:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003384:	461a      	mov	r2, r3
 8003386:	232c      	movs	r3, #44	; 0x2c
 8003388:	fb03 f302 	mul.w	r3, r3, r2
 800338c:	4a31      	ldr	r2, [pc, #196]	; (8003454 <Endpoint_Write_Stream_BE+0xe4>)
 800338e:	4413      	add	r3, r2
 8003390:	3304      	adds	r3, #4
 8003392:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d050      	beq.n	8003444 <Endpoint_Write_Stream_BE+0xd4>
		Length -= *BytesProcessed;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	897a      	ldrh	r2, [r7, #10]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 80033b2:	e047      	b.n	8003444 <Endpoint_Write_Stream_BE+0xd4>
		if (ep->InInUse)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d000      	beq.n	80033c4 <Endpoint_Write_Stream_BE+0x54>
			continue;
 80033c2:	e03f      	b.n	8003444 <Endpoint_Write_Stream_BE+0xd4>
		if (Endpoint_IsReadWriteAllowed()) {
 80033c4:	f7ff fd76 	bl	8002eb4 <Endpoint_IsReadWriteAllowed>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d027      	beq.n	800341e <Endpoint_Write_Stream_BE+0xae>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	6a1a      	ldr	r2, [r3, #32]
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	1ad2      	subs	r2, r2, r3
 80033d8:	897b      	ldrh	r3, [r7, #10]
 80033da:	4293      	cmp	r3, r2
 80033dc:	bf28      	it	cs
 80033de:	4613      	movcs	r3, r2
 80033e0:	82fb      	strh	r3, [r7, #22]
			SwapCopy((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable),(void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	461a      	mov	r2, r3
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	4413      	add	r3, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	8bfa      	ldrh	r2, [r7, #30]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4413      	add	r3, r2
 80033f6:	4619      	mov	r1, r3
 80033f8:	8afb      	ldrh	r3, [r7, #22]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f7ff ff96 	bl	800332c <SwapCopy>
			ep->InBytesAvailable += Bytes;
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	8afb      	ldrh	r3, [r7, #22]
 8003406:	441a      	add	r2, r3
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 800340c:	8bfa      	ldrh	r2, [r7, #30]
 800340e:	8afb      	ldrh	r3, [r7, #22]
 8003410:	4413      	add	r3, r2
 8003412:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 8003414:	897a      	ldrh	r2, [r7, #10]
 8003416:	8afb      	ldrh	r3, [r7, #22]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	817b      	strh	r3, [r7, #10]
 800341c:	e012      	b.n	8003444 <Endpoint_Write_Stream_BE+0xd4>
		}
		else {
			Endpoint_ClearIN();
 800341e:	f7ff fcd1 	bl	8002dc4 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d004      	beq.n	8003432 <Endpoint_Write_Stream_BE+0xc2>
				*BytesProcessed = BytesTransfered;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8bfa      	ldrh	r2, [r7, #30]
 800342c:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 800342e:	2305      	movs	r3, #5
 8003430:	e00c      	b.n	800344c <Endpoint_Write_Stream_BE+0xdc>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003432:	f7ff fbe9 	bl	8002c08 <Endpoint_WaitUntilReady>
 8003436:	4603      	mov	r3, r0
 8003438:	757b      	strb	r3, [r7, #21]
 800343a:	7d7b      	ldrb	r3, [r7, #21]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <Endpoint_Write_Stream_BE+0xd4>
				return ErrorCode;
 8003440:	7d7b      	ldrb	r3, [r7, #21]
 8003442:	e003      	b.n	800344c <Endpoint_Write_Stream_BE+0xdc>
	while (Length) {
 8003444:	897b      	ldrh	r3, [r7, #10]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1b4      	bne.n	80033b4 <Endpoint_Write_Stream_BE+0x44>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3720      	adds	r7, #32
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000f70 	.word	0x20000f70

08003458 <Endpoint_Read_Stream_LE>:

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	460b      	mov	r3, r1
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003466:	4b37      	ldr	r3, [pc, #220]	; (8003544 <Endpoint_Read_Stream_LE+0xec>)
 8003468:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800346c:	461a      	mov	r2, r3
 800346e:	232c      	movs	r3, #44	; 0x2c
 8003470:	fb03 f302 	mul.w	r3, r3, r2
 8003474:	4a33      	ldr	r2, [pc, #204]	; (8003544 <Endpoint_Read_Stream_LE+0xec>)
 8003476:	4413      	add	r3, r2
 8003478:	3304      	adds	r3, #4
 800347a:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d053      	beq.n	8003532 <Endpoint_Read_Stream_LE+0xda>
		Length -= *BytesProcessed;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	897a      	ldrh	r2, [r7, #10]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 800349a:	e04a      	b.n	8003532 <Endpoint_Read_Stream_LE+0xda>
		if (ep->OutInUse)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d000      	beq.n	80034ac <Endpoint_Read_Stream_LE+0x54>
			continue;
 80034aa:	e042      	b.n	8003532 <Endpoint_Read_Stream_LE+0xda>
		if (Endpoint_IsReadWriteAllowed()) {
 80034ac:	f7ff fd02 	bl	8002eb4 <Endpoint_IsReadWriteAllowed>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d02a      	beq.n	800350c <Endpoint_Read_Stream_LE+0xb4>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	897b      	ldrh	r3, [r7, #10]
 80034bc:	4293      	cmp	r3, r2
 80034be:	bf28      	it	cs
 80034c0:	4613      	movcs	r3, r2
 80034c2:	82fb      	strh	r3, [r7, #22]
			MEMCPY((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 80034c4:	8bfa      	ldrh	r2, [r7, #30]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4413      	add	r3, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	461a      	mov	r2, r3
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	4413      	add	r3, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	8afb      	ldrh	r3, [r7, #22]
 80034dc:	461a      	mov	r2, r3
 80034de:	f7ff fb33 	bl	8002b48 <thumb2_memcpy>
			ep->OutBytesAvailable -= Bytes;
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	8afb      	ldrh	r3, [r7, #22]
 80034e8:	1ad2      	subs	r2, r2, r3
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	609a      	str	r2, [r3, #8]
			ep->OutOffset += Bytes;
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	8afb      	ldrh	r3, [r7, #22]
 80034f4:	441a      	add	r2, r3
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	60da      	str	r2, [r3, #12]
			BytesTransfered += Bytes;
 80034fa:	8bfa      	ldrh	r2, [r7, #30]
 80034fc:	8afb      	ldrh	r3, [r7, #22]
 80034fe:	4413      	add	r3, r2
 8003500:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 8003502:	897a      	ldrh	r2, [r7, #10]
 8003504:	8afb      	ldrh	r3, [r7, #22]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	817b      	strh	r3, [r7, #10]
 800350a:	e012      	b.n	8003532 <Endpoint_Read_Stream_LE+0xda>
		}
		else {
			Endpoint_ClearOUT();
 800350c:	f7ff fc0e 	bl	8002d2c <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d004      	beq.n	8003520 <Endpoint_Read_Stream_LE+0xc8>
				*BytesProcessed = BytesTransfered;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	8bfa      	ldrh	r2, [r7, #30]
 800351a:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 800351c:	2305      	movs	r3, #5
 800351e:	e00c      	b.n	800353a <Endpoint_Read_Stream_LE+0xe2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003520:	f7ff fb72 	bl	8002c08 <Endpoint_WaitUntilReady>
 8003524:	4603      	mov	r3, r0
 8003526:	757b      	strb	r3, [r7, #21]
 8003528:	7d7b      	ldrb	r3, [r7, #21]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <Endpoint_Read_Stream_LE+0xda>
				return ErrorCode;
 800352e:	7d7b      	ldrb	r3, [r7, #21]
 8003530:	e003      	b.n	800353a <Endpoint_Read_Stream_LE+0xe2>
	while (Length) {
 8003532:	897b      	ldrh	r3, [r7, #10]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1b1      	bne.n	800349c <Endpoint_Read_Stream_LE+0x44>
			}

		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000f70 	.word	0x20000f70

08003548 <Endpoint_Read_Stream_BE>:

uint8_t	Endpoint_Read_Stream_BE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	460b      	mov	r3, r1
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003556:	4b37      	ldr	r3, [pc, #220]	; (8003634 <Endpoint_Read_Stream_BE+0xec>)
 8003558:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800355c:	461a      	mov	r2, r3
 800355e:	232c      	movs	r3, #44	; 0x2c
 8003560:	fb03 f302 	mul.w	r3, r3, r2
 8003564:	4a33      	ldr	r2, [pc, #204]	; (8003634 <Endpoint_Read_Stream_BE+0xec>)
 8003566:	4413      	add	r3, r2
 8003568:	3304      	adds	r3, #4
 800356a:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d053      	beq.n	8003622 <Endpoint_Read_Stream_BE+0xda>
		Length -= *BytesProcessed;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	897a      	ldrh	r2, [r7, #10]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 800358a:	e04a      	b.n	8003622 <Endpoint_Read_Stream_BE+0xda>
		if (ep->InInUse)
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d000      	beq.n	800359c <Endpoint_Read_Stream_BE+0x54>
			continue;
 800359a:	e042      	b.n	8003622 <Endpoint_Read_Stream_BE+0xda>
		if (Endpoint_IsReadWriteAllowed()) {
 800359c:	f7ff fc8a 	bl	8002eb4 <Endpoint_IsReadWriteAllowed>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d02a      	beq.n	80035fc <Endpoint_Read_Stream_BE+0xb4>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	897b      	ldrh	r3, [r7, #10]
 80035ac:	4293      	cmp	r3, r2
 80035ae:	bf28      	it	cs
 80035b0:	4613      	movcs	r3, r2
 80035b2:	82fb      	strh	r3, [r7, #22]
			SwapCopy((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 80035b4:	8bfa      	ldrh	r2, [r7, #30]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4413      	add	r3, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	461a      	mov	r2, r3
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	4619      	mov	r1, r3
 80035ca:	8afb      	ldrh	r3, [r7, #22]
 80035cc:	461a      	mov	r2, r3
 80035ce:	f7ff fead 	bl	800332c <SwapCopy>
			ep->OutBytesAvailable -= Bytes;
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	8afb      	ldrh	r3, [r7, #22]
 80035d8:	1ad2      	subs	r2, r2, r3
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	609a      	str	r2, [r3, #8]
			ep->OutOffset += Bytes;
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	8afb      	ldrh	r3, [r7, #22]
 80035e4:	441a      	add	r2, r3
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	60da      	str	r2, [r3, #12]
			BytesTransfered += Bytes;
 80035ea:	8bfa      	ldrh	r2, [r7, #30]
 80035ec:	8afb      	ldrh	r3, [r7, #22]
 80035ee:	4413      	add	r3, r2
 80035f0:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 80035f2:	897a      	ldrh	r2, [r7, #10]
 80035f4:	8afb      	ldrh	r3, [r7, #22]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	817b      	strh	r3, [r7, #10]
 80035fa:	e012      	b.n	8003622 <Endpoint_Read_Stream_BE+0xda>
		}
		else {
			Endpoint_ClearOUT();
 80035fc:	f7ff fb96 	bl	8002d2c <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d004      	beq.n	8003610 <Endpoint_Read_Stream_BE+0xc8>
				*BytesProcessed = BytesTransfered;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8bfa      	ldrh	r2, [r7, #30]
 800360a:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 800360c:	2305      	movs	r3, #5
 800360e:	e00c      	b.n	800362a <Endpoint_Read_Stream_BE+0xe2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003610:	f7ff fafa 	bl	8002c08 <Endpoint_WaitUntilReady>
 8003614:	4603      	mov	r3, r0
 8003616:	757b      	strb	r3, [r7, #21]
 8003618:	7d7b      	ldrb	r3, [r7, #21]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <Endpoint_Read_Stream_BE+0xda>
				return ErrorCode;
 800361e:	7d7b      	ldrb	r3, [r7, #21]
 8003620:	e003      	b.n	800362a <Endpoint_Read_Stream_BE+0xe2>
	while (Length) {
 8003622:	897b      	ldrh	r3, [r7, #10]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1b1      	bne.n	800358c <Endpoint_Read_Stream_BE+0x44>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3720      	adds	r7, #32
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20000f70 	.word	0x20000f70

08003638 <Endpoint_Write_Control_Stream_LE>:

uint8_t	Endpoint_Write_Control_Stream_LE (const void *const Buffer, uint16_t Length) {
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	807b      	strh	r3, [r7, #2]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
 8003644:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <Endpoint_Write_Control_Stream_LE+0x6c>)
 8003646:	60bb      	str	r3, [r7, #8]
	uint16_t Bytes;

	while (Length) {
 8003648:	e024      	b.n	8003694 <Endpoint_Write_Control_Stream_LE+0x5c>
		if (!EndPoint->InInUse) {
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d11d      	bne.n	8003694 <Endpoint_Write_Control_Stream_LE+0x5c>
			if (EndPoint->InBufferLength > Length) {
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	6a1a      	ldr	r2, [r3, #32]
 800365c:	887b      	ldrh	r3, [r7, #2]
 800365e:	429a      	cmp	r2, r3
 8003660:	d902      	bls.n	8003668 <Endpoint_Write_Control_Stream_LE+0x30>
				Bytes = Length;
 8003662:	887b      	ldrh	r3, [r7, #2]
 8003664:	81fb      	strh	r3, [r7, #14]
 8003666:	e002      	b.n	800366e <Endpoint_Write_Control_Stream_LE+0x36>
			} else {
				Bytes = EndPoint->InBufferLength;
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	81fb      	strh	r3, [r7, #14]
			}
			MEMCPY(EndPoint->InBuffer,Buffer,Bytes);
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	89fa      	ldrh	r2, [r7, #14]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fa66 	bl	8002b48 <thumb2_memcpy>
			EndPoint->InBytesAvailable += Bytes;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	699a      	ldr	r2, [r3, #24]
 8003680:	89fb      	ldrh	r3, [r7, #14]
 8003682:	441a      	add	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	619a      	str	r2, [r3, #24]
			Length -= Bytes;
 8003688:	887a      	ldrh	r2, [r7, #2]
 800368a:	89fb      	ldrh	r3, [r7, #14]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	807b      	strh	r3, [r7, #2]

			Endpoint_ClearIN();
 8003690:	f7ff fb98 	bl	8002dc4 <Endpoint_ClearIN>
	while (Length) {
 8003694:	887b      	ldrh	r3, [r7, #2]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1d7      	bne.n	800364a <Endpoint_Write_Control_Stream_LE+0x12>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20000f74 	.word	0x20000f74

080036a8 <Endpoint_Write_Control_Stream_BE>:

uint8_t	Endpoint_Write_Control_Stream_BE (const void *const Buffer, uint16_t Length) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	807b      	strh	r3, [r7, #2]
	return Endpoint_Write_Control_Stream_LE(Buffer,Length);
 80036b4:	887b      	ldrh	r3, [r7, #2]
 80036b6:	4619      	mov	r1, r3
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff ffbd 	bl	8003638 <Endpoint_Write_Control_Stream_LE>
 80036be:	4603      	mov	r3, r0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <Endpoint_Read_Control_Stream_LE>:

uint8_t	Endpoint_Read_Control_Stream_LE (void *const Buffer, uint16_t Length) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	807b      	strh	r3, [r7, #2]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
 80036d4:	4b15      	ldr	r3, [pc, #84]	; (800372c <Endpoint_Read_Control_Stream_LE+0x64>)
 80036d6:	60fb      	str	r3, [r7, #12]
	uint16_t Bytes;

	while (Length) {
 80036d8:	e020      	b.n	800371c <Endpoint_Read_Control_Stream_LE+0x54>
		if (EndPoint->IsOutRecieved) {
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d019      	beq.n	800371c <Endpoint_Read_Control_Stream_LE+0x54>
			Bytes = EndPoint->OutBytesAvailable > Length
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	689a      	ldr	r2, [r3, #8]
					? Length : EndPoint->OutBytesAvailable;
 80036ec:	887b      	ldrh	r3, [r7, #2]
 80036ee:	4293      	cmp	r3, r2
 80036f0:	bf28      	it	cs
 80036f2:	4613      	movcs	r3, r2
			Bytes = EndPoint->OutBytesAvailable > Length
 80036f4:	817b      	strh	r3, [r7, #10]
			MEMCPY(Buffer,EndPoint->OutBuffer,Bytes);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	897a      	ldrh	r2, [r7, #10]
 80036fc:	4619      	mov	r1, r3
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff fa22 	bl	8002b48 <thumb2_memcpy>
			EndPoint->OutBytesAvailable -= Bytes;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	897b      	ldrh	r3, [r7, #10]
 800370a:	1ad2      	subs	r2, r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	609a      	str	r2, [r3, #8]
			Length -= Bytes;
 8003710:	887a      	ldrh	r2, [r7, #2]
 8003712:	897b      	ldrh	r3, [r7, #10]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	807b      	strh	r3, [r7, #2]

			Endpoint_ClearOUT();
 8003718:	f7ff fb08 	bl	8002d2c <Endpoint_ClearOUT>
	while (Length) {
 800371c:	887b      	ldrh	r3, [r7, #2]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1db      	bne.n	80036da <Endpoint_Read_Control_Stream_LE+0x12>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000f74 	.word	0x20000f74

08003730 <Endpoint_Read_Control_Stream_BE>:

uint8_t	Endpoint_Read_Control_Stream_BE (void *const Buffer, uint16_t Length) {
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	807b      	strh	r3, [r7, #2]
	return Endpoint_Read_Control_Stream_LE(Buffer,Length);
 800373c:	887b      	ldrh	r3, [r7, #2]
 800373e:	4619      	mov	r1, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ffc1 	bl	80036c8 <Endpoint_Read_Control_Stream_LE>
 8003746:	4603      	mov	r3, r0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <Endpoint_Null_Stream>:

uint8_t Endpoint_Null_Stream(uint16_t Length,
								 uint16_t* const BytesProcessed) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	80fb      	strh	r3, [r7, #6]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 800375c:	4b32      	ldr	r3, [pc, #200]	; (8003828 <Endpoint_Null_Stream+0xd8>)
 800375e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003762:	461a      	mov	r2, r3
 8003764:	232c      	movs	r3, #44	; 0x2c
 8003766:	fb03 f302 	mul.w	r3, r3, r2
 800376a:	4a2f      	ldr	r2, [pc, #188]	; (8003828 <Endpoint_Null_Stream+0xd8>)
 800376c:	4413      	add	r3, r2
 800376e:	3304      	adds	r3, #4
 8003770:	613b      	str	r3, [r7, #16]
		uint16_t Bytes = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	81fb      	strh	r3, [r7, #14]
		uint16_t BytesTransfered = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	82fb      	strh	r3, [r7, #22]
		uint8_t ErrorCode;

		if (BytesProcessed!=NULL) {
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d04b      	beq.n	8003818 <Endpoint_Null_Stream+0xc8>
			Length -= *BytesProcessed;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	88fa      	ldrh	r2, [r7, #6]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	80fb      	strh	r3, [r7, #6]
			BytesTransfered = *BytesProcessed;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	82fb      	strh	r3, [r7, #22]
		}

		while (Length) {
 8003790:	e042      	b.n	8003818 <Endpoint_Null_Stream+0xc8>
			if (ep->InInUse)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d000      	beq.n	80037a2 <Endpoint_Null_Stream+0x52>
				continue;
 80037a0:	e03a      	b.n	8003818 <Endpoint_Null_Stream+0xc8>
			if (Endpoint_IsReadWriteAllowed()) {
 80037a2:	f7ff fb87 	bl	8002eb4 <Endpoint_IsReadWriteAllowed>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d022      	beq.n	80037f2 <Endpoint_Null_Stream+0xa2>
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	6a1a      	ldr	r2, [r3, #32]
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	1ad2      	subs	r2, r2, r3
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	4293      	cmp	r3, r2
 80037ba:	bf28      	it	cs
 80037bc:	4613      	movcs	r3, r2
 80037be:	81fb      	strh	r3, [r7, #14]
				memset(ep->InBuffer + ep->InBytesAvailable,0x0,Bytes);
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	69da      	ldr	r2, [r3, #28]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	4413      	add	r3, r2
 80037ca:	89fa      	ldrh	r2, [r7, #14]
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f003 f9e4 	bl	8006b9c <memset>
				ep->InBytesAvailable += Bytes;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	89fb      	ldrh	r3, [r7, #14]
 80037da:	441a      	add	r2, r3
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	619a      	str	r2, [r3, #24]
				BytesTransfered += Bytes;
 80037e0:	8afa      	ldrh	r2, [r7, #22]
 80037e2:	89fb      	ldrh	r3, [r7, #14]
 80037e4:	4413      	add	r3, r2
 80037e6:	82fb      	strh	r3, [r7, #22]
				Length -= Bytes;
 80037e8:	88fa      	ldrh	r2, [r7, #6]
 80037ea:	89fb      	ldrh	r3, [r7, #14]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	80fb      	strh	r3, [r7, #6]
 80037f0:	e012      	b.n	8003818 <Endpoint_Null_Stream+0xc8>
			}
			else {
				Endpoint_ClearIN();
 80037f2:	f7ff fae7 	bl	8002dc4 <Endpoint_ClearIN>
				if (BytesProcessed!=NULL) {
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d004      	beq.n	8003806 <Endpoint_Null_Stream+0xb6>
					*BytesProcessed = BytesTransfered;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	8afa      	ldrh	r2, [r7, #22]
 8003800:	801a      	strh	r2, [r3, #0]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003802:	2305      	movs	r3, #5
 8003804:	e00c      	b.n	8003820 <Endpoint_Null_Stream+0xd0>
				}

				if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003806:	f7ff f9ff 	bl	8002c08 <Endpoint_WaitUntilReady>
 800380a:	4603      	mov	r3, r0
 800380c:	737b      	strb	r3, [r7, #13]
 800380e:	7b7b      	ldrb	r3, [r7, #13]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <Endpoint_Null_Stream+0xc8>
					return ErrorCode;
 8003814:	7b7b      	ldrb	r3, [r7, #13]
 8003816:	e003      	b.n	8003820 <Endpoint_Null_Stream+0xd0>
		while (Length) {
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1b9      	bne.n	8003792 <Endpoint_Null_Stream+0x42>
				}


			}
		}
		return ENDPOINT_RWSTREAM_NoError;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	20000f70 	.word	0x20000f70

0800382c <USBD_HandleEP0_Stall>:
/**
 * \brief Handle protocol stall on EP0
 *
 * Stalls EP0 and then restarts a new transfer including setting state to \ref IDLE.
 */
void USBD_HandleEP0_Stall() {
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
	/* When we stall ep0 as protocol stall, we go back into idle state and start a new read */
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 8003830:	4b08      	ldr	r3, [pc, #32]	; (8003854 <USBD_HandleEP0_Stall+0x28>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	2101      	movs	r1, #1
 8003838:	2080      	movs	r0, #128	; 0x80
 800383a:	4798      	blx	r3
	device.EP0_State = IDLE;
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <USBD_HandleEP0_Stall+0x28>)
 800383e:	2201      	movs	r2, #1
 8003840:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Driver->EndpointReadStart(0,24);
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <USBD_HandleEP0_Stall+0x28>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	2118      	movs	r1, #24
 800384c:	2000      	movs	r0, #0
 800384e:	4798      	blx	r3
}
 8003850:	bf00      	nop
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20000f70 	.word	0x20000f70

08003858 <USB_Device_ProcessControlRequest>:
 * \ref EVENT_USB_Device_ControlRequest function. There the user has the chance to complete
 * some custom request or override the handling of this function. If the user has handled the
 * request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
void USB_Device_ProcessControlRequest() {
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
	uint32_t length = 0,ret;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
	uint16_t status = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	813b      	strh	r3, [r7, #8]
	void *buffer;
	uint8_t Value;
	uint16_t Index;

	Value = USB_ControlRequest.wValue & 0x00FF;
 8003866:	4bab      	ldr	r3, [pc, #684]	; (8003b14 <USB_Device_ProcessControlRequest+0x2bc>)
 8003868:	885b      	ldrh	r3, [r3, #2]
 800386a:	b29b      	uxth	r3, r3
 800386c:	74fb      	strb	r3, [r7, #19]

	/* Handling of descriptors */
	EVENT_USB_Device_ControlRequest();
 800386e:	f7fd f913 	bl	8000a98 <EVENT_USB_Device_ControlRequest>
	if (!device.IsSetupRecieved)
 8003872:	4ba9      	ldr	r3, [pc, #676]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 8003874:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003878:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 81fd 	beq.w	8003c7e <USB_Device_ProcessControlRequest+0x426>
		return;

	/* default request handling */
	switch (USB_ControlRequest.bRequest) {
 8003884:	4ba3      	ldr	r3, [pc, #652]	; (8003b14 <USB_Device_ProcessControlRequest+0x2bc>)
 8003886:	785b      	ldrb	r3, [r3, #1]
 8003888:	2b0c      	cmp	r3, #12
 800388a:	f200 81ea 	bhi.w	8003c62 <USB_Device_ProcessControlRequest+0x40a>
 800388e:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <USB_Device_ProcessControlRequest+0x3c>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	08003a0b 	.word	0x08003a0b
 8003898:	080038c9 	.word	0x080038c9
 800389c:	08003c63 	.word	0x08003c63
 80038a0:	08003b97 	.word	0x08003b97
 80038a4:	08003c63 	.word	0x08003c63
 80038a8:	08003aef 	.word	0x08003aef
 80038ac:	0800396f 	.word	0x0800396f
 80038b0:	08003b5d 	.word	0x08003b5d
 80038b4:	0800395f 	.word	0x0800395f
 80038b8:	08003b25 	.word	0x08003b25
 80038bc:	080039d3 	.word	0x080039d3
 80038c0:	08003b63 	.word	0x08003b63
 80038c4:	08003c5d 	.word	0x08003c5d
	case REQ_ClearFeature:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 80038c8:	4b92      	ldr	r3, [pc, #584]	; (8003b14 <USB_Device_ProcessControlRequest+0x2bc>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d133      	bne.n	800393c <USB_Device_ProcessControlRequest+0xe4>
			Index = USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK;
 80038d4:	4b8f      	ldr	r3, [pc, #572]	; (8003b14 <USB_Device_ProcessControlRequest+0x2bc>)
 80038d6:	889b      	ldrh	r3, [r3, #4]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	817b      	strh	r3, [r7, #10]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 80038e0:	4b8e      	ldr	r3, [pc, #568]	; (8003b1c <USB_Device_ProcessControlRequest+0x2c4>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d004      	beq.n	80038f4 <USB_Device_ProcessControlRequest+0x9c>
 80038ea:	4b8a      	ldr	r3, [pc, #552]	; (8003b14 <USB_Device_ProcessControlRequest+0x2bc>)
 80038ec:	889b      	ldrh	r3, [r3, #4]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d120      	bne.n	8003936 <USB_Device_ProcessControlRequest+0xde>
					device.Endpoints[Index].IsConfigured==1) {
 80038f4:	897b      	ldrh	r3, [r7, #10]
 80038f6:	4a88      	ldr	r2, [pc, #544]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 80038f8:	212c      	movs	r1, #44	; 0x2c
 80038fa:	fb01 f303 	mul.w	r3, r1, r3
 80038fe:	4413      	add	r3, r2
 8003900:	7a1b      	ldrb	r3, [r3, #8]
 8003902:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003906:	b2db      	uxtb	r3, r3
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 8003908:	2b01      	cmp	r3, #1
 800390a:	d114      	bne.n	8003936 <USB_Device_ProcessControlRequest+0xde>
				device.Endpoints[Index].IsHalted = 0;
 800390c:	897b      	ldrh	r3, [r7, #10]
 800390e:	4a82      	ldr	r2, [pc, #520]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 8003910:	212c      	movs	r1, #44	; 0x2c
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	441a      	add	r2, r3
 8003918:	7a13      	ldrb	r3, [r2, #8]
 800391a:	f36f 0382 	bfc	r3, #2, #1
 800391e:	7213      	strb	r3, [r2, #8]
				device.Driver->EndpointStall(USB_ControlRequest.wIndex,0);
 8003920:	4b7d      	ldr	r3, [pc, #500]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	4a7b      	ldr	r2, [pc, #492]	; (8003b14 <USB_Device_ProcessControlRequest+0x2bc>)
 8003928:	8892      	ldrh	r2, [r2, #4]
 800392a:	b292      	uxth	r2, r2
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	2100      	movs	r1, #0
 8003930:	4610      	mov	r0, r2
 8003932:	4798      	blx	r3
			} else {
				USBD_HandleEP0_Stall();
			}
			break;
 8003934:	e19b      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
				USBD_HandleEP0_Stall();
 8003936:	f7ff ff79 	bl	800382c <USBD_HandleEP0_Stall>
			break;
 800393a:	e198      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 800393c:	4b75      	ldr	r3, [pc, #468]	; (8003b14 <USB_Device_ProcessControlRequest+0x2bc>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d107      	bne.n	8003958 <USB_Device_ProcessControlRequest+0x100>
			 device.RemoteWakeUp = 0;
 8003948:	4a73      	ldr	r2, [pc, #460]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 800394a:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800394e:	f36f 0382 	bfc	r3, #2, #1
 8003952:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			 break;
 8003956:	e18a      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
		}
		USBD_HandleEP0_Stall();
 8003958:	f7ff ff68 	bl	800382c <USBD_HandleEP0_Stall>
		break;
 800395c:	e187      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetConfiguration:
		device.Driver->EndpointWrite(0,&device.Configuration,1);
 800395e:	4b6e      	ldr	r3, [pc, #440]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	2201      	movs	r2, #1
 8003966:	496e      	ldr	r1, [pc, #440]	; (8003b20 <USB_Device_ProcessControlRequest+0x2c8>)
 8003968:	2000      	movs	r0, #0
 800396a:	4798      	blx	r3
		break;
 800396c:	e17f      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetDescriptor:
		length = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue,USB_ControlRequest.wIndex,(void*)&buffer);
 800396e:	4b69      	ldr	r3, [pc, #420]	; (8003b14 <USB_Device_ProcessControlRequest+0x2bc>)
 8003970:	885b      	ldrh	r3, [r3, #2]
 8003972:	b298      	uxth	r0, r3
 8003974:	4b67      	ldr	r3, [pc, #412]	; (8003b14 <USB_Device_ProcessControlRequest+0x2bc>)
 8003976:	889b      	ldrh	r3, [r3, #4]
 8003978:	b29b      	uxth	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	1d3a      	adds	r2, r7, #4
 800397e:	4619      	mov	r1, r3
 8003980:	f7fd f8a0 	bl	8000ac4 <CALLBACK_USB_GetDescriptor>
 8003984:	4603      	mov	r3, r0
 8003986:	617b      	str	r3, [r7, #20]
		if (length==0)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d102      	bne.n	8003994 <USB_Device_ProcessControlRequest+0x13c>
			USBD_HandleEP0_Stall();
 800398e:	f7ff ff4d 	bl	800382c <USBD_HandleEP0_Stall>
					length : USB_ControlRequest.wLength;
			ret = device.Driver->EndpointWrite(0,buffer,length);
			device.Endpoints[0].InDataLeft = length - ret;
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
		}
		break;
 8003992:	e16c      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
			length = length < USB_ControlRequest.wLength ?
 8003994:	4b5f      	ldr	r3, [pc, #380]	; (8003b14 <USB_Device_ProcessControlRequest+0x2bc>)
 8003996:	88db      	ldrh	r3, [r3, #6]
 8003998:	b29b      	uxth	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	4293      	cmp	r3, r2
 80039a0:	bf28      	it	cs
 80039a2:	4613      	movcs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
			ret = device.Driver->EndpointWrite(0,buffer,length);
 80039a6:	4b5c      	ldr	r3, [pc, #368]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	2000      	movs	r0, #0
 80039b2:	4798      	blx	r3
 80039b4:	4603      	mov	r3, r0
 80039b6:	60fb      	str	r3, [r7, #12]
			device.Endpoints[0].InDataLeft = length - ret;
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	4a56      	ldr	r2, [pc, #344]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 80039c0:	6293      	str	r3, [r2, #40]	; 0x28
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	461a      	mov	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4413      	add	r3, r2
 80039ca:	461a      	mov	r2, r3
 80039cc:	4b52      	ldr	r3, [pc, #328]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 80039ce:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 80039d0:	e14d      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetInterface:
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 80039d2:	4b52      	ldr	r3, [pc, #328]	; (8003b1c <USB_Device_ProcessControlRequest+0x2c4>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d10d      	bne.n	80039f8 <USB_Device_ProcessControlRequest+0x1a0>
			device.Driver->EndpointWrite(0,&device.InterfaceSettings[USB_ControlRequest.wIndex],1);
 80039dc:	4b4e      	ldr	r3, [pc, #312]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	4a4c      	ldr	r2, [pc, #304]	; (8003b14 <USB_Device_ProcessControlRequest+0x2bc>)
 80039e4:	8892      	ldrh	r2, [r2, #4]
 80039e6:	b292      	uxth	r2, r2
 80039e8:	f502 729c 	add.w	r2, r2, #312	; 0x138
 80039ec:	494a      	ldr	r1, [pc, #296]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 80039ee:	4411      	add	r1, r2
 80039f0:	2201      	movs	r2, #1
 80039f2:	2000      	movs	r0, #0
 80039f4:	4798      	blx	r3
			break;
 80039f6:	e13a      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
		}
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 80039f8:	4b48      	ldr	r3, [pc, #288]	; (8003b1c <USB_Device_ProcessControlRequest+0x2c4>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	f040 8132 	bne.w	8003c68 <USB_Device_ProcessControlRequest+0x410>
			USBD_HandleEP0_Stall();
 8003a04:	f7ff ff12 	bl	800382c <USBD_HandleEP0_Stall>
			break;
 8003a08:	e131      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
		}
		break;

	case REQ_GetStatus:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 8003a0a:	4b42      	ldr	r3, [pc, #264]	; (8003b14 <USB_Device_ProcessControlRequest+0x2bc>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d11b      	bne.n	8003a4e <USB_Device_ProcessControlRequest+0x1f6>
			status = device.RemoteWakeUp << 1 | device.SelfPowered;
 8003a16:	4b40      	ldr	r3, [pc, #256]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 8003a18:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003a1c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	b21a      	sxth	r2, r3
 8003a26:	4b3c      	ldr	r3, [pc, #240]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 8003a28:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003a2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	b21b      	sxth	r3, r3
 8003a34:	4313      	orrs	r3, r2
 8003a36:	b21b      	sxth	r3, r3
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	813b      	strh	r3, [r7, #8]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8003a3c:	4b36      	ldr	r3, [pc, #216]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f107 0108 	add.w	r1, r7, #8
 8003a46:	2202      	movs	r2, #2
 8003a48:	2000      	movs	r0, #0
 8003a4a:	4798      	blx	r3
			break;
 8003a4c:	e10f      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_INTERFACE && USB_DeviceState == DEVICE_STATE_Configured) {
 8003a4e:	4b31      	ldr	r3, [pc, #196]	; (8003b14 <USB_Device_ProcessControlRequest+0x2bc>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d10f      	bne.n	8003a7a <USB_Device_ProcessControlRequest+0x222>
 8003a5a:	4b30      	ldr	r3, [pc, #192]	; (8003b1c <USB_Device_ProcessControlRequest+0x2c4>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d10a      	bne.n	8003a7a <USB_Device_ProcessControlRequest+0x222>
			status = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	813b      	strh	r3, [r7, #8]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8003a68:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f107 0108 	add.w	r1, r7, #8
 8003a72:	2202      	movs	r2, #2
 8003a74:	2000      	movs	r0, #0
 8003a76:	4798      	blx	r3
			break;
 8003a78:	e0f9      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
		}
		/* print endpoint status only when(or):
		 * - Device_Address_state and ep == 0
		 * - Device_configured_state and ep is configured
		 */
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 8003a7a:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <USB_Device_ProcessControlRequest+0x2bc>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d130      	bne.n	8003ae8 <USB_Device_ProcessControlRequest+0x290>
			Index = USB_ControlRequest.wIndex & 0xFF & ENDPOINT_EPNUM_MASK;
 8003a86:	4b23      	ldr	r3, [pc, #140]	; (8003b14 <USB_Device_ProcessControlRequest+0x2bc>)
 8003a88:	889b      	ldrh	r3, [r3, #4]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	817b      	strh	r3, [r7, #10]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8003a92:	4b22      	ldr	r3, [pc, #136]	; (8003b1c <USB_Device_ProcessControlRequest+0x2c4>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d004      	beq.n	8003aa6 <USB_Device_ProcessControlRequest+0x24e>
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <USB_Device_ProcessControlRequest+0x2bc>)
 8003a9e:	889b      	ldrh	r3, [r3, #4]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d120      	bne.n	8003ae8 <USB_Device_ProcessControlRequest+0x290>
					device.Endpoints[Index].IsConfigured==1) {
 8003aa6:	897b      	ldrh	r3, [r7, #10]
 8003aa8:	4a1b      	ldr	r2, [pc, #108]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 8003aaa:	212c      	movs	r1, #44	; 0x2c
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	7a1b      	ldrb	r3, [r3, #8]
 8003ab4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003ab8:	b2db      	uxtb	r3, r3
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d114      	bne.n	8003ae8 <USB_Device_ProcessControlRequest+0x290>
				status = device.Endpoints[Index].IsHalted;
 8003abe:	897b      	ldrh	r3, [r7, #10]
 8003ac0:	4a15      	ldr	r2, [pc, #84]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 8003ac2:	212c      	movs	r1, #44	; 0x2c
 8003ac4:	fb01 f303 	mul.w	r3, r1, r3
 8003ac8:	4413      	add	r3, r2
 8003aca:	7a1b      	ldrb	r3, [r3, #8]
 8003acc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	813b      	strh	r3, [r7, #8]
				device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	f107 0108 	add.w	r1, r7, #8
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	4798      	blx	r3
				break;
 8003ae6:	e0c2      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
			}
		}
		/* default stall */
		USBD_HandleEP0_Stall();
 8003ae8:	f7ff fea0 	bl	800382c <USBD_HandleEP0_Stall>
		break;
 8003aec:	e0bf      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetAddress:
		if (Value == 0)
 8003aee:	7cfb      	ldrb	r3, [r7, #19]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d103      	bne.n	8003afc <USB_Device_ProcessControlRequest+0x2a4>
			USB_DeviceState = DEVICE_STATE_Default;
 8003af4:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <USB_Device_ProcessControlRequest+0x2c4>)
 8003af6:	2202      	movs	r2, #2
 8003af8:	701a      	strb	r2, [r3, #0]
 8003afa:	e002      	b.n	8003b02 <USB_Device_ProcessControlRequest+0x2aa>
		else
			USB_DeviceState = DEVICE_STATE_Addressed;
 8003afc:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <USB_Device_ProcessControlRequest+0x2c4>)
 8003afe:	2203      	movs	r2, #3
 8003b00:	701a      	strb	r2, [r3, #0]
		device.Driver->DeviceSetAddress(Value,XMC_USBD_SET_ADDRESS_STAGE_SETUP);
 8003b02:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <USB_Device_ProcessControlRequest+0x2c0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	7cfa      	ldrb	r2, [r7, #19]
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4798      	blx	r3
		break;
 8003b10:	e0ad      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
 8003b12:	bf00      	nop
 8003b14:	200012c0 	.word	0x200012c0
 8003b18:	20000f70 	.word	0x20000f70
 8003b1c:	200012bd 	.word	0x200012bd
 8003b20:	200010a9 	.word	0x200010a9

	case REQ_SetConfiguration:
		/* Regardless the state update the configuration to unconfigure endpoints */
		device.Configuration = Value;
 8003b24:	4a58      	ldr	r2, [pc, #352]	; (8003c88 <USB_Device_ProcessControlRequest+0x430>)
 8003b26:	7cfb      	ldrb	r3, [r7, #19]
 8003b28:	f882 3139 	strb.w	r3, [r2, #313]	; 0x139
		EVENT_USB_Device_ConfigurationChanged();
 8003b2c:	f7fc ff8c 	bl	8000a48 <EVENT_USB_Device_ConfigurationChanged>
		/* when config 0 is choosen, we are back in address state */
		if (Value == 0) {
 8003b30:	7cfb      	ldrb	r3, [r7, #19]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d103      	bne.n	8003b3e <USB_Device_ProcessControlRequest+0x2e6>
			USB_DeviceState = DEVICE_STATE_Addressed;
 8003b36:	4b55      	ldr	r3, [pc, #340]	; (8003c8c <USB_Device_ProcessControlRequest+0x434>)
 8003b38:	2203      	movs	r2, #3
 8003b3a:	701a      	strb	r2, [r3, #0]
			break;
 8003b3c:	e097      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
		}
		/* go ahead only with vailid config. (must be set in event) */
		if (device.IsConfigured == 1)
 8003b3e:	4b52      	ldr	r3, [pc, #328]	; (8003c88 <USB_Device_ProcessControlRequest+0x430>)
 8003b40:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <USB_Device_ProcessControlRequest+0x2fe>
			USB_DeviceState = DEVICE_STATE_Configured;
 8003b4e:	4b4f      	ldr	r3, [pc, #316]	; (8003c8c <USB_Device_ProcessControlRequest+0x434>)
 8003b50:	2204      	movs	r2, #4
 8003b52:	701a      	strb	r2, [r3, #0]
		else
			USBD_HandleEP0_Stall();
		break;
 8003b54:	e08b      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
			USBD_HandleEP0_Stall();
 8003b56:	f7ff fe69 	bl	800382c <USBD_HandleEP0_Stall>
		break;
 8003b5a:	e088      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetDescriptor:
		/* Set Descriptor not supported, so stall */
		USBD_HandleEP0_Stall();
 8003b5c:	f7ff fe66 	bl	800382c <USBD_HandleEP0_Stall>
		break;
 8003b60:	e085      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetInterface:
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8003b62:	4b4a      	ldr	r3, [pc, #296]	; (8003c8c <USB_Device_ProcessControlRequest+0x434>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d10c      	bne.n	8003b86 <USB_Device_ProcessControlRequest+0x32e>
			/* TODO: Check if interface and altsetting exists and configuration is allowed, else stall */
			device.InterfaceSettings[USB_ControlRequest.wIndex] = USB_ControlRequest.wValue;
 8003b6c:	4b48      	ldr	r3, [pc, #288]	; (8003c90 <USB_Device_ProcessControlRequest+0x438>)
 8003b6e:	885b      	ldrh	r3, [r3, #2]
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	4b47      	ldr	r3, [pc, #284]	; (8003c90 <USB_Device_ProcessControlRequest+0x438>)
 8003b74:	889b      	ldrh	r3, [r3, #4]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	4619      	mov	r1, r3
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	4b42      	ldr	r3, [pc, #264]	; (8003c88 <USB_Device_ProcessControlRequest+0x430>)
 8003b7e:	440b      	add	r3, r1
 8003b80:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
			break;
 8003b84:	e073      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
		}
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8003b86:	4b41      	ldr	r3, [pc, #260]	; (8003c8c <USB_Device_ProcessControlRequest+0x434>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d16d      	bne.n	8003c6c <USB_Device_ProcessControlRequest+0x414>
			USBD_HandleEP0_Stall();
 8003b90:	f7ff fe4c 	bl	800382c <USBD_HandleEP0_Stall>
			break;
 8003b94:	e06b      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
		}
		break;

	case REQ_SetFeature:
		/* we do not support test mode */
		if (Value == FEATURE_SEL_TestMode) {
 8003b96:	7cfb      	ldrb	r3, [r7, #19]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d102      	bne.n	8003ba2 <USB_Device_ProcessControlRequest+0x34a>
			USBD_HandleEP0_Stall();
 8003b9c:	f7ff fe46 	bl	800382c <USBD_HandleEP0_Stall>
			break;
 8003ba0:	e065      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
		}
		/* configured state */
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8003ba2:	4b3a      	ldr	r3, [pc, #232]	; (8003c8c <USB_Device_ProcessControlRequest+0x434>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d138      	bne.n	8003c1e <USB_Device_ProcessControlRequest+0x3c6>
			switch (Value) {
 8003bac:	7cfb      	ldrb	r3, [r7, #19]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <USB_Device_ProcessControlRequest+0x370>
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d000      	beq.n	8003bb8 <USB_Device_ProcessControlRequest+0x360>
					device.Endpoints[Index].IsHalted = 1;
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
				}
				break;
			}
			break;
 8003bb6:	e05a      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
				device.RemoteWakeUp = 1;
 8003bb8:	4a33      	ldr	r2, [pc, #204]	; (8003c88 <USB_Device_ProcessControlRequest+0x430>)
 8003bba:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003bbe:	f043 0304 	orr.w	r3, r3, #4
 8003bc2:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				break;
 8003bc6:	e029      	b.n	8003c1c <USB_Device_ProcessControlRequest+0x3c4>
				Index = USB_ControlRequest.wIndex & 0xFF & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK;
 8003bc8:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <USB_Device_ProcessControlRequest+0x438>)
 8003bca:	889b      	ldrh	r3, [r3, #4]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	817b      	strh	r3, [r7, #10]
				if (device.Endpoints[Index].IsConfigured == 0)
 8003bd4:	897b      	ldrh	r3, [r7, #10]
 8003bd6:	4a2c      	ldr	r2, [pc, #176]	; (8003c88 <USB_Device_ProcessControlRequest+0x430>)
 8003bd8:	212c      	movs	r1, #44	; 0x2c
 8003bda:	fb01 f303 	mul.w	r3, r1, r3
 8003bde:	4413      	add	r3, r2
 8003be0:	7a1b      	ldrb	r3, [r3, #8]
 8003be2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d102      	bne.n	8003bf2 <USB_Device_ProcessControlRequest+0x39a>
					USBD_HandleEP0_Stall();
 8003bec:	f7ff fe1e 	bl	800382c <USBD_HandleEP0_Stall>
				break;
 8003bf0:	e013      	b.n	8003c1a <USB_Device_ProcessControlRequest+0x3c2>
					device.Endpoints[Index].IsHalted = 1;
 8003bf2:	897b      	ldrh	r3, [r7, #10]
 8003bf4:	4a24      	ldr	r2, [pc, #144]	; (8003c88 <USB_Device_ProcessControlRequest+0x430>)
 8003bf6:	212c      	movs	r1, #44	; 0x2c
 8003bf8:	fb01 f303 	mul.w	r3, r1, r3
 8003bfc:	441a      	add	r2, r3
 8003bfe:	7a13      	ldrb	r3, [r2, #8]
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	7213      	strb	r3, [r2, #8]
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
 8003c06:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <USB_Device_ProcessControlRequest+0x430>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	4a20      	ldr	r2, [pc, #128]	; (8003c90 <USB_Device_ProcessControlRequest+0x438>)
 8003c0e:	8892      	ldrh	r2, [r2, #4]
 8003c10:	b292      	uxth	r2, r2
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	2101      	movs	r1, #1
 8003c16:	4610      	mov	r0, r2
 8003c18:	4798      	blx	r3
				break;
 8003c1a:	bf00      	nop
			break;
 8003c1c:	e027      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
		}
		/* when addressed, only ep0 can be halted */
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8003c1e:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <USB_Device_ProcessControlRequest+0x434>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d116      	bne.n	8003c56 <USB_Device_ProcessControlRequest+0x3fe>
			if (Value == FEATURE_SEL_EndpointHalt &&
 8003c28:	7cfb      	ldrb	r3, [r7, #19]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d113      	bne.n	8003c56 <USB_Device_ProcessControlRequest+0x3fe>
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8003c2e:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <USB_Device_ProcessControlRequest+0x438>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	f003 0303 	and.w	r3, r3, #3
			if (Value == FEATURE_SEL_EndpointHalt &&
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d10d      	bne.n	8003c56 <USB_Device_ProcessControlRequest+0x3fe>
					(USB_ControlRequest.wIndex & 0x00FF) == 0x0) {
 8003c3a:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <USB_Device_ProcessControlRequest+0x438>)
 8003c3c:	889b      	ldrh	r3, [r3, #4]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	b2db      	uxtb	r3, r3
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d107      	bne.n	8003c56 <USB_Device_ProcessControlRequest+0x3fe>
				device.Endpoints[0].IsHalted = 1;
 8003c46:	4a10      	ldr	r2, [pc, #64]	; (8003c88 <USB_Device_ProcessControlRequest+0x430>)
 8003c48:	7a13      	ldrb	r3, [r2, #8]
 8003c4a:	f043 0304 	orr.w	r3, r3, #4
 8003c4e:	7213      	strb	r3, [r2, #8]
				USBD_HandleEP0_Stall();
 8003c50:	f7ff fdec 	bl	800382c <USBD_HandleEP0_Stall>
				break;
 8003c54:	e00b      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
			}
		}
		/* default behaviour is stall */
		USBD_HandleEP0_Stall();
 8003c56:	f7ff fde9 	bl	800382c <USBD_HandleEP0_Stall>
		break;
 8003c5a:	e008      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>

	case REQ_SynchFrame:
		/* Not yet supported */
		USBD_HandleEP0_Stall();
 8003c5c:	f7ff fde6 	bl	800382c <USBD_HandleEP0_Stall>
		break;
 8003c60:	e005      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>

	default:
		USBD_HandleEP0_Stall();
 8003c62:	f7ff fde3 	bl	800382c <USBD_HandleEP0_Stall>
 8003c66:	e002      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
		break;
 8003c68:	bf00      	nop
 8003c6a:	e000      	b.n	8003c6e <USB_Device_ProcessControlRequest+0x416>
		break;
 8003c6c:	bf00      	nop
	}
	device.IsSetupRecieved = 0;
 8003c6e:	4a06      	ldr	r2, [pc, #24]	; (8003c88 <USB_Device_ProcessControlRequest+0x430>)
 8003c70:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003c74:	f36f 0341 	bfc	r3, #1, #1
 8003c78:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
 8003c7c:	e000      	b.n	8003c80 <USB_Device_ProcessControlRequest+0x428>
		return;
 8003c7e:	bf00      	nop
}
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000f70 	.word	0x20000f70
 8003c8c:	200012bd 	.word	0x200012bd
 8003c90:	200012c0 	.word	0x200012c0

08003c94 <USBD_HandleEP0_IN>:
 * \brief Handle complete IN transfer on EP0
 *
 * In \ref IN_DATA state it starts a receive and switches to \ref OUT_STATUS state.
 * In \ref IN_STATUS state its starts a new read of setup packets and switches to \ref IDLE.
 */
void USBD_HandleEP0_IN() {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
	if (device.EP0_State == IN_DATA) {
 8003c98:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <USBD_HandleEP0_IN+0x48>)
 8003c9a:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d109      	bne.n	8003cb6 <USBD_HandleEP0_IN+0x22>
		/* Read zero length out data packet */
		device.Driver->EndpointReadStart(0,0);
 8003ca2:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <USBD_HandleEP0_IN+0x48>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	2100      	movs	r1, #0
 8003caa:	2000      	movs	r0, #0
 8003cac:	4798      	blx	r3
		device.EP0_State = OUT_STATUS;
 8003cae:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <USBD_HandleEP0_IN+0x48>)
 8003cb0:	2205      	movs	r2, #5
 8003cb2:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
	if (device.EP0_State == IN_STATUS) {
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <USBD_HandleEP0_IN+0x48>)
 8003cb8:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d10b      	bne.n	8003cd8 <USBD_HandleEP0_IN+0x44>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <USBD_HandleEP0_IN+0x48>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	4a05      	ldr	r2, [pc, #20]	; (8003cdc <USBD_HandleEP0_IN+0x48>)
 8003cc8:	7912      	ldrb	r2, [r2, #4]
 8003cca:	2118      	movs	r1, #24
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4798      	blx	r3
		device.EP0_State = IDLE;
 8003cd0:	4b02      	ldr	r3, [pc, #8]	; (8003cdc <USBD_HandleEP0_IN+0x48>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
}
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000f70 	.word	0x20000f70

08003ce0 <USBD_HandleEP0_OUT>:
 * \brief Handle complete OUT transfer on EP0
 *
 * Handles the OUT packet based on the state of endpoint 0. Starts a new read for new SETUP packets, when in \ref OUT_STATUS.
 * When endpoint 0 is in \ref OUT_DATA state, it handles the received data and starts a write transaction for \ref IN_STATUS.
 */
void USBD_HandleEP0_OUT() {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
	if (device.EP0_State == OUT_DATA) {
 8003ce4:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <USBD_HandleEP0_OUT+0x50>)
 8003ce6:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d10c      	bne.n	8003d08 <USBD_HandleEP0_OUT+0x28>
		/* Now we have the data for handling the request */
		USB_Device_ProcessControlRequest();
 8003cee:	f7ff fdb3 	bl	8003858 <USB_Device_ProcessControlRequest>
		/* Zero length packet for status stage */
		device.Driver->EndpointWrite(ENDPOINT_DIR_MASK & 0,0,0);
 8003cf2:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <USBD_HandleEP0_OUT+0x50>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	4798      	blx	r3
		device.EP0_State = IN_STATUS;
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <USBD_HandleEP0_OUT+0x50>)
 8003d02:	2203      	movs	r2, #3
 8003d04:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
	if (device.EP0_State == OUT_STATUS) {
 8003d08:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <USBD_HandleEP0_OUT+0x50>)
 8003d0a:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8003d0e:	2b05      	cmp	r3, #5
 8003d10:	d10b      	bne.n	8003d2a <USBD_HandleEP0_OUT+0x4a>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8003d12:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <USBD_HandleEP0_OUT+0x50>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	4a05      	ldr	r2, [pc, #20]	; (8003d30 <USBD_HandleEP0_OUT+0x50>)
 8003d1a:	7912      	ldrb	r2, [r2, #4]
 8003d1c:	2118      	movs	r1, #24
 8003d1e:	4610      	mov	r0, r2
 8003d20:	4798      	blx	r3
		device.EP0_State = IDLE;
 8003d22:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <USBD_HandleEP0_OUT+0x50>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000f70 	.word	0x20000f70

08003d34 <USBD_HandleEP0_SETUP>:
 * Handles the setup package an switches to correct state. If data is send from host to device it switches into \ref OUT_DATA state.
 * When the hosts sends all data within the setup package and \ref wLength equals zero, starts processing the request and sends a
 * in status reponse including the switch to \ref IN_STATUS.
 * When the host expects data from the device, the function processes the control request and switches to \ref IN_DATA state.
 */
void USBD_HandleEP0_SETUP() {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
	/* read setup package from ep0 */
	int32_t ret_val = device.Driver->EndpointRead(0,(void*)&USB_ControlRequest,8);
 8003d3a:	4b21      	ldr	r3, [pc, #132]	; (8003dc0 <USBD_HandleEP0_SETUP+0x8c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	2208      	movs	r2, #8
 8003d42:	4920      	ldr	r1, [pc, #128]	; (8003dc4 <USBD_HandleEP0_SETUP+0x90>)
 8003d44:	2000      	movs	r0, #0
 8003d46:	4798      	blx	r3
 8003d48:	6078      	str	r0, [r7, #4]
#if NO_COPY_DRIVER
	MEMCPY(&USB_ControlRequest,device.Endpoints[0].OutBuffer,sizeof(USB_ControlRequest));
#endif
	device.IsSetupRecieved = true;
 8003d4a:	4a1d      	ldr	r2, [pc, #116]	; (8003dc0 <USBD_HandleEP0_SETUP+0x8c>)
 8003d4c:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003d50:	f043 0302 	orr.w	r3, r3, #2
 8003d54:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	if (ret_val != 8 )
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d12c      	bne.n	8003db8 <USBD_HandleEP0_SETUP+0x84>
		return;

	/* preprocess */
	/* if length is zero we have only a in_status phase */
	if (USB_ControlRequest.wLength==0) {
 8003d5e:	4b19      	ldr	r3, [pc, #100]	; (8003dc4 <USBD_HandleEP0_SETUP+0x90>)
 8003d60:	88db      	ldrh	r3, [r3, #6]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10d      	bne.n	8003d84 <USBD_HandleEP0_SETUP+0x50>
		device.EP0_State = IN_STATUS;
 8003d68:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <USBD_HandleEP0_SETUP+0x8c>)
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		USB_Device_ProcessControlRequest();
 8003d70:	f7ff fd72 	bl	8003858 <USB_Device_ProcessControlRequest>
		device.Driver->EndpointWrite(0,0,0);
 8003d74:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <USBD_HandleEP0_SETUP+0x8c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	2000      	movs	r0, #0
 8003d80:	4798      	blx	r3
 8003d82:	e01a      	b.n	8003dba <USBD_HandleEP0_SETUP+0x86>
	} else {
		if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) {
 8003d84:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <USBD_HandleEP0_SETUP+0x90>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	b25b      	sxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	da06      	bge.n	8003d9c <USBD_HandleEP0_SETUP+0x68>
			device.EP0_State = IN_DATA;
 8003d8e:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <USBD_HandleEP0_SETUP+0x8c>)
 8003d90:	2202      	movs	r2, #2
 8003d92:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			USB_Device_ProcessControlRequest();
 8003d96:	f7ff fd5f 	bl	8003858 <USB_Device_ProcessControlRequest>
 8003d9a:	e00e      	b.n	8003dba <USBD_HandleEP0_SETUP+0x86>
		}
		else {
			device.EP0_State = OUT_DATA;
 8003d9c:	4b08      	ldr	r3, [pc, #32]	; (8003dc0 <USBD_HandleEP0_SETUP+0x8c>)
 8003d9e:	2204      	movs	r2, #4
 8003da0:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			/* Do not process request here, first read data */
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
 8003da4:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <USBD_HandleEP0_SETUP+0x8c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	4a06      	ldr	r2, [pc, #24]	; (8003dc4 <USBD_HandleEP0_SETUP+0x90>)
 8003dac:	88d2      	ldrh	r2, [r2, #6]
 8003dae:	b292      	uxth	r2, r2
 8003db0:	4611      	mov	r1, r2
 8003db2:	2000      	movs	r0, #0
 8003db4:	4798      	blx	r3
 8003db6:	e000      	b.n	8003dba <USBD_HandleEP0_SETUP+0x86>
		return;
 8003db8:	bf00      	nop
		}
	}
}
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20000f70 	.word	0x20000f70
 8003dc4:	200012c0 	.word	0x200012c0

08003dc8 <USBD_SignalDeviceEventHandler>:
 * The device can have several events, where it notifies the application about.
 *
 * \note Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 * \see USB_USBD_EVENT
 */
void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event) {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	71fb      	strb	r3, [r7, #7]
	int i;
	switch (event) {
 8003dd2:	79fb      	ldrb	r3, [r7, #7]
 8003dd4:	2b09      	cmp	r3, #9
 8003dd6:	f200 80fd 	bhi.w	8003fd4 <USBD_SignalDeviceEventHandler+0x20c>
 8003dda:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <USBD_SignalDeviceEventHandler+0x18>)
 8003ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de0:	08003f37 	.word	0x08003f37
 8003de4:	08003f25 	.word	0x08003f25
 8003de8:	08003f13 	.word	0x08003f13
 8003dec:	08003f19 	.word	0x08003f19
 8003df0:	08003e09 	.word	0x08003e09
 8003df4:	08003fd5 	.word	0x08003fd5
 8003df8:	08003fbd 	.word	0x08003fbd
 8003dfc:	08003fad 	.word	0x08003fad
 8003e00:	08003fd5 	.word	0x08003fd5
 8003e04:	08003f0d 	.word	0x08003f0d
	case XMC_USBD_EVENT_RESET:
		USB_DeviceState = DEVICE_STATE_Default;
 8003e08:	4b74      	ldr	r3, [pc, #464]	; (8003fdc <USBD_SignalDeviceEventHandler+0x214>)
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	701a      	strb	r2, [r3, #0]
		device.EP0_State = IDLE;
 8003e0e:	4b74      	ldr	r3, [pc, #464]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		device.RemoteWakeUp = 0;
 8003e16:	4a72      	ldr	r2, [pc, #456]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003e18:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003e1c:	f36f 0382 	bfc	r3, #2, #1
 8003e20:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
		/* Reset endpoints and configuration */
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e050      	b.n	8003ecc <USBD_SignalDeviceEventHandler+0x104>
			device.Endpoints[i].InInUse = 0;
 8003e2a:	4a6d      	ldr	r2, [pc, #436]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	212c      	movs	r1, #44	; 0x2c
 8003e30:	fb01 f303 	mul.w	r3, r1, r3
 8003e34:	441a      	add	r2, r3
 8003e36:	8913      	ldrh	r3, [r2, #8]
 8003e38:	f36f 1304 	bfc	r3, #4, #1
 8003e3c:	8113      	strh	r3, [r2, #8]
			device.Endpoints[i].OutInUse = 0;
 8003e3e:	4a68      	ldr	r2, [pc, #416]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	212c      	movs	r1, #44	; 0x2c
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	441a      	add	r2, r3
 8003e4a:	8913      	ldrh	r3, [r2, #8]
 8003e4c:	f36f 03c3 	bfc	r3, #3, #1
 8003e50:	8113      	strh	r3, [r2, #8]
			device.Endpoints[i].IsHalted = 0;
 8003e52:	4a63      	ldr	r2, [pc, #396]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	212c      	movs	r1, #44	; 0x2c
 8003e58:	fb01 f303 	mul.w	r3, r1, r3
 8003e5c:	441a      	add	r2, r3
 8003e5e:	7a13      	ldrb	r3, [r2, #8]
 8003e60:	f36f 0382 	bfc	r3, #2, #1
 8003e64:	7213      	strb	r3, [r2, #8]
			if (i!=0 && device.Endpoints[i].IsConfigured) {
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d02c      	beq.n	8003ec6 <USBD_SignalDeviceEventHandler+0xfe>
 8003e6c:	4a5c      	ldr	r2, [pc, #368]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	212c      	movs	r1, #44	; 0x2c
 8003e72:	fb01 f303 	mul.w	r3, r1, r3
 8003e76:	4413      	add	r3, r2
 8003e78:	7a1b      	ldrb	r3, [r3, #8]
 8003e7a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d020      	beq.n	8003ec6 <USBD_SignalDeviceEventHandler+0xfe>
				device.Driver->EndpointUnconfigure(device.Endpoints[i].Address);
 8003e84:	4b56      	ldr	r3, [pc, #344]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	4955      	ldr	r1, [pc, #340]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	202c      	movs	r0, #44	; 0x2c
 8003e90:	fb00 f202 	mul.w	r2, r0, r2
 8003e94:	440a      	add	r2, r1
 8003e96:	3204      	adds	r2, #4
 8003e98:	7812      	ldrb	r2, [r2, #0]
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	4798      	blx	r3
				device.Endpoints[i].IsConfigured = 0;
 8003e9e:	4a50      	ldr	r2, [pc, #320]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	212c      	movs	r1, #44	; 0x2c
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	441a      	add	r2, r3
 8003eaa:	7a13      	ldrb	r3, [r2, #8]
 8003eac:	f36f 0300 	bfc	r3, #0, #1
 8003eb0:	7213      	strb	r3, [r2, #8]
				device.Endpoints[i].IsEnabled = 0;
 8003eb2:	4a4b      	ldr	r2, [pc, #300]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	212c      	movs	r1, #44	; 0x2c
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	441a      	add	r2, r3
 8003ebe:	7a13      	ldrb	r3, [r2, #8]
 8003ec0:	f36f 0341 	bfc	r3, #1, #1
 8003ec4:	7213      	strb	r3, [r2, #8]
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b06      	cmp	r3, #6
 8003ed0:	ddab      	ble.n	8003e2a <USBD_SignalDeviceEventHandler+0x62>
			}
		}
		device.Configuration = 0;
 8003ed2:	4b43      	ldr	r3, [pc, #268]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
		for (i=0;i<NUM_INTERFACES;i++) {
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	e009      	b.n	8003ef4 <USBD_SignalDeviceEventHandler+0x12c>
			device.InterfaceSettings[i] = 0;
 8003ee0:	4a3f      	ldr	r2, [pc, #252]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
		for (i=0;i<NUM_INTERFACES;i++) {
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	ddf2      	ble.n	8003ee0 <USBD_SignalDeviceEventHandler+0x118>
		}
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8003efa:	4b39      	ldr	r3, [pc, #228]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	4a37      	ldr	r2, [pc, #220]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003f02:	7912      	ldrb	r2, [r2, #4]
 8003f04:	2118      	movs	r1, #24
 8003f06:	4610      	mov	r0, r2
 8003f08:	4798      	blx	r3
		break;
 8003f0a:	e064      	b.n	8003fd6 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_SOF:
		EVENT_USB_Device_StartOfFrame();
 8003f0c:	f002 f8f2 	bl	80060f4 <USB_Event_Stub>
		break;
 8003f10:	e061      	b.n	8003fd6 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_CONNECT:
		EVENT_USB_Device_Connect();
 8003f12:	f7fc fd7a 	bl	8000a0a <EVENT_USB_Device_Connect>
		break;
 8003f16:	e05e      	b.n	8003fd6 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_DISCONNECT:
		USB_DeviceState = DEVICE_STATE_Powered;
 8003f18:	4b30      	ldr	r3, [pc, #192]	; (8003fdc <USBD_SignalDeviceEventHandler+0x214>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Disconnect();
 8003f1e:	f002 f8e9 	bl	80060f4 <USB_Event_Stub>
		break;
 8003f22:	e058      	b.n	8003fd6 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_POWER_OFF:
		 USB_DeviceState = DEVICE_STATE_Unattached;
 8003f24:	4b2d      	ldr	r3, [pc, #180]	; (8003fdc <USBD_SignalDeviceEventHandler+0x214>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	701a      	strb	r2, [r3, #0]
		 device.Driver->EndpointUnconfigure(0);
 8003f2a:	4b2d      	ldr	r3, [pc, #180]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	2000      	movs	r0, #0
 8003f32:	4798      	blx	r3
		 break;
 8003f34:	e04f      	b.n	8003fd6 <USBD_SignalDeviceEventHandler+0x20e>
    case XMC_USBD_EVENT_POWER_ON:
		 USB_DeviceState = DEVICE_STATE_Powered;
 8003f36:	4b29      	ldr	r3, [pc, #164]	; (8003fdc <USBD_SignalDeviceEventHandler+0x214>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	701a      	strb	r2, [r3, #0]
		 memset(&device,0x0,sizeof(USB_Device_t));
 8003f3c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f40:	2100      	movs	r1, #0
 8003f42:	4827      	ldr	r0, [pc, #156]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003f44:	f002 fe2a 	bl	8006b9c <memset>
		 device.Driver = &Driver_USBD0;
 8003f48:	4b25      	ldr	r3, [pc, #148]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003f4a:	4a26      	ldr	r2, [pc, #152]	; (8003fe4 <USBD_SignalDeviceEventHandler+0x21c>)
 8003f4c:	601a      	str	r2, [r3, #0]
		 device.EP0_State = IDLE;
 8003f4e:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		 device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8003f56:	4b22      	ldr	r3, [pc, #136]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003f58:	4a23      	ldr	r2, [pc, #140]	; (8003fe8 <USBD_SignalDeviceEventHandler+0x220>)
 8003f5a:	621a      	str	r2, [r3, #32]
		 device.Endpoints[0].InBufferLength = 256;
 8003f5c:	4b20      	ldr	r3, [pc, #128]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f62:	625a      	str	r2, [r3, #36]	; 0x24
		 device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8003f64:	4b1e      	ldr	r3, [pc, #120]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003f66:	4a21      	ldr	r2, [pc, #132]	; (8003fec <USBD_SignalDeviceEventHandler+0x224>)
 8003f68:	615a      	str	r2, [r3, #20]
		 device.Endpoints[0].OutBufferLength = 256;
 8003f6a:	4b1d      	ldr	r3, [pc, #116]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f70:	619a      	str	r2, [r3, #24]
		 device.Endpoints[0].Direction = 0;
 8003f72:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003f74:	7913      	ldrb	r3, [r2, #4]
 8003f76:	f36f 13c7 	bfc	r3, #7, #1
 8003f7a:	7113      	strb	r3, [r2, #4]
		 device.Endpoints[0].IsConfigured = 1;
 8003f7c:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003f7e:	7a13      	ldrb	r3, [r2, #8]
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	7213      	strb	r3, [r2, #8]
		 device.Endpoints[0].IsEnabled = 1;
 8003f86:	4a16      	ldr	r2, [pc, #88]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003f88:	7a13      	ldrb	r3, [r2, #8]
 8003f8a:	f043 0302 	orr.w	r3, r3, #2
 8003f8e:	7213      	strb	r3, [r2, #8]
		 device.Endpoints[0].MaxPacketSize = 64;
 8003f90:	4a13      	ldr	r2, [pc, #76]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003f92:	8913      	ldrh	r3, [r2, #8]
 8003f94:	2140      	movs	r1, #64	; 0x40
 8003f96:	f361 138c 	bfi	r3, r1, #6, #7
 8003f9a:	8113      	strh	r3, [r2, #8]

		  /* then configure endpoint 0 */
		 device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8003f9c:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	2240      	movs	r2, #64	; 0x40
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	4798      	blx	r3
					   (uint8_t)XMC_USBD_MAX_PACKET_SIZE);

		break;
 8003faa:	e014      	b.n	8003fd6 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_REMOTE_WAKEUP:
		break;
	case XMC_USBD_EVENT_RESUME:
		USB_DeviceState = device.PreSuspendDeviceState;
 8003fac:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003fae:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8003fb2:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <USBD_SignalDeviceEventHandler+0x214>)
 8003fb4:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_WakeUp();
 8003fb6:	f002 f89d 	bl	80060f4 <USB_Event_Stub>
		break;
 8003fba:	e00c      	b.n	8003fd6 <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_SUSPEND:
		device.PreSuspendDeviceState = USB_DeviceState;
 8003fbc:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <USBD_SignalDeviceEventHandler+0x214>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <USBD_SignalDeviceEventHandler+0x218>)
 8003fc4:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		USB_DeviceState = DEVICE_STATE_Suspended;
 8003fc8:	4b04      	ldr	r3, [pc, #16]	; (8003fdc <USBD_SignalDeviceEventHandler+0x214>)
 8003fca:	2205      	movs	r2, #5
 8003fcc:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Suspend();
 8003fce:	f002 f891 	bl	80060f4 <USB_Event_Stub>
		break;
 8003fd2:	e000      	b.n	8003fd6 <USBD_SignalDeviceEventHandler+0x20e>
	default:
		return;
 8003fd4:	bf00      	nop
	}
}
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	200012bd 	.word	0x200012bd
 8003fe0:	20000f70 	.word	0x20000f70
 8003fe4:	08006dbc 	.word	0x08006dbc
 8003fe8:	20000d70 	.word	0x20000d70
 8003fec:	20000e70 	.word	0x20000e70

08003ff0 <USBD_SignalEndpointEvent_Handler>:
 *
 * \param[in] ep_addr Endpoint address
 * \param[in] ep_event Endpoint event type
 *
 */
void USBD_SignalEndpointEvent_Handler (uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	460a      	mov	r2, r1
 8003ffa:	71fb      	strb	r3, [r7, #7]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	71bb      	strb	r3, [r7, #6]
	USBD_Endpoint_t *ep =  &device.Endpoints[ep_addr & ENDPOINT_EPNUM_MASK];
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	222c      	movs	r2, #44	; 0x2c
 8004008:	fb02 f303 	mul.w	r3, r2, r3
 800400c:	4a5d      	ldr	r2, [pc, #372]	; (8004184 <USBD_SignalEndpointEvent_Handler+0x194>)
 800400e:	4413      	add	r3, r2
 8004010:	3304      	adds	r3, #4
 8004012:	617b      	str	r3, [r7, #20]
	uint8_t temp_num,temp_dir;
	int32_t data_count;
	/* store CurrentEndpoint and direction for restore after handling */
	temp_num = device.CurrentEndpoint;
 8004014:	4b5b      	ldr	r3, [pc, #364]	; (8004184 <USBD_SignalEndpointEvent_Handler+0x194>)
 8004016:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800401a:	74fb      	strb	r3, [r7, #19]
	temp_dir = device.CurrentDirection;
 800401c:	4b59      	ldr	r3, [pc, #356]	; (8004184 <USBD_SignalEndpointEvent_Handler+0x194>)
 800401e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8004022:	74bb      	strb	r3, [r7, #18]
	/* select the given endpoint */
	device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	b2da      	uxtb	r2, r3
 800402c:	4b55      	ldr	r3, [pc, #340]	; (8004184 <USBD_SignalEndpointEvent_Handler+0x194>)
 800402e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
	device.CurrentDirection = ep_addr & ENDPOINT_DIR_MASK;
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004038:	b2da      	uxtb	r2, r3
 800403a:	4b52      	ldr	r3, [pc, #328]	; (8004184 <USBD_SignalEndpointEvent_Handler+0x194>)
 800403c:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	/* choose what to do based on the event */
	switch (ep_event) {
 8004040:	79bb      	ldrb	r3, [r7, #6]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d013      	beq.n	800406e <USBD_SignalEndpointEvent_Handler+0x7e>
 8004046:	2b02      	cmp	r3, #2
 8004048:	d03a      	beq.n	80040c0 <USBD_SignalEndpointEvent_Handler+0xd0>
 800404a:	2b00      	cmp	r3, #0
 800404c:	f040 808e 	bne.w	800416c <USBD_SignalEndpointEvent_Handler+0x17c>
	case XMC_USBD_EP_EVENT_SETUP:
		ep->OutInUse = 0;
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	8893      	ldrh	r3, [r2, #4]
 8004054:	f36f 03c3 	bfc	r3, #3, #1
 8004058:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 800405a:	4b4a      	ldr	r3, [pc, #296]	; (8004184 <USBD_SignalEndpointEvent_Handler+0x194>)
 800405c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d000      	beq.n	8004066 <USBD_SignalEndpointEvent_Handler+0x76>
		case 0:
			USBD_HandleEP0_SETUP();
			break;
		default:
			break;
 8004064:	e002      	b.n	800406c <USBD_SignalEndpointEvent_Handler+0x7c>
			USBD_HandleEP0_SETUP();
 8004066:	f7ff fe65 	bl	8003d34 <USBD_HandleEP0_SETUP>
			break;
 800406a:	bf00      	nop
		}
		break;
 800406c:	e07e      	b.n	800416c <USBD_SignalEndpointEvent_Handler+0x17c>
	case XMC_USBD_EP_EVENT_OUT:
		ep->IsOutRecieved = 1;
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	8893      	ldrh	r3, [r2, #4]
 8004072:	f043 0320 	orr.w	r3, r3, #32
 8004076:	8093      	strh	r3, [r2, #4]
		if (ep->OutBytesAvailable == 0) {
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d110      	bne.n	80040a2 <USBD_SignalEndpointEvent_Handler+0xb2>
			ep->OutOffset = 0; /* clear offset, new data is there */
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	2200      	movs	r2, #0
 8004084:	60da      	str	r2, [r3, #12]
			ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8004086:	4b3f      	ldr	r3, [pc, #252]	; (8004184 <USBD_SignalEndpointEvent_Handler+0x194>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	7810      	ldrb	r0, [r2, #0]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	6911      	ldr	r1, [r2, #16]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	6952      	ldr	r2, [r2, #20]
 8004098:	4798      	blx	r3
 800409a:	4603      	mov	r3, r0
 800409c:	461a      	mov	r2, r3
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	609a      	str	r2, [r3, #8]
		}
		ep->OutInUse = 0;
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	8893      	ldrh	r3, [r2, #4]
 80040a6:	f36f 03c3 	bfc	r3, #3, #1
 80040aa:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 80040ac:	4b35      	ldr	r3, [pc, #212]	; (8004184 <USBD_SignalEndpointEvent_Handler+0x194>)
 80040ae:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d000      	beq.n	80040b8 <USBD_SignalEndpointEvent_Handler+0xc8>
		case 0:
			USBD_HandleEP0_OUT();
			break;
		default:
			break;
 80040b6:	e002      	b.n	80040be <USBD_SignalEndpointEvent_Handler+0xce>
			USBD_HandleEP0_OUT();
 80040b8:	f7ff fe12 	bl	8003ce0 <USBD_HandleEP0_OUT>
			break;
 80040bc:	bf00      	nop
		}
		break;
 80040be:	e055      	b.n	800416c <USBD_SignalEndpointEvent_Handler+0x17c>
	case XMC_USBD_EP_EVENT_IN:
		/* loop write transfers */
		if (ep->InDataLeft> 0) {
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d017      	beq.n	80040f8 <USBD_SignalEndpointEvent_Handler+0x108>
			data_count = device.Driver->EndpointWrite(ep->Address,ep->InDataBuffer,ep->InDataLeft);
 80040c8:	4b2e      	ldr	r3, [pc, #184]	; (8004184 <USBD_SignalEndpointEvent_Handler+0x194>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	7810      	ldrb	r0, [r2, #0]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040da:	4798      	blx	r3
 80040dc:	60f8      	str	r0, [r7, #12]
			ep->InDataLeft -= data_count;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1ad2      	subs	r2, r2, r3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	625a      	str	r2, [r3, #36]	; 0x24
			ep->InDataBuffer+= data_count;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	441a      	add	r2, r3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	629a      	str	r2, [r3, #40]	; 0x28
			return;
 80040f6:	e041      	b.n	800417c <USBD_SignalEndpointEvent_Handler+0x18c>
		} else if (ep->Number == 0 && ep->InBytesAvailable > 0 && ep->InBytesAvailable!=USB_ControlRequest.wLength && ep->InBytesAvailable % ep->MaxPacketSize == 0) {
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d120      	bne.n	8004148 <USBD_SignalEndpointEvent_Handler+0x158>
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d01c      	beq.n	8004148 <USBD_SignalEndpointEvent_Handler+0x158>
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	4a1d      	ldr	r2, [pc, #116]	; (8004188 <USBD_SignalEndpointEvent_Handler+0x198>)
 8004114:	88d2      	ldrh	r2, [r2, #6]
 8004116:	b292      	uxth	r2, r2
 8004118:	4293      	cmp	r3, r2
 800411a:	d015      	beq.n	8004148 <USBD_SignalEndpointEvent_Handler+0x158>
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	8892      	ldrh	r2, [r2, #4]
 8004124:	f3c2 1286 	ubfx	r2, r2, #6, #7
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	fbb3 f1f2 	udiv	r1, r3, r2
 800412e:	fb02 f201 	mul.w	r2, r2, r1
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d107      	bne.n	8004148 <USBD_SignalEndpointEvent_Handler+0x158>
			/* if the amount of data for endpoint 0 is exact the requested amount, then no zlp has to be send */
			device.Driver->EndpointWrite(ep->Address,0,0);
 8004138:	4b12      	ldr	r3, [pc, #72]	; (8004184 <USBD_SignalEndpointEvent_Handler+0x194>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	7810      	ldrb	r0, [r2, #0]
 8004142:	2200      	movs	r2, #0
 8004144:	2100      	movs	r1, #0
 8004146:	4798      	blx	r3
		}
		ep->InBytesAvailable = 0;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2200      	movs	r2, #0
 800414c:	619a      	str	r2, [r3, #24]
		ep->InInUse = 0;
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	8893      	ldrh	r3, [r2, #4]
 8004152:	f36f 1304 	bfc	r3, #4, #1
 8004156:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 8004158:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <USBD_SignalEndpointEvent_Handler+0x194>)
 800415a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800415e:	2b00      	cmp	r3, #0
 8004160:	d000      	beq.n	8004164 <USBD_SignalEndpointEvent_Handler+0x174>
		case 0:
			USBD_HandleEP0_IN();
			break;
		default:
			break;
 8004162:	e002      	b.n	800416a <USBD_SignalEndpointEvent_Handler+0x17a>
			USBD_HandleEP0_IN();
 8004164:	f7ff fd96 	bl	8003c94 <USBD_HandleEP0_IN>
			break;
 8004168:	bf00      	nop
		}
		break;
 800416a:	bf00      	nop
	}
	device.CurrentEndpoint = temp_num;
 800416c:	4a05      	ldr	r2, [pc, #20]	; (8004184 <USBD_SignalEndpointEvent_Handler+0x194>)
 800416e:	7cfb      	ldrb	r3, [r7, #19]
 8004170:	f882 313c 	strb.w	r3, [r2, #316]	; 0x13c
	device.CurrentDirection = temp_dir;
 8004174:	4a03      	ldr	r2, [pc, #12]	; (8004184 <USBD_SignalEndpointEvent_Handler+0x194>)
 8004176:	7cbb      	ldrb	r3, [r7, #18]
 8004178:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
}
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000f70 	.word	0x20000f70
 8004188:	200012c0 	.word	0x200012c0

0800418c <USBD_Initialize>:
 * \brief Initialize driver core and driver
 *
 * Intializes the USB driver core data structures and sets it into default state. Afterwards
 * it initializes the USB device controller driver and prepare it for connection via \ref USBD_Connect.
 */
int USBD_Initialize(XMC_USBD_t *usb_init) {
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
	int32_t status = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	60fb      	str	r3, [r7, #12]
	memset(&device,0x0,sizeof(USB_Device_t));
 8004198:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800419c:	2100      	movs	r1, #0
 800419e:	4829      	ldr	r0, [pc, #164]	; (8004244 <USBD_Initialize+0xb8>)
 80041a0:	f002 fcfc 	bl	8006b9c <memset>
	USB_DeviceState = DEVICE_STATE_Unattached;
 80041a4:	4b28      	ldr	r3, [pc, #160]	; (8004248 <USBD_Initialize+0xbc>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	701a      	strb	r2, [r3, #0]
	device.Driver = &Driver_USBD0;
 80041aa:	4b26      	ldr	r3, [pc, #152]	; (8004244 <USBD_Initialize+0xb8>)
 80041ac:	4a27      	ldr	r2, [pc, #156]	; (800424c <USBD_Initialize+0xc0>)
 80041ae:	601a      	str	r2, [r3, #0]
	device.EP0_State = IDLE;
 80041b0:	4b24      	ldr	r3, [pc, #144]	; (8004244 <USBD_Initialize+0xb8>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 80041b8:	4b22      	ldr	r3, [pc, #136]	; (8004244 <USBD_Initialize+0xb8>)
 80041ba:	4a25      	ldr	r2, [pc, #148]	; (8004250 <USBD_Initialize+0xc4>)
 80041bc:	621a      	str	r2, [r3, #32]
	device.Endpoints[0].InBufferLength = 256;
 80041be:	4b21      	ldr	r3, [pc, #132]	; (8004244 <USBD_Initialize+0xb8>)
 80041c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 80041c6:	4b1f      	ldr	r3, [pc, #124]	; (8004244 <USBD_Initialize+0xb8>)
 80041c8:	4a22      	ldr	r2, [pc, #136]	; (8004254 <USBD_Initialize+0xc8>)
 80041ca:	615a      	str	r2, [r3, #20]
	device.Endpoints[0].OutBufferLength = 256;
 80041cc:	4b1d      	ldr	r3, [pc, #116]	; (8004244 <USBD_Initialize+0xb8>)
 80041ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041d2:	619a      	str	r2, [r3, #24]
	device.Endpoints[0].Direction = 0;
 80041d4:	4a1b      	ldr	r2, [pc, #108]	; (8004244 <USBD_Initialize+0xb8>)
 80041d6:	7913      	ldrb	r3, [r2, #4]
 80041d8:	f36f 13c7 	bfc	r3, #7, #1
 80041dc:	7113      	strb	r3, [r2, #4]
	device.Endpoints[0].IsConfigured = 1;
 80041de:	4a19      	ldr	r2, [pc, #100]	; (8004244 <USBD_Initialize+0xb8>)
 80041e0:	7a13      	ldrb	r3, [r2, #8]
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].IsEnabled = 1;
 80041e8:	4a16      	ldr	r2, [pc, #88]	; (8004244 <USBD_Initialize+0xb8>)
 80041ea:	7a13      	ldrb	r3, [r2, #8]
 80041ec:	f043 0302 	orr.w	r3, r3, #2
 80041f0:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].MaxPacketSize = 64;
 80041f2:	4a14      	ldr	r2, [pc, #80]	; (8004244 <USBD_Initialize+0xb8>)
 80041f4:	8913      	ldrh	r3, [r2, #8]
 80041f6:	2140      	movs	r1, #64	; 0x40
 80041f8:	f361 138c 	bfi	r3, r1, #6, #7
 80041fc:	8113      	strh	r3, [r2, #8]

	/* First initalize the device */
	status = device.Driver->Initialize(usb_init);
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <USBD_Initialize+0xb8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4798      	blx	r3
 8004208:	4603      	mov	r3, r0
 800420a:	60fb      	str	r3, [r7, #12]
	if (status != XMC_USBD_STATUS_OK)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <USBD_Initialize+0x8c>
		return -1;
 8004212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004216:	e011      	b.n	800423c <USBD_Initialize+0xb0>

	/* then configure endpoint 0 */
	device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8004218:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <USBD_Initialize+0xb8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	2240      	movs	r2, #64	; 0x40
 8004220:	2100      	movs	r1, #0
 8004222:	2000      	movs	r0, #0
 8004224:	4798      	blx	r3
			(uint8_t)XMC_USBD_MAX_PACKET_SIZE);
	if (status != XMC_USBD_STATUS_OK) {
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d006      	beq.n	800423a <USBD_Initialize+0xae>
		device.Driver->Uninitialize();
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <USBD_Initialize+0xb8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	4798      	blx	r3
		return -1;
 8004234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004238:	e000      	b.n	800423c <USBD_Initialize+0xb0>
	}

	return 0;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	20000f70 	.word	0x20000f70
 8004248:	200012bd 	.word	0x200012bd
 800424c:	08006dbc 	.word	0x08006dbc
 8004250:	20000d70 	.word	0x20000d70
 8004254:	20000e70 	.word	0x20000e70

08004258 <USB_IsEnumDone>:
/**
 * \brief Is the enumeration finished?
 *
 * Tell the USB device controller driver if the enumeration interrupt have been reached
 */
int USB_IsEnumDone(void){
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
	if (device.Driver->IsEnumDone())
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <USB_IsEnumDone+0x1c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004262:	4798      	blx	r3
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <USB_IsEnumDone+0x16>
		return 1;
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <USB_IsEnumDone+0x18>
	else
		return 0;
 800426e:	2300      	movs	r3, #0
 }
 8004270:	4618      	mov	r0, r3
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20000f70 	.word	0x20000f70

08004278 <USBD_SetEndpointBuffer>:
 *
 * \param[in] addr Endpoint address
 * \param[in] buf Buffer pointer
 * \param[in] len Buffer length
 */
void USBD_SetEndpointBuffer(uint8_t addr,uint8_t *buf,uint16_t len) {
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	6039      	str	r1, [r7, #0]
 8004282:	71fb      	strb	r3, [r7, #7]
 8004284:	4613      	mov	r3, r2
 8004286:	80bb      	strh	r3, [r7, #4]
	uint8_t number  = addr & ENDPOINT_EPNUM_MASK;
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	73fb      	strb	r3, [r7, #15]
	if (addr & ENDPOINT_DIR_MASK) {
 8004290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004294:	2b00      	cmp	r3, #0
 8004296:	da12      	bge.n	80042be <USBD_SetEndpointBuffer+0x46>
		device.Endpoints[number].InBuffer = buf;
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	4a15      	ldr	r2, [pc, #84]	; (80042f0 <USBD_SetEndpointBuffer+0x78>)
 800429c:	212c      	movs	r1, #44	; 0x2c
 800429e:	fb01 f303 	mul.w	r3, r1, r3
 80042a2:	4413      	add	r3, r2
 80042a4:	3320      	adds	r3, #32
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	601a      	str	r2, [r3, #0]
		device.Endpoints[number].InBufferLength = len;
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	88ba      	ldrh	r2, [r7, #4]
 80042ae:	4910      	ldr	r1, [pc, #64]	; (80042f0 <USBD_SetEndpointBuffer+0x78>)
 80042b0:	202c      	movs	r0, #44	; 0x2c
 80042b2:	fb00 f303 	mul.w	r3, r0, r3
 80042b6:	440b      	add	r3, r1
 80042b8:	3324      	adds	r3, #36	; 0x24
 80042ba:	601a      	str	r2, [r3, #0]
	} else {
		device.Endpoints[number].OutBuffer = buf;
		device.Endpoints[number].OutBufferLength = len;
	}
}
 80042bc:	e011      	b.n	80042e2 <USBD_SetEndpointBuffer+0x6a>
		device.Endpoints[number].OutBuffer = buf;
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	4a0b      	ldr	r2, [pc, #44]	; (80042f0 <USBD_SetEndpointBuffer+0x78>)
 80042c2:	212c      	movs	r1, #44	; 0x2c
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	4413      	add	r3, r2
 80042ca:	3314      	adds	r3, #20
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	601a      	str	r2, [r3, #0]
		device.Endpoints[number].OutBufferLength = len;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	88ba      	ldrh	r2, [r7, #4]
 80042d4:	4906      	ldr	r1, [pc, #24]	; (80042f0 <USBD_SetEndpointBuffer+0x78>)
 80042d6:	202c      	movs	r0, #44	; 0x2c
 80042d8:	fb00 f303 	mul.w	r3, r0, r3
 80042dc:	440b      	add	r3, r1
 80042de:	3318      	adds	r3, #24
 80042e0:	601a      	str	r2, [r3, #0]
}
 80042e2:	bf00      	nop
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20000f70 	.word	0x20000f70

080042f4 <XMC_USBD_lDeviceActive>:
 * Therefore the endpoint inInUse flag are checked and if one endpoint is in use, 1 is returned,
 * else 0 is returned.
 * @return 1 if an endpoint is active else 0
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t result = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8004300:	2300      	movs	r3, #0
 8004302:	73fb      	strb	r3, [r7, #15]
 8004304:	e01c      	b.n	8004340 <XMC_USBD_lDeviceActive+0x4c>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	4a13      	ldr	r2, [pc, #76]	; (8004358 <XMC_USBD_lDeviceActive+0x64>)
 800430a:	2134      	movs	r1, #52	; 0x34
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	4413      	add	r3, r2
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10b      	bne.n	8004336 <XMC_USBD_lDeviceActive+0x42>
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	4a0d      	ldr	r2, [pc, #52]	; (8004358 <XMC_USBD_lDeviceActive+0x64>)
 8004322:	2134      	movs	r1, #52	; 0x34
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	4413      	add	r3, r2
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <XMC_USBD_lDeviceActive+0x46>
    {
      result = 1U;
 8004336:	2301      	movs	r3, #1
 8004338:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	3301      	adds	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	7b1b      	ldrb	r3, [r3, #12]
 8004344:	7bfa      	ldrb	r2, [r7, #15]
 8004346:	429a      	cmp	r2, r3
 8004348:	d3dd      	bcc.n	8004306 <XMC_USBD_lDeviceActive+0x12>
    }
  }
  return result;
 800434a:	7bbb      	ldrb	r3, [r7, #14]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	200010b4 	.word	0x200010b4

0800435c <XMC_USBD_lReadFifo>:
 *
 * @arg ep_num the endpoint to read for
 * @arg byte_count the byte count to read
 */
static void XMC_USBD_lReadFifo(const uint32_t ep_num,const uint32_t byte_count) 
{
 800435c:	b480      	push	{r7}
 800435e:	b08b      	sub	sp, #44	; 0x2c
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2234      	movs	r2, #52	; 0x34
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	4a34      	ldr	r2, [pc, #208]	; (8004440 <XMC_USBD_lReadFifo+0xe4>)
 8004370:	4413      	add	r3, r2
 8004372:	623b      	str	r3, [r7, #32]
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 8004374:	4b32      	ldr	r3, [pc, #200]	; (8004440 <XMC_USBD_lReadFifo+0xe4>)
 8004376:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800437a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 800437c:	4a30      	ldr	r2, [pc, #192]	; (8004440 <XMC_USBD_lReadFifo+0xe4>)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3370      	adds	r3, #112	; 0x70
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60fb      	str	r3, [r7, #12]
  word_count = (byte_count >> 2U );
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	089b      	lsrs	r3, r3, #2
 8004390:	61bb      	str	r3, [r7, #24]
  temp_word_count = (word_count << 2U);
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	617b      	str	r3, [r7, #20]
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8004398:	7b7b      	ldrb	r3, [r7, #13]
 800439a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d047      	beq.n	8004434 <XMC_USBD_lReadFifo+0xd8>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d043      	beq.n	8004434 <XMC_USBD_lReadFifo+0xd8>
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 80043ac:	2300      	movs	r3, #0
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
 80043b0:	e00a      	b.n	80043c8 <XMC_USBD_lReadFifo+0x6c>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	601a      	str	r2, [r3, #0]
    for (i = 0U;i < word_count; i++)
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	3301      	adds	r3, #1
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
 80043c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d3f0      	bcc.n	80043b2 <XMC_USBD_lReadFifo+0x56>
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d021      	beq.n	800441c <XMC_USBD_lReadFifo+0xc0>
    {
      temp_data = *fifo;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	613b      	str	r3, [r7, #16]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 80043de:	2300      	movs	r3, #0
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
 80043e2:	e015      	b.n	8004410 <XMC_USBD_lReadFifo+0xb4>
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	22ff      	movs	r2, #255	; 0xff
 80043ea:	409a      	lsls	r2, r3
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	401a      	ands	r2, r3
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	fa22 f003 	lsr.w	r0, r2, r3
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	0099      	lsls	r1, r3, #2
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	440b      	add	r3, r1
 8004404:	4413      	add	r3, r2
 8004406:	b2c2      	uxtb	r2, r0
 8004408:	701a      	strb	r2, [r3, #0]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	3301      	adds	r3, #1
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	4413      	add	r3, r2
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d8e3      	bhi.n	80043e4 <XMC_USBD_lReadFifo+0x88>
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	441a      	add	r2, r3
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	441a      	add	r2, r3
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004434:	bf00      	nop
 8004436:	372c      	adds	r7, #44	; 0x2c
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	200010b4 	.word	0x200010b4

08004444 <XMC_USBD_lWriteFifo>:
 *
 * @arg[in] ep the endpoint to use
 * @return the number of bytes written to the fifo
 */
static uint32_t XMC_USBD_lWriteFifo(XMC_USBD_EP_t *const ep) 
{
 8004444:	b480      	push	{r7}
 8004446:	b089      	sub	sp, #36	; 0x24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004454:	b2db      	uxtb	r3, r3
 8004456:	4a23      	ldr	r2, [pc, #140]	; (80044e4 <XMC_USBD_lWriteFifo+0xa0>)
 8004458:	3378      	adds	r3, #120	; 0x78
 800445a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800445e:	60fb      	str	r3, [r7, #12]
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004468:	b2db      	uxtb	r3, r3
 800446a:	4a1e      	ldr	r2, [pc, #120]	; (80044e4 <XMC_USBD_lWriteFifo+0xa0>)
 800446c:	336a      	adds	r3, #106	; 0x6a
 800446e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	60bb      	str	r3, [r7, #8]
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	61fb      	str	r3, [r7, #28]
  if (!byte_count)
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <XMC_USBD_lWriteFifo+0x4a>
  {
    result = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	e023      	b.n	80044d6 <XMC_USBD_lWriteFifo+0x92>
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3303      	adds	r3, #3
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	61bb      	str	r3, [r7, #24]
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 8004496:	893b      	ldrh	r3, [r7, #8]
 8004498:	461a      	mov	r2, r3
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	4293      	cmp	r3, r2
 800449e:	d904      	bls.n	80044aa <XMC_USBD_lWriteFifo+0x66>
    {
      word_count = (uint32_t)freeSpace.b.txfspcavail;
 80044a0:	893b      	ldrh	r3, [r7, #8]
 80044a2:	61bb      	str	r3, [r7, #24]
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	61fb      	str	r3, [r7, #28]
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 80044aa:	2300      	movs	r3, #0
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	e00c      	b.n	80044ca <XMC_USBD_lWriteFifo+0x86>
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	601a      	str	r2, [r3, #0]
      i++;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	3301      	adds	r3, #1
 80044be:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	1d1a      	adds	r2, r3, #4
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	625a      	str	r2, [r3, #36]	; 0x24
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d3ee      	bcc.n	80044b0 <XMC_USBD_lWriteFifo+0x6c>
    }
    result=byte_count;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	617b      	str	r3, [r7, #20]
  }
  return result;
 80044d6:	697b      	ldr	r3, [r7, #20]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3724      	adds	r7, #36	; 0x24
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	200010b4 	.word	0x200010b4

080044e8 <XMC_USBD_lFlushTXFifo>:
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]
  /*flush fifo */
  data.b.txfflsh = 1U;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f043 0320 	orr.w	r3, r3, #32
 80044fc:	60bb      	str	r3, [r7, #8]
  data.b.txfnum = fifo_num;
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	f003 031f 	and.w	r3, r3, #31
 8004504:	b2da      	uxtb	r2, r3
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f362 138a 	bfi	r3, r2, #6, #5
 800450c:	60bb      	str	r3, [r7, #8]
  xmc_device.global_register->grstctl = data.d32;
 800450e:	4b14      	ldr	r3, [pc, #80]	; (8004560 <XMC_USBD_lFlushTXFifo+0x78>)
 8004510:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	e002      	b.n	8004524 <XMC_USBD_lFlushTXFifo+0x3c>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3301      	adds	r3, #1
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800452a:	d3f8      	bcc.n	800451e <XMC_USBD_lFlushTXFifo+0x36>
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 800452c:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <XMC_USBD_lFlushTXFifo+0x78>)
 800452e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	60bb      	str	r3, [r7, #8]
  } while (data.b.txfflsh);
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f4      	bne.n	800452c <XMC_USBD_lFlushTXFifo+0x44>
    count = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
  while (count++ < 1000U)
 8004546:	bf00      	nop
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	60fa      	str	r2, [r7, #12]
 800454e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004552:	d3f9      	bcc.n	8004548 <XMC_USBD_lFlushTXFifo+0x60>
  {
    /* wait 3 phy clocks */
  }
}
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	200010b4 	.word	0x200010b4

08004564 <XMC_USBD_lFlushRXFifo>:

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void) 
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	603b      	str	r3, [r7, #0]
  data.b.rxfflsh = 1U;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	f043 0310 	orr.w	r3, r3, #16
 8004574:	603b      	str	r3, [r7, #0]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 8004576:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <XMC_USBD_lFlushRXFifo+0x64>)
 8004578:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
 8004580:	2300      	movs	r3, #0
 8004582:	607b      	str	r3, [r7, #4]
 8004584:	e002      	b.n	800458c <XMC_USBD_lFlushRXFifo+0x28>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3301      	adds	r3, #1
 800458a:	607b      	str	r3, [r7, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004592:	d3f8      	bcc.n	8004586 <XMC_USBD_lFlushRXFifo+0x22>
    data.d32 = xmc_device.global_register->grstctl;
 8004594:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <XMC_USBD_lFlushRXFifo+0x64>)
 8004596:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	603b      	str	r3, [r7, #0]
  } while (data.b.rxfflsh);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1ea      	bne.n	8004580 <XMC_USBD_lFlushRXFifo+0x1c>
  count = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	607b      	str	r3, [r7, #4]
  while (count++ < 1000U)
 80045ae:	bf00      	nop
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045ba:	d3f9      	bcc.n	80045b0 <XMC_USBD_lFlushRXFifo+0x4c>
  {
    /* wait 3 phy clocks */
  }
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	200010b4 	.word	0x200010b4

080045cc <XMC_USBD_lAssignTXFifo>:
 * A free tx fifo will be searched and the number will be returned.
 *
 * @return Fifo number for a free fifo
 */
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
  uint16_t mask = 1U;
 80045d2:	2301      	movs	r3, #1
 80045d4:	80fb      	strh	r3, [r7, #6]
  uint8_t i = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	717b      	strb	r3, [r7, #5]
  uint8_t result = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	713b      	strb	r3, [r7, #4]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80045de:	e005      	b.n	80045ec <XMC_USBD_lAssignTXFifo+0x20>
  {
    mask = (uint16_t)(mask << 1U);
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	80fb      	strh	r3, [r7, #6]
    i++;
 80045e6:	797b      	ldrb	r3, [r7, #5]
 80045e8:	3301      	adds	r3, #1
 80045ea:	717b      	strb	r3, [r7, #5]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80045ec:	797b      	ldrb	r3, [r7, #5]
 80045ee:	2b06      	cmp	r3, #6
 80045f0:	d807      	bhi.n	8004602 <XMC_USBD_lAssignTXFifo+0x36>
 80045f2:	4b11      	ldr	r3, [pc, #68]	; (8004638 <XMC_USBD_lAssignTXFifo+0x6c>)
 80045f4:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	4013      	ands	r3, r2
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1ee      	bne.n	80045e0 <XMC_USBD_lAssignTXFifo+0x14>
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 8004602:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <XMC_USBD_lAssignTXFifo+0x6c>)
 8004604:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8004608:	88fb      	ldrh	r3, [r7, #6]
 800460a:	4013      	ands	r3, r2
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10a      	bne.n	8004628 <XMC_USBD_lAssignTXFifo+0x5c>
  {
    xmc_device.txfifomsk |= mask;
 8004612:	4b09      	ldr	r3, [pc, #36]	; (8004638 <XMC_USBD_lAssignTXFifo+0x6c>)
 8004614:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	4313      	orrs	r3, r2
 800461c:	b29a      	uxth	r2, r3
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <XMC_USBD_lAssignTXFifo+0x6c>)
 8004620:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result=i;
 8004624:	797b      	ldrb	r3, [r7, #5]
 8004626:	713b      	strb	r3, [r7, #4]
  }
  return result;
 8004628:	793b      	ldrb	r3, [r7, #4]
}
 800462a:	4618      	mov	r0, r3
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	200010b4 	.word	0x200010b4

0800463c <XMC_USBD_lUnassignFifo>:
 *
 * Mark an used tx fifo as free.
 * @param[in] fifo_nr Fifo number to free
 */
static void XMC_USBD_lUnassignFifo(const uint8_t fifo_nr) 
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	71fb      	strb	r3, [r7, #7]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 8004646:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <XMC_USBD_lUnassignFifo+0x34>)
 8004648:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	2101      	movs	r1, #1
 8004650:	fa01 f303 	lsl.w	r3, r1, r3
 8004654:	b29b      	uxth	r3, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	b29b      	uxth	r3, r3
 800465a:	4013      	ands	r3, r2
 800465c:	b29a      	uxth	r2, r3
 800465e:	4b04      	ldr	r3, [pc, #16]	; (8004670 <XMC_USBD_lUnassignFifo+0x34>)
 8004660:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	200010b4 	.word	0x200010b4

08004674 <XMC_USBD_lStartReadXfer>:
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 800467c:	2300      	movs	r3, #0
 800467e:	613b      	str	r3, [r7, #16]
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6892      	ldr	r2, [r2, #8]
 800468e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8004692:	4293      	cmp	r3, r2
 8004694:	d909      	bls.n	80046aa <XMC_USBD_lStartReadXfer+0x36>
  {
    ep->xferLength += ep->maxTransferSize;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6892      	ldr	r2, [r2, #8]
 800469e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80046a2:	441a      	add	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	629a      	str	r2, [r3, #40]	; 0x28
 80046a8:	e003      	b.n	80046b2 <XMC_USBD_lStartReadXfer+0x3e>
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->address_u.address_st.number == 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d118      	bne.n	80046f2 <XMC_USBD_lStartReadXfer+0x7e>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
 80046c0:	f107 0310 	add.w	r3, r7, #16
 80046c4:	617b      	str	r3, [r7, #20]
    ep0_data->b.pktcnt = 0x1U;
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	7893      	ldrb	r3, [r2, #2]
 80046ca:	2101      	movs	r1, #1
 80046cc:	f361 03c4 	bfi	r3, r1, #3, #2
 80046d0:	7093      	strb	r3, [r2, #2]
    ep0_data->b.supcnt = 0x3U;
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	78d3      	ldrb	r3, [r2, #3]
 80046d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046da:	70d3      	strb	r3, [r2, #3]
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e4:	b2d9      	uxtb	r1, r3
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	7813      	ldrb	r3, [r2, #0]
 80046ea:	f361 0306 	bfi	r3, r1, #0, #7
 80046ee:	7013      	strb	r3, [r2, #0]
 80046f0:	e032      	b.n	8004758 <XMC_USBD_lStartReadXfer+0xe4>
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <XMC_USBD_lStartReadXfer+0x9a>
    {
      data.b.xfersize = 0U;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f36f 0312 	bfc	r3, #0, #19
 8004700:	613b      	str	r3, [r7, #16]
      data.b.pktcnt = 1U;
 8004702:	8a7b      	ldrh	r3, [r7, #18]
 8004704:	2201      	movs	r2, #1
 8004706:	f362 03cc 	bfi	r3, r2, #3, #10
 800470a:	827b      	strh	r3, [r7, #18]
 800470c:	e024      	b.n	8004758 <XMC_USBD_lStartReadXfer+0xe4>
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6852      	ldr	r2, [r2, #4]
 800471c:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	4413      	add	r3, r2
 8004724:	3b01      	subs	r3, #1
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6852      	ldr	r2, [r2, #4]
 800472a:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	fbb3 f3f2 	udiv	r3, r3, r2
 8004734:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004738:	b29a      	uxth	r2, r3
 800473a:	8a7b      	ldrh	r3, [r7, #18]
 800473c:	f362 03cc 	bfi	r3, r2, #3, #10
 8004740:	827b      	strh	r3, [r7, #18]
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f362 0312 	bfi	r3, r2, #0, #19
 8004756:	613b      	str	r3, [r7, #16]
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004758:	4b22      	ldr	r3, [pc, #136]	; (80047e4 <XMC_USBD_lStartReadXfer+0x170>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	7b5b      	ldrb	r3, [r3, #13]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10d      	bne.n	800477e <XMC_USBD_lStartReadXfer+0x10a>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800476e:	b2db      	uxtb	r3, r3
 8004770:	4a1d      	ldr	r2, [pc, #116]	; (80047e8 <XMC_USBD_lStartReadXfer+0x174>)
 8004772:	3370      	adds	r3, #112	; 0x70
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	460a      	mov	r2, r1
 800477c:	615a      	str	r2, [r3, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004786:	b2db      	uxtb	r3, r3
 8004788:	4a17      	ldr	r2, [pc, #92]	; (80047e8 <XMC_USBD_lStartReadXfer+0x174>)
 800478a:	3370      	adds	r3, #112	; 0x70
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	611a      	str	r2, [r3, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	4a11      	ldr	r2, [pc, #68]	; (80047e8 <XMC_USBD_lStartReadXfer+0x174>)
 80047a2:	3370      	adds	r3, #112	; 0x70
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60fb      	str	r3, [r7, #12]
  epctl.b.cnak = 1U;
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	f043 0304 	orr.w	r3, r3, #4
 80047b4:	73fb      	strb	r3, [r7, #15]
  epctl.b.epena = 1U;
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
 80047b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047bc:	73fb      	strb	r3, [r7, #15]
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	4a07      	ldr	r2, [pc, #28]	; (80047e8 <XMC_USBD_lStartReadXfer+0x174>)
 80047ca:	3370      	adds	r3, #112	; 0x70
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	601a      	str	r2, [r3, #0]
}
 80047d6:	bf00      	nop
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	200010b0 	.word	0x200010b0
 80047e8:	200010b4 	.word	0x200010b4

080047ec <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004800:	b2db      	uxtb	r3, r3
 8004802:	4a5e      	ldr	r2, [pc, #376]	; (800497c <XMC_USBD_lStartWriteXfer+0x190>)
 8004804:	336a      	adds	r3, #106	; 0x6a
 8004806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60bb      	str	r3, [r7, #8]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6892      	ldr	r2, [r2, #8]
 800481c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8004820:	4293      	cmp	r3, r2
 8004822:	d204      	bcs.n	800482e <XMC_USBD_lStartWriteXfer+0x42>
  {
    ep->xferLength = ep->xferTotal;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	629a      	str	r2, [r3, #40]	; 0x28
 800482c:	e008      	b.n	8004840 <XMC_USBD_lStartWriteXfer+0x54>
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6892      	ldr	r2, [r2, #8]
 8004836:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800483a:	441a      	add	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	2b00      	cmp	r3, #0
 8004846:	d109      	bne.n	800485c <XMC_USBD_lStartWriteXfer+0x70>
  {
    size.b.xfersize = 0U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f36f 0312 	bfc	r3, #0, #19
 800484e:	60fb      	str	r3, [r7, #12]
    size.b.pktcnt = 1U;
 8004850:	89fb      	ldrh	r3, [r7, #14]
 8004852:	2201      	movs	r2, #1
 8004854:	f362 03cc 	bfi	r3, r2, #3, #10
 8004858:	81fb      	strh	r3, [r7, #14]
 800485a:	e06b      	b.n	8004934 <XMC_USBD_lStartWriteXfer+0x148>
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d110      	bne.n	800488c <XMC_USBD_lStartWriteXfer+0xa0>
    {
      size.b.pktcnt = 1U;
 800486a:	89fb      	ldrh	r3, [r7, #14]
 800486c:	2201      	movs	r2, #1
 800486e:	f362 03cc 	bfi	r3, r2, #3, #10
 8004872:	81fb      	strh	r3, [r7, #14]
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f362 0312 	bfi	r3, r2, #0, #19
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	e02a      	b.n	80048e2 <XMC_USBD_lStartWriteXfer+0xf6>
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f3c3 0212 	ubfx	r2, r3, #0, #19
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f362 0312 	bfi	r3, r2, #0, #19
 80048a0:	60fb      	str	r3, [r7, #12]
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f3c3 23c6 	ubfx	r3, r3, #11, #7
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	4413      	add	r3, r2
    		 ep->maxPacketSize);
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6852      	ldr	r2, [r2, #4]
 80048ca:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 80048ce:	b2d2      	uxtb	r2, r2
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 80048d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80048d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048d8:	b29a      	uxth	r2, r3
 80048da:	89fb      	ldrh	r3, [r7, #14]
 80048dc:	f362 03cc 	bfi	r3, r2, #3, #10
 80048e0:	81fb      	strh	r3, [r7, #14]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80048e2:	4b27      	ldr	r3, [pc, #156]	; (8004980 <XMC_USBD_lStartWriteXfer+0x194>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	7b5b      	ldrb	r3, [r3, #13]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10c      	bne.n	8004906 <XMC_USBD_lStartWriteXfer+0x11a>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	4a20      	ldr	r2, [pc, #128]	; (800497c <XMC_USBD_lStartWriteXfer+0x190>)
 80048fc:	336a      	adds	r3, #106	; 0x6a
 80048fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004902:	460a      	mov	r2, r1
 8004904:	615a      	str	r2, [r3, #20]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8004906:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <XMC_USBD_lStartWriteXfer+0x194>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	7b5b      	ldrb	r3, [r3, #13]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d111      	bne.n	8004934 <XMC_USBD_lStartWriteXfer+0x148>
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8004910:	4b1a      	ldr	r3, [pc, #104]	; (800497c <XMC_USBD_lStartWriteXfer+0x190>)
 8004912:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004916:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004920:	b2db      	uxtb	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	2301      	movs	r3, #1
 8004926:	fa03 f202 	lsl.w	r2, r3, r2
 800492a:	4b14      	ldr	r3, [pc, #80]	; (800497c <XMC_USBD_lStartWriteXfer+0x190>)
 800492c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004930:	430a      	orrs	r2, r1
 8004932:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800493c:	b2db      	uxtb	r3, r3
 800493e:	4a0f      	ldr	r2, [pc, #60]	; (800497c <XMC_USBD_lStartWriteXfer+0x190>)
 8004940:	336a      	adds	r3, #106	; 0x6a
 8004942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	611a      	str	r2, [r3, #16]
  ctl.b.epena = 1U;
 800494a:	7afb      	ldrb	r3, [r7, #11]
 800494c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004950:	72fb      	strb	r3, [r7, #11]
  ctl.b.cnak = 1U;
 8004952:	7afb      	ldrb	r3, [r7, #11]
 8004954:	f043 0304 	orr.w	r3, r3, #4
 8004958:	72fb      	strb	r3, [r7, #11]
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004962:	b2db      	uxtb	r3, r3
 8004964:	4a05      	ldr	r2, [pc, #20]	; (800497c <XMC_USBD_lStartWriteXfer+0x190>)
 8004966:	336a      	adds	r3, #106	; 0x6a
 8004968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	601a      	str	r2, [r3, #0]
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	200010b4 	.word	0x200010b4
 8004980:	200010b0 	.word	0x200010b0

08004984 <XMC_USBD_lHandleUSBReset>:
 * When ever the host sets the bus into reset condition the usb otg_core generates
 * an interrupt, which is handled by this function. It resets the complete otg_core
 * into the default state.
 */
static void XMC_USBD_lHandleUSBReset(const XMC_USBD_t *const obj) 
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 800498c:	4b50      	ldr	r3, [pc, #320]	; (8004ad0 <XMC_USBD_lHandleUSBReset+0x14c>)
 800498e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	617b      	str	r3, [r7, #20]
  dctl.b.rmtwkupsig = 1U;
 8004996:	7d3b      	ldrb	r3, [r7, #20]
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	753b      	strb	r3, [r7, #20]
  xmc_device.device_register->dctl = dctl.d32;
 800499e:	4b4c      	ldr	r3, [pc, #304]	; (8004ad0 <XMC_USBD_lHandleUSBReset+0x14c>)
 80049a0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	605a      	str	r2, [r3, #4]

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 80049a8:	2300      	movs	r3, #0
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	e01a      	b.n	80049e4 <XMC_USBD_lHandleUSBReset+0x60>
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 80049ae:	4a48      	ldr	r2, [pc, #288]	; (8004ad0 <XMC_USBD_lHandleUSBReset+0x14c>)
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	3370      	adds	r3, #112	; 0x70
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	61bb      	str	r3, [r7, #24]
		epctl.b.snak = 1U;
 80049be:	7efb      	ldrb	r3, [r7, #27]
 80049c0:	f043 0308 	orr.w	r3, r3, #8
 80049c4:	76fb      	strb	r3, [r7, #27]
		epctl.b.stall = 0U;
 80049c6:	7ebb      	ldrb	r3, [r7, #26]
 80049c8:	f36f 1345 	bfc	r3, #5, #1
 80049cc:	76bb      	strb	r3, [r7, #26]
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 80049ce:	4a40      	ldr	r2, [pc, #256]	; (8004ad0 <XMC_USBD_lHandleUSBReset+0x14c>)
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	3370      	adds	r3, #112	; 0x70
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	601a      	str	r2, [r3, #0]
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	3301      	adds	r3, #1
 80049e2:	61fb      	str	r3, [r7, #28]
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	2b06      	cmp	r3, #6
 80049e8:	d9e1      	bls.n	80049ae <XMC_USBD_lHandleUSBReset+0x2a>
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 80049ea:	4b39      	ldr	r3, [pc, #228]	; (8004ad0 <XMC_USBD_lHandleUSBReset+0x14c>)
 80049ec:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80049f0:	2240      	movs	r2, #64	; 0x40
 80049f2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	613b      	str	r3, [r7, #16]
  gnptxfsiz.b.depth = 16U;
 80049f8:	2310      	movs	r3, #16
 80049fa:	827b      	strh	r3, [r7, #18]
  gnptxfsiz.b.startaddr = 64U;
 80049fc:	2340      	movs	r3, #64	; 0x40
 80049fe:	823b      	strh	r3, [r7, #16]
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 8004a00:	4b33      	ldr	r3, [pc, #204]	; (8004ad0 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004a02:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	629a      	str	r2, [r3, #40]	; 0x28
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	e011      	b.n	8004a34 <XMC_USBD_lHandleUSBReset+0xb0>
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	3304      	adds	r3, #4
 8004a14:	019b      	lsls	r3, r3, #6
 8004a16:	089a      	lsrs	r2, r3, #2
 8004a18:	4b2d      	ldr	r3, [pc, #180]	; (8004ad0 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004a1a:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004a26:	3340      	adds	r3, #64	; 0x40
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	605a      	str	r2, [r3, #4]
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	3301      	adds	r3, #1
 8004a32:	61fb      	str	r3, [r7, #28]
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	2b06      	cmp	r3, #6
 8004a38:	d9ea      	bls.n	8004a10 <XMC_USBD_lHandleUSBReset+0x8c>
  }

  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 8004a3a:	2010      	movs	r0, #16
 8004a3c:	f7ff fd54 	bl	80044e8 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushTXFifo(0x0U);
 8004a40:	2000      	movs	r0, #0
 8004a42:	f7ff fd51 	bl	80044e8 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8004a46:	f7ff fd8d 	bl	8004564 <XMC_USBD_lFlushRXFifo>
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */  
  daint.d32 = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
  daint.b.inep0 = 1U;
 8004a4e:	7b3b      	ldrb	r3, [r7, #12]
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	733b      	strb	r3, [r7, #12]
  daint.b.outep0 = 1U;
 8004a56:	7bbb      	ldrb	r3, [r7, #14]
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	73bb      	strb	r3, [r7, #14]
  xmc_device.device_register->daintmsk = daint.d32;
 8004a5e:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004a60:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	61da      	str	r2, [r3, #28]

  /* enable endpoint interrupts */
  /* out ep interrupts */
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 8004a68:	200f      	movs	r0, #15
 8004a6a:	f000 fbfd 	bl	8005268 <XMC_USBD_EnableEventOUTEP>
		  	  	  	  	  	  (uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP | (uint32_t)XMC_USBD_EVENT_OUT_EP_AHB_ERROR));

  /*in ep interrupts */
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 8004a6e:	200f      	movs	r0, #15
 8004a70:	f000 fc12 	bl	8005298 <XMC_USBD_EnableEventINEP>
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8004a74:	4b16      	ldr	r3, [pc, #88]	; (8004ad0 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004a76:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60bb      	str	r3, [r7, #8]
  dcfg.b.devaddr = 0U;
 8004a7e:	893b      	ldrh	r3, [r7, #8]
 8004a80:	f36f 130a 	bfc	r3, #4, #7
 8004a84:	813b      	strh	r3, [r7, #8]
  xmc_device.device_register->dcfg = dcfg.d32;
 8004a86:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004a88:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	601a      	str	r2, [r3, #0]

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	7b5b      	ldrb	r3, [r3, #13]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d104      	bne.n	8004aa2 <XMC_USBD_lHandleUSBReset+0x11e>
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 8004a98:	4b0d      	ldr	r3, [pc, #52]	; (8004ad0 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004a9a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  xmc_device.ep[0U].outInUse = 0U;
 8004aa2:	4a0b      	ldr	r2, [pc, #44]	; (8004ad0 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004aa4:	6853      	ldr	r3, [r2, #4]
 8004aa6:	f36f 1304 	bfc	r3, #4, #1
 8004aaa:	6053      	str	r3, [r2, #4]
  xmc_device.ep[0U].inInUse = 0U;
 8004aac:	4a08      	ldr	r2, [pc, #32]	; (8004ad0 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004aae:	6853      	ldr	r3, [r2, #4]
 8004ab0:	f36f 03c3 	bfc	r3, #3, #1
 8004ab4:	6053      	str	r3, [r2, #4]

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 8004ab6:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004ab8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004abc:	2004      	movs	r0, #4
 8004abe:	4798      	blx	r3

  /* clear reset intr */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 8004ac0:	2004      	movs	r0, #4
 8004ac2:	f000 fb25 	bl	8005110 <XMC_USBD_ClearEvent>
}
 8004ac6:	bf00      	nop
 8004ac8:	3720      	adds	r7, #32
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	200010b4 	.word	0x200010b4

08004ad4 <XMC_USBD_lHandleOTGInt>:
* @brief Handle OTG Interrupt
*
* It detects especially connect and disconnect events.
*/
static void XMC_USBD_lHandleOTGInt(void) 
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
 8004ada:	4b0f      	ldr	r3, [pc, #60]	; (8004b18 <XMC_USBD_lHandleOTGInt+0x44>)
 8004adc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	607b      	str	r3, [r7, #4]
  if (data.b.sesenddet)
 8004ae4:	793b      	ldrb	r3, [r7, #4]
 8004ae6:	f003 0304 	and.w	r3, r3, #4
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00b      	beq.n	8004b08 <XMC_USBD_lHandleOTGInt+0x34>
  {
		xmc_device.IsPowered = 0U;
 8004af0:	4a09      	ldr	r2, [pc, #36]	; (8004b18 <XMC_USBD_lHandleOTGInt+0x44>)
 8004af2:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8004af6:	f36f 0382 	bfc	r3, #2, #1
 8004afa:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 8004afe:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <XMC_USBD_lHandleOTGInt+0x44>)
 8004b00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b04:	2001      	movs	r0, #1
 8004b06:	4798      	blx	r3
  }
  XMC_USBD_lClearEventOTG(data.d32);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fb66 	bl	80051dc <XMC_USBD_lClearEventOTG>

}
 8004b10:	bf00      	nop
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	200010b4 	.word	0x200010b4

08004b1c <XMC_USBD_lHandleEnumDone>:
 * @brief Interrupt handler for device enumeration done.
 *
 * Handles the enumeration done from dwc_otg, when the host has enumerated the device.
 */
static void XMC_USBD_lHandleEnumDone(void) 
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 8004b22:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <XMC_USBD_lHandleEnumDone+0x74>)
 8004b24:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	607b      	str	r3, [r7, #4]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8004b2c:	88bb      	ldrh	r3, [r7, #4]
 8004b2e:	f36f 030a 	bfc	r3, #0, #11
 8004b32:	80bb      	strh	r3, [r7, #4]
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 8004b34:	4b16      	ldr	r3, [pc, #88]	; (8004b90 <XMC_USBD_lHandleEnumDone+0x74>)
 8004b36:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	601a      	str	r2, [r3, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
 8004b3e:	4a14      	ldr	r2, [pc, #80]	; (8004b90 <XMC_USBD_lHandleEnumDone+0x74>)
 8004b40:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8004b44:	f043 0301 	orr.w	r3, r3, #1
 8004b48:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 8004b4c:	4a10      	ldr	r2, [pc, #64]	; (8004b90 <XMC_USBD_lHandleEnumDone+0x74>)
 8004b4e:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8004b52:	f043 0304 	orr.w	r3, r3, #4
 8004b56:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 8004b5a:	4b0d      	ldr	r3, [pc, #52]	; (8004b90 <XMC_USBD_lHandleEnumDone+0x74>)
 8004b5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b60:	2002      	movs	r0, #2
 8004b62:	4798      	blx	r3

  /* Set Trim */  
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 8004b64:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <XMC_USBD_lHandleEnumDone+0x74>)
 8004b66:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	603b      	str	r3, [r7, #0]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 8004b6e:	787b      	ldrb	r3, [r7, #1]
 8004b70:	2209      	movs	r2, #9
 8004b72:	f362 0385 	bfi	r3, r2, #2, #4
 8004b76:	707b      	strb	r3, [r7, #1]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <XMC_USBD_lHandleEnumDone+0x74>)
 8004b7a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	60da      	str	r2, [r3, #12]

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 8004b82:	200b      	movs	r0, #11
 8004b84:	f000 fac4 	bl	8005110 <XMC_USBD_ClearEvent>
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	200010b4 	.word	0x200010b4

08004b94 <XMC_USBD_lHandleOEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleOEPInt(const XMC_USBD_t *const obj) 
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08c      	sub	sp, #48	; 0x30
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint16_t temp;
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
	
  daint.d32 = xmc_device.device_register->daint;
 8004b9c:	4b6b      	ldr	r3, [pc, #428]	; (8004d4c <XMC_USBD_lHandleOEPInt+0x1b8>)
 8004b9e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	61fb      	str	r3, [r7, #28]
  
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 8004ba6:	4b69      	ldr	r3, [pc, #420]	; (8004d4c <XMC_USBD_lHandleOEPInt+0x1b8>)
 8004ba8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	61bb      	str	r3, [r7, #24]
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 8004bb0:	4b66      	ldr	r3, [pc, #408]	; (8004d4c <XMC_USBD_lHandleOEPInt+0x1b8>)
 8004bb2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	617b      	str	r3, [r7, #20]
  
  mask = daint.ep.out & daintmsk.ep.out;
 8004bba:	8bfa      	ldrh	r2, [r7, #30]
 8004bbc:	8b7b      	ldrh	r3, [r7, #26]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  doeptsiz.d32 = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]
 
  while ((uint16_t)mask >> ep_num)
 8004bcc:	e0ae      	b.n	8004d2c <XMC_USBD_lHandleOEPInt+0x198>
  {
    temp1 = (mask >> (uint16_t)ep_num);
 8004bce:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004bd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bd4:	fa42 f303 	asr.w	r3, r2, r3
 8004bd8:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = temp1 & 0x1U;
 8004bda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	853b      	strh	r3, [r7, #40]	; 0x28
    if (temp)
 8004be2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 809c 	beq.w	8004d22 <XMC_USBD_lHandleOEPInt+0x18e>
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
 8004bea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bee:	2234      	movs	r2, #52	; 0x34
 8004bf0:	fb02 f303 	mul.w	r3, r2, r3
 8004bf4:	4a55      	ldr	r2, [pc, #340]	; (8004d4c <XMC_USBD_lHandleOEPInt+0x1b8>)
 8004bf6:	4413      	add	r3, r2
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 8004bfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bfe:	4a53      	ldr	r2, [pc, #332]	; (8004d4c <XMC_USBD_lHandleOEPInt+0x1b8>)
 8004c00:	3370      	adds	r3, #112	; 0x70
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	7b5b      	ldrb	r3, [r3, #13]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d108      	bne.n	8004c2a <XMC_USBD_lHandleOEPInt+0x96>
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 8004c18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c1c:	4a4b      	ldr	r2, [pc, #300]	; (8004d4c <XMC_USBD_lHandleOEPInt+0x1b8>)
 8004c1e:	3370      	adds	r3, #112	; 0x70
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	60fb      	str	r3, [r7, #12]
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 8004c2a:	7c3b      	ldrb	r3, [r7, #16]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d033      	beq.n	8004c9e <XMC_USBD_lHandleOEPInt+0x10a>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8004c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c38:	7913      	ldrb	r3, [r2, #4]
 8004c3a:	f36f 1345 	bfc	r3, #5, #1
 8004c3e:	7113      	strb	r3, [r2, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	7b5b      	ldrb	r3, [r3, #13]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10e      	bne.n	8004c66 <XMC_USBD_lHandleOEPInt+0xd2>
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 8004c48:	f107 030c 	add.w	r3, r7, #12
 8004c4c:	78db      	ldrb	r3, [r3, #3]
 8004c4e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	461a      	mov	r2, r3
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 8004c56:	4613      	mov	r3, r2
 8004c58:	075b      	lsls	r3, r3, #29
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	f103 0218 	add.w	r2, r3, #24
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	611a      	str	r2, [r3, #16]
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	7b5b      	ldrb	r3, [r3, #13]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d106      	bne.n	8004c7c <XMC_USBD_lHandleOEPInt+0xe8>
		{
			ep->outBytesAvailable += ep->xferCount;
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	441a      	add	r2, r3
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	611a      	str	r2, [r3, #16]
		}
		ep->outInUse = 0U;
 8004c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7e:	6853      	ldr	r3, [r2, #4]
 8004c80:	f36f 1304 	bfc	r3, #4, #1
 8004c84:	6053      	str	r3, [r2, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 8004c86:	4b31      	ldr	r3, [pc, #196]	; (8004d4c <XMC_USBD_lHandleOEPInt+0x1b8>)
 8004c88:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	2000      	movs	r0, #0
 8004c90:	4798      	blx	r3
				/* clear the interrupt */
		XMC_USBD_ClearEventOUTEP((uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP,ep_num);
 8004c92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c96:	4619      	mov	r1, r3
 8004c98:	2008      	movs	r0, #8
 8004c9a:	f000 facd 	bl	8005238 <XMC_USBD_ClearEventOUTEP>
      }
      if (doepint.b.xfercompl)
 8004c9e:	7c3b      	ldrb	r3, [r7, #16]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d034      	beq.n	8004d14 <XMC_USBD_lHandleOEPInt+0x180>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	7b5b      	ldrb	r3, [r3, #13]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d115      	bne.n	8004cde <XMC_USBD_lHandleOEPInt+0x14a>
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8004cc2:	1a9b      	subs	r3, r3, r2
 8004cc4:	623b      	str	r3, [r7, #32]
          ep->xferCount += bytes;
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	441a      	add	r2, r3
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	441a      	add	r2, r3
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24
				}
        if (ep->xferTotal == ep->xferLength)
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d111      	bne.n	8004d0e <XMC_USBD_lHandleOEPInt+0x17a>
        {
          ep->outBytesAvailable = ep->xferCount;
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	611a      	str	r2, [r3, #16]
          ep->outInUse = 0U;
 8004cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf4:	6853      	ldr	r3, [r2, #4]
 8004cf6:	f36f 1304 	bfc	r3, #4, #1
 8004cfa:	6053      	str	r3, [r2, #4]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 8004cfc:	4b13      	ldr	r3, [pc, #76]	; (8004d4c <XMC_USBD_lHandleOEPInt+0x1b8>)
 8004cfe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004d02:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004d06:	2101      	movs	r1, #1
 8004d08:	4610      	mov	r0, r2
 8004d0a:	4798      	blx	r3
 8004d0c:	e002      	b.n	8004d14 <XMC_USBD_lHandleOEPInt+0x180>
        }
        else
        {
          XMC_USBD_lStartReadXfer(ep);
 8004d0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d10:	f7ff fcb0 	bl	8004674 <XMC_USBD_lStartReadXfer>
        }

      }

      XMC_USBD_ClearEventOUTEP(doepint.d32,ep_num);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fa8b 	bl	8005238 <XMC_USBD_ClearEventOUTEP>
    }
    ep_num++;
 8004d22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d26:	3301      	adds	r3, #1
 8004d28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while ((uint16_t)mask >> ep_num)
 8004d2c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d32:	fa42 f303 	asr.w	r3, r2, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f47f af49 	bne.w	8004bce <XMC_USBD_lHandleOEPInt+0x3a>
  }

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 8004d3c:	200d      	movs	r0, #13
 8004d3e:	f000 f9e7 	bl	8005110 <XMC_USBD_ClearEvent>
}
 8004d42:	bf00      	nop
 8004d44:	3730      	adds	r7, #48	; 0x30
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	200010b4 	.word	0x200010b4

08004d50 <XMC_USBD_lHandleIEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleIEPInt(const XMC_USBD_t *const obj) 
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08c      	sub	sp, #48	; 0x30
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
  uint32_t inepint;
	
  daint.d32 = xmc_device.device_register->daint;
 8004d58:	4b6b      	ldr	r3, [pc, #428]	; (8004f08 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004d5a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	617b      	str	r3, [r7, #20]
  
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 8004d62:	4b69      	ldr	r3, [pc, #420]	; (8004f08 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004d64:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	613b      	str	r3, [r7, #16]
  
  dieptsiz.d32 = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60bb      	str	r3, [r7, #8]
  mask = daint.ep.in;
 8004d70:	8abb      	ldrh	r3, [r7, #20]
 8004d72:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  while ((uint16_t)mask >> ep_num)
 8004d7a:	e0b6      	b.n	8004eea <XMC_USBD_lHandleIEPInt+0x19a>
  {
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
 8004d7c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004d7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d82:	fa42 f303 	asr.w	r3, r2, r3
 8004d86:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
 8004d88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	853b      	strh	r3, [r7, #40]	; 0x28
    if ((uint16_t)temp)
 8004d90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 80a4 	beq.w	8004ee0 <XMC_USBD_lHandleIEPInt+0x190>
    {
      ep = &xmc_device.ep[ep_num];
 8004d98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d9c:	2234      	movs	r2, #52	; 0x34
 8004d9e:	fb02 f303 	mul.w	r3, r2, r3
 8004da2:	4a59      	ldr	r2, [pc, #356]	; (8004f08 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004da4:	4413      	add	r3, r2
 8004da6:	627b      	str	r3, [r7, #36]	; 0x24
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8004da8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004dac:	4a56      	ldr	r2, [pc, #344]	; (8004f08 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004dae:	336a      	adds	r3, #106	; 0x6a
 8004db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	623b      	str	r3, [r7, #32]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8004db8:	4b53      	ldr	r3, [pc, #332]	; (8004f08 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004dba:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc2:	7812      	ldrb	r2, [r2, #0]
 8004dc4:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	40d3      	lsrs	r3, r2
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 8004dcc:	01db      	lsls	r3, r3, #7
 8004dce:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	431a      	orrs	r2, r3
      diepint.d32 = inepint &
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	7b5b      	ldrb	r3, [r3, #13]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d107      	bne.n	8004df4 <XMC_USBD_lHandleIEPInt+0xa4>
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 8004de4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004de8:	4a47      	ldr	r2, [pc, #284]	; (8004f08 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004dea:	336a      	adds	r3, #106	; 0x6a
 8004dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	60bb      	str	r3, [r7, #8]
      }
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	7b5b      	ldrb	r3, [r3, #13]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d115      	bne.n	8004e28 <XMC_USBD_lHandleIEPInt+0xd8>
      {
        if (diepint.b.emptyintr)
 8004dfc:	7b3b      	ldrb	r3, [r7, #12]
 8004dfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00f      	beq.n	8004e28 <XMC_USBD_lHandleIEPInt+0xd8>
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
 8004e08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e0a:	f7ff fb1b 	bl	8004444 <XMC_USBD_lWriteFifo>
 8004e0e:	61f8      	str	r0, [r7, #28]
          ep->xferCount += bytes;
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	441a      	add	r2, r3
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	441a      	add	r2, r3
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	625a      	str	r2, [r3, #36]	; 0x24
        }
      }
      if (diepint.b.xfercompl)
 8004e28:	7b3b      	ldrb	r3, [r7, #12]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d04e      	beq.n	8004ed2 <XMC_USBD_lHandleIEPInt+0x182>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	7b5b      	ldrb	r3, [r3, #13]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d11d      	bne.n	8004e78 <XMC_USBD_lHandleIEPInt+0x128>
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 8004e3c:	897a      	ldrh	r2, [r7, #10]
 8004e3e:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8004e42:	4013      	ands	r3, r2
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d116      	bne.n	8004e78 <XMC_USBD_lHandleIEPInt+0x128>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d111      	bne.n	8004e78 <XMC_USBD_lHandleIEPInt+0x128>
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	61bb      	str	r3, [r7, #24]
            ep->xferCount += Bytes;
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	441a      	add	r2, r3
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	62da      	str	r2, [r3, #44]	; 0x2c
            ep->xferBuffer += Bytes;
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	441a      	add	r2, r3
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	625a      	str	r2, [r3, #36]	; 0x24
          }
        }
        if (ep->xferTotal==ep->xferLength)
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d123      	bne.n	8004ecc <XMC_USBD_lHandleIEPInt+0x17c>
        {
          ep->inInUse = 0U;
 8004e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e86:	6853      	ldr	r3, [r2, #4]
 8004e88:	f36f 03c3 	bfc	r3, #3, #1
 8004e8c:	6053      	str	r3, [r2, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	7b5b      	ldrb	r3, [r3, #13]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d10e      	bne.n	8004eb4 <XMC_USBD_lHandleIEPInt+0x164>
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 8004e96:	4b1c      	ldr	r3, [pc, #112]	; (8004f08 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004e98:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004e9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	43da      	mvns	r2, r3
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8004eaa:	4b17      	ldr	r3, [pc, #92]	; (8004f08 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004eac:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 8004eb0:	400a      	ands	r2, r1
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8004eb2:	635a      	str	r2, [r3, #52]	; 0x34
          }
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 8004eb4:	4b14      	ldr	r3, [pc, #80]	; (8004f08 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8004eb6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004eba:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004ebe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	4798      	blx	r3
 8004eca:	e002      	b.n	8004ed2 <XMC_USBD_lHandleIEPInt+0x182>
        }
        else
        {
          /* start next step of transfer */
          XMC_USBD_lStartWriteXfer(ep);
 8004ecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ece:	f7ff fc8d 	bl	80047ec <XMC_USBD_lStartWriteXfer>
        }

      }

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004ed8:	4611      	mov	r1, r2
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 f994 	bl	8005208 <XMC_USBD_ClearEventINEP>
    }
    ep_num++;
 8004ee0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while ((uint16_t)mask >> ep_num)
 8004eea:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004eec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ef0:	fa42 f303 	asr.w	r3, r2, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f47f af41 	bne.w	8004d7c <XMC_USBD_lHandleIEPInt+0x2c>
  }
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 8004efa:	200e      	movs	r0, #14
 8004efc:	f000 f908 	bl	8005110 <XMC_USBD_ClearEvent>
}
 8004f00:	bf00      	nop
 8004f02:	3730      	adds	r7, #48	; 0x30
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	200010b4 	.word	0x200010b4

08004f0c <XMC_USBD_lHandleRxFLvl>:
 * @brief RX Fifo interrupt handler
 *
 * This function handles the interrupt, when the rx fifo is not empty anymore.
 */
static void XMC_USBD_lHandleRxFLvl(void) 
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
  device_grxsts_data_t data;	
  data.d32 = xmc_device.global_register->grxstsp;
 8004f12:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <XMC_USBD_lHandleRxFLvl+0x80>)
 8004f14:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	607b      	str	r3, [r7, #4]

  switch (data.b.pktsts)
 8004f1c:	79bb      	ldrb	r3, [r7, #6]
 8004f1e:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	2b05      	cmp	r3, #5
 8004f28:	d82a      	bhi.n	8004f80 <XMC_USBD_lHandleRxFLvl+0x74>
 8004f2a:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <XMC_USBD_lHandleRxFLvl+0x24>)
 8004f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f30:	08004f81 	.word	0x08004f81
 8004f34:	08004f49 	.word	0x08004f49
 8004f38:	08004f81 	.word	0x08004f81
 8004f3c:	08004f81 	.word	0x08004f81
 8004f40:	08004f81 	.word	0x08004f81
 8004f44:	08004f65 	.word	0x08004f65
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8004f48:	793b      	ldrb	r3, [r7, #4]
 8004f4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	461a      	mov	r2, r3
 8004f52:	88bb      	ldrh	r3, [r7, #4]
 8004f54:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	f7ff f9fd 	bl	800435c <XMC_USBD_lReadFifo>
      break;
 8004f62:	e00e      	b.n	8004f82 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8004f64:	793b      	ldrb	r3, [r7, #4]
 8004f66:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	88bb      	ldrh	r3, [r7, #4]
 8004f70:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f7ff f9ef 	bl	800435c <XMC_USBD_lReadFifo>
      break;
 8004f7e:	e000      	b.n	8004f82 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUPCMPL:
      break;
    default:
      break;
 8004f80:	bf00      	nop
	}
  /* no need to clear */
}
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	200010b4 	.word	0x200010b4

08004f90 <XMC_USBD_IRQHandler>:
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 8004f98:	4b50      	ldr	r3, [pc, #320]	; (80050dc <XMC_USBD_IRQHandler+0x14c>)
 8004f9a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	60fb      	str	r3, [r7, #12]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8004fa2:	4b4e      	ldr	r3, [pc, #312]	; (80050dc <XMC_USBD_IRQHandler+0x14c>)
 8004fa4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4013      	ands	r3, r2
 8004fae:	60bb      	str	r3, [r7, #8]
	
  if (data.b.sofintr)
 8004fb0:	7a3b      	ldrb	r3, [r7, #8]
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <XMC_USBD_IRQHandler+0x3c>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 8004fbc:	4b47      	ldr	r3, [pc, #284]	; (80050dc <XMC_USBD_IRQHandler+0x14c>)
 8004fbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004fc2:	2009      	movs	r0, #9
 8004fc4:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 8004fc6:	2009      	movs	r0, #9
 8004fc8:	f000 f8a2 	bl	8005110 <XMC_USBD_ClearEvent>
  }
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	7b5b      	ldrb	r3, [r3, #13]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d119      	bne.n	8005008 <XMC_USBD_IRQHandler+0x78>
  {
    if (data.b.rxstsqlvl)
 8004fd4:	7a3b      	ldrb	r3, [r7, #8]
 8004fd6:	f003 0310 	and.w	r3, r3, #16
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d013      	beq.n	8005008 <XMC_USBD_IRQHandler+0x78>
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
 8004fe0:	7b3b      	ldrb	r3, [r7, #12]
 8004fe2:	f36f 1304 	bfc	r3, #4, #1
 8004fe6:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8004fe8:	4b3c      	ldr	r3, [pc, #240]	; (80050dc <XMC_USBD_IRQHandler+0x14c>)
 8004fea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	619a      	str	r2, [r3, #24]
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
 8004ff2:	f7ff ff8b 	bl	8004f0c <XMC_USBD_lHandleRxFLvl>
      gintmsk.b.rxstsqlvl = 1U;
 8004ff6:	7b3b      	ldrb	r3, [r7, #12]
 8004ff8:	f043 0310 	orr.w	r3, r3, #16
 8004ffc:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8004ffe:	4b37      	ldr	r3, [pc, #220]	; (80050dc <XMC_USBD_IRQHandler+0x14c>)
 8005000:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	619a      	str	r2, [r3, #24]
    }
  }
  if (data.b.erlysuspend)
 8005008:	7a7b      	ldrb	r3, [r7, #9]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <XMC_USBD_IRQHandler+0x8a>
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 8005014:	200a      	movs	r0, #10
 8005016:	f000 f87b 	bl	8005110 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbsuspend)
 800501a:	7a7b      	ldrb	r3, [r7, #9]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d007      	beq.n	8005036 <XMC_USBD_IRQHandler+0xa6>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 8005026:	4b2d      	ldr	r3, [pc, #180]	; (80050dc <XMC_USBD_IRQHandler+0x14c>)
 8005028:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800502c:	2006      	movs	r0, #6
 800502e:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 8005030:	2006      	movs	r0, #6
 8005032:	f000 f86d 	bl	8005110 <XMC_USBD_ClearEvent>
  }
  if (data.b.wkupintr)
 8005036:	7afb      	ldrb	r3, [r7, #11]
 8005038:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d007      	beq.n	8005052 <XMC_USBD_IRQHandler+0xc2>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8005042:	4b26      	ldr	r3, [pc, #152]	; (80050dc <XMC_USBD_IRQHandler+0x14c>)
 8005044:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005048:	2008      	movs	r0, #8
 800504a:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 800504c:	2008      	movs	r0, #8
 800504e:	f000 f85f 	bl	8005110 <XMC_USBD_ClearEvent>
  }
  if (data.b.sessreqintr)
 8005052:	7afb      	ldrb	r3, [r7, #11]
 8005054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00e      	beq.n	800507c <XMC_USBD_IRQHandler+0xec>
  {
    xmc_device.IsPowered = 1U;
 800505e:	4a1f      	ldr	r2, [pc, #124]	; (80050dc <XMC_USBD_IRQHandler+0x14c>)
 8005060:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8005064:	f043 0304 	orr.w	r3, r3, #4
 8005068:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 800506c:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <XMC_USBD_IRQHandler+0x14c>)
 800506e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005072:	2000      	movs	r0, #0
 8005074:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 8005076:	2000      	movs	r0, #0
 8005078:	f000 f84a 	bl	8005110 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbreset)
 800507c:	7a7b      	ldrb	r3, [r7, #9]
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <XMC_USBD_IRQHandler+0xfe>
  {
    XMC_USBD_lHandleUSBReset(obj);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff fc7b 	bl	8004984 <XMC_USBD_lHandleUSBReset>
  }
  if (data.b.enumdone)
 800508e:	7a7b      	ldrb	r3, [r7, #9]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <XMC_USBD_IRQHandler+0x10e>
  {
    XMC_USBD_lHandleEnumDone();
 800509a:	f7ff fd3f 	bl	8004b1c <XMC_USBD_lHandleEnumDone>
  }
  if (data.b.inepint)
 800509e:	7abb      	ldrb	r3, [r7, #10]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <XMC_USBD_IRQHandler+0x120>
  {
    XMC_USBD_lHandleIEPInt(obj);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7ff fe50 	bl	8004d50 <XMC_USBD_lHandleIEPInt>
  }
  if (data.b.outepintr)
 80050b0:	7abb      	ldrb	r3, [r7, #10]
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <XMC_USBD_IRQHandler+0x132>
  {
		XMC_USBD_lHandleOEPInt(obj);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff fd69 	bl	8004b94 <XMC_USBD_lHandleOEPInt>
  }
	if (data.b.otgintr)
 80050c2:	7a3b      	ldrb	r3, [r7, #8]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <XMC_USBD_IRQHandler+0x142>
  {
	  XMC_USBD_lHandleOTGInt();
 80050ce:	f7ff fd01 	bl	8004ad4 <XMC_USBD_lHandleOTGInt>
  }

}
 80050d2:	bf00      	nop
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	200010b4 	.word	0x200010b4

080050e0 <XMC_USBD_Enable>:
 *******************************************************************************/
/**
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void) 
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 80050e4:	4803      	ldr	r0, [pc, #12]	; (80050f4 <XMC_USBD_Enable+0x14>)
 80050e6:	f7fc f955 	bl	8001394 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 80050ea:	f7fc fd39 	bl	8001b60 <XMC_SCU_POWER_EnableUsb>
}
 80050ee:	bf00      	nop
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20000080 	.word	0x20000080

080050f8 <XMC_USBD_Disable>:

/**
 * Disables the USB0 module
 **/
void XMC_USBD_Disable(void) 
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 80050fc:	4803      	ldr	r0, [pc, #12]	; (800510c <XMC_USBD_Disable+0x14>)
 80050fe:	f7fc f92b 	bl	8001358 <XMC_SCU_RESET_AssertPeripheralReset>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  XMC_SCU_POWER_DisableUsb();
 8005102:	f7fc fd3b 	bl	8001b7c <XMC_SCU_POWER_DisableUsb>
}
 8005106:	bf00      	nop
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	20000080 	.word	0x20000080

08005110 <XMC_USBD_ClearEvent>:

/**
 * Clear the USB device event
 **/
void XMC_USBD_ClearEvent(const XMC_USBD_EVENT_t event) 
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	71fb      	strb	r3, [r7, #7]
  gintsts_data_t clear;
  clear.d32 = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
  switch(event)
 800511e:	79fb      	ldrb	r3, [r7, #7]
 8005120:	2b0d      	cmp	r3, #13
 8005122:	d84c      	bhi.n	80051be <XMC_USBD_ClearEvent+0xae>
 8005124:	a201      	add	r2, pc, #4	; (adr r2, 800512c <XMC_USBD_ClearEvent+0x1c>)
 8005126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512a:	bf00      	nop
 800512c:	08005165 	.word	0x08005165
 8005130:	080051bf 	.word	0x080051bf
 8005134:	080051bf 	.word	0x080051bf
 8005138:	080051bf 	.word	0x080051bf
 800513c:	0800516f 	.word	0x0800516f
 8005140:	080051bf 	.word	0x080051bf
 8005144:	08005179 	.word	0x08005179
 8005148:	08005183 	.word	0x08005183
 800514c:	0800518d 	.word	0x0800518d
 8005150:	08005197 	.word	0x08005197
 8005154:	080051a1 	.word	0x080051a1
 8005158:	080051ab 	.word	0x080051ab
 800515c:	080051bf 	.word	0x080051bf
 8005160:	080051b5 	.word	0x080051b5
  {
    case (XMC_USBD_EVENT_POWER_ON):
	  clear.b.sessreqintr = 1U;
 8005164:	7bfb      	ldrb	r3, [r7, #15]
 8005166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800516a:	73fb      	strb	r3, [r7, #15]
	  break;
 800516c:	e028      	b.n	80051c0 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESET):
	  clear.b.usbreset = 1U;
 800516e:	7b7b      	ldrb	r3, [r7, #13]
 8005170:	f043 0310 	orr.w	r3, r3, #16
 8005174:	737b      	strb	r3, [r7, #13]
	  break;
 8005176:	e023      	b.n	80051c0 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SUSPEND):
	  clear.b.usbsuspend = 1U;
 8005178:	7b7b      	ldrb	r3, [r7, #13]
 800517a:	f043 0308 	orr.w	r3, r3, #8
 800517e:	737b      	strb	r3, [r7, #13]
	  break;
 8005180:	e01e      	b.n	80051c0 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESUME):
	  clear.b.wkupintr = 1U;
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005188:	73fb      	strb	r3, [r7, #15]
	  break;
 800518a:	e019      	b.n	80051c0 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
	  clear.b.wkupintr = 1U;
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005192:	73fb      	strb	r3, [r7, #15]
	  break;
 8005194:	e014      	b.n	80051c0 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SOF):
	  clear.b.sofintr = 1U;
 8005196:	7b3b      	ldrb	r3, [r7, #12]
 8005198:	f043 0308 	orr.w	r3, r3, #8
 800519c:	733b      	strb	r3, [r7, #12]
	  break;
 800519e:	e00f      	b.n	80051c0 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_EARLYSUSPEND):
	  clear.b.erlysuspend = 1U;
 80051a0:	7b7b      	ldrb	r3, [r7, #13]
 80051a2:	f043 0304 	orr.w	r3, r3, #4
 80051a6:	737b      	strb	r3, [r7, #13]
	  break;
 80051a8:	e00a      	b.n	80051c0 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_ENUMDONE):
	  clear.b.enumdone = 1U;
 80051aa:	7b7b      	ldrb	r3, [r7, #13]
 80051ac:	f043 0320 	orr.w	r3, r3, #32
 80051b0:	737b      	strb	r3, [r7, #13]
	  break;
 80051b2:	e005      	b.n	80051c0 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_OUTEP):
	  clear.b.outepintr = 1U;
 80051b4:	7bbb      	ldrb	r3, [r7, #14]
 80051b6:	f043 0308 	orr.w	r3, r3, #8
 80051ba:	73bb      	strb	r3, [r7, #14]
	  break;
 80051bc:	e000      	b.n	80051c0 <XMC_USBD_ClearEvent+0xb0>
		default:
		break;
 80051be:	bf00      	nop
	}
	xmc_device.global_register->gintsts = clear.d32;
 80051c0:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <XMC_USBD_ClearEvent+0xc8>)
 80051c2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	615a      	str	r2, [r3, #20]
}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	200010b4 	.word	0x200010b4

080051dc <XMC_USBD_lClearEventOTG>:

/**
 * Clear the USB OTG events
 **/
static void XMC_USBD_lClearEventOTG(uint32_t event)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  gotgint_data_t clear = { .d32 = 0U};
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]
  clear.d32 = event;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	60fb      	str	r3, [r7, #12]
  xmc_device.global_register->gotgint = clear.d32;
 80051ec:	4b05      	ldr	r3, [pc, #20]	; (8005204 <XMC_USBD_lClearEventOTG+0x28>)
 80051ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	605a      	str	r2, [r3, #4]
}
 80051f6:	bf00      	nop
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	200010b4 	.word	0x200010b4

08005208 <XMC_USBD_ClearEventINEP>:

/**
 * Clear the USB IN EP events
 **/
void XMC_USBD_ClearEventINEP(uint32_t event,const uint8_t ep_num)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	70fb      	strb	r3, [r7, #3]
  diepint_data_t clear;
  clear.d32 = event;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8005218:	78fb      	ldrb	r3, [r7, #3]
 800521a:	4a06      	ldr	r2, [pc, #24]	; (8005234 <XMC_USBD_ClearEventINEP+0x2c>)
 800521c:	336a      	adds	r3, #106	; 0x6a
 800521e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	609a      	str	r2, [r3, #8]
}
 8005226:	bf00      	nop
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	200010b4 	.word	0x200010b4

08005238 <XMC_USBD_ClearEventOUTEP>:

/**
 * Clear the USB OUT EP events
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	70fb      	strb	r3, [r7, #3]
  doepint_data_t clear;
  clear.d32 = event;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	4a06      	ldr	r2, [pc, #24]	; (8005264 <XMC_USBD_ClearEventOUTEP+0x2c>)
 800524c:	3370      	adds	r3, #112	; 0x70
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	609a      	str	r2, [r3, #8]
}
 8005258:	bf00      	nop
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	200010b4 	.word	0x200010b4

08005268 <XMC_USBD_EnableEventOUTEP>:

/**
 * Enable the USB OUT EP events
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	doepint_data_t doepint;
	doepint.d32 = event;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->doepmsk |= doepint.d32;
 8005274:	4b07      	ldr	r3, [pc, #28]	; (8005294 <XMC_USBD_EnableEventOUTEP+0x2c>)
 8005276:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800527a:	6959      	ldr	r1, [r3, #20]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4b05      	ldr	r3, [pc, #20]	; (8005294 <XMC_USBD_EnableEventOUTEP+0x2c>)
 8005280:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005284:	430a      	orrs	r2, r1
 8005286:	615a      	str	r2, [r3, #20]
}
 8005288:	bf00      	nop
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	200010b4 	.word	0x200010b4

08005298 <XMC_USBD_EnableEventINEP>:

/**
 * Enable the USB IN EP events
 **/
void XMC_USBD_EnableEventINEP(uint32_t event)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	diepint_data_t diepint;
	diepint.d32 = event;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->diepmsk |= diepint.d32;
 80052a4:	4b07      	ldr	r3, [pc, #28]	; (80052c4 <XMC_USBD_EnableEventINEP+0x2c>)
 80052a6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80052aa:	6919      	ldr	r1, [r3, #16]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <XMC_USBD_EnableEventINEP+0x2c>)
 80052b0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80052b4:	430a      	orrs	r2, r1
 80052b6:	611a      	str	r2, [r3, #16]
}
 80052b8:	bf00      	nop
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	200010b4 	.word	0x200010b4

080052c8 <XMC_USBD_GetCapabilities>:

/**
 * Gets the USB device capabilities
 **/
XMC_USBD_CAPABILITIES_t XMC_USBD_GetCapabilities()
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
  XMC_USBD_CAPABILITIES_t cap={0U};
 80052ce:	2300      	movs	r3, #0
 80052d0:	607b      	str	r3, [r7, #4]
  cap.event_connect = 1U;
 80052d2:	793b      	ldrb	r3, [r7, #4]
 80052d4:	f043 0304 	orr.w	r3, r3, #4
 80052d8:	713b      	strb	r3, [r7, #4]
  cap.event_disconnect = 1U;
 80052da:	793b      	ldrb	r3, [r7, #4]
 80052dc:	f043 0308 	orr.w	r3, r3, #8
 80052e0:	713b      	strb	r3, [r7, #4]
#if UC_SERIES == 45
  cap.event_power_off = 1U;
 80052e2:	793b      	ldrb	r3, [r7, #4]
 80052e4:	f043 0302 	orr.w	r3, r3, #2
 80052e8:	713b      	strb	r3, [r7, #4]
  cap.event_power_on = 1U;
 80052ea:	793b      	ldrb	r3, [r7, #4]
 80052ec:	f043 0301 	orr.w	r3, r3, #1
 80052f0:	713b      	strb	r3, [r7, #4]
#else
  cap.event_power_off = 0U;
  cap.event_power_on = 0U;
#endif
  cap.event_high_speed = 0U;
 80052f2:	793b      	ldrb	r3, [r7, #4]
 80052f4:	f36f 1345 	bfc	r3, #5, #1
 80052f8:	713b      	strb	r3, [r7, #4]
  cap.event_remote_wakeup = 1U;
 80052fa:	797b      	ldrb	r3, [r7, #5]
 80052fc:	f043 0301 	orr.w	r3, r3, #1
 8005300:	717b      	strb	r3, [r7, #5]
  cap.event_reset = 1U;
 8005302:	793b      	ldrb	r3, [r7, #4]
 8005304:	f043 0310 	orr.w	r3, r3, #16
 8005308:	713b      	strb	r3, [r7, #4]
  cap.event_resume = 1U;
 800530a:	793b      	ldrb	r3, [r7, #4]
 800530c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005310:	713b      	strb	r3, [r7, #4]
  cap.event_suspend = 1U;
 8005312:	793b      	ldrb	r3, [r7, #4]
 8005314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005318:	713b      	strb	r3, [r7, #4]
  cap.reserved = 0U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f36f 235f 	bfc	r3, #9, #23
 8005320:	607b      	str	r3, [r7, #4]
  return cap;
 8005322:	687b      	ldr	r3, [r7, #4]
}
 8005324:	4618      	mov	r0, r3
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <XMC_USBD_Init>:

/**
 * Initializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Init(XMC_USBD_t *obj)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	; 0x28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;

  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
 		      XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))
  
  XMC_USBD_Enable();
 8005338:	f7ff fed2 	bl	80050e0 <XMC_USBD_Enable>
  
  usbd_init = obj;
 800533c:	4a87      	ldr	r2, [pc, #540]	; (800555c <XMC_USBD_Init+0x22c>)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6013      	str	r3, [r2, #0]

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8005342:	2300      	movs	r3, #0
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
 8005346:	e00c      	b.n	8005362 <XMC_USBD_Init+0x32>
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 8005348:	4a85      	ldr	r2, [pc, #532]	; (8005560 <XMC_USBD_Init+0x230>)
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	2140      	movs	r1, #64	; 0x40
 800534e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 8005352:	4a84      	ldr	r2, [pc, #528]	; (8005564 <XMC_USBD_Init+0x234>)
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	2140      	movs	r1, #64	; 0x40
 8005358:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	3301      	adds	r3, #1
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	2b06      	cmp	r3, #6
 8005366:	d9ef      	bls.n	8005348 <XMC_USBD_Init+0x18>
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 8005368:	f44f 7202 	mov.w	r2, #520	; 0x208
 800536c:	2100      	movs	r1, #0
 800536e:	487e      	ldr	r0, [pc, #504]	; (8005568 <XMC_USBD_Init+0x238>)
 8005370:	f001 fc14 	bl	8006b9c <memset>

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	4a7b      	ldr	r2, [pc, #492]	; (8005568 <XMC_USBD_Init+0x238>)
 800537a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	4a79      	ldr	r2, [pc, #484]	; (8005568 <XMC_USBD_Init+0x238>)
 8005384:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	623b      	str	r3, [r7, #32]
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a75      	ldr	r2, [pc, #468]	; (8005568 <XMC_USBD_Init+0x238>)
 8005394:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539e:	4a72      	ldr	r2, [pc, #456]	; (8005568 <XMC_USBD_Init+0x238>)
 80053a0:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80053a4:	2300      	movs	r3, #0
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24
 80053a8:	e00c      	b.n	80053c4 <XMC_USBD_Init+0x94>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	3348      	adds	r3, #72	; 0x48
 80053ae:	015b      	lsls	r3, r3, #5
 80053b0:	6a3a      	ldr	r2, [r7, #32]
 80053b2:	441a      	add	r2, r3
 80053b4:	496c      	ldr	r1, [pc, #432]	; (8005568 <XMC_USBD_Init+0x238>)
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	336a      	adds	r3, #106	; 0x6a
 80053ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	3301      	adds	r3, #1
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	2b06      	cmp	r3, #6
 80053c8:	d9ef      	bls.n	80053aa <XMC_USBD_Init+0x7a>
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80053ca:	2300      	movs	r3, #0
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
 80053ce:	e00d      	b.n	80053ec <XMC_USBD_Init+0xbc>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	3358      	adds	r3, #88	; 0x58
 80053d4:	015b      	lsls	r3, r3, #5
 80053d6:	6a3a      	ldr	r2, [r7, #32]
 80053d8:	441a      	add	r2, r3
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 80053da:	4963      	ldr	r1, [pc, #396]	; (8005568 <XMC_USBD_Init+0x238>)
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	3370      	adds	r3, #112	; 0x70
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	440b      	add	r3, r1
 80053e4:	605a      	str	r2, [r3, #4]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	3301      	adds	r3, #1
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	2b06      	cmp	r3, #6
 80053f0:	d9ee      	bls.n	80053d0 <XMC_USBD_Init+0xa0>
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 80053f2:	2300      	movs	r3, #0
 80053f4:	627b      	str	r3, [r7, #36]	; 0x24
 80053f6:	e00c      	b.n	8005412 <XMC_USBD_Init+0xe2>
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
    						XMC_USBD_TX_FIFO_REG_OFFSET +
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	3301      	adds	r3, #1
 80053fc:	031b      	lsls	r3, r3, #12
 80053fe:	6a3a      	ldr	r2, [r7, #32]
 8005400:	441a      	add	r2, r3
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 8005402:	4959      	ldr	r1, [pc, #356]	; (8005568 <XMC_USBD_Init+0x238>)
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	3378      	adds	r3, #120	; 0x78
 8005408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	3301      	adds	r3, #1
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	2b06      	cmp	r3, #6
 8005416:	d9ef      	bls.n	80053f8 <XMC_USBD_Init+0xc8>
    						(i * XMC_USBD_TX_FIFO_OFFSET));
  }
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 8005418:	4b53      	ldr	r3, [pc, #332]	; (8005568 <XMC_USBD_Init+0x238>)
 800541a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	61fb      	str	r3, [r7, #28]
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
 8005422:	7f3b      	ldrb	r3, [r7, #28]
 8005424:	f043 0301 	orr.w	r3, r3, #1
 8005428:	773b      	strb	r3, [r7, #28]
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 800542a:	7f3b      	ldrb	r3, [r7, #28]
 800542c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005430:	773b      	strb	r3, [r7, #28]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	7b5b      	ldrb	r3, [r3, #13]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d104      	bne.n	8005444 <XMC_USBD_Init+0x114>
  {
    /* Enable dma if needed */
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 800543a:	7f3b      	ldrb	r3, [r7, #28]
 800543c:	f043 0320 	orr.w	r3, r3, #32
 8005440:	773b      	strb	r3, [r7, #28]
 8005442:	e003      	b.n	800544c <XMC_USBD_Init+0x11c>
  }
  else
  {
    gahbcfg.b.dmaenable = 0U;
 8005444:	7f3b      	ldrb	r3, [r7, #28]
 8005446:	f36f 1345 	bfc	r3, #5, #1
 800544a:	773b      	strb	r3, [r7, #28]
  }
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 800544c:	4b46      	ldr	r3, [pc, #280]	; (8005568 <XMC_USBD_Init+0x238>)
 800544e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	609a      	str	r2, [r3, #8]
  /* configure usb details */  
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 8005456:	4b44      	ldr	r3, [pc, #272]	; (8005568 <XMC_USBD_Init+0x238>)
 8005458:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	61bb      	str	r3, [r7, #24]
  gusbcfg.b.force_dev_mode = 1U; /* force us into device mode */
 8005460:	7efb      	ldrb	r3, [r7, #27]
 8005462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005466:	76fb      	strb	r3, [r7, #27]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 8005468:	7e7b      	ldrb	r3, [r7, #25]
 800546a:	f043 0301 	orr.w	r3, r3, #1
 800546e:	767b      	strb	r3, [r7, #25]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8005470:	4b3d      	ldr	r3, [pc, #244]	; (8005568 <XMC_USBD_Init+0x238>)
 8005472:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	60da      	str	r2, [r3, #12]

  /* Device init */
  /* configure device speed */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 800547a:	4b3b      	ldr	r3, [pc, #236]	; (8005568 <XMC_USBD_Init+0x238>)
 800547c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	617b      	str	r3, [r7, #20]
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 8005484:	7d3b      	ldrb	r3, [r7, #20]
 8005486:	f043 0303 	orr.w	r3, r3, #3
 800548a:	753b      	strb	r3, [r7, #20]
  dcfg.b.descdma = 0U;
 800548c:	7dbb      	ldrb	r3, [r7, #22]
 800548e:	f36f 13c7 	bfc	r3, #7, #1
 8005492:	75bb      	strb	r3, [r7, #22]
  xmc_device.device_register->dcfg = dcfg.d32;
 8005494:	4b34      	ldr	r3, [pc, #208]	; (8005568 <XMC_USBD_Init+0x238>)
 8005496:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	601a      	str	r2, [r3, #0]
  /* configure device functions */  
  dctl.d32 = xmc_device.device_register->dctl;
 800549e:	4b32      	ldr	r3, [pc, #200]	; (8005568 <XMC_USBD_Init+0x238>)
 80054a0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	613b      	str	r3, [r7, #16]
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 80054a8:	7c3b      	ldrb	r3, [r7, #16]
 80054aa:	f043 0302 	orr.w	r3, r3, #2
 80054ae:	743b      	strb	r3, [r7, #16]
  /* all other config is done by default register value */
  xmc_device.device_register->dctl = dctl.d32;
 80054b0:	4b2d      	ldr	r3, [pc, #180]	; (8005568 <XMC_USBD_Init+0x238>)
 80054b2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	605a      	str	r2, [r3, #4]
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 80054ba:	2010      	movs	r0, #16
 80054bc:	f7ff f814 	bl	80044e8 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 80054c0:	f7ff f850 	bl	8004564 <XMC_USBD_lFlushRXFifo>
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 80054c4:	4b28      	ldr	r3, [pc, #160]	; (8005568 <XMC_USBD_Init+0x238>)
 80054c6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80054ca:	2200      	movs	r2, #0
 80054cc:	619a      	str	r2, [r3, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 80054ce:	4b26      	ldr	r3, [pc, #152]	; (8005568 <XMC_USBD_Init+0x238>)
 80054d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80054d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054d8:	615a      	str	r2, [r3, #20]
 
  gintmsk.d32 = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]
  /* enable common interrupts */
  gintmsk.b.modemismatch = 1U;
 80054de:	7b3b      	ldrb	r3, [r7, #12]
 80054e0:	f043 0302 	orr.w	r3, r3, #2
 80054e4:	733b      	strb	r3, [r7, #12]
  gintmsk.b.otgintr = 1U;
 80054e6:	7b3b      	ldrb	r3, [r7, #12]
 80054e8:	f043 0304 	orr.w	r3, r3, #4
 80054ec:	733b      	strb	r3, [r7, #12]
  gintmsk.b.sessreqintr = 1U;
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054f4:	73fb      	strb	r3, [r7, #15]
  /* enable device interrupts */
  gintmsk.b.usbreset = 1U;
 80054f6:	7b7b      	ldrb	r3, [r7, #13]
 80054f8:	f043 0310 	orr.w	r3, r3, #16
 80054fc:	737b      	strb	r3, [r7, #13]
  gintmsk.b.enumdone = 1U;
 80054fe:	7b7b      	ldrb	r3, [r7, #13]
 8005500:	f043 0320 	orr.w	r3, r3, #32
 8005504:	737b      	strb	r3, [r7, #13]
  gintmsk.b.erlysuspend = 1U;
 8005506:	7b7b      	ldrb	r3, [r7, #13]
 8005508:	f043 0304 	orr.w	r3, r3, #4
 800550c:	737b      	strb	r3, [r7, #13]
  gintmsk.b.usbsuspend = 1U;
 800550e:	7b7b      	ldrb	r3, [r7, #13]
 8005510:	f043 0308 	orr.w	r3, r3, #8
 8005514:	737b      	strb	r3, [r7, #13]
  gintmsk.b.wkupintr = 1U;
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551c:	73fb      	strb	r3, [r7, #15]
  gintmsk.b.sofintr = 1U;
 800551e:	7b3b      	ldrb	r3, [r7, #12]
 8005520:	f043 0308 	orr.w	r3, r3, #8
 8005524:	733b      	strb	r3, [r7, #12]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	7b5b      	ldrb	r3, [r3, #13]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d103      	bne.n	8005536 <XMC_USBD_Init+0x206>
  {
    gintmsk.b.rxstsqlvl = 1U;
 800552e:	7b3b      	ldrb	r3, [r7, #12]
 8005530:	f043 0310 	orr.w	r3, r3, #16
 8005534:	733b      	strb	r3, [r7, #12]
  }
  gintmsk.b.outepintr = 1U;
 8005536:	7bbb      	ldrb	r3, [r7, #14]
 8005538:	f043 0308 	orr.w	r3, r3, #8
 800553c:	73bb      	strb	r3, [r7, #14]
  gintmsk.b.inepintr = 1U;
 800553e:	7bbb      	ldrb	r3, [r7, #14]
 8005540:	f043 0304 	orr.w	r3, r3, #4
 8005544:	73bb      	strb	r3, [r7, #14]
  xmc_device.global_register->gintmsk = gintmsk.d32;
 8005546:	4b08      	ldr	r3, [pc, #32]	; (8005568 <XMC_USBD_Init+0x238>)
 8005548:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	619a      	str	r2, [r3, #24]
  return XMC_USBD_STATUS_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3728      	adds	r7, #40	; 0x28
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	200010b0 	.word	0x200010b0
 8005560:	20000ca8 	.word	0x20000ca8
 8005564:	20000cc4 	.word	0x20000cc4
 8005568:	200010b4 	.word	0x200010b4

0800556c <XMC_USBD_Uninitialize>:

/**
 * Uninitializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8005572:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <XMC_USBD_Uninitialize+0x38>)
 8005574:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 800557c:	793b      	ldrb	r3, [r7, #4]
 800557e:	f043 0302 	orr.w	r3, r3, #2
 8005582:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8005584:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <XMC_USBD_Uninitialize+0x38>)
 8005586:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	605a      	str	r2, [r3, #4]
  /* clean up */
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 800558e:	f44f 7202 	mov.w	r2, #520	; 0x208
 8005592:	2100      	movs	r1, #0
 8005594:	4803      	ldr	r0, [pc, #12]	; (80055a4 <XMC_USBD_Uninitialize+0x38>)
 8005596:	f001 fb01 	bl	8006b9c <memset>
  return XMC_USBD_STATUS_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	200010b4 	.word	0x200010b4

080055a8 <XMC_USBD_DeviceConnect>:

/**
 * Connects the USB device to host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 80055ae:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <XMC_USBD_DeviceConnect+0x30>)
 80055b0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 0U;
 80055b8:	793b      	ldrb	r3, [r7, #4]
 80055ba:	f36f 0341 	bfc	r3, #1, #1
 80055be:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 80055c0:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <XMC_USBD_DeviceConnect+0x30>)
 80055c2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	200010b4 	.word	0x200010b4

080055dc <XMC_USBD_DeviceDisconnect>:

/**
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 80055e2:	4b0a      	ldr	r3, [pc, #40]	; (800560c <XMC_USBD_DeviceDisconnect+0x30>)
 80055e4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 80055ec:	793b      	ldrb	r3, [r7, #4]
 80055ee:	f043 0302 	orr.w	r3, r3, #2
 80055f2:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <XMC_USBD_DeviceDisconnect+0x30>)
 80055f6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	200010b4 	.word	0x200010b4

08005610 <XMC_USBD_DeviceGetState>:

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  XMC_USBD_STATE_t state={0U};
 8005618:	2300      	movs	r3, #0
 800561a:	60fb      	str	r3, [r7, #12]
  state.speed = XMC_USBD_SPEED_FULL;
 800561c:	7b3b      	ldrb	r3, [r7, #12]
 800561e:	2201      	movs	r2, #1
 8005620:	f362 03c4 	bfi	r3, r2, #3, #2
 8005624:	733b      	strb	r3, [r7, #12]
  state.connected = xmc_device.IsConnected;
 8005626:	4b12      	ldr	r3, [pc, #72]	; (8005670 <XMC_USBD_DeviceGetState+0x60>)
 8005628:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800562c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005630:	b2da      	uxtb	r2, r3
 8005632:	7b3b      	ldrb	r3, [r7, #12]
 8005634:	f362 0341 	bfi	r3, r2, #1, #1
 8005638:	733b      	strb	r3, [r7, #12]
  state.active = XMC_USBD_lDeviceActive(obj);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fe fe5a 	bl	80042f4 <XMC_USBD_lDeviceActive>
 8005640:	4603      	mov	r3, r0
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	b2da      	uxtb	r2, r3
 8005648:	7b3b      	ldrb	r3, [r7, #12]
 800564a:	f362 0382 	bfi	r3, r2, #2, #1
 800564e:	733b      	strb	r3, [r7, #12]
  state.powered = xmc_device.IsPowered;
 8005650:	4b07      	ldr	r3, [pc, #28]	; (8005670 <XMC_USBD_DeviceGetState+0x60>)
 8005652:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005656:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800565a:	b2da      	uxtb	r2, r3
 800565c:	7b3b      	ldrb	r3, [r7, #12]
 800565e:	f362 0300 	bfi	r3, r2, #0, #1
 8005662:	733b      	strb	r3, [r7, #12]
  return state;
 8005664:	68fb      	ldr	r3, [r7, #12]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	200010b4 	.word	0x200010b4

08005674 <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	4603      	mov	r3, r0
 800567c:	6039      	str	r1, [r7, #0]
 800567e:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	2234      	movs	r2, #52	; 0x34
 8005688:	fb02 f303 	mul.w	r3, r2, r3
 800568c:	4a1a      	ldr	r2, [pc, #104]	; (80056f8 <XMC_USBD_EndpointReadStart+0x84>)
 800568e:	4413      	add	r3, r2
 8005690:	60bb      	str	r3, [r7, #8]
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d106      	bne.n	80056ae <XMC_USBD_EndpointReadStart+0x3a>
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	791b      	ldrb	r3, [r3, #4]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d102      	bne.n	80056b4 <XMC_USBD_EndpointReadStart+0x40>
  {
    result = XMC_USBD_STATUS_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	73fb      	strb	r3, [r7, #15]
 80056b2:	e01c      	b.n	80056ee <XMC_USBD_EndpointReadStart+0x7a>
  }
  else
  {
    /* short the length to buffer size if needed */
    if (size > ep->outBufferSize)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d902      	bls.n	80056c4 <XMC_USBD_EndpointReadStart+0x50>
    {
      size = ep->outBufferSize;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	603b      	str	r3, [r7, #0]
    }
    /* set ep values */
    ep->xferTotal = size;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	631a      	str	r2, [r3, #48]	; 0x30
    ep->xferCount = 0U;
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2200      	movs	r2, #0
 80056ce:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferLength = 0U;
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2200      	movs	r2, #0
 80056d4:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferBuffer = ep->outBuffer;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	625a      	str	r2, [r3, #36]	; 0x24
    ep->outBytesAvailable = 0U;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2200      	movs	r2, #0
 80056e2:	611a      	str	r2, [r3, #16]
    XMC_USBD_lStartReadXfer(ep);
 80056e4:	68b8      	ldr	r0, [r7, #8]
 80056e6:	f7fe ffc5 	bl	8004674 <XMC_USBD_lStartReadXfer>
    result= XMC_USBD_STATUS_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	200010b4 	.word	0x200010b4

080056fc <XMC_USBD_EndpointRead>:

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	2234      	movs	r2, #52	; 0x34
 800570e:	fb02 f303 	mul.w	r3, r2, r3
 8005712:	4a17      	ldr	r2, [pc, #92]	; (8005770 <XMC_USBD_EndpointRead+0x74>)
 8005714:	4413      	add	r3, r2
 8005716:	617b      	str	r3, [r7, #20]
  if (length > ep->outBytesAvailable)
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	429a      	cmp	r2, r3
 8005720:	d902      	bls.n	8005728 <XMC_USBD_EndpointRead+0x2c>
  {
    length = ep->outBytesAvailable;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	607b      	str	r3, [r7, #4]
  }
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	4413      	add	r3, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	4619      	mov	r1, r3
 8005736:	68b8      	ldr	r0, [r7, #8]
 8005738:	f001 f996 	bl	8006a68 <memcpy>
  ep->outBytesAvailable -= length;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	1ad2      	subs	r2, r2, r3
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	611a      	str	r2, [r3, #16]
  if (ep->outBytesAvailable)
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d006      	beq.n	800575e <XMC_USBD_EndpointRead+0x62>
  {
    ep->outOffset += length;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	699a      	ldr	r2, [r3, #24]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	441a      	add	r2, r3
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	619a      	str	r2, [r3, #24]
 800575c:	e002      	b.n	8005764 <XMC_USBD_EndpointRead+0x68>
  }
  else
  {
    ep->outOffset = 0U;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2200      	movs	r2, #0
 8005762:	619a      	str	r2, [r3, #24]
  }
  return (int32_t)length;
 8005764:	687b      	ldr	r3, [r7, #4]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	200010b4 	.word	0x200010b4

08005774 <XMC_USBD_EndpointWrite>:

/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num,const uint8_t * buffer,uint32_t length) 
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	4603      	mov	r3, r0
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	2234      	movs	r2, #52	; 0x34
 800578a:	fb02 f303 	mul.w	r3, r2, r3
 800578e:	4a21      	ldr	r2, [pc, #132]	; (8005814 <XMC_USBD_EndpointWrite+0xa0>)
 8005790:	4413      	add	r3, r2
 8005792:	613b      	str	r3, [r7, #16]
  int32_t result;
  if (!ep->isConfigured)
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	791b      	ldrb	r3, [r3, #4]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d102      	bne.n	80057a8 <XMC_USBD_EndpointWrite+0x34>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e030      	b.n	800580a <XMC_USBD_EndpointWrite+0x96>
  }
  else if (ep->inInUse == 1U)
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d102      	bne.n	80057bc <XMC_USBD_EndpointWrite+0x48>
  {
    result=(int32_t)0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	617b      	str	r3, [r7, #20]
 80057ba:	e026      	b.n	800580a <XMC_USBD_EndpointWrite+0x96>
  }
  else
  {
    if (length > ep->inBufferSize)
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d902      	bls.n	80057cc <XMC_USBD_EndpointWrite+0x58>
    {
      length = ep->inBufferSize;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	607b      	str	r3, [r7, #4]
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f001 f947 	bl	8006a68 <memcpy>
		ep->xferBuffer = ep->inBuffer;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	69da      	ldr	r2, [r3, #28]
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	625a      	str	r2, [r3, #36]	; 0x24
    ep->xferTotal = length;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
    /* set transfer values */
    ep->xferLength = 0U;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2200      	movs	r2, #0
 80057ec:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferCount = 0U;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2200      	movs	r2, #0
 80057f2:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->inInUse = 1U;
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	6853      	ldr	r3, [r2, #4]
 80057f8:	f043 0308 	orr.w	r3, r3, #8
 80057fc:	6053      	str	r3, [r2, #4]
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
 80057fe:	6938      	ldr	r0, [r7, #16]
 8005800:	f7fe fff4 	bl	80047ec <XMC_USBD_lStartWriteXfer>
    result=(int32_t)ep->xferTotal;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	617b      	str	r3, [r7, #20]
  }
  return result;
 800580a:	697b      	ldr	r3, [r7, #20]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	200010b4 	.word	0x200010b4

08005818 <XMC_USBD_DeviceSetAddress>:

/**
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	460a      	mov	r2, r1
 8005822:	71fb      	strb	r3, [r7, #7]
 8005824:	4613      	mov	r3, r2
 8005826:	71bb      	strb	r3, [r7, #6]
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 8005828:	4b0d      	ldr	r3, [pc, #52]	; (8005860 <XMC_USBD_DeviceSetAddress+0x48>)
 800582a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	60fb      	str	r3, [r7, #12]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 8005832:	79bb      	ldrb	r3, [r7, #6]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10c      	bne.n	8005852 <XMC_USBD_DeviceSetAddress+0x3a>
  {
    data.b.devaddr = address;
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800583e:	b2da      	uxtb	r2, r3
 8005840:	89bb      	ldrh	r3, [r7, #12]
 8005842:	f362 130a 	bfi	r3, r2, #4, #7
 8005846:	81bb      	strh	r3, [r7, #12]
    xmc_device.device_register->dcfg = data.d32;
 8005848:	4b05      	ldr	r3, [pc, #20]	; (8005860 <XMC_USBD_DeviceSetAddress+0x48>)
 800584a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	200010b4 	.word	0x200010b4

08005864 <XMC_USBD_EndpointStall>:

/**
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	4603      	mov	r3, r0
 800586c:	460a      	mov	r2, r1
 800586e:	71fb      	strb	r3, [r7, #7]
 8005870:	4613      	mov	r3, r2
 8005872:	71bb      	strb	r3, [r7, #6]
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	2234      	movs	r2, #52	; 0x34
 800587c:	fb02 f303 	mul.w	r3, r2, r3
 8005880:	4a4a      	ldr	r2, [pc, #296]	; (80059ac <XMC_USBD_EndpointStall+0x148>)
 8005882:	4413      	add	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  if (stall)
 8005886:	79bb      	ldrb	r3, [r7, #6]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d040      	beq.n	800590e <XMC_USBD_EndpointStall+0xaa>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 800588c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005890:	2b00      	cmp	r3, #0
 8005892:	da1a      	bge.n	80058ca <XMC_USBD_EndpointStall+0x66>
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800589c:	b2db      	uxtb	r3, r3
 800589e:	4a43      	ldr	r2, [pc, #268]	; (80059ac <XMC_USBD_EndpointStall+0x148>)
 80058a0:	336a      	adds	r3, #106	; 0x6a
 80058a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 80058aa:	7abb      	ldrb	r3, [r7, #10]
 80058ac:	f043 0320 	orr.w	r3, r3, #32
 80058b0:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	4a3b      	ldr	r2, [pc, #236]	; (80059ac <XMC_USBD_EndpointStall+0x148>)
 80058be:	336a      	adds	r3, #106	; 0x6a
 80058c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	e01b      	b.n	8005902 <XMC_USBD_EndpointStall+0x9e>
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	4a35      	ldr	r2, [pc, #212]	; (80059ac <XMC_USBD_EndpointStall+0x148>)
 80058d6:	3370      	adds	r3, #112	; 0x70
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 80058e2:	7abb      	ldrb	r3, [r7, #10]
 80058e4:	f043 0320 	orr.w	r3, r3, #32
 80058e8:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	4a2d      	ldr	r2, [pc, #180]	; (80059ac <XMC_USBD_EndpointStall+0x148>)
 80058f6:	3370      	adds	r3, #112	; 0x70
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	601a      	str	r2, [r3, #0]
    }
    ep->isStalled = 1U;
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	7913      	ldrb	r3, [r2, #4]
 8005906:	f043 0320 	orr.w	r3, r3, #32
 800590a:	7113      	strb	r3, [r2, #4]
 800590c:	e047      	b.n	800599e <XMC_USBD_EndpointStall+0x13a>
  }
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 800590e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005912:	2b00      	cmp	r3, #0
 8005914:	da1e      	bge.n	8005954 <XMC_USBD_EndpointStall+0xf0>
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800591e:	b2db      	uxtb	r3, r3
 8005920:	4a22      	ldr	r2, [pc, #136]	; (80059ac <XMC_USBD_EndpointStall+0x148>)
 8005922:	336a      	adds	r3, #106	; 0x6a
 8005924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 800592c:	7abb      	ldrb	r3, [r7, #10]
 800592e:	f36f 1345 	bfc	r3, #5, #1
 8005932:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8005934:	7afb      	ldrb	r3, [r7, #11]
 8005936:	f043 0310 	orr.w	r3, r3, #16
 800593a:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005944:	b2db      	uxtb	r3, r3
 8005946:	4a19      	ldr	r2, [pc, #100]	; (80059ac <XMC_USBD_EndpointStall+0x148>)
 8005948:	336a      	adds	r3, #106	; 0x6a
 800594a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	e01f      	b.n	8005994 <XMC_USBD_EndpointStall+0x130>
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800595c:	b2db      	uxtb	r3, r3
 800595e:	4a13      	ldr	r2, [pc, #76]	; (80059ac <XMC_USBD_EndpointStall+0x148>)
 8005960:	3370      	adds	r3, #112	; 0x70
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 800596c:	7abb      	ldrb	r3, [r7, #10]
 800596e:	f36f 1345 	bfc	r3, #5, #1
 8005972:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8005974:	7afb      	ldrb	r3, [r7, #11]
 8005976:	f043 0310 	orr.w	r3, r3, #16
 800597a:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005984:	b2db      	uxtb	r3, r3
 8005986:	4a09      	ldr	r2, [pc, #36]	; (80059ac <XMC_USBD_EndpointStall+0x148>)
 8005988:	3370      	adds	r3, #112	; 0x70
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	601a      	str	r2, [r3, #0]
		}
		ep->isStalled = 0U;
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	7913      	ldrb	r3, [r2, #4]
 8005998:	f36f 1345 	bfc	r3, #5, #1
 800599c:	7113      	strb	r3, [r2, #4]
	}
	return XMC_USBD_STATUS_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	200010b4 	.word	0x200010b4

080059b0 <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 80059ba:	79fb      	ldrb	r3, [r7, #7]
 80059bc:	f003 030f 	and.w	r3, r3, #15
 80059c0:	2234      	movs	r2, #52	; 0x34
 80059c2:	fb02 f303 	mul.w	r3, r2, r3
 80059c6:	4a1b      	ldr	r2, [pc, #108]	; (8005a34 <XMC_USBD_EndpointAbort+0x84>)
 80059c8:	4413      	add	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]
  if (ep->address_u.address_st.direction)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d004      	beq.n	80059e4 <XMC_USBD_EndpointAbort+0x34>
  {
    ep->inInUse = 0U;
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	6853      	ldr	r3, [r2, #4]
 80059de:	f36f 03c3 	bfc	r3, #3, #1
 80059e2:	6053      	str	r3, [r2, #4]
  }
  if (!ep->address_u.address_st.direction)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d104      	bne.n	80059fc <XMC_USBD_EndpointAbort+0x4c>
  {
    ep->outInUse = 0U;
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	6853      	ldr	r3, [r2, #4]
 80059f6:	f36f 1304 	bfc	r3, #4, #1
 80059fa:	6053      	str	r3, [r2, #4]
  }
  ep->isStalled = 0U;
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	7913      	ldrb	r3, [r2, #4]
 8005a00:	f36f 1345 	bfc	r3, #5, #1
 8005a04:	7113      	strb	r3, [r2, #4]
  ep->outBytesAvailable = 0U;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	611a      	str	r2, [r3, #16]
  ep->outOffset = 0U;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	619a      	str	r2, [r3, #24]
  ep->xferLength = 0U;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	629a      	str	r2, [r3, #40]	; 0x28
  ep->xferCount = 0U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  ep->xferTotal = 0U;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	631a      	str	r2, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	200010b4 	.word	0x200010b4

08005a38 <XMC_USBD_EndpointConfigure>:
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	71fb      	strb	r3, [r7, #7]
 8005a42:	460b      	mov	r3, r1
 8005a44:	71bb      	strb	r3, [r7, #6]
 8005a46:	4613      	mov	r3, r2
 8005a48:	80bb      	strh	r3, [r7, #4]
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8005a4a:	4bb0      	ldr	r3, [pc, #704]	; (8005d0c <XMC_USBD_EndpointConfigure+0x2d4>)
 8005a4c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	613b      	str	r3, [r7, #16]
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	2234      	movs	r2, #52	; 0x34
 8005a5c:	fb02 f303 	mul.w	r3, r2, r3
 8005a60:	4aaa      	ldr	r2, [pc, #680]	; (8005d0c <XMC_USBD_EndpointConfigure+0x2d4>)
 8005a62:	4413      	add	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 8005a66:	2234      	movs	r2, #52	; 0x34
 8005a68:	2100      	movs	r1, #0
 8005a6a:	6978      	ldr	r0, [r7, #20]
 8005a6c:	f001 f896 	bl	8006b9c <memset>
  /* do ep configuration */
  ep->address_u.address = ep_addr;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	79fa      	ldrb	r2, [r7, #7]
 8005a74:	701a      	strb	r2, [r3, #0]
  ep->isConfigured = 1U;
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	7913      	ldrb	r3, [r2, #4]
 8005a7a:	f043 0304 	orr.w	r3, r3, #4
 8005a7e:	7113      	strb	r3, [r2, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 8005a80:	88bb      	ldrh	r3, [r7, #4]
 8005a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a86:	b2d9      	uxtb	r1, r3
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	6853      	ldr	r3, [r2, #4]
 8005a8c:	f361 23d1 	bfi	r3, r1, #11, #7
 8005a90:	6053      	str	r3, [r2, #4]
  if (ep->address_u.address != 0U)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <XMC_USBD_EndpointConfigure+0x72>
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	6893      	ldr	r3, [r2, #8]
 8005a9e:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8005aa2:	f361 0312 	bfi	r3, r1, #0, #19
 8005aa6:	6093      	str	r3, [r2, #8]
 8005aa8:	e005      	b.n	8005ab6 <XMC_USBD_EndpointConfigure+0x7e>
  }
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	6893      	ldr	r3, [r2, #8]
 8005aae:	2140      	movs	r1, #64	; 0x40
 8005ab0:	f361 0312 	bfi	r3, r1, #0, #19
 8005ab4:	6093      	str	r3, [r2, #8]
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	4a93      	ldr	r2, [pc, #588]	; (8005d10 <XMC_USBD_EndpointConfigure+0x2d8>)
 8005ac4:	441a      	add	r2, r3
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	61da      	str	r2, [r3, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	021b      	lsls	r3, r3, #8
 8005ad6:	4a8f      	ldr	r2, [pc, #572]	; (8005d14 <XMC_USBD_EndpointConfigure+0x2dc>)
 8005ad8:	441a      	add	r2, r3
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	60da      	str	r2, [r3, #12]
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4b8b      	ldr	r3, [pc, #556]	; (8005d18 <XMC_USBD_EndpointConfigure+0x2e0>)
 8005aec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	621a      	str	r2, [r3, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	461a      	mov	r2, r3
 8005b00:	4b86      	ldr	r3, [pc, #536]	; (8005d1c <XMC_USBD_EndpointConfigure+0x2e4>)
 8005b02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	615a      	str	r2, [r3, #20]
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d102      	bne.n	8005b1e <XMC_USBD_EndpointConfigure+0xe6>
 8005b18:	79bb      	ldrb	r3, [r7, #6]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d179      	bne.n	8005c12 <XMC_USBD_EndpointConfigure+0x1da>
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	4a78      	ldr	r2, [pc, #480]	; (8005d0c <XMC_USBD_EndpointConfigure+0x2d4>)
 8005b2a:	336a      	adds	r3, #106	; 0x6a
 8005b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8005b34:	7b7b      	ldrb	r3, [r7, #13]
 8005b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b3a:	737b      	strb	r3, [r7, #13]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 8005b3c:	79bb      	ldrb	r3, [r7, #6]
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	7bbb      	ldrb	r3, [r7, #14]
 8005b46:	f362 0383 	bfi	r3, r2, #2, #2
 8005b4a:	73bb      	strb	r3, [r7, #14]
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8005b4c:	79bb      	ldrb	r3, [r7, #6]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d123      	bne.n	8005b9a <XMC_USBD_EndpointConfigure+0x162>
    {
			switch(ep_max_packet_size)
 8005b52:	88bb      	ldrh	r3, [r7, #4]
 8005b54:	2b10      	cmp	r3, #16
 8005b56:	d014      	beq.n	8005b82 <XMC_USBD_EndpointConfigure+0x14a>
 8005b58:	2b10      	cmp	r3, #16
 8005b5a:	dc02      	bgt.n	8005b62 <XMC_USBD_EndpointConfigure+0x12a>
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d016      	beq.n	8005b8e <XMC_USBD_EndpointConfigure+0x156>
				break;
				case (8U):
				data.b.mps = 0x3U;
				break;
				default:
				break;
 8005b60:	e023      	b.n	8005baa <XMC_USBD_EndpointConfigure+0x172>
			switch(ep_max_packet_size)
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d007      	beq.n	8005b76 <XMC_USBD_EndpointConfigure+0x13e>
 8005b66:	2b40      	cmp	r3, #64	; 0x40
 8005b68:	d000      	beq.n	8005b6c <XMC_USBD_EndpointConfigure+0x134>
				break;
 8005b6a:	e01e      	b.n	8005baa <XMC_USBD_EndpointConfigure+0x172>
				data.b.mps = 0x0U;
 8005b6c:	89bb      	ldrh	r3, [r7, #12]
 8005b6e:	f36f 030a 	bfc	r3, #0, #11
 8005b72:	81bb      	strh	r3, [r7, #12]
				break;
 8005b74:	e019      	b.n	8005baa <XMC_USBD_EndpointConfigure+0x172>
				data.b.mps = 0x1U;
 8005b76:	89bb      	ldrh	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f362 030a 	bfi	r3, r2, #0, #11
 8005b7e:	81bb      	strh	r3, [r7, #12]
				break;
 8005b80:	e013      	b.n	8005baa <XMC_USBD_EndpointConfigure+0x172>
				data.b.mps = 0x2U;
 8005b82:	89bb      	ldrh	r3, [r7, #12]
 8005b84:	2202      	movs	r2, #2
 8005b86:	f362 030a 	bfi	r3, r2, #0, #11
 8005b8a:	81bb      	strh	r3, [r7, #12]
				break;
 8005b8c:	e00d      	b.n	8005baa <XMC_USBD_EndpointConfigure+0x172>
				data.b.mps = 0x3U;
 8005b8e:	89bb      	ldrh	r3, [r7, #12]
 8005b90:	2203      	movs	r2, #3
 8005b92:	f362 030a 	bfi	r3, r2, #0, #11
 8005b96:	81bb      	strh	r3, [r7, #12]
				break;
 8005b98:	e007      	b.n	8005baa <XMC_USBD_EndpointConfigure+0x172>
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 8005b9a:	88bb      	ldrh	r3, [r7, #4]
 8005b9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	89bb      	ldrh	r3, [r7, #12]
 8005ba4:	f362 030a 	bfi	r3, r2, #0, #11
 8005ba8:	81bb      	strh	r3, [r7, #12]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
 8005bac:	f043 0310 	orr.w	r3, r3, #16
 8005bb0:	73fb      	strb	r3, [r7, #15]
		/* clear stall */
		data.b.stall = 0U;
 8005bb2:	7bbb      	ldrb	r3, [r7, #14]
 8005bb4:	f36f 1345 	bfc	r3, #5, #1
 8005bb8:	73bb      	strb	r3, [r7, #14]
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 8005bba:	f7fe fd07 	bl	80045cc <XMC_USBD_lAssignTXFifo>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	b2d9      	uxtb	r1, r3
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	8893      	ldrh	r3, [r2, #4]
 8005bca:	f361 1389 	bfi	r3, r1, #6, #4
 8005bce:	8093      	strh	r3, [r2, #4]
		data.b.txfnum = ep->txFifoNum;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	889b      	ldrh	r3, [r3, #4]
 8005bd4:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	89fb      	ldrh	r3, [r7, #14]
 8005bdc:	f362 1389 	bfi	r3, r2, #6, #4
 8005be0:	81fb      	strh	r3, [r7, #14]
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	4a47      	ldr	r2, [pc, #284]	; (8005d0c <XMC_USBD_EndpointConfigure+0x2d4>)
 8005bee:	336a      	adds	r3, #106	; 0x6a
 8005bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	601a      	str	r2, [r3, #0]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8005bf8:	8a3a      	ldrh	r2, [r7, #16]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	4619      	mov	r1, r3
 8005c06:	2301      	movs	r3, #1
 8005c08:	408b      	lsls	r3, r1
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	823b      	strh	r3, [r7, #16]
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <XMC_USBD_EndpointConfigure+0x1ee>
 8005c20:	79bb      	ldrb	r3, [r7, #6]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d167      	bne.n	8005cf6 <XMC_USBD_EndpointConfigure+0x2be>
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	4a36      	ldr	r2, [pc, #216]	; (8005d0c <XMC_USBD_EndpointConfigure+0x2d4>)
 8005c32:	3370      	adds	r3, #112	; 0x70
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	60bb      	str	r3, [r7, #8]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8005c3e:	7a7b      	ldrb	r3, [r7, #9]
 8005c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c44:	727b      	strb	r3, [r7, #9]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 8005c46:	79bb      	ldrb	r3, [r7, #6]
 8005c48:	f003 0303 	and.w	r3, r3, #3
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	7abb      	ldrb	r3, [r7, #10]
 8005c50:	f362 0383 	bfi	r3, r2, #2, #2
 8005c54:	72bb      	strb	r3, [r7, #10]
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8005c56:	79bb      	ldrb	r3, [r7, #6]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d123      	bne.n	8005ca4 <XMC_USBD_EndpointConfigure+0x26c>
		{
			switch(ep_max_packet_size)
 8005c5c:	88bb      	ldrh	r3, [r7, #4]
 8005c5e:	2b10      	cmp	r3, #16
 8005c60:	d014      	beq.n	8005c8c <XMC_USBD_EndpointConfigure+0x254>
 8005c62:	2b10      	cmp	r3, #16
 8005c64:	dc02      	bgt.n	8005c6c <XMC_USBD_EndpointConfigure+0x234>
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	d016      	beq.n	8005c98 <XMC_USBD_EndpointConfigure+0x260>
					break;
				case (8U):
					data.b.mps = 0x3U;
					break;
				default:
					break;
 8005c6a:	e023      	b.n	8005cb4 <XMC_USBD_EndpointConfigure+0x27c>
			switch(ep_max_packet_size)
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d007      	beq.n	8005c80 <XMC_USBD_EndpointConfigure+0x248>
 8005c70:	2b40      	cmp	r3, #64	; 0x40
 8005c72:	d000      	beq.n	8005c76 <XMC_USBD_EndpointConfigure+0x23e>
					break;
 8005c74:	e01e      	b.n	8005cb4 <XMC_USBD_EndpointConfigure+0x27c>
					data.b.mps = 0x0U;
 8005c76:	893b      	ldrh	r3, [r7, #8]
 8005c78:	f36f 030a 	bfc	r3, #0, #11
 8005c7c:	813b      	strh	r3, [r7, #8]
					break;
 8005c7e:	e019      	b.n	8005cb4 <XMC_USBD_EndpointConfigure+0x27c>
					data.b.mps = 0x1U;
 8005c80:	893b      	ldrh	r3, [r7, #8]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f362 030a 	bfi	r3, r2, #0, #11
 8005c88:	813b      	strh	r3, [r7, #8]
					break;
 8005c8a:	e013      	b.n	8005cb4 <XMC_USBD_EndpointConfigure+0x27c>
					data.b.mps = 0x2U;
 8005c8c:	893b      	ldrh	r3, [r7, #8]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f362 030a 	bfi	r3, r2, #0, #11
 8005c94:	813b      	strh	r3, [r7, #8]
					break;
 8005c96:	e00d      	b.n	8005cb4 <XMC_USBD_EndpointConfigure+0x27c>
					data.b.mps = 0x3U;
 8005c98:	893b      	ldrh	r3, [r7, #8]
 8005c9a:	2203      	movs	r2, #3
 8005c9c:	f362 030a 	bfi	r3, r2, #0, #11
 8005ca0:	813b      	strh	r3, [r7, #8]
					break;
 8005ca2:	e007      	b.n	8005cb4 <XMC_USBD_EndpointConfigure+0x27c>
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 8005ca4:	88bb      	ldrh	r3, [r7, #4]
 8005ca6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	893b      	ldrh	r3, [r7, #8]
 8005cae:	f362 030a 	bfi	r3, r2, #0, #11
 8005cb2:	813b      	strh	r3, [r7, #8]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8005cb4:	7afb      	ldrb	r3, [r7, #11]
 8005cb6:	f043 0310 	orr.w	r3, r3, #16
 8005cba:	72fb      	strb	r3, [r7, #11]
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
 8005cbc:	7abb      	ldrb	r3, [r7, #10]
 8005cbe:	f36f 1345 	bfc	r3, #5, #1
 8005cc2:	72bb      	strb	r3, [r7, #10]
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	4a0f      	ldr	r2, [pc, #60]	; (8005d0c <XMC_USBD_EndpointConfigure+0x2d4>)
 8005cd0:	3370      	adds	r3, #112	; 0x70
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	601a      	str	r2, [r3, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 8005cdc:	8a7a      	ldrh	r2, [r7, #18]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	4619      	mov	r1, r3
 8005cea:	2301      	movs	r3, #1
 8005cec:	408b      	lsls	r3, r1
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	827b      	strh	r3, [r7, #18]
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 8005cf6:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <XMC_USBD_EndpointConfigure+0x2d4>)
 8005cf8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	61da      	str	r2, [r3, #28]
  return XMC_USBD_STATUS_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	200010b4 	.word	0x200010b4
 8005d10:	30000700 	.word	0x30000700
 8005d14:	30000000 	.word	0x30000000
 8005d18:	20000cc4 	.word	0x20000cc4
 8005d1c:	20000ca8 	.word	0x20000ca8

08005d20 <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	4603      	mov	r3, r0
 8005d28:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8005d2a:	79fb      	ldrb	r3, [r7, #7]
 8005d2c:	f003 030f 	and.w	r3, r3, #15
 8005d30:	2234      	movs	r2, #52	; 0x34
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	4a54      	ldr	r2, [pc, #336]	; (8005e88 <XMC_USBD_EndpointUnconfigure+0x168>)
 8005d38:	4413      	add	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8005d40:	4b51      	ldr	r3, [pc, #324]	; (8005e88 <XMC_USBD_EndpointUnconfigure+0x168>)
 8005d42:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	60fb      	str	r3, [r7, #12]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	2301      	movs	r3, #1
 8005d58:	4093      	lsls	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]
  /* if not configured return an error */
  if (!ep->isConfigured)
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	791b      	ldrb	r3, [r3, #4]
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d102      	bne.n	8005d70 <XMC_USBD_EndpointUnconfigure+0x50>
  {
     result = XMC_USBD_STATUS_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	77fb      	strb	r3, [r7, #31]
 8005d6e:	e085      	b.n	8005e7c <XMC_USBD_EndpointUnconfigure+0x15c>
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 8005d70:	7c7b      	ldrb	r3, [r7, #17]
 8005d72:	f36f 13c7 	bfc	r3, #7, #1
 8005d76:	747b      	strb	r3, [r7, #17]
    data.b.epdis =  1U;
 8005d78:	7cfb      	ldrb	r3, [r7, #19]
 8005d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d7e:	74fb      	strb	r3, [r7, #19]
    data.b.snak =  1U;
 8005d80:	7cfb      	ldrb	r3, [r7, #19]
 8005d82:	f043 0308 	orr.w	r3, r3, #8
 8005d86:	74fb      	strb	r3, [r7, #19]
    data.b.stall =  0U;
 8005d88:	7cbb      	ldrb	r3, [r7, #18]
 8005d8a:	f36f 1345 	bfc	r3, #5, #1
 8005d8e:	74bb      	strb	r3, [r7, #18]
    ep->isConfigured =  0U;
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	7913      	ldrb	r3, [r2, #4]
 8005d94:	f36f 0382 	bfc	r3, #2, #1
 8005d98:	7113      	strb	r3, [r2, #4]
    ep->isStalled =  0U;
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	7913      	ldrb	r3, [r2, #4]
 8005d9e:	f36f 1345 	bfc	r3, #5, #1
 8005da2:	7113      	strb	r3, [r2, #4]
    ep->outInUse =  0U;
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	6853      	ldr	r3, [r2, #4]
 8005da8:	f36f 1304 	bfc	r3, #4, #1
 8005dac:	6053      	str	r3, [r2, #4]
    ep->inInUse =  0U;
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	6853      	ldr	r3, [r2, #4]
 8005db2:	f36f 03c3 	bfc	r3, #3, #1
 8005db6:	6053      	str	r3, [r2, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <XMC_USBD_EndpointUnconfigure+0xb4>
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	791b      	ldrb	r3, [r3, #4]
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d112      	bne.n	8005dfa <XMC_USBD_EndpointUnconfigure+0xda>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	4a2a      	ldr	r2, [pc, #168]	; (8005e88 <XMC_USBD_EndpointUnconfigure+0x168>)
 8005de0:	336a      	adds	r3, #106	; 0x6a
 8005de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	601a      	str	r2, [r3, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8005dea:	89ba      	ldrh	r2, [r7, #12]
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	43db      	mvns	r3, r3
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	4013      	ands	r3, r2
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	81bb      	strh	r3, [r7, #12]
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d006      	beq.n	8005e16 <XMC_USBD_EndpointUnconfigure+0xf6>
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	791b      	ldrb	r3, [r3, #4]
 8005e0c:	f003 0303 	and.w	r3, r3, #3
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d123      	bne.n	8005e5e <XMC_USBD_EndpointUnconfigure+0x13e>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	4a19      	ldr	r2, [pc, #100]	; (8005e88 <XMC_USBD_EndpointUnconfigure+0x168>)
 8005e22:	3370      	adds	r3, #112	; 0x70
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	601a      	str	r2, [r3, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 8005e2e:	89fa      	ldrh	r2, [r7, #14]
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	43db      	mvns	r3, r3
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	4013      	ands	r3, r2
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	81fb      	strh	r3, [r7, #14]
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8005e3e:	4b13      	ldr	r3, [pc, #76]	; (8005e8c <XMC_USBD_EndpointUnconfigure+0x16c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	7b5b      	ldrb	r3, [r3, #13]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d10a      	bne.n	8005e5e <XMC_USBD_EndpointUnconfigure+0x13e>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 8005e48:	4b0f      	ldr	r3, [pc, #60]	; (8005e88 <XMC_USBD_EndpointUnconfigure+0x168>)
 8005e4a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005e4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	43da      	mvns	r2, r3
 8005e54:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <XMC_USBD_EndpointUnconfigure+0x168>)
 8005e56:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005e5a:	400a      	ands	r2, r1
 8005e5c:	635a      	str	r2, [r3, #52]	; 0x34
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 8005e5e:	4b0a      	ldr	r3, [pc, #40]	; (8005e88 <XMC_USBD_EndpointUnconfigure+0x168>)
 8005e60:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	61da      	str	r2, [r3, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	889b      	ldrh	r3, [r3, #4]
 8005e6c:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe fbe2 	bl	800463c <XMC_USBD_lUnassignFifo>
    result = XMC_USBD_STATUS_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	77fb      	strb	r3, [r7, #31]
  }
  return result;
 8005e7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3720      	adds	r7, #32
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	200010b4 	.word	0x200010b4
 8005e8c:	200010b0 	.word	0x200010b0

08005e90 <XMC_USBD_GetFrameNumber>:

/**
 * Gets the current USB frame number
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 8005e96:	4b08      	ldr	r3, [pc, #32]	; (8005eb8 <XMC_USBD_GetFrameNumber+0x28>)
 8005e98:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	603b      	str	r3, [r7, #0]
  result = (uint16_t)dsts.b.soffn;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	80fb      	strh	r3, [r7, #6]
  return result;
 8005eaa:	88fb      	ldrh	r3, [r7, #6]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	200010b4 	.word	0x200010b4

08005ebc <XMC_USBD_IsEnumDone>:
 * Gets the USB speed enumeration completion status.
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 8005ec0:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <XMC_USBD_IsEnumDone+0x34>)
 8005ec2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d009      	beq.n	8005ee4 <XMC_USBD_IsEnumDone+0x28>
 8005ed0:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <XMC_USBD_IsEnumDone+0x34>)
 8005ed2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <XMC_USBD_IsEnumDone+0x28>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e000      	b.n	8005ee6 <XMC_USBD_IsEnumDone+0x2a>
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	200010b4 	.word	0x200010b4

08005ef4 <USB_GetNextDescriptor>:
			 */
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	81fb      	strh	r3, [r7, #14]

				if (*BytesRem < CurrDescriptorSize)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	89fa      	ldrh	r2, [r7, #14]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d902      	bls.n	8005f16 <USB_GetNextDescriptor+0x22>
				  CurrDescriptorSize = *BytesRem;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	81fb      	strh	r3, [r7, #14]

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	89fb      	ldrh	r3, [r7, #14]
 8005f1e:	4413      	add	r3, r2
 8005f20:	461a      	mov	r2, r3
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	601a      	str	r2, [r3, #0]
				*BytesRem      -= CurrDescriptorSize;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	881a      	ldrh	r2, [r3, #0]
 8005f2a:	89fb      	ldrh	r3, [r7, #14]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	801a      	strh	r2, [r3, #0]
			}
 8005f34:	bf00      	nop
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <USB_GetNextDescriptorOfType>:
#endif

void USB_GetNextDescriptorOfType(uint16_t* const BytesRem,
                                 void** const CurrConfigLoc,
                                 const uint8_t Type)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	71fb      	strb	r3, [r7, #7]
    while (*BytesRem)
 8005f4e:	e009      	b.n	8005f64 <USB_GetNextDescriptorOfType+0x24>
    {
        USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff ffce 	bl	8005ef4 <USB_GetNextDescriptor>

        if (DESCRIPTOR_TYPE(*CurrConfigLoc) == Type)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	785b      	ldrb	r3, [r3, #1]
 8005f5e:	79fa      	ldrb	r2, [r7, #7]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d004      	beq.n	8005f6e <USB_GetNextDescriptorOfType+0x2e>
    while (*BytesRem)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1f1      	bne.n	8005f50 <USB_GetNextDescriptorOfType+0x10>
 8005f6c:	e000      	b.n	8005f70 <USB_GetNextDescriptorOfType+0x30>
          return;
 8005f6e:	bf00      	nop
    }
}
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <USB_GetNextDescriptorOfTypeBefore>:

void USB_GetNextDescriptorOfTypeBefore(uint16_t* const BytesRem,
                                       void** const CurrConfigLoc,
                                       const uint8_t Type,
                                       const uint8_t BeforeType)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	4611      	mov	r1, r2
 8005f82:	461a      	mov	r2, r3
 8005f84:	460b      	mov	r3, r1
 8005f86:	71fb      	strb	r3, [r7, #7]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	71bb      	strb	r3, [r7, #6]
    while (*BytesRem)
 8005f8c:	e013      	b.n	8005fb6 <USB_GetNextDescriptorOfTypeBefore+0x40>
    {
        USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 8005f8e:	68b9      	ldr	r1, [r7, #8]
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f7ff ffaf 	bl	8005ef4 <USB_GetNextDescriptor>

        if (DESCRIPTOR_TYPE(*CurrConfigLoc) == Type)
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	79fa      	ldrb	r2, [r7, #7]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d00e      	beq.n	8005fc0 <USB_GetNextDescriptorOfTypeBefore+0x4a>
        {
            return;
        }
        else if (DESCRIPTOR_TYPE(*CurrConfigLoc) == BeforeType)
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	785b      	ldrb	r3, [r3, #1]
 8005fa8:	79ba      	ldrb	r2, [r7, #6]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d103      	bne.n	8005fb6 <USB_GetNextDescriptorOfTypeBefore+0x40>
        {
            *BytesRem = 0;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	801a      	strh	r2, [r3, #0]
            return;
 8005fb4:	e005      	b.n	8005fc2 <USB_GetNextDescriptorOfTypeBefore+0x4c>
    while (*BytesRem)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e7      	bne.n	8005f8e <USB_GetNextDescriptorOfTypeBefore+0x18>
 8005fbe:	e000      	b.n	8005fc2 <USB_GetNextDescriptorOfTypeBefore+0x4c>
            return;
 8005fc0:	bf00      	nop
        }
    }
}
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <USB_GetNextDescriptorOfTypeAfter>:

void USB_GetNextDescriptorOfTypeAfter(uint16_t* const BytesRem,
                                      void** const CurrConfigLoc,
                                      const uint8_t Type,
                                      const uint8_t AfterType)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	71fb      	strb	r3, [r7, #7]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	71bb      	strb	r3, [r7, #6]
    USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);
 8005fde:	79bb      	ldrb	r3, [r7, #6]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	68b9      	ldr	r1, [r7, #8]
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f7ff ffab 	bl	8005f40 <USB_GetNextDescriptorOfType>

    if (*BytesRem)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <USB_GetNextDescriptorOfTypeAfter+0x36>
      USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	68b9      	ldr	r1, [r7, #8]
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f7ff ffa1 	bl	8005f40 <USB_GetNextDescriptorOfType>
}
 8005ffe:	bf00      	nop
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b086      	sub	sp, #24
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
    uint8_t ErrorCode;

    while (*BytesRem)
 8006012:	e01e      	b.n	8006052 <USB_GetNextDescriptorComp+0x4c>
    {
        uint8_t* PrevDescLoc  = *CurrConfigLoc;
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	617b      	str	r3, [r7, #20]
        uint16_t PrevBytesRem = *BytesRem;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	827b      	strh	r3, [r7, #18]

        USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 8006020:	68b9      	ldr	r1, [r7, #8]
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f7ff ff66 	bl	8005ef4 <USB_GetNextDescriptor>

        if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4610      	mov	r0, r2
 8006030:	4798      	blx	r3
 8006032:	4603      	mov	r3, r0
 8006034:	747b      	strb	r3, [r7, #17]
 8006036:	7c7b      	ldrb	r3, [r7, #17]
 8006038:	2b02      	cmp	r3, #2
 800603a:	d00a      	beq.n	8006052 <USB_GetNextDescriptorComp+0x4c>
        {
            if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
 800603c:	7c7b      	ldrb	r3, [r7, #17]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d105      	bne.n	800604e <USB_GetNextDescriptorComp+0x48>
            {
                *CurrConfigLoc = PrevDescLoc;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	601a      	str	r2, [r3, #0]
                *BytesRem      = PrevBytesRem;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8a7a      	ldrh	r2, [r7, #18]
 800604c:	801a      	strh	r2, [r3, #0]
            }

            return ErrorCode;
 800604e:	7c7b      	ldrb	r3, [r7, #17]
 8006050:	e004      	b.n	800605c <USB_GetNextDescriptorComp+0x56>
    while (*BytesRem)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1dc      	bne.n	8006014 <USB_GetNextDescriptorComp+0xe>
        }
    }

    return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
 800605a:	2302      	movs	r3, #2
}
 800605c:	4618      	mov	r0, r3
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	af00      	add	r7, sp, #0
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
 8006068:	f000 f802 	bl	8006070 <USB_DeviceTask>
	#endif
}
 800606c:	bf00      	nop
 800606e:	bd80      	pop	{r7, pc}

08006070 <USB_DeviceTask>:

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 8006076:	4b1d      	ldr	r3, [pc, #116]	; (80060ec <USB_DeviceTask+0x7c>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d030      	beq.n	80060e2 <USB_DeviceTask+0x72>
		return device.CurrentDirection | device.CurrentEndpoint;
 8006080:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <USB_DeviceTask+0x80>)
 8006082:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 8006086:	4b1a      	ldr	r3, [pc, #104]	; (80060f0 <USB_DeviceTask+0x80>)
 8006088:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800608c:	4313      	orrs	r3, r2
 800608e:	b2db      	uxtb	r3, r3
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
 8006090:	71fb      	strb	r3, [r7, #7]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8006092:	2200      	movs	r2, #0
 8006094:	4b16      	ldr	r3, [pc, #88]	; (80060f0 <USB_DeviceTask+0x80>)
 8006096:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800609a:	2200      	movs	r2, #0
 800609c:	4b14      	ldr	r3, [pc, #80]	; (80060f0 <USB_DeviceTask+0x80>)
 800609e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
		return device.IsSetupRecieved;
 80060a2:	4b13      	ldr	r3, [pc, #76]	; (80060f0 <USB_DeviceTask+0x80>)
 80060a4:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80060a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	bf14      	ite	ne
 80060b2:	2301      	movne	r3, #1
 80060b4:	2300      	moveq	r3, #0
 80060b6:	b2db      	uxtb	r3, r3

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <USB_DeviceTask+0x50>
	  USB_Device_ProcessControlRequest();
 80060bc:	f7fd fbcc 	bl	8003858 <USB_Device_ProcessControlRequest>
 80060c0:	79fb      	ldrb	r3, [r7, #7]
 80060c2:	71bb      	strb	r3, [r7, #6]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80060c4:	79bb      	ldrb	r3, [r7, #6]
 80060c6:	f003 030f 	and.w	r3, r3, #15
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	4b08      	ldr	r3, [pc, #32]	; (80060f0 <USB_DeviceTask+0x80>)
 80060ce:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80060d2:	79bb      	ldrb	r3, [r7, #6]
 80060d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <USB_DeviceTask+0x80>)
 80060dc:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
 80060e0:	e000      	b.n	80060e4 <USB_DeviceTask+0x74>
	  return;
 80060e2:	bf00      	nop

	Endpoint_SelectEndpoint(PrevEndpoint);
}
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	200012bd 	.word	0x200012bd
 80060f0:	20000f70 	.word	0x20000f70

080060f4 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0

}
 80060f8:	bf00      	nop
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8006102:	b480      	push	{r7}
 8006104:	b085      	sub	sp, #20
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	e003      	b.n	8006118 <delay+0x16>
  {
    __NOP();
 8006110:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3301      	adds	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	429a      	cmp	r2, r3
 800611e:	d8f7      	bhi.n	8006110 <delay+0xe>
  }
}
 8006120:	bf00      	nop
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800612c:	b598      	push	{r3, r4, r7, lr}
 800612e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8006130:	4a06      	ldr	r2, [pc, #24]	; (800614c <SystemInit+0x20>)
 8006132:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006136:	4614      	mov	r4, r2
 8006138:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800613a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 800613e:	f000 f807 	bl	8006150 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8006142:	f7fa fb6d 	bl	8000820 <SystemCoreClockSetup>
}
 8006146:	bf00      	nop
 8006148:	bd98      	pop	{r3, r4, r7, pc}
 800614a:	bf00      	nop
 800614c:	2000ffc4 	.word	0x2000ffc4

08006150 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006156:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8006158:	4b16      	ldr	r3, [pc, #88]	; (80061b4 <SystemCoreSetup+0x64>)
 800615a:	4a17      	ldr	r2, [pc, #92]	; (80061b8 <SystemCoreSetup+0x68>)
 800615c:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800615e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 8006162:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8006164:	4b13      	ldr	r3, [pc, #76]	; (80061b4 <SystemCoreSetup+0x64>)
 8006166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616a:	4a12      	ldr	r2, [pc, #72]	; (80061b4 <SystemCoreSetup+0x64>)
 800616c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8006174:	4b0f      	ldr	r3, [pc, #60]	; (80061b4 <SystemCoreSetup+0x64>)
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	4a0e      	ldr	r2, [pc, #56]	; (80061b4 <SystemCoreSetup+0x64>)
 800617a:	f023 0308 	bic.w	r3, r3, #8
 800617e:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8006180:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <SystemCoreSetup+0x6c>)
 8006182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006186:	3314      	adds	r3, #20
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f023 030f 	bic.w	r3, r3, #15
 8006192:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f043 0303 	orr.w	r3, r3, #3
 800619a:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800619c:	4b07      	ldr	r3, [pc, #28]	; (80061bc <SystemCoreSetup+0x6c>)
 800619e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061a2:	3314      	adds	r3, #20
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	601a      	str	r2, [r3, #0]
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	e000ed00 	.word	0xe000ed00
 80061b8:	08000000 	.word	0x08000000
 80061bc:	58001000 	.word	0x58001000

__WEAK void SystemCoreClockSetup(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80061c4:	4b75      	ldr	r3, [pc, #468]	; (800639c <SystemCoreSetup+0x24c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10c      	bne.n	80061ea <SystemCoreSetup+0x9a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 80061d0:	4b72      	ldr	r3, [pc, #456]	; (800639c <SystemCoreSetup+0x24c>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	4a71      	ldr	r2, [pc, #452]	; (800639c <SystemCoreSetup+0x24c>)
 80061d6:	f043 0301 	orr.w	r3, r3, #1
 80061da:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80061dc:	bf00      	nop
 80061de:	4b6f      	ldr	r3, [pc, #444]	; (800639c <SystemCoreSetup+0x24c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0f9      	beq.n	80061de <SystemCoreSetup+0x8e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80061ea:	4b6d      	ldr	r3, [pc, #436]	; (80063a0 <SystemCoreSetup+0x250>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d009      	beq.n	800620a <SystemCoreSetup+0xba>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80061f6:	4b6a      	ldr	r3, [pc, #424]	; (80063a0 <SystemCoreSetup+0x250>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	4a69      	ldr	r2, [pc, #420]	; (80063a0 <SystemCoreSetup+0x250>)
 80061fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006200:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8006202:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8006206:	f7ff ff7c 	bl	8006102 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 800620a:	4b66      	ldr	r3, [pc, #408]	; (80063a4 <SystemCoreSetup+0x254>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	4a65      	ldr	r2, [pc, #404]	; (80063a4 <SystemCoreSetup+0x254>)
 8006210:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006214:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8006216:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800621a:	f7ff ff72 	bl	8006102 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800621e:	4b61      	ldr	r3, [pc, #388]	; (80063a4 <SystemCoreSetup+0x254>)
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	4a60      	ldr	r2, [pc, #384]	; (80063a4 <SystemCoreSetup+0x254>)
 8006224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006228:	f023 0302 	bic.w	r3, r3, #2
 800622c:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 800622e:	4b5e      	ldr	r3, [pc, #376]	; (80063a8 <SystemCoreSetup+0x258>)
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006236:	2b00      	cmp	r3, #0
 8006238:	d029      	beq.n	800628e <SystemCoreSetup+0x13e>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 800623a:	4b5b      	ldr	r3, [pc, #364]	; (80063a8 <SystemCoreSetup+0x258>)
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	4a5a      	ldr	r2, [pc, #360]	; (80063a8 <SystemCoreSetup+0x258>)
 8006240:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006244:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006248:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 800624a:	f000 f927 	bl	800649c <OSCHP_GetFrequency>
 800624e:	4602      	mov	r2, r0
 8006250:	4b56      	ldr	r3, [pc, #344]	; (80063ac <SystemCoreSetup+0x25c>)
 8006252:	fba3 2302 	umull	r2, r3, r3, r2
 8006256:	0d1b      	lsrs	r3, r3, #20
 8006258:	3b01      	subs	r3, #1
 800625a:	041a      	lsls	r2, r3, #16
 800625c:	4b52      	ldr	r3, [pc, #328]	; (80063a8 <SystemCoreSetup+0x258>)
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	4951      	ldr	r1, [pc, #324]	; (80063a8 <SystemCoreSetup+0x258>)
 8006262:	4313      	orrs	r3, r2
 8006264:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8006266:	4b4f      	ldr	r3, [pc, #316]	; (80063a4 <SystemCoreSetup+0x254>)
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	4a4e      	ldr	r2, [pc, #312]	; (80063a4 <SystemCoreSetup+0x254>)
 800626c:	f023 0301 	bic.w	r3, r3, #1
 8006270:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8006272:	4b4c      	ldr	r3, [pc, #304]	; (80063a4 <SystemCoreSetup+0x254>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	4a4b      	ldr	r2, [pc, #300]	; (80063a4 <SystemCoreSetup+0x254>)
 8006278:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800627c:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 800627e:	bf00      	nop
 8006280:	4b48      	ldr	r3, [pc, #288]	; (80063a4 <SystemCoreSetup+0x254>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8006288:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800628c:	d1f8      	bne.n	8006280 <SystemCoreSetup+0x130>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 800628e:	4b45      	ldr	r3, [pc, #276]	; (80063a4 <SystemCoreSetup+0x254>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	4a44      	ldr	r2, [pc, #272]	; (80063a4 <SystemCoreSetup+0x254>)
 8006294:	f043 0301 	orr.w	r3, r3, #1
 8006298:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 800629a:	4b42      	ldr	r3, [pc, #264]	; (80063a4 <SystemCoreSetup+0x254>)
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	4a41      	ldr	r2, [pc, #260]	; (80063a4 <SystemCoreSetup+0x254>)
 80062a0:	f043 0310 	orr.w	r3, r3, #16
 80062a4:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80062a6:	4b3f      	ldr	r3, [pc, #252]	; (80063a4 <SystemCoreSetup+0x254>)
 80062a8:	4a41      	ldr	r2, [pc, #260]	; (80063b0 <SystemCoreSetup+0x260>)
 80062aa:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80062ac:	4b3d      	ldr	r3, [pc, #244]	; (80063a4 <SystemCoreSetup+0x254>)
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	4a3c      	ldr	r2, [pc, #240]	; (80063a4 <SystemCoreSetup+0x254>)
 80062b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062b6:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 80062b8:	4b3a      	ldr	r3, [pc, #232]	; (80063a4 <SystemCoreSetup+0x254>)
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	4a39      	ldr	r2, [pc, #228]	; (80063a4 <SystemCoreSetup+0x254>)
 80062be:	f023 0310 	bic.w	r3, r3, #16
 80062c2:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 80062c4:	4b37      	ldr	r3, [pc, #220]	; (80063a4 <SystemCoreSetup+0x254>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	4a36      	ldr	r2, [pc, #216]	; (80063a4 <SystemCoreSetup+0x254>)
 80062ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062ce:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80062d0:	bf00      	nop
 80062d2:	4b34      	ldr	r3, [pc, #208]	; (80063a4 <SystemCoreSetup+0x254>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0304 	and.w	r3, r3, #4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0f9      	beq.n	80062d2 <SystemCoreSetup+0x182>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80062de:	4b31      	ldr	r3, [pc, #196]	; (80063a4 <SystemCoreSetup+0x254>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	4a30      	ldr	r2, [pc, #192]	; (80063a4 <SystemCoreSetup+0x254>)
 80062e4:	f023 0301 	bic.w	r3, r3, #1
 80062e8:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80062ea:	bf00      	nop
 80062ec:	4b2d      	ldr	r3, [pc, #180]	; (80063a4 <SystemCoreSetup+0x254>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1f9      	bne.n	80062ec <SystemCoreSetup+0x19c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80062f8:	4b2e      	ldr	r3, [pc, #184]	; (80063b4 <SystemCoreSetup+0x264>)
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	4a2d      	ldr	r2, [pc, #180]	; (80063b4 <SystemCoreSetup+0x264>)
 80062fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006302:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8006304:	4b2b      	ldr	r3, [pc, #172]	; (80063b4 <SystemCoreSetup+0x264>)
 8006306:	2200      	movs	r2, #0
 8006308:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 800630a:	4b2a      	ldr	r3, [pc, #168]	; (80063b4 <SystemCoreSetup+0x264>)
 800630c:	2200      	movs	r2, #0
 800630e:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8006310:	4b28      	ldr	r3, [pc, #160]	; (80063b4 <SystemCoreSetup+0x264>)
 8006312:	2200      	movs	r2, #0
 8006314:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8006316:	4b27      	ldr	r3, [pc, #156]	; (80063b4 <SystemCoreSetup+0x264>)
 8006318:	2200      	movs	r2, #0
 800631a:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 800631c:	4b25      	ldr	r3, [pc, #148]	; (80063b4 <SystemCoreSetup+0x264>)
 800631e:	2200      	movs	r2, #0
 8006320:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8006322:	4b24      	ldr	r3, [pc, #144]	; (80063b4 <SystemCoreSetup+0x264>)
 8006324:	2203      	movs	r2, #3
 8006326:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8006328:	4b1e      	ldr	r3, [pc, #120]	; (80063a4 <SystemCoreSetup+0x254>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	4a1d      	ldr	r2, [pc, #116]	; (80063a4 <SystemCoreSetup+0x254>)
 800632e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006332:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006334:	4b1b      	ldr	r3, [pc, #108]	; (80063a4 <SystemCoreSetup+0x254>)
 8006336:	4a20      	ldr	r2, [pc, #128]	; (80063b8 <SystemCoreSetup+0x268>)
 8006338:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 800633a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800633e:	f7ff fee0 	bl	8006102 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8006342:	bf00      	nop
 8006344:	4b17      	ldr	r3, [pc, #92]	; (80063a4 <SystemCoreSetup+0x254>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0f9      	beq.n	8006344 <SystemCoreSetup+0x1f4>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006350:	4b14      	ldr	r3, [pc, #80]	; (80063a4 <SystemCoreSetup+0x254>)
 8006352:	4a1a      	ldr	r2, [pc, #104]	; (80063bc <SystemCoreSetup+0x26c>)
 8006354:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8006356:	f241 1094 	movw	r0, #4500	; 0x1194
 800635a:	f7ff fed2 	bl	8006102 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800635e:	bf00      	nop
 8006360:	4b10      	ldr	r3, [pc, #64]	; (80063a4 <SystemCoreSetup+0x254>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0304 	and.w	r3, r3, #4
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0f9      	beq.n	8006360 <SystemCoreSetup+0x210>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800636c:	4b0d      	ldr	r3, [pc, #52]	; (80063a4 <SystemCoreSetup+0x254>)
 800636e:	4a14      	ldr	r2, [pc, #80]	; (80063c0 <SystemCoreSetup+0x270>)
 8006370:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8006372:	f241 7070 	movw	r0, #6000	; 0x1770
 8006376:	f7ff fec4 	bl	8006102 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800637a:	bf00      	nop
 800637c:	4b09      	ldr	r3, [pc, #36]	; (80063a4 <SystemCoreSetup+0x254>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b00      	cmp	r3, #0
 8006386:	d0f9      	beq.n	800637c <SystemCoreSetup+0x22c>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8006388:	4b0e      	ldr	r3, [pc, #56]	; (80063c4 <SystemCoreSetup+0x274>)
 800638a:	2205      	movs	r2, #5
 800638c:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 800638e:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <SystemCoreSetup+0x264>)
 8006390:	2200      	movs	r2, #0
 8006392:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8006394:	f000 f818 	bl	80063c8 <SystemCoreClockUpdate>
}
 8006398:	bf00      	nop
 800639a:	bd80      	pop	{r7, pc}
 800639c:	50004200 	.word	0x50004200
 80063a0:	50004400 	.word	0x50004400
 80063a4:	50004710 	.word	0x50004710
 80063a8:	50004700 	.word	0x50004700
 80063ac:	6b5fca6b 	.word	0x6b5fca6b
 80063b0:	01134f00 	.word	0x01134f00
 80063b4:	50004600 	.word	0x50004600
 80063b8:	01074f00 	.word	0x01074f00
 80063bc:	01044f00 	.word	0x01044f00
 80063c0:	01034f00 	.word	0x01034f00
 80063c4:	50004160 	.word	0x50004160

080063c8 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80063ce:	4b2f      	ldr	r3, [pc, #188]	; (800648c <SystemCoreClockUpdate+0xc4>)
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d03e      	beq.n	8006458 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80063da:	4b2d      	ldr	r3, [pc, #180]	; (8006490 <SystemCoreClockUpdate+0xc8>)
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80063e6:	4b2b      	ldr	r3, [pc, #172]	; (8006494 <SystemCoreClockUpdate+0xcc>)
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	e002      	b.n	80063f2 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80063ec:	f000 f856 	bl	800649c <OSCHP_GetFrequency>
 80063f0:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80063f2:	4b27      	ldr	r3, [pc, #156]	; (8006490 <SystemCoreClockUpdate+0xc8>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0304 	and.w	r3, r3, #4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d020      	beq.n	8006440 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80063fe:	4b24      	ldr	r3, [pc, #144]	; (8006490 <SystemCoreClockUpdate+0xc8>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	0e1b      	lsrs	r3, r3, #24
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	3301      	adds	r3, #1
 800640a:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 800640c:	4b20      	ldr	r3, [pc, #128]	; (8006490 <SystemCoreClockUpdate+0xc8>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	0a1b      	lsrs	r3, r3, #8
 8006412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006416:	3301      	adds	r3, #1
 8006418:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800641a:	4b1d      	ldr	r3, [pc, #116]	; (8006490 <SystemCoreClockUpdate+0xc8>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	0c1b      	lsrs	r3, r3, #16
 8006420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006424:	3301      	adds	r3, #1
 8006426:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	fb02 f303 	mul.w	r3, r2, r3
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	fbb2 f2f3 	udiv	r2, r2, r3
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	fb02 f303 	mul.w	r3, r2, r3
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	e00d      	b.n	800645c <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8006440:	4b13      	ldr	r3, [pc, #76]	; (8006490 <SystemCoreClockUpdate+0xc8>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006448:	3301      	adds	r3, #1
 800644a:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	fbb2 f3f3 	udiv	r3, r2, r3
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	e001      	b.n	800645c <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8006458:	4b0e      	ldr	r3, [pc, #56]	; (8006494 <SystemCoreClockUpdate+0xcc>)
 800645a:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800645c:	4b0b      	ldr	r3, [pc, #44]	; (800648c <SystemCoreClockUpdate+0xc4>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	b2db      	uxtb	r3, r3
 8006462:	3301      	adds	r3, #1
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	fbb2 f3f3 	udiv	r3, r2, r3
 800646a:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 800646c:	4b07      	ldr	r3, [pc, #28]	; (800648c <SystemCoreClockUpdate+0xc4>)
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	3301      	adds	r3, #1
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	fbb2 f3f3 	udiv	r3, r2, r3
 800647c:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800647e:	4a06      	ldr	r2, [pc, #24]	; (8006498 <SystemCoreClockUpdate+0xd0>)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6013      	str	r3, [r2, #0]
}
 8006484:	bf00      	nop
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	50004600 	.word	0x50004600
 8006490:	50004710 	.word	0x50004710
 8006494:	016e3600 	.word	0x016e3600
 8006498:	2000ffc0 	.word	0x2000ffc0

0800649c <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 80064a0:	4b02      	ldr	r3, [pc, #8]	; (80064ac <OSCHP_GetFrequency+0x10>)
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	00b71b00 	.word	0x00b71b00

080064b0 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 80064b8:	4b14      	ldr	r3, [pc, #80]	; (800650c <_sbrk+0x5c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d102      	bne.n	80064c6 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 80064c0:	4b12      	ldr	r3, [pc, #72]	; (800650c <_sbrk+0x5c>)
 80064c2:	4a13      	ldr	r2, [pc, #76]	; (8006510 <_sbrk+0x60>)
 80064c4:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 80064c6:	4b11      	ldr	r3, [pc, #68]	; (800650c <_sbrk+0x5c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3303      	adds	r3, #3
 80064d0:	f023 0303 	bic.w	r3, r3, #3
 80064d4:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 80064d6:	4b0d      	ldr	r3, [pc, #52]	; (800650c <_sbrk+0x5c>)
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4413      	add	r3, r2
 80064de:	4a0d      	ldr	r2, [pc, #52]	; (8006514 <_sbrk+0x64>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d207      	bcs.n	80064f4 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 80064e4:	4b09      	ldr	r3, [pc, #36]	; (800650c <_sbrk+0x5c>)
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4413      	add	r3, r2
 80064ec:	4a07      	ldr	r2, [pc, #28]	; (800650c <_sbrk+0x5c>)
 80064ee:	6013      	str	r3, [r2, #0]
    return (base);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	e006      	b.n	8006502 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 80064f4:	f000 fa5c 	bl	80069b0 <__errno>
 80064f8:	4602      	mov	r2, r0
 80064fa:	230c      	movs	r3, #12
 80064fc:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 80064fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000ce4 	.word	0x20000ce4
 8006510:	200012c8 	.word	0x200012c8
 8006514:	2000ffc0 	.word	0x2000ffc0

08006518 <_init>:

/* Init */
void _init(void)
{}
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
 800651c:	bf00      	nop
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
	...

08006528 <__aeabi_drsub>:
 8006528:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800652c:	e002      	b.n	8006534 <__adddf3>
 800652e:	bf00      	nop

08006530 <__aeabi_dsub>:
 8006530:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006534 <__adddf3>:
 8006534:	b530      	push	{r4, r5, lr}
 8006536:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800653a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800653e:	ea94 0f05 	teq	r4, r5
 8006542:	bf08      	it	eq
 8006544:	ea90 0f02 	teqeq	r0, r2
 8006548:	bf1f      	itttt	ne
 800654a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800654e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006552:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006556:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800655a:	f000 80e2 	beq.w	8006722 <__adddf3+0x1ee>
 800655e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006562:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006566:	bfb8      	it	lt
 8006568:	426d      	neglt	r5, r5
 800656a:	dd0c      	ble.n	8006586 <__adddf3+0x52>
 800656c:	442c      	add	r4, r5
 800656e:	ea80 0202 	eor.w	r2, r0, r2
 8006572:	ea81 0303 	eor.w	r3, r1, r3
 8006576:	ea82 0000 	eor.w	r0, r2, r0
 800657a:	ea83 0101 	eor.w	r1, r3, r1
 800657e:	ea80 0202 	eor.w	r2, r0, r2
 8006582:	ea81 0303 	eor.w	r3, r1, r3
 8006586:	2d36      	cmp	r5, #54	; 0x36
 8006588:	bf88      	it	hi
 800658a:	bd30      	pophi	{r4, r5, pc}
 800658c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006590:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006594:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006598:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800659c:	d002      	beq.n	80065a4 <__adddf3+0x70>
 800659e:	4240      	negs	r0, r0
 80065a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80065a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80065a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80065ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80065b0:	d002      	beq.n	80065b8 <__adddf3+0x84>
 80065b2:	4252      	negs	r2, r2
 80065b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80065b8:	ea94 0f05 	teq	r4, r5
 80065bc:	f000 80a7 	beq.w	800670e <__adddf3+0x1da>
 80065c0:	f1a4 0401 	sub.w	r4, r4, #1
 80065c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80065c8:	db0d      	blt.n	80065e6 <__adddf3+0xb2>
 80065ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80065ce:	fa22 f205 	lsr.w	r2, r2, r5
 80065d2:	1880      	adds	r0, r0, r2
 80065d4:	f141 0100 	adc.w	r1, r1, #0
 80065d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80065dc:	1880      	adds	r0, r0, r2
 80065de:	fa43 f305 	asr.w	r3, r3, r5
 80065e2:	4159      	adcs	r1, r3
 80065e4:	e00e      	b.n	8006604 <__adddf3+0xd0>
 80065e6:	f1a5 0520 	sub.w	r5, r5, #32
 80065ea:	f10e 0e20 	add.w	lr, lr, #32
 80065ee:	2a01      	cmp	r2, #1
 80065f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80065f4:	bf28      	it	cs
 80065f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80065fa:	fa43 f305 	asr.w	r3, r3, r5
 80065fe:	18c0      	adds	r0, r0, r3
 8006600:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006604:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006608:	d507      	bpl.n	800661a <__adddf3+0xe6>
 800660a:	f04f 0e00 	mov.w	lr, #0
 800660e:	f1dc 0c00 	rsbs	ip, ip, #0
 8006612:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006616:	eb6e 0101 	sbc.w	r1, lr, r1
 800661a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800661e:	d31b      	bcc.n	8006658 <__adddf3+0x124>
 8006620:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006624:	d30c      	bcc.n	8006640 <__adddf3+0x10c>
 8006626:	0849      	lsrs	r1, r1, #1
 8006628:	ea5f 0030 	movs.w	r0, r0, rrx
 800662c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006630:	f104 0401 	add.w	r4, r4, #1
 8006634:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006638:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800663c:	f080 809a 	bcs.w	8006774 <__adddf3+0x240>
 8006640:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006644:	bf08      	it	eq
 8006646:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800664a:	f150 0000 	adcs.w	r0, r0, #0
 800664e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006652:	ea41 0105 	orr.w	r1, r1, r5
 8006656:	bd30      	pop	{r4, r5, pc}
 8006658:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800665c:	4140      	adcs	r0, r0
 800665e:	eb41 0101 	adc.w	r1, r1, r1
 8006662:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006666:	f1a4 0401 	sub.w	r4, r4, #1
 800666a:	d1e9      	bne.n	8006640 <__adddf3+0x10c>
 800666c:	f091 0f00 	teq	r1, #0
 8006670:	bf04      	itt	eq
 8006672:	4601      	moveq	r1, r0
 8006674:	2000      	moveq	r0, #0
 8006676:	fab1 f381 	clz	r3, r1
 800667a:	bf08      	it	eq
 800667c:	3320      	addeq	r3, #32
 800667e:	f1a3 030b 	sub.w	r3, r3, #11
 8006682:	f1b3 0220 	subs.w	r2, r3, #32
 8006686:	da0c      	bge.n	80066a2 <__adddf3+0x16e>
 8006688:	320c      	adds	r2, #12
 800668a:	dd08      	ble.n	800669e <__adddf3+0x16a>
 800668c:	f102 0c14 	add.w	ip, r2, #20
 8006690:	f1c2 020c 	rsb	r2, r2, #12
 8006694:	fa01 f00c 	lsl.w	r0, r1, ip
 8006698:	fa21 f102 	lsr.w	r1, r1, r2
 800669c:	e00c      	b.n	80066b8 <__adddf3+0x184>
 800669e:	f102 0214 	add.w	r2, r2, #20
 80066a2:	bfd8      	it	le
 80066a4:	f1c2 0c20 	rsble	ip, r2, #32
 80066a8:	fa01 f102 	lsl.w	r1, r1, r2
 80066ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80066b0:	bfdc      	itt	le
 80066b2:	ea41 010c 	orrle.w	r1, r1, ip
 80066b6:	4090      	lslle	r0, r2
 80066b8:	1ae4      	subs	r4, r4, r3
 80066ba:	bfa2      	ittt	ge
 80066bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80066c0:	4329      	orrge	r1, r5
 80066c2:	bd30      	popge	{r4, r5, pc}
 80066c4:	ea6f 0404 	mvn.w	r4, r4
 80066c8:	3c1f      	subs	r4, #31
 80066ca:	da1c      	bge.n	8006706 <__adddf3+0x1d2>
 80066cc:	340c      	adds	r4, #12
 80066ce:	dc0e      	bgt.n	80066ee <__adddf3+0x1ba>
 80066d0:	f104 0414 	add.w	r4, r4, #20
 80066d4:	f1c4 0220 	rsb	r2, r4, #32
 80066d8:	fa20 f004 	lsr.w	r0, r0, r4
 80066dc:	fa01 f302 	lsl.w	r3, r1, r2
 80066e0:	ea40 0003 	orr.w	r0, r0, r3
 80066e4:	fa21 f304 	lsr.w	r3, r1, r4
 80066e8:	ea45 0103 	orr.w	r1, r5, r3
 80066ec:	bd30      	pop	{r4, r5, pc}
 80066ee:	f1c4 040c 	rsb	r4, r4, #12
 80066f2:	f1c4 0220 	rsb	r2, r4, #32
 80066f6:	fa20 f002 	lsr.w	r0, r0, r2
 80066fa:	fa01 f304 	lsl.w	r3, r1, r4
 80066fe:	ea40 0003 	orr.w	r0, r0, r3
 8006702:	4629      	mov	r1, r5
 8006704:	bd30      	pop	{r4, r5, pc}
 8006706:	fa21 f004 	lsr.w	r0, r1, r4
 800670a:	4629      	mov	r1, r5
 800670c:	bd30      	pop	{r4, r5, pc}
 800670e:	f094 0f00 	teq	r4, #0
 8006712:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006716:	bf06      	itte	eq
 8006718:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800671c:	3401      	addeq	r4, #1
 800671e:	3d01      	subne	r5, #1
 8006720:	e74e      	b.n	80065c0 <__adddf3+0x8c>
 8006722:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006726:	bf18      	it	ne
 8006728:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800672c:	d029      	beq.n	8006782 <__adddf3+0x24e>
 800672e:	ea94 0f05 	teq	r4, r5
 8006732:	bf08      	it	eq
 8006734:	ea90 0f02 	teqeq	r0, r2
 8006738:	d005      	beq.n	8006746 <__adddf3+0x212>
 800673a:	ea54 0c00 	orrs.w	ip, r4, r0
 800673e:	bf04      	itt	eq
 8006740:	4619      	moveq	r1, r3
 8006742:	4610      	moveq	r0, r2
 8006744:	bd30      	pop	{r4, r5, pc}
 8006746:	ea91 0f03 	teq	r1, r3
 800674a:	bf1e      	ittt	ne
 800674c:	2100      	movne	r1, #0
 800674e:	2000      	movne	r0, #0
 8006750:	bd30      	popne	{r4, r5, pc}
 8006752:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006756:	d105      	bne.n	8006764 <__adddf3+0x230>
 8006758:	0040      	lsls	r0, r0, #1
 800675a:	4149      	adcs	r1, r1
 800675c:	bf28      	it	cs
 800675e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006762:	bd30      	pop	{r4, r5, pc}
 8006764:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006768:	bf3c      	itt	cc
 800676a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800676e:	bd30      	popcc	{r4, r5, pc}
 8006770:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006774:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800677c:	f04f 0000 	mov.w	r0, #0
 8006780:	bd30      	pop	{r4, r5, pc}
 8006782:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006786:	bf1a      	itte	ne
 8006788:	4619      	movne	r1, r3
 800678a:	4610      	movne	r0, r2
 800678c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006790:	bf1c      	itt	ne
 8006792:	460b      	movne	r3, r1
 8006794:	4602      	movne	r2, r0
 8006796:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800679a:	bf06      	itte	eq
 800679c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80067a0:	ea91 0f03 	teqeq	r1, r3
 80067a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80067a8:	bd30      	pop	{r4, r5, pc}
 80067aa:	bf00      	nop

080067ac <__aeabi_ui2d>:
 80067ac:	f090 0f00 	teq	r0, #0
 80067b0:	bf04      	itt	eq
 80067b2:	2100      	moveq	r1, #0
 80067b4:	4770      	bxeq	lr
 80067b6:	b530      	push	{r4, r5, lr}
 80067b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80067bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80067c0:	f04f 0500 	mov.w	r5, #0
 80067c4:	f04f 0100 	mov.w	r1, #0
 80067c8:	e750      	b.n	800666c <__adddf3+0x138>
 80067ca:	bf00      	nop

080067cc <__aeabi_i2d>:
 80067cc:	f090 0f00 	teq	r0, #0
 80067d0:	bf04      	itt	eq
 80067d2:	2100      	moveq	r1, #0
 80067d4:	4770      	bxeq	lr
 80067d6:	b530      	push	{r4, r5, lr}
 80067d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80067dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80067e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80067e4:	bf48      	it	mi
 80067e6:	4240      	negmi	r0, r0
 80067e8:	f04f 0100 	mov.w	r1, #0
 80067ec:	e73e      	b.n	800666c <__adddf3+0x138>
 80067ee:	bf00      	nop

080067f0 <__aeabi_f2d>:
 80067f0:	0042      	lsls	r2, r0, #1
 80067f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80067f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80067fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80067fe:	bf1f      	itttt	ne
 8006800:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006804:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006808:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800680c:	4770      	bxne	lr
 800680e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8006812:	bf08      	it	eq
 8006814:	4770      	bxeq	lr
 8006816:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800681a:	bf04      	itt	eq
 800681c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8006820:	4770      	bxeq	lr
 8006822:	b530      	push	{r4, r5, lr}
 8006824:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006828:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800682c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006830:	e71c      	b.n	800666c <__adddf3+0x138>
 8006832:	bf00      	nop

08006834 <__aeabi_ul2d>:
 8006834:	ea50 0201 	orrs.w	r2, r0, r1
 8006838:	bf08      	it	eq
 800683a:	4770      	bxeq	lr
 800683c:	b530      	push	{r4, r5, lr}
 800683e:	f04f 0500 	mov.w	r5, #0
 8006842:	e00a      	b.n	800685a <__aeabi_l2d+0x16>

08006844 <__aeabi_l2d>:
 8006844:	ea50 0201 	orrs.w	r2, r0, r1
 8006848:	bf08      	it	eq
 800684a:	4770      	bxeq	lr
 800684c:	b530      	push	{r4, r5, lr}
 800684e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006852:	d502      	bpl.n	800685a <__aeabi_l2d+0x16>
 8006854:	4240      	negs	r0, r0
 8006856:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800685a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800685e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006862:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006866:	f43f aed8 	beq.w	800661a <__adddf3+0xe6>
 800686a:	f04f 0203 	mov.w	r2, #3
 800686e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006872:	bf18      	it	ne
 8006874:	3203      	addne	r2, #3
 8006876:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800687a:	bf18      	it	ne
 800687c:	3203      	addne	r2, #3
 800687e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006882:	f1c2 0320 	rsb	r3, r2, #32
 8006886:	fa00 fc03 	lsl.w	ip, r0, r3
 800688a:	fa20 f002 	lsr.w	r0, r0, r2
 800688e:	fa01 fe03 	lsl.w	lr, r1, r3
 8006892:	ea40 000e 	orr.w	r0, r0, lr
 8006896:	fa21 f102 	lsr.w	r1, r1, r2
 800689a:	4414      	add	r4, r2
 800689c:	e6bd      	b.n	800661a <__adddf3+0xe6>
 800689e:	bf00      	nop

080068a0 <__gedf2>:
 80068a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80068a4:	e006      	b.n	80068b4 <__cmpdf2+0x4>
 80068a6:	bf00      	nop

080068a8 <__ledf2>:
 80068a8:	f04f 0c01 	mov.w	ip, #1
 80068ac:	e002      	b.n	80068b4 <__cmpdf2+0x4>
 80068ae:	bf00      	nop

080068b0 <__cmpdf2>:
 80068b0:	f04f 0c01 	mov.w	ip, #1
 80068b4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80068b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80068bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80068c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80068c4:	bf18      	it	ne
 80068c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80068ca:	d01b      	beq.n	8006904 <__cmpdf2+0x54>
 80068cc:	b001      	add	sp, #4
 80068ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80068d2:	bf0c      	ite	eq
 80068d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80068d8:	ea91 0f03 	teqne	r1, r3
 80068dc:	bf02      	ittt	eq
 80068de:	ea90 0f02 	teqeq	r0, r2
 80068e2:	2000      	moveq	r0, #0
 80068e4:	4770      	bxeq	lr
 80068e6:	f110 0f00 	cmn.w	r0, #0
 80068ea:	ea91 0f03 	teq	r1, r3
 80068ee:	bf58      	it	pl
 80068f0:	4299      	cmppl	r1, r3
 80068f2:	bf08      	it	eq
 80068f4:	4290      	cmpeq	r0, r2
 80068f6:	bf2c      	ite	cs
 80068f8:	17d8      	asrcs	r0, r3, #31
 80068fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80068fe:	f040 0001 	orr.w	r0, r0, #1
 8006902:	4770      	bx	lr
 8006904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800690c:	d102      	bne.n	8006914 <__cmpdf2+0x64>
 800690e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006912:	d107      	bne.n	8006924 <__cmpdf2+0x74>
 8006914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800691c:	d1d6      	bne.n	80068cc <__cmpdf2+0x1c>
 800691e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006922:	d0d3      	beq.n	80068cc <__cmpdf2+0x1c>
 8006924:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop

0800692c <__aeabi_cdrcmple>:
 800692c:	4684      	mov	ip, r0
 800692e:	4610      	mov	r0, r2
 8006930:	4662      	mov	r2, ip
 8006932:	468c      	mov	ip, r1
 8006934:	4619      	mov	r1, r3
 8006936:	4663      	mov	r3, ip
 8006938:	e000      	b.n	800693c <__aeabi_cdcmpeq>
 800693a:	bf00      	nop

0800693c <__aeabi_cdcmpeq>:
 800693c:	b501      	push	{r0, lr}
 800693e:	f7ff ffb7 	bl	80068b0 <__cmpdf2>
 8006942:	2800      	cmp	r0, #0
 8006944:	bf48      	it	mi
 8006946:	f110 0f00 	cmnmi.w	r0, #0
 800694a:	bd01      	pop	{r0, pc}

0800694c <__aeabi_dcmpeq>:
 800694c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006950:	f7ff fff4 	bl	800693c <__aeabi_cdcmpeq>
 8006954:	bf0c      	ite	eq
 8006956:	2001      	moveq	r0, #1
 8006958:	2000      	movne	r0, #0
 800695a:	f85d fb08 	ldr.w	pc, [sp], #8
 800695e:	bf00      	nop

08006960 <__aeabi_dcmplt>:
 8006960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006964:	f7ff ffea 	bl	800693c <__aeabi_cdcmpeq>
 8006968:	bf34      	ite	cc
 800696a:	2001      	movcc	r0, #1
 800696c:	2000      	movcs	r0, #0
 800696e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006972:	bf00      	nop

08006974 <__aeabi_dcmple>:
 8006974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006978:	f7ff ffe0 	bl	800693c <__aeabi_cdcmpeq>
 800697c:	bf94      	ite	ls
 800697e:	2001      	movls	r0, #1
 8006980:	2000      	movhi	r0, #0
 8006982:	f85d fb08 	ldr.w	pc, [sp], #8
 8006986:	bf00      	nop

08006988 <__aeabi_dcmpge>:
 8006988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800698c:	f7ff ffce 	bl	800692c <__aeabi_cdrcmple>
 8006990:	bf94      	ite	ls
 8006992:	2001      	movls	r0, #1
 8006994:	2000      	movhi	r0, #0
 8006996:	f85d fb08 	ldr.w	pc, [sp], #8
 800699a:	bf00      	nop

0800699c <__aeabi_dcmpgt>:
 800699c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80069a0:	f7ff ffc4 	bl	800692c <__aeabi_cdrcmple>
 80069a4:	bf34      	ite	cc
 80069a6:	2001      	movcc	r0, #1
 80069a8:	2000      	movcs	r0, #0
 80069aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80069ae:	bf00      	nop

080069b0 <__errno>:
 80069b0:	4b01      	ldr	r3, [pc, #4]	; (80069b8 <__errno+0x8>)
 80069b2:	6818      	ldr	r0, [r3, #0]
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	20000054 	.word	0x20000054

080069bc <__libc_init_array>:
 80069bc:	b570      	push	{r4, r5, r6, lr}
 80069be:	4e0d      	ldr	r6, [pc, #52]	; (80069f4 <__libc_init_array+0x38>)
 80069c0:	4d0d      	ldr	r5, [pc, #52]	; (80069f8 <__libc_init_array+0x3c>)
 80069c2:	1b76      	subs	r6, r6, r5
 80069c4:	10b6      	asrs	r6, r6, #2
 80069c6:	d006      	beq.n	80069d6 <__libc_init_array+0x1a>
 80069c8:	2400      	movs	r4, #0
 80069ca:	3401      	adds	r4, #1
 80069cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d0:	4798      	blx	r3
 80069d2:	42a6      	cmp	r6, r4
 80069d4:	d1f9      	bne.n	80069ca <__libc_init_array+0xe>
 80069d6:	4e09      	ldr	r6, [pc, #36]	; (80069fc <__libc_init_array+0x40>)
 80069d8:	4d09      	ldr	r5, [pc, #36]	; (8006a00 <__libc_init_array+0x44>)
 80069da:	1b76      	subs	r6, r6, r5
 80069dc:	f7ff fd9c 	bl	8006518 <_init>
 80069e0:	10b6      	asrs	r6, r6, #2
 80069e2:	d006      	beq.n	80069f2 <__libc_init_array+0x36>
 80069e4:	2400      	movs	r4, #0
 80069e6:	3401      	adds	r4, #1
 80069e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ec:	4798      	blx	r3
 80069ee:	42a6      	cmp	r6, r4
 80069f0:	d1f9      	bne.n	80069e6 <__libc_init_array+0x2a>
 80069f2:	bd70      	pop	{r4, r5, r6, pc}
 80069f4:	20000480 	.word	0x20000480
 80069f8:	20000480 	.word	0x20000480
 80069fc:	20000480 	.word	0x20000480
 8006a00:	20000480 	.word	0x20000480

08006a04 <memcmp>:
 8006a04:	2a03      	cmp	r2, #3
 8006a06:	b470      	push	{r4, r5, r6}
 8006a08:	d914      	bls.n	8006a34 <memcmp+0x30>
 8006a0a:	ea40 0501 	orr.w	r5, r0, r1
 8006a0e:	07ad      	lsls	r5, r5, #30
 8006a10:	4604      	mov	r4, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	d122      	bne.n	8006a5c <memcmp+0x58>
 8006a16:	681d      	ldr	r5, [r3, #0]
 8006a18:	6826      	ldr	r6, [r4, #0]
 8006a1a:	42ae      	cmp	r6, r5
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f103 0304 	add.w	r3, r3, #4
 8006a24:	f104 0404 	add.w	r4, r4, #4
 8006a28:	d118      	bne.n	8006a5c <memcmp+0x58>
 8006a2a:	3a04      	subs	r2, #4
 8006a2c:	2a03      	cmp	r2, #3
 8006a2e:	4620      	mov	r0, r4
 8006a30:	4619      	mov	r1, r3
 8006a32:	d8f0      	bhi.n	8006a16 <memcmp+0x12>
 8006a34:	1e54      	subs	r4, r2, #1
 8006a36:	b172      	cbz	r2, 8006a56 <memcmp+0x52>
 8006a38:	7802      	ldrb	r2, [r0, #0]
 8006a3a:	780b      	ldrb	r3, [r1, #0]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	bf08      	it	eq
 8006a40:	1864      	addeq	r4, r4, r1
 8006a42:	d006      	beq.n	8006a52 <memcmp+0x4e>
 8006a44:	e00c      	b.n	8006a60 <memcmp+0x5c>
 8006a46:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006a4a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d106      	bne.n	8006a60 <memcmp+0x5c>
 8006a52:	42a1      	cmp	r1, r4
 8006a54:	d1f7      	bne.n	8006a46 <memcmp+0x42>
 8006a56:	2000      	movs	r0, #0
 8006a58:	bc70      	pop	{r4, r5, r6}
 8006a5a:	4770      	bx	lr
 8006a5c:	1e54      	subs	r4, r2, #1
 8006a5e:	e7eb      	b.n	8006a38 <memcmp+0x34>
 8006a60:	1ad0      	subs	r0, r2, r3
 8006a62:	bc70      	pop	{r4, r5, r6}
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop

08006a68 <memcpy>:
 8006a68:	4684      	mov	ip, r0
 8006a6a:	ea41 0300 	orr.w	r3, r1, r0
 8006a6e:	f013 0303 	ands.w	r3, r3, #3
 8006a72:	d16d      	bne.n	8006b50 <memcpy+0xe8>
 8006a74:	3a40      	subs	r2, #64	; 0x40
 8006a76:	d341      	bcc.n	8006afc <memcpy+0x94>
 8006a78:	f851 3b04 	ldr.w	r3, [r1], #4
 8006a7c:	f840 3b04 	str.w	r3, [r0], #4
 8006a80:	f851 3b04 	ldr.w	r3, [r1], #4
 8006a84:	f840 3b04 	str.w	r3, [r0], #4
 8006a88:	f851 3b04 	ldr.w	r3, [r1], #4
 8006a8c:	f840 3b04 	str.w	r3, [r0], #4
 8006a90:	f851 3b04 	ldr.w	r3, [r1], #4
 8006a94:	f840 3b04 	str.w	r3, [r0], #4
 8006a98:	f851 3b04 	ldr.w	r3, [r1], #4
 8006a9c:	f840 3b04 	str.w	r3, [r0], #4
 8006aa0:	f851 3b04 	ldr.w	r3, [r1], #4
 8006aa4:	f840 3b04 	str.w	r3, [r0], #4
 8006aa8:	f851 3b04 	ldr.w	r3, [r1], #4
 8006aac:	f840 3b04 	str.w	r3, [r0], #4
 8006ab0:	f851 3b04 	ldr.w	r3, [r1], #4
 8006ab4:	f840 3b04 	str.w	r3, [r0], #4
 8006ab8:	f851 3b04 	ldr.w	r3, [r1], #4
 8006abc:	f840 3b04 	str.w	r3, [r0], #4
 8006ac0:	f851 3b04 	ldr.w	r3, [r1], #4
 8006ac4:	f840 3b04 	str.w	r3, [r0], #4
 8006ac8:	f851 3b04 	ldr.w	r3, [r1], #4
 8006acc:	f840 3b04 	str.w	r3, [r0], #4
 8006ad0:	f851 3b04 	ldr.w	r3, [r1], #4
 8006ad4:	f840 3b04 	str.w	r3, [r0], #4
 8006ad8:	f851 3b04 	ldr.w	r3, [r1], #4
 8006adc:	f840 3b04 	str.w	r3, [r0], #4
 8006ae0:	f851 3b04 	ldr.w	r3, [r1], #4
 8006ae4:	f840 3b04 	str.w	r3, [r0], #4
 8006ae8:	f851 3b04 	ldr.w	r3, [r1], #4
 8006aec:	f840 3b04 	str.w	r3, [r0], #4
 8006af0:	f851 3b04 	ldr.w	r3, [r1], #4
 8006af4:	f840 3b04 	str.w	r3, [r0], #4
 8006af8:	3a40      	subs	r2, #64	; 0x40
 8006afa:	d2bd      	bcs.n	8006a78 <memcpy+0x10>
 8006afc:	3230      	adds	r2, #48	; 0x30
 8006afe:	d311      	bcc.n	8006b24 <memcpy+0xbc>
 8006b00:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b04:	f840 3b04 	str.w	r3, [r0], #4
 8006b08:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b0c:	f840 3b04 	str.w	r3, [r0], #4
 8006b10:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b14:	f840 3b04 	str.w	r3, [r0], #4
 8006b18:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b1c:	f840 3b04 	str.w	r3, [r0], #4
 8006b20:	3a10      	subs	r2, #16
 8006b22:	d2ed      	bcs.n	8006b00 <memcpy+0x98>
 8006b24:	320c      	adds	r2, #12
 8006b26:	d305      	bcc.n	8006b34 <memcpy+0xcc>
 8006b28:	f851 3b04 	ldr.w	r3, [r1], #4
 8006b2c:	f840 3b04 	str.w	r3, [r0], #4
 8006b30:	3a04      	subs	r2, #4
 8006b32:	d2f9      	bcs.n	8006b28 <memcpy+0xc0>
 8006b34:	3204      	adds	r2, #4
 8006b36:	d008      	beq.n	8006b4a <memcpy+0xe2>
 8006b38:	07d2      	lsls	r2, r2, #31
 8006b3a:	bf1c      	itt	ne
 8006b3c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8006b40:	f800 3b01 	strbne.w	r3, [r0], #1
 8006b44:	d301      	bcc.n	8006b4a <memcpy+0xe2>
 8006b46:	880b      	ldrh	r3, [r1, #0]
 8006b48:	8003      	strh	r3, [r0, #0]
 8006b4a:	4660      	mov	r0, ip
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	2a08      	cmp	r2, #8
 8006b52:	d313      	bcc.n	8006b7c <memcpy+0x114>
 8006b54:	078b      	lsls	r3, r1, #30
 8006b56:	d08d      	beq.n	8006a74 <memcpy+0xc>
 8006b58:	f010 0303 	ands.w	r3, r0, #3
 8006b5c:	d08a      	beq.n	8006a74 <memcpy+0xc>
 8006b5e:	f1c3 0304 	rsb	r3, r3, #4
 8006b62:	1ad2      	subs	r2, r2, r3
 8006b64:	07db      	lsls	r3, r3, #31
 8006b66:	bf1c      	itt	ne
 8006b68:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8006b6c:	f800 3b01 	strbne.w	r3, [r0], #1
 8006b70:	d380      	bcc.n	8006a74 <memcpy+0xc>
 8006b72:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006b76:	f820 3b02 	strh.w	r3, [r0], #2
 8006b7a:	e77b      	b.n	8006a74 <memcpy+0xc>
 8006b7c:	3a04      	subs	r2, #4
 8006b7e:	d3d9      	bcc.n	8006b34 <memcpy+0xcc>
 8006b80:	3a01      	subs	r2, #1
 8006b82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b86:	f800 3b01 	strb.w	r3, [r0], #1
 8006b8a:	d2f9      	bcs.n	8006b80 <memcpy+0x118>
 8006b8c:	780b      	ldrb	r3, [r1, #0]
 8006b8e:	7003      	strb	r3, [r0, #0]
 8006b90:	784b      	ldrb	r3, [r1, #1]
 8006b92:	7043      	strb	r3, [r0, #1]
 8006b94:	788b      	ldrb	r3, [r1, #2]
 8006b96:	7083      	strb	r3, [r0, #2]
 8006b98:	4660      	mov	r0, ip
 8006b9a:	4770      	bx	lr

08006b9c <memset>:
 8006b9c:	b4f0      	push	{r4, r5, r6, r7}
 8006b9e:	0786      	lsls	r6, r0, #30
 8006ba0:	d043      	beq.n	8006c2a <memset+0x8e>
 8006ba2:	1e54      	subs	r4, r2, #1
 8006ba4:	2a00      	cmp	r2, #0
 8006ba6:	d03e      	beq.n	8006c26 <memset+0x8a>
 8006ba8:	b2ca      	uxtb	r2, r1
 8006baa:	4603      	mov	r3, r0
 8006bac:	e002      	b.n	8006bb4 <memset+0x18>
 8006bae:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8006bb2:	d338      	bcc.n	8006c26 <memset+0x8a>
 8006bb4:	f803 2b01 	strb.w	r2, [r3], #1
 8006bb8:	079d      	lsls	r5, r3, #30
 8006bba:	d1f8      	bne.n	8006bae <memset+0x12>
 8006bbc:	2c03      	cmp	r4, #3
 8006bbe:	d92b      	bls.n	8006c18 <memset+0x7c>
 8006bc0:	b2cd      	uxtb	r5, r1
 8006bc2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006bc6:	2c0f      	cmp	r4, #15
 8006bc8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006bcc:	d916      	bls.n	8006bfc <memset+0x60>
 8006bce:	f1a4 0710 	sub.w	r7, r4, #16
 8006bd2:	093f      	lsrs	r7, r7, #4
 8006bd4:	f103 0620 	add.w	r6, r3, #32
 8006bd8:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8006bdc:	f103 0210 	add.w	r2, r3, #16
 8006be0:	e942 5504 	strd	r5, r5, [r2, #-16]
 8006be4:	e942 5502 	strd	r5, r5, [r2, #-8]
 8006be8:	3210      	adds	r2, #16
 8006bea:	42b2      	cmp	r2, r6
 8006bec:	d1f8      	bne.n	8006be0 <memset+0x44>
 8006bee:	f004 040f 	and.w	r4, r4, #15
 8006bf2:	3701      	adds	r7, #1
 8006bf4:	2c03      	cmp	r4, #3
 8006bf6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8006bfa:	d90d      	bls.n	8006c18 <memset+0x7c>
 8006bfc:	461e      	mov	r6, r3
 8006bfe:	4622      	mov	r2, r4
 8006c00:	3a04      	subs	r2, #4
 8006c02:	2a03      	cmp	r2, #3
 8006c04:	f846 5b04 	str.w	r5, [r6], #4
 8006c08:	d8fa      	bhi.n	8006c00 <memset+0x64>
 8006c0a:	1f22      	subs	r2, r4, #4
 8006c0c:	f022 0203 	bic.w	r2, r2, #3
 8006c10:	3204      	adds	r2, #4
 8006c12:	4413      	add	r3, r2
 8006c14:	f004 0403 	and.w	r4, r4, #3
 8006c18:	b12c      	cbz	r4, 8006c26 <memset+0x8a>
 8006c1a:	b2c9      	uxtb	r1, r1
 8006c1c:	441c      	add	r4, r3
 8006c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c22:	429c      	cmp	r4, r3
 8006c24:	d1fb      	bne.n	8006c1e <memset+0x82>
 8006c26:	bcf0      	pop	{r4, r5, r6, r7}
 8006c28:	4770      	bx	lr
 8006c2a:	4614      	mov	r4, r2
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	e7c5      	b.n	8006bbc <memset+0x20>

08006c30 <clock_config>:
 8006c30:	0250 0104 0000 0001 0000 0000 0000 0001     P...............
 8006c40:	0101 0101                                   ....

08006c44 <pwchars>:
 8006c44:	0504 0706 0908 0b0a 0d0c 0f0e 1110 1312     ................
 8006c54:	1514 1716 1918 1b1a 1c1d 1f1e 2120 2322     ............ !"#
 8006c64:	2524 2726 3830 3736 0464 0605 0807 0a09     $%&'0867d.......
 8006c74:	0c0b 0e0d 100f 1211 1413 1615 1817 1a19     ................
 8006c84:	1d1b 1e1c 211f 2423 2625 2d27 3638 6437     .....!#$%&'-867d
 8006c94:	2524 2726 0030 0000                         $%&'0...

08006c9c <KeyboardReport>:
 8006c9c:	0105 0609 01a1 0705 e019 e729 0015 0125     ..........)...%.
 8006cac:	0175 0895 0281 0195 0875 0181 0805 0119     u.......u.......
 8006cbc:	0529 0595 0175 0291 0195 0375 0191 0015     )...u.....u.....
 8006ccc:	ff25 0705 0019 ff29 0695 0875 0081 00c0     %.....)...u.....

08006cdc <DeviceDescriptor>:
 8006cdc:	0112 0110 0000 4000 03eb 2042 0001 0201     .......@..B ....
 8006cec:	0100 0000                                   ....

08006cf0 <ConfigurationDescriptor>:
 8006cf0:	0209 0022 0101 c000 0932 0004 0100 0103     ..".....2.......
 8006d00:	0001 2109 0111 0100 3f22 0700 8105 0803     ...!...."?......
 8006d10:	0100 0000                                   ....

08006d14 <LanguageString>:
 8006d14:	0304 0409 0000 0000                         ........

08006d1c <ManufacturerString>:
 8006d1c:	0350 004d 0000 0061 0000 006e 0000 0075     P.M...a...n...u.
 8006d2c:	0000 0066 0000 0061 0000 0063 0000 0074     ..f...a...c...t.
 8006d3c:	0000 0075 0000 0072 0000 0065 0000 0072     ..u...r...e...r.
 8006d4c:	0000 0020 0000 0053 0000 0074 0000 0072     .. ...S...t...r.
 8006d5c:	0000 0069 0000 006e 0000 0067 0000 0000     ..i...n...g.....
 8006d6c:	0000 0000                                   ....

08006d70 <ProductString>:
 8006d70:	0348 0044 0000 0065 0000 0073 0000 0063     H.D...e...s...c.
 8006d80:	0000 0072 0000 0069 0000 0070 0000 0074     ..r...i...p...t.
 8006d90:	0000 006f 0000 0072 0000 0020 0000 0053     ..o...r... ...S.
 8006da0:	0000 0074 0000 0072 0000 0069 0000 006e     ..t...r...i...n.
 8006db0:	0000 0067 0000 0000 0000 0000               ..g.........

08006dbc <Driver_USBD0>:
 8006dbc:	52c9 0800 5331 0800 556d 0800 55a9 0800     .R..1S..mU...U..
 8006dcc:	55dd 0800 5611 0800 5819 0800 5a39 0800     .U...V...X..9Z..
 8006ddc:	5d21 0800 5865 0800 5675 0800 56fd 0800     !]..eX..uV...V..
 8006dec:	5775 0800 59b1 0800 5e91 0800 5ebd 0800     uW...Y...^...^..

08006dfc <_global_impure_ptr>:
 8006dfc:	0058 2000                                   X.. 
