
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e04  08000000  0c000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  00020460  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  00020460  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  00020460  2**0
                  CONTENTS
  5 .data         00000460  20000000  0c003e04  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006e0  20000460  0c004264  00020460  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  00020460  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000e00  30000000  0c004264  00030000  2**2
                  ALLOC
 10 .debug_aranges 000007d8  00000000  00000000  00020460  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001f31c  00000000  00000000  00020c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000347e  00000000  00000000  0003ff54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00009981  00000000  00000000  000433d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001548  00000000  00000000  0004cd54  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00083624  00000000  00000000  0004e29c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00004fe5  00000000  00000000  000d18c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000ea8  00000000  00000000  000d68a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .build_attributes 0000044e  00000000  00000000  000d774d  2**0
                  CONTENTS, READONLY
 19 .debug_macro  0001c78f  00000000  00000000  000d7b9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	71 03 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     q...............
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c003e04 	.word	0x0c003e04
 800024c:	20000000 	.word	0x20000000
 8000250:	00000460 	.word	0x00000460
 8000254:	0c004264 	.word	0x0c004264
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c003e04 	.word	0x0c003e04
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c003e04 	.word	0x0c003e04
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000460 	.word	0x20000460
 800027c:	000006dc 	.word	0x000006dc
 8000280:	30000000 	.word	0x30000000
 8000284:	00000e00 	.word	0x00000e00
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	0800390d 	.word	0x0800390d
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	08003979 	.word	0x08003979
    ldr  r0, =main
 80002ac:	080002e9 	.word	0x080002e9

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemCoreClockSetup>:
    .fccu_clkdiv = 1,
    .fperipheral_clkdiv = 1
};


void SystemCoreClockSetup(void) {
 80002b4:	b508      	push	{r3, lr}
    /* Setup settings for USB clock */
    XMC_SCU_CLOCK_Init(&clock_config);
 80002b6:	480b      	ldr	r0, [pc, #44]	; (80002e4 <SystemCoreClockSetup+0x30>)
 80002b8:	f002 fe9e 	bl	8002ff8 <XMC_SCU_CLOCK_Init>

    XMC_SCU_CLOCK_EnableUsbPll();
 80002bc:	f002 fb74 	bl	80029a8 <XMC_SCU_CLOCK_EnableUsbPll>
    XMC_SCU_CLOCK_StartUsbPll(2, 64);
 80002c0:	2140      	movs	r1, #64	; 0x40
 80002c2:	2002      	movs	r0, #2
 80002c4:	f002 fb84 	bl	80029d0 <XMC_SCU_CLOCK_StartUsbPll>
    XMC_SCU_CLOCK_SetUsbClockDivider(4);
 80002c8:	2004      	movs	r0, #4
 80002ca:	f002 fb05 	bl	80028d8 <XMC_SCU_CLOCK_SetUsbClockDivider>
    XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80002ce:	2000      	movs	r0, #0
 80002d0:	f002 fa8a 	bl	80027e8 <XMC_SCU_CLOCK_SetUsbClockSource>
    XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 80002d4:	2001      	movs	r0, #1
 80002d6:	f002 fb2b 	bl	8002930 <XMC_SCU_CLOCK_EnableClock>

    SystemCoreClockUpdate();
}
 80002da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
 80002de:	f003 b9e3 	b.w	80036a8 <SystemCoreClockUpdate>
 80002e2:	bf00      	nop
 80002e4:	08003c9c 	.word	0x08003c9c

080002e8 <main>:
 * the application, then enters a loop to run the application tasks in sequence.
 */
int main(void) {
  uint16_t Bytes = 0;

  XMC_GPIO_Init(GPIO_LED1,     &out_config);
 80002e8:	481d      	ldr	r0, [pc, #116]	; (8000360 <main+0x78>)
 80002ea:	4a1e      	ldr	r2, [pc, #120]	; (8000364 <main+0x7c>)
int main(void) {
 80002ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  XMC_GPIO_Init(GPIO_LED1,     &out_config);
 80002ee:	2101      	movs	r1, #1

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 80002f0:	4606      	mov	r6, r0
 80002f2:	f003 f959 	bl	80035a8 <XMC_GPIO_Init>
  XMC_GPIO_Init(GPIO_LED2,     &out_config);
 80002f6:	4a1b      	ldr	r2, [pc, #108]	; (8000364 <main+0x7c>)
  XMC_GPIO_Init(GPIO_BUTTON2,  &in_config);
  USB_Init();

  while (1) {
    /* Check if data received */
    Bytes = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface);
 80002f8:	4d1b      	ldr	r5, [pc, #108]	; (8000368 <main+0x80>)
  XMC_GPIO_Init(GPIO_LED2,     &out_config);
 80002fa:	4630      	mov	r0, r6
 80002fc:	2100      	movs	r1, #0
 80002fe:	f003 f953 	bl	80035a8 <XMC_GPIO_Init>
  XMC_GPIO_Init(GPIO_BUTTON1,  &in_config);
 8000302:	4a1a      	ldr	r2, [pc, #104]	; (800036c <main+0x84>)
 8000304:	4630      	mov	r0, r6
 8000306:	210e      	movs	r1, #14
 8000308:	f003 f94e 	bl	80035a8 <XMC_GPIO_Init>
  XMC_GPIO_Init(GPIO_BUTTON2,  &in_config);
 800030c:	4a17      	ldr	r2, [pc, #92]	; (800036c <main+0x84>)
 800030e:	4630      	mov	r0, r6
 8000310:	210f      	movs	r1, #15
 8000312:	f003 f949 	bl	80035a8 <XMC_GPIO_Init>
  USB_Init();
 8000316:	f000 f831 	bl	800037c <USB_Init>
  port->OMR = 0x10000U << pin;
 800031a:	f44f 3700 	mov.w	r7, #131072	; 0x20000
    Bytes = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface);
 800031e:	4628      	mov	r0, r5
 8000320:	f001 fd46 	bl	8001db0 <CDC_Device_BytesReceived>

    while(Bytes > 0) {
 8000324:	4604      	mov	r4, r0
 8000326:	b150      	cbz	r0, 800033e <main+0x56>
      /* Send data back to the host */
      CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
                          CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface));
 8000328:	4628      	mov	r0, r5
 800032a:	f001 fd6f 	bl	8001e0c <CDC_Device_ReceiveByte>
      --Bytes;
 800032e:	3c01      	subs	r4, #1
      CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
 8000330:	b2c1      	uxtb	r1, r0
      --Bytes;
 8000332:	b2a4      	uxth	r4, r4
      CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
 8000334:	4628      	mov	r0, r5
 8000336:	f001 fcb7 	bl	8001ca8 <CDC_Device_SendByte>
    while(Bytes > 0) {
 800033a:	2c00      	cmp	r4, #0
 800033c:	d1f4      	bne.n	8000328 <main+0x40>
  return (((port->IN) >> pin) & 0x1U);
 800033e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    }

    if(XMC_GPIO_GetInput(GPIO_BUTTON1) == 0) {
 8000340:	045a      	lsls	r2, r3, #17
  port->OMR = (uint32_t)0x1U << pin;
 8000342:	bf5a      	itte	pl
 8000344:	2302      	movpl	r3, #2
 8000346:	6073      	strpl	r3, [r6, #4]
  port->OMR = 0x10000U << pin;
 8000348:	6077      	strmi	r7, [r6, #4]
  return (((port->IN) >> pin) & 0x1U);
 800034a:	6a73      	ldr	r3, [r6, #36]	; 0x24
      XMC_GPIO_SetOutputHigh(GPIO_LED1);
    } else {
      XMC_GPIO_SetOutputLow(GPIO_LED1);
    }
    if(XMC_GPIO_GetInput(GPIO_BUTTON2) == 0) {
 800034c:	041b      	lsls	r3, r3, #16
  port->OMR = (uint32_t)0x1U << pin;
 800034e:	bf54      	ite	pl
 8000350:	2301      	movpl	r3, #1
  port->OMR = 0x10000U << pin;
 8000352:	f44f 3380 	movmi.w	r3, #65536	; 0x10000
 8000356:	6073      	str	r3, [r6, #4]
      XMC_GPIO_SetOutputHigh(GPIO_LED2);
    } else {
      XMC_GPIO_SetOutputLow(GPIO_LED2);
    }

    CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 8000358:	4628      	mov	r0, r5
 800035a:	f001 fd01 	bl	8001d60 <CDC_Device_USBTask>
    Bytes = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface);
 800035e:	e7de      	b.n	800031e <main+0x36>
 8000360:	48028100 	.word	0x48028100
 8000364:	08003cb0 	.word	0x08003cb0
 8000368:	20000010 	.word	0x20000010
 800036c:	08003cbc 	.word	0x08003cbc

08000370 <USB0_0_IRQHandler>:
**                     Public Function Definitions                            **
*******************************************************************************/

void USB0_0_IRQHandler(void)
{
  XMC_USBD_IRQHandler(&USB_runtime);
 8000370:	4801      	ldr	r0, [pc, #4]	; (8000378 <USB0_0_IRQHandler+0x8>)
 8000372:	f001 b8f3 	b.w	800155c <XMC_USBD_IRQHandler>
 8000376:	bf00      	nop
 8000378:	20000000 	.word	0x20000000

0800037c <USB_Init>:
}

/*The function initializes the USB core layer and register call backs. */
void USB_Init(void)
{
 800037c:	b510      	push	{r4, lr}
  USBD_Initialize(&USB_runtime);
 800037e:	4815      	ldr	r0, [pc, #84]	; (80003d4 <USB_Init+0x58>)
 8000380:	f000 fbb8 	bl	8000af4 <USBD_Initialize>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000384:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <USB_Init+0x5c>)
 8000386:	68da      	ldr	r2, [r3, #12]
 8000388:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800038c:	f1c2 0107 	rsb	r1, r2, #7
 8000390:	2906      	cmp	r1, #6
 8000392:	bf28      	it	cs
 8000394:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000396:	b102      	cbz	r2, 800039a <USB_Init+0x1e>
 8000398:	3a01      	subs	r2, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800039e:	408b      	lsls	r3, r1
 80003a0:	43db      	mvns	r3, r3
 80003a2:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	4a0d      	ldr	r2, [pc, #52]	; (80003dc <USB_Init+0x60>)
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				device.Driver->DeviceConnect();
 80003a8:	4c0d      	ldr	r4, [pc, #52]	; (80003e0 <USB_Init+0x64>)
  NVIC_SetPriority(USB0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63, 0));
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
  NVIC_EnableIRQ(USB0_0_IRQn);

  /* LUFA Class Line Encoding*/
  VirtualSerial_CDC_Interface.State.LineEncoding.BaudRateBPS = 9600;
 80003aa:	490a      	ldr	r1, [pc, #40]	; (80003d4 <USB_Init+0x58>)
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	f882 336b 	strb.w	r3, [r2, #875]	; 0x36b
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80003b6:	f8c2 018c 	str.w	r0, [r2, #396]	; 0x18c
 80003ba:	6823      	ldr	r3, [r4, #0]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003bc:	60d0      	str	r0, [r2, #12]
  VirtualSerial_CDC_Interface.State.LineEncoding.DataBits = 8;
 80003be:	2208      	movs	r2, #8
 80003c0:	f881 202e 	strb.w	r2, [r1, #46]	; 0x2e
  VirtualSerial_CDC_Interface.State.LineEncoding.BaudRateBPS = 9600;
 80003c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003c8:	68db      	ldr	r3, [r3, #12]
 80003ca:	628a      	str	r2, [r1, #40]	; 0x28

  /* USB Connection*/
  USB_Attach();
	
}
 80003cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80003d0:	4718      	bx	r3
 80003d2:	bf00      	nop
 80003d4:	20000000 	.word	0x20000000
 80003d8:	e000ed00 	.word	0xe000ed00
 80003dc:	e000e100 	.word	0xe000e100
 80003e0:	20000764 	.word	0x20000764

080003e4 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop

080003e8 <EVENT_USB_Device_Disconnect>:
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop

080003ec <EVENT_USB_Device_Reset>:
{
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Reset(void)
{
 80003ec:	b510      	push	{r4, lr}
  if(device.IsConfigured)
 80003ee:	4c07      	ldr	r4, [pc, #28]	; (800040c <EVENT_USB_Device_Reset+0x20>)
 80003f0:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 80003f4:	07db      	lsls	r3, r3, #31
 80003f6:	d400      	bmi.n	80003fa <EVENT_USB_Device_Reset+0xe>
  {
    USB_Init();
    device.IsConfigured=0;
  }
}
 80003f8:	bd10      	pop	{r4, pc}
    USB_Init();
 80003fa:	f7ff ffbf 	bl	800037c <USB_Init>
    device.IsConfigured=0;
 80003fe:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8000402:	f36f 0300 	bfc	r3, #0, #1
 8000406:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
}
 800040a:	bd10      	pop	{r4, pc}
 800040c:	20000764 	.word	0x20000764

08000410 <EVENT_USB_Device_ConfigurationChanged>:

/* Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 8000410:	b508      	push	{r3, lr}
  USBD_SetEndpointBuffer(CDC_NOTIFICATION_EPADDR, ep2_buf, 64);
 8000412:	2240      	movs	r2, #64	; 0x40
 8000414:	490c      	ldr	r1, [pc, #48]	; (8000448 <EVENT_USB_Device_ConfigurationChanged+0x38>)
 8000416:	2081      	movs	r0, #129	; 0x81
 8000418:	f000 fbb4 	bl	8000b84 <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer(CDC_TX_EPADDR, ep3_buf, 64);
 800041c:	2240      	movs	r2, #64	; 0x40
 800041e:	490b      	ldr	r1, [pc, #44]	; (800044c <EVENT_USB_Device_ConfigurationChanged+0x3c>)
 8000420:	2082      	movs	r0, #130	; 0x82
 8000422:	f000 fbaf 	bl	8000b84 <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer(CDC_RX_EPADDR, ep4_buf, 64);
 8000426:	2240      	movs	r2, #64	; 0x40
 8000428:	4909      	ldr	r1, [pc, #36]	; (8000450 <EVENT_USB_Device_ConfigurationChanged+0x40>)
 800042a:	2003      	movs	r0, #3
 800042c:	f000 fbaa 	bl	8000b84 <USBD_SetEndpointBuffer>
  CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 8000430:	4808      	ldr	r0, [pc, #32]	; (8000454 <EVENT_USB_Device_ConfigurationChanged+0x44>)
 8000432:	f001 fbd9 	bl	8001be8 <CDC_Device_ConfigureEndpoints>

  device.IsConfigured = 1;
 8000436:	4a08      	ldr	r2, [pc, #32]	; (8000458 <EVENT_USB_Device_ConfigurationChanged+0x48>)
 8000438:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
}
 8000444:	bd08      	pop	{r3, pc}
 8000446:	bf00      	nop
 8000448:	200004e4 	.word	0x200004e4
 800044c:	20000524 	.word	0x20000524
 8000450:	200004a4 	.word	0x200004a4
 8000454:	20000010 	.word	0x20000010
 8000458:	20000764 	.word	0x20000764

0800045c <EVENT_USB_Device_ControlRequest>:

/* Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest()
{
  CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 800045c:	4801      	ldr	r0, [pc, #4]	; (8000464 <EVENT_USB_Device_ControlRequest+0x8>)
 800045e:	f001 bd51 	b.w	8001f04 <CDC_Device_ProcessControlRequest>
 8000462:	bf00      	nop
 8000464:	20000010 	.word	0x20000010

08000468 <EVENT_USB_Device_StartOfFrame>:
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop

0800046c <EVENT_USB_Device_WakeUp>:
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <EVENT_USB_Device_Suspend>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 8000474:	0a03      	lsrs	r3, r0, #8
 8000476:	2b02      	cmp	r3, #2
 8000478:	d018      	beq.n	80004ac <CALLBACK_USB_GetDescriptor+0x38>
 800047a:	2b03      	cmp	r3, #3
 800047c:	d009      	beq.n	8000492 <CALLBACK_USB_GetDescriptor+0x1e>
 800047e:	2b01      	cmp	r3, #1
 8000480:	d003      	beq.n	800048a <CALLBACK_USB_GetDescriptor+0x16>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 8000482:	2000      	movs	r0, #0
 8000484:	4603      	mov	r3, r0
					break;
			}
			break;
	}

	*DescriptorAddress = Address;
 8000486:	6013      	str	r3, [r2, #0]
	return Size;
}
 8000488:	4770      	bx	lr
			Address = &DeviceDescriptor;
 800048a:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <CALLBACK_USB_GetDescriptor+0x40>)
	*DescriptorAddress = Address;
 800048c:	6013      	str	r3, [r2, #0]
			Size    = sizeof(USB_Descriptor_Device_t);
 800048e:	2012      	movs	r0, #18
}
 8000490:	4770      	bx	lr
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 8000492:	b2c0      	uxtb	r0, r0
 8000494:	2802      	cmp	r0, #2
 8000496:	d8f4      	bhi.n	8000482 <CALLBACK_USB_GetDescriptor+0xe>
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <CALLBACK_USB_GetDescriptor+0x40>)
 800049a:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 800049e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80004a2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80004a4:	f8b0 0060 	ldrh.w	r0, [r0, #96]	; 0x60
	*DescriptorAddress = Address;
 80004a8:	6013      	str	r3, [r2, #0]
}
 80004aa:	4770      	bx	lr
			Address = &ConfigurationDescriptor;
 80004ac:	4b02      	ldr	r3, [pc, #8]	; (80004b8 <CALLBACK_USB_GetDescriptor+0x44>)
	*DescriptorAddress = Address;
 80004ae:	6013      	str	r3, [r2, #0]
			Size    = sizeof(USB_Descriptor_Configuration_t);
 80004b0:	203e      	movs	r0, #62	; 0x3e
}
 80004b2:	4770      	bx	lr
 80004b4:	08003cc8 	.word	0x08003cc8
 80004b8:	08003cdc 	.word	0x08003cdc

080004bc <USBD_HandleEP0_Stall>:
/**
 * \brief Handle protocol stall on EP0
 *
 * Stalls EP0 and then restarts a new transfer including setting state to \ref IDLE.
 */
void USBD_HandleEP0_Stall() {
 80004bc:	b510      	push	{r4, lr}
	/* When we stall ep0 as protocol stall, we go back into idle state and start a new read */
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 80004be:	4c08      	ldr	r4, [pc, #32]	; (80004e0 <USBD_HandleEP0_Stall+0x24>)
 80004c0:	6823      	ldr	r3, [r4, #0]
 80004c2:	2101      	movs	r1, #1
 80004c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c6:	2080      	movs	r0, #128	; 0x80
 80004c8:	4798      	blx	r3
	device.EP0_State = IDLE;
	device.Driver->EndpointReadStart(0,24);
 80004ca:	6823      	ldr	r3, [r4, #0]
	device.EP0_State = IDLE;
 80004cc:	2201      	movs	r2, #1
 80004ce:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
	device.Driver->EndpointReadStart(0,24);
 80004d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004d4:	2118      	movs	r1, #24
 80004d6:	2000      	movs	r0, #0
}
 80004d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	device.Driver->EndpointReadStart(0,24);
 80004dc:	4718      	bx	r3
 80004de:	bf00      	nop
 80004e0:	20000764 	.word	0x20000764

080004e4 <USB_Device_ProcessControlRequest>:
 * \ref EVENT_USB_Device_ControlRequest function. There the user has the chance to complete
 * some custom request or override the handling of this function. If the user has handled the
 * request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
void USB_Device_ProcessControlRequest() {
 80004e4:	b570      	push	{r4, r5, r6, lr}
	uint16_t status = 0;
	void *buffer;
	uint8_t Value;
	uint16_t Index;

	Value = USB_ControlRequest.wValue & 0x00FF;
 80004e6:	4d9e      	ldr	r5, [pc, #632]	; (8000760 <USB_Device_ProcessControlRequest+0x27c>)

	/* Handling of descriptors */
	EVENT_USB_Device_ControlRequest();
	if (!device.IsSetupRecieved)
 80004e8:	4c9e      	ldr	r4, [pc, #632]	; (8000764 <USB_Device_ProcessControlRequest+0x280>)
	Value = USB_ControlRequest.wValue & 0x00FF;
 80004ea:	886e      	ldrh	r6, [r5, #2]
void USB_Device_ProcessControlRequest() {
 80004ec:	b082      	sub	sp, #8
	uint16_t status = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	f8ad 3002 	strh.w	r3, [sp, #2]
	EVENT_USB_Device_ControlRequest();
 80004f4:	f7ff ffb2 	bl	800045c <EVENT_USB_Device_ControlRequest>
	if (!device.IsSetupRecieved)
 80004f8:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 80004fc:	079b      	lsls	r3, r3, #30
 80004fe:	d527      	bpl.n	8000550 <USB_Device_ProcessControlRequest+0x6c>
		return;

	/* default request handling */
	switch (USB_ControlRequest.bRequest) {
 8000500:	786b      	ldrb	r3, [r5, #1]
	Value = USB_ControlRequest.wValue & 0x00FF;
 8000502:	b2f6      	uxtb	r6, r6
	switch (USB_ControlRequest.bRequest) {
 8000504:	2b0c      	cmp	r3, #12
 8000506:	d810      	bhi.n	800052a <USB_Device_ProcessControlRequest+0x46>
 8000508:	e8df f003 	tbb	[pc, r3]
 800050c:	710f4755 	.word	0x710f4755
 8000510:	0f7f3c0f 	.word	0x0f7f3c0f
 8000514:	0724326a 	.word	0x0724326a
 8000518:	0f          	.byte	0x0f
 8000519:	00          	.byte	0x00
		/* Set Descriptor not supported, so stall */
		USBD_HandleEP0_Stall();
		break;

	case REQ_SetInterface:
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 800051a:	4b93      	ldr	r3, [pc, #588]	; (8000768 <USB_Device_ProcessControlRequest+0x284>)
 800051c:	781a      	ldrb	r2, [r3, #0]
 800051e:	2a04      	cmp	r2, #4
 8000520:	f000 80af 	beq.w	8000682 <USB_Device_ProcessControlRequest+0x19e>
			/* TODO: Check if interface and altsetting exists and configuration is allowed, else stall */
			device.InterfaceSettings[USB_ControlRequest.wIndex] = USB_ControlRequest.wValue;
			break;
		}
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b03      	cmp	r3, #3
 8000528:	d10c      	bne.n	8000544 <USB_Device_ProcessControlRequest+0x60>
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 800052a:	6823      	ldr	r3, [r4, #0]
 800052c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800052e:	2101      	movs	r1, #1
 8000530:	2080      	movs	r0, #128	; 0x80
 8000532:	4798      	blx	r3
	device.Driver->EndpointReadStart(0,24);
 8000534:	6823      	ldr	r3, [r4, #0]
	device.EP0_State = IDLE;
 8000536:	2201      	movs	r2, #1
	device.Driver->EndpointReadStart(0,24);
 8000538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	device.EP0_State = IDLE;
 800053a:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
	device.Driver->EndpointReadStart(0,24);
 800053e:	2118      	movs	r1, #24
 8000540:	2000      	movs	r0, #0
 8000542:	4798      	blx	r3
		break;

	default:
		USBD_HandleEP0_Stall();
	}
	device.IsSetupRecieved = 0;
 8000544:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8000548:	f36f 0341 	bfc	r3, #1, #1
 800054c:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
}
 8000550:	b002      	add	sp, #8
 8000552:	bd70      	pop	{r4, r5, r6, pc}
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8000554:	4b84      	ldr	r3, [pc, #528]	; (8000768 <USB_Device_ProcessControlRequest+0x284>)
 8000556:	781a      	ldrb	r2, [r3, #0]
 8000558:	2a04      	cmp	r2, #4
 800055a:	d1e3      	bne.n	8000524 <USB_Device_ProcessControlRequest+0x40>
			device.Driver->EndpointWrite(0,&device.InterfaceSettings[USB_ControlRequest.wIndex],1);
 800055c:	88a9      	ldrh	r1, [r5, #4]
 800055e:	6823      	ldr	r3, [r4, #0]
 8000560:	f501 719c 	add.w	r1, r1, #312	; 0x138
 8000564:	4421      	add	r1, r4
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	2201      	movs	r2, #1
 800056a:	2000      	movs	r0, #0
 800056c:	4798      	blx	r3
			break;
 800056e:	e7e9      	b.n	8000544 <USB_Device_ProcessControlRequest+0x60>
		device.Configuration = Value;
 8000570:	f884 6139 	strb.w	r6, [r4, #313]	; 0x139
		EVENT_USB_Device_ConfigurationChanged();
 8000574:	f7ff ff4c 	bl	8000410 <EVENT_USB_Device_ConfigurationChanged>
		if (Value == 0) {
 8000578:	2e00      	cmp	r6, #0
 800057a:	d16f      	bne.n	800065c <USB_Device_ProcessControlRequest+0x178>
			USB_DeviceState = DEVICE_STATE_Addressed;
 800057c:	4b7a      	ldr	r3, [pc, #488]	; (8000768 <USB_Device_ProcessControlRequest+0x284>)
 800057e:	2203      	movs	r2, #3
 8000580:	701a      	strb	r2, [r3, #0]
			break;
 8000582:	e7df      	b.n	8000544 <USB_Device_ProcessControlRequest+0x60>
			USB_DeviceState = DEVICE_STATE_Default;
 8000584:	4b78      	ldr	r3, [pc, #480]	; (8000768 <USB_Device_ProcessControlRequest+0x284>)
		if (Value == 0)
 8000586:	2e00      	cmp	r6, #0
 8000588:	d155      	bne.n	8000636 <USB_Device_ProcessControlRequest+0x152>
			USB_DeviceState = DEVICE_STATE_Default;
 800058a:	2202      	movs	r2, #2
 800058c:	701a      	strb	r2, [r3, #0]
		device.Driver->DeviceSetAddress(Value,XMC_USBD_SET_ADDRESS_STAGE_SETUP);
 800058e:	6823      	ldr	r3, [r4, #0]
 8000590:	4630      	mov	r0, r6
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	2100      	movs	r1, #0
 8000596:	4798      	blx	r3
		break;
 8000598:	e7d4      	b.n	8000544 <USB_Device_ProcessControlRequest+0x60>
 800059a:	782b      	ldrb	r3, [r5, #0]
 800059c:	f003 0303 	and.w	r3, r3, #3
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	d074      	beq.n	800068e <USB_Device_ProcessControlRequest+0x1aa>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1c0      	bne.n	800052a <USB_Device_ProcessControlRequest+0x46>
			 device.RemoteWakeUp = 0;
 80005a8:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
 80005ac:	f363 0282 	bfi	r2, r3, #2, #1
 80005b0:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
			 break;
 80005b4:	e7c6      	b.n	8000544 <USB_Device_ProcessControlRequest+0x60>
 80005b6:	7828      	ldrb	r0, [r5, #0]
 80005b8:	6822      	ldr	r2, [r4, #0]
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 80005ba:	f010 0003 	ands.w	r0, r0, #3
 80005be:	f040 8081 	bne.w	80006c4 <USB_Device_ProcessControlRequest+0x1e0>
			status = device.RemoteWakeUp << 1 | device.SelfPowered;
 80005c2:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 80005c6:	6b15      	ldr	r5, [r2, #48]	; 0x30
			status = device.RemoteWakeUp << 1 | device.SelfPowered;
 80005c8:	a902      	add	r1, sp, #8
 80005ca:	f3c3 0280 	ubfx	r2, r3, #2, #1
 80005ce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80005d2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80005d6:	f821 3d06 	strh.w	r3, [r1, #-6]!
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 80005da:	2202      	movs	r2, #2
 80005dc:	47a8      	blx	r5
			break;
 80005de:	e7b1      	b.n	8000544 <USB_Device_ProcessControlRequest+0x60>
		device.Driver->EndpointWrite(0,&device.Configuration,1);
 80005e0:	6823      	ldr	r3, [r4, #0]
 80005e2:	4962      	ldr	r1, [pc, #392]	; (800076c <USB_Device_ProcessControlRequest+0x288>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	2201      	movs	r2, #1
 80005e8:	2000      	movs	r0, #0
 80005ea:	4798      	blx	r3
		break;
 80005ec:	e7aa      	b.n	8000544 <USB_Device_ProcessControlRequest+0x60>
		if (Value == FEATURE_SEL_TestMode) {
 80005ee:	2e02      	cmp	r6, #2
 80005f0:	d09b      	beq.n	800052a <USB_Device_ProcessControlRequest+0x46>
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 80005f2:	4b5d      	ldr	r3, [pc, #372]	; (8000768 <USB_Device_ProcessControlRequest+0x284>)
 80005f4:	781a      	ldrb	r2, [r3, #0]
 80005f6:	2a04      	cmp	r2, #4
 80005f8:	d06b      	beq.n	80006d2 <USB_Device_ProcessControlRequest+0x1ee>
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 80005fa:	781a      	ldrb	r2, [r3, #0]
 80005fc:	6823      	ldr	r3, [r4, #0]
 80005fe:	2a03      	cmp	r2, #3
 8000600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000602:	f000 8097 	beq.w	8000734 <USB_Device_ProcessControlRequest+0x250>
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 8000606:	2101      	movs	r1, #1
 8000608:	e792      	b.n	8000530 <USB_Device_ProcessControlRequest+0x4c>
		length = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue,USB_ControlRequest.wIndex,(void*)&buffer);
 800060a:	88a9      	ldrh	r1, [r5, #4]
 800060c:	8868      	ldrh	r0, [r5, #2]
 800060e:	b2c9      	uxtb	r1, r1
 8000610:	aa01      	add	r2, sp, #4
 8000612:	f7ff ff2f 	bl	8000474 <CALLBACK_USB_GetDescriptor>
		if (length==0)
 8000616:	4606      	mov	r6, r0
 8000618:	b980      	cbnz	r0, 800063c <USB_Device_ProcessControlRequest+0x158>
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 800061a:	6823      	ldr	r3, [r4, #0]
 800061c:	2101      	movs	r1, #1
 800061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000620:	2080      	movs	r0, #128	; 0x80
 8000622:	4798      	blx	r3
	device.Driver->EndpointReadStart(0,24);
 8000624:	6823      	ldr	r3, [r4, #0]
	device.EP0_State = IDLE;
 8000626:	2201      	movs	r2, #1
	device.Driver->EndpointReadStart(0,24);
 8000628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	device.EP0_State = IDLE;
 800062a:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
	device.Driver->EndpointReadStart(0,24);
 800062e:	4630      	mov	r0, r6
 8000630:	2118      	movs	r1, #24
 8000632:	4798      	blx	r3
 8000634:	e786      	b.n	8000544 <USB_Device_ProcessControlRequest+0x60>
			USB_DeviceState = DEVICE_STATE_Addressed;
 8000636:	2203      	movs	r2, #3
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	e7a8      	b.n	800058e <USB_Device_ProcessControlRequest+0xaa>
			length = length < USB_ControlRequest.wLength ?
 800063c:	88ed      	ldrh	r5, [r5, #6]
			ret = device.Driver->EndpointWrite(0,buffer,length);
 800063e:	6823      	ldr	r3, [r4, #0]
 8000640:	9901      	ldr	r1, [sp, #4]
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			length = length < USB_ControlRequest.wLength ?
 8000644:	4285      	cmp	r5, r0
 8000646:	bf28      	it	cs
 8000648:	4605      	movcs	r5, r0
			ret = device.Driver->EndpointWrite(0,buffer,length);
 800064a:	462a      	mov	r2, r5
 800064c:	2000      	movs	r0, #0
 800064e:	4798      	blx	r3
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
 8000650:	9b01      	ldr	r3, [sp, #4]
			device.Endpoints[0].InDataLeft = length - ret;
 8000652:	1a2d      	subs	r5, r5, r0
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
 8000654:	4403      	add	r3, r0
 8000656:	e9c4 530a 	strd	r5, r3, [r4, #40]	; 0x28
 800065a:	e773      	b.n	8000544 <USB_Device_ProcessControlRequest+0x60>
		if (device.IsConfigured == 1)
 800065c:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8000660:	f013 0501 	ands.w	r5, r3, #1
 8000664:	d140      	bne.n	80006e8 <USB_Device_ProcessControlRequest+0x204>
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 8000666:	6823      	ldr	r3, [r4, #0]
 8000668:	2101      	movs	r1, #1
 800066a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066c:	2080      	movs	r0, #128	; 0x80
 800066e:	4798      	blx	r3
	device.Driver->EndpointReadStart(0,24);
 8000670:	6823      	ldr	r3, [r4, #0]
	device.EP0_State = IDLE;
 8000672:	2201      	movs	r2, #1
	device.Driver->EndpointReadStart(0,24);
 8000674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	device.EP0_State = IDLE;
 8000676:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
	device.Driver->EndpointReadStart(0,24);
 800067a:	4628      	mov	r0, r5
 800067c:	2118      	movs	r1, #24
 800067e:	4798      	blx	r3
 8000680:	e760      	b.n	8000544 <USB_Device_ProcessControlRequest+0x60>
			device.InterfaceSettings[USB_ControlRequest.wIndex] = USB_ControlRequest.wValue;
 8000682:	88ab      	ldrh	r3, [r5, #4]
 8000684:	886a      	ldrh	r2, [r5, #2]
 8000686:	4423      	add	r3, r4
 8000688:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
			break;
 800068c:	e75a      	b.n	8000544 <USB_Device_ProcessControlRequest+0x60>
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 800068e:	4b36      	ldr	r3, [pc, #216]	; (8000768 <USB_Device_ProcessControlRequest+0x284>)
 8000690:	6822      	ldr	r2, [r4, #0]
 8000692:	781b      	ldrb	r3, [r3, #0]
			Index = USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK;
 8000694:	88a8      	ldrh	r0, [r5, #4]
 8000696:	6a55      	ldr	r5, [r2, #36]	; 0x24
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 8000698:	2b04      	cmp	r3, #4
 800069a:	d004      	beq.n	80006a6 <USB_Device_ProcessControlRequest+0x1c2>
 800069c:	b118      	cbz	r0, 80006a6 <USB_Device_ProcessControlRequest+0x1c2>
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 800069e:	2101      	movs	r1, #1
 80006a0:	2080      	movs	r0, #128	; 0x80
 80006a2:	47a8      	blx	r5
 80006a4:	e746      	b.n	8000534 <USB_Device_ProcessControlRequest+0x50>
					device.Endpoints[Index].IsConfigured==1) {
 80006a6:	222c      	movs	r2, #44	; 0x2c
 80006a8:	f000 030f 	and.w	r3, r0, #15
 80006ac:	fb02 4303 	mla	r3, r2, r3, r4
 80006b0:	7a1a      	ldrb	r2, [r3, #8]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 80006b2:	07d6      	lsls	r6, r2, #31
 80006b4:	d5f3      	bpl.n	800069e <USB_Device_ProcessControlRequest+0x1ba>
				device.Endpoints[Index].IsHalted = 0;
 80006b6:	f36f 0282 	bfc	r2, #2, #1
 80006ba:	721a      	strb	r2, [r3, #8]
				device.Driver->EndpointStall(USB_ControlRequest.wIndex,0);
 80006bc:	2100      	movs	r1, #0
 80006be:	b2c0      	uxtb	r0, r0
 80006c0:	47a8      	blx	r5
 80006c2:	e73f      	b.n	8000544 <USB_Device_ProcessControlRequest+0x60>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_INTERFACE && USB_DeviceState == DEVICE_STATE_Configured) {
 80006c4:	2801      	cmp	r0, #1
 80006c6:	d013      	beq.n	80006f0 <USB_Device_ProcessControlRequest+0x20c>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 80006c8:	2802      	cmp	r0, #2
 80006ca:	d051      	beq.n	8000770 <USB_Device_ProcessControlRequest+0x28c>
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 80006cc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80006ce:	2101      	movs	r1, #1
 80006d0:	e72e      	b.n	8000530 <USB_Device_ProcessControlRequest+0x4c>
			switch (Value) {
 80006d2:	b1ce      	cbz	r6, 8000708 <USB_Device_ProcessControlRequest+0x224>
 80006d4:	2e01      	cmp	r6, #1
 80006d6:	f47f af35 	bne.w	8000544 <USB_Device_ProcessControlRequest+0x60>
				device.RemoteWakeUp = 1;
 80006da:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
				break;
 80006e6:	e72d      	b.n	8000544 <USB_Device_ProcessControlRequest+0x60>
			USB_DeviceState = DEVICE_STATE_Configured;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <USB_Device_ProcessControlRequest+0x284>)
 80006ea:	2204      	movs	r2, #4
 80006ec:	701a      	strb	r2, [r3, #0]
 80006ee:	e729      	b.n	8000544 <USB_Device_ProcessControlRequest+0x60>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_INTERFACE && USB_DeviceState == DEVICE_STATE_Configured) {
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <USB_Device_ProcessControlRequest+0x284>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	d1e9      	bne.n	80006cc <USB_Device_ProcessControlRequest+0x1e8>
			status = 0;
 80006f8:	a902      	add	r1, sp, #8
 80006fa:	2000      	movs	r0, #0
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 80006fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
			status = 0;
 80006fe:	f821 0d06 	strh.w	r0, [r1, #-6]!
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000702:	2202      	movs	r2, #2
 8000704:	4798      	blx	r3
			break;
 8000706:	e71d      	b.n	8000544 <USB_Device_ProcessControlRequest+0x60>
				Index = USB_ControlRequest.wIndex & 0xFF & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK;
 8000708:	88a8      	ldrh	r0, [r5, #4]
 800070a:	6822      	ldr	r2, [r4, #0]
				if (device.Endpoints[Index].IsConfigured == 0)
 800070c:	212c      	movs	r1, #44	; 0x2c
 800070e:	f000 030f 	and.w	r3, r0, #15
 8000712:	fb01 4303 	mla	r3, r1, r3, r4
 8000716:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8000718:	7a1a      	ldrb	r2, [r3, #8]
 800071a:	07d1      	lsls	r1, r2, #31
 800071c:	d403      	bmi.n	8000726 <USB_Device_ProcessControlRequest+0x242>
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 800071e:	2101      	movs	r1, #1
 8000720:	2080      	movs	r0, #128	; 0x80
 8000722:	47a8      	blx	r5
 8000724:	e77e      	b.n	8000624 <USB_Device_ProcessControlRequest+0x140>
					device.Endpoints[Index].IsHalted = 1;
 8000726:	f042 0204 	orr.w	r2, r2, #4
 800072a:	721a      	strb	r2, [r3, #8]
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
 800072c:	2101      	movs	r1, #1
 800072e:	b2c0      	uxtb	r0, r0
 8000730:	47a8      	blx	r5
 8000732:	e707      	b.n	8000544 <USB_Device_ProcessControlRequest+0x60>
			if (Value == FEATURE_SEL_EndpointHalt &&
 8000734:	2e00      	cmp	r6, #0
 8000736:	f47f af66 	bne.w	8000606 <USB_Device_ProcessControlRequest+0x122>
 800073a:	782a      	ldrb	r2, [r5, #0]
 800073c:	f002 0203 	and.w	r2, r2, #3
 8000740:	2a02      	cmp	r2, #2
 8000742:	f47f af60 	bne.w	8000606 <USB_Device_ProcessControlRequest+0x122>
					(USB_ControlRequest.wIndex & 0x00FF) == 0x0) {
 8000746:	88aa      	ldrh	r2, [r5, #4]
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8000748:	f012 0fff 	tst.w	r2, #255	; 0xff
 800074c:	f47f af5b 	bne.w	8000606 <USB_Device_ProcessControlRequest+0x122>
				device.Endpoints[0].IsHalted = 1;
 8000750:	7a22      	ldrb	r2, [r4, #8]
 8000752:	f042 0204 	orr.w	r2, r2, #4
 8000756:	7222      	strb	r2, [r4, #8]
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 8000758:	2101      	movs	r1, #1
 800075a:	2080      	movs	r0, #128	; 0x80
 800075c:	4798      	blx	r3
 800075e:	e761      	b.n	8000624 <USB_Device_ProcessControlRequest+0x140>
 8000760:	20000ab4 	.word	0x20000ab4
 8000764:	20000764 	.word	0x20000764
 8000768:	20000ab1 	.word	0x20000ab1
 800076c:	2000089d 	.word	0x2000089d
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8000770:	490c      	ldr	r1, [pc, #48]	; (80007a4 <USB_Device_ProcessControlRequest+0x2c0>)
			Index = USB_ControlRequest.wIndex & 0xFF & ENDPOINT_EPNUM_MASK;
 8000772:	88ab      	ldrh	r3, [r5, #4]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8000774:	7809      	ldrb	r1, [r1, #0]
 8000776:	2904      	cmp	r1, #4
 8000778:	d001      	beq.n	800077e <USB_Device_ProcessControlRequest+0x29a>
 800077a:	2b00      	cmp	r3, #0
 800077c:	d1a6      	bne.n	80006cc <USB_Device_ProcessControlRequest+0x1e8>
					device.Endpoints[Index].IsConfigured==1) {
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	212c      	movs	r1, #44	; 0x2c
 8000784:	fb01 4303 	mla	r3, r1, r3, r4
 8000788:	7a1b      	ldrb	r3, [r3, #8]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 800078a:	07d8      	lsls	r0, r3, #31
 800078c:	d59e      	bpl.n	80006cc <USB_Device_ProcessControlRequest+0x1e8>
				status = device.Endpoints[Index].IsHalted;
 800078e:	a902      	add	r1, sp, #8
 8000790:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000794:	f821 3d06 	strh.w	r3, [r1, #-6]!
				device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000798:	2000      	movs	r0, #0
 800079a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800079c:	2202      	movs	r2, #2
 800079e:	4798      	blx	r3
				break;
 80007a0:	e6d0      	b.n	8000544 <USB_Device_ProcessControlRequest+0x60>
 80007a2:	bf00      	nop
 80007a4:	20000ab1 	.word	0x20000ab1

080007a8 <USBD_HandleEP0_IN>:
 * \brief Handle complete IN transfer on EP0
 *
 * In \ref IN_DATA state it starts a receive and switches to \ref OUT_STATUS state.
 * In \ref IN_STATUS state its starts a new read of setup packets and switches to \ref IDLE.
 */
void USBD_HandleEP0_IN() {
 80007a8:	b510      	push	{r4, lr}
	if (device.EP0_State == IN_DATA) {
 80007aa:	4c0c      	ldr	r4, [pc, #48]	; (80007dc <USBD_HandleEP0_IN+0x34>)
 80007ac:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
 80007b0:	2b02      	cmp	r3, #2
 80007b2:	d108      	bne.n	80007c6 <USBD_HandleEP0_IN+0x1e>
		/* Read zero length out data packet */
		device.Driver->EndpointReadStart(0,0);
 80007b4:	6823      	ldr	r3, [r4, #0]
 80007b6:	2100      	movs	r1, #0
 80007b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ba:	4608      	mov	r0, r1
 80007bc:	4798      	blx	r3
		device.EP0_State = OUT_STATUS;
 80007be:	2305      	movs	r3, #5
 80007c0:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	if (device.EP0_State == IN_STATUS) {
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
		device.EP0_State = IDLE;
	}
}
 80007c4:	bd10      	pop	{r4, pc}
	if (device.EP0_State == IN_STATUS) {
 80007c6:	2b03      	cmp	r3, #3
 80007c8:	d1fc      	bne.n	80007c4 <USBD_HandleEP0_IN+0x1c>
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 80007ca:	6823      	ldr	r3, [r4, #0]
 80007cc:	7920      	ldrb	r0, [r4, #4]
 80007ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d0:	2118      	movs	r1, #24
 80007d2:	4798      	blx	r3
		device.EP0_State = IDLE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
}
 80007da:	bd10      	pop	{r4, pc}
 80007dc:	20000764 	.word	0x20000764

080007e0 <USBD_HandleEP0_OUT>:
 * \brief Handle complete OUT transfer on EP0
 *
 * Handles the OUT packet based on the state of endpoint 0. Starts a new read for new SETUP packets, when in \ref OUT_STATUS.
 * When endpoint 0 is in \ref OUT_DATA state, it handles the received data and starts a write transaction for \ref IN_STATUS.
 */
void USBD_HandleEP0_OUT() {
 80007e0:	b510      	push	{r4, lr}
	if (device.EP0_State == OUT_DATA) {
 80007e2:	4c0e      	ldr	r4, [pc, #56]	; (800081c <USBD_HandleEP0_OUT+0x3c>)
 80007e4:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	d00a      	beq.n	8000802 <USBD_HandleEP0_OUT+0x22>
		USB_Device_ProcessControlRequest();
		/* Zero length packet for status stage */
		device.Driver->EndpointWrite(ENDPOINT_DIR_MASK & 0,0,0);
		device.EP0_State = IN_STATUS;
	}
	if (device.EP0_State == OUT_STATUS) {
 80007ec:	2b05      	cmp	r3, #5
 80007ee:	d107      	bne.n	8000800 <USBD_HandleEP0_OUT+0x20>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	7920      	ldrb	r0, [r4, #4]
 80007f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f6:	2118      	movs	r1, #24
 80007f8:	4798      	blx	r3
		device.EP0_State = IDLE;
 80007fa:	2301      	movs	r3, #1
 80007fc:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	}
}
 8000800:	bd10      	pop	{r4, pc}
		USB_Device_ProcessControlRequest();
 8000802:	f7ff fe6f 	bl	80004e4 <USB_Device_ProcessControlRequest>
		device.Driver->EndpointWrite(ENDPOINT_DIR_MASK & 0,0,0);
 8000806:	6823      	ldr	r3, [r4, #0]
 8000808:	2200      	movs	r2, #0
 800080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080c:	4611      	mov	r1, r2
 800080e:	4610      	mov	r0, r2
 8000810:	4798      	blx	r3
		device.EP0_State = IN_STATUS;
 8000812:	2303      	movs	r3, #3
 8000814:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
}
 8000818:	bd10      	pop	{r4, pc}
 800081a:	bf00      	nop
 800081c:	20000764 	.word	0x20000764

08000820 <USBD_HandleEP0_SETUP>:
 * Handles the setup package an switches to correct state. If data is send from host to device it switches into \ref OUT_DATA state.
 * When the hosts sends all data within the setup package and \ref wLength equals zero, starts processing the request and sends a
 * in status reponse including the switch to \ref IN_STATUS.
 * When the host expects data from the device, the function processes the control request and switches to \ref IN_DATA state.
 */
void USBD_HandleEP0_SETUP() {
 8000820:	b570      	push	{r4, r5, r6, lr}
	/* read setup package from ep0 */
	int32_t ret_val = device.Driver->EndpointRead(0,(void*)&USB_ControlRequest,8);
 8000822:	4c1a      	ldr	r4, [pc, #104]	; (800088c <USBD_HandleEP0_SETUP+0x6c>)
 8000824:	4d1a      	ldr	r5, [pc, #104]	; (8000890 <USBD_HandleEP0_SETUP+0x70>)
 8000826:	6823      	ldr	r3, [r4, #0]
 8000828:	4629      	mov	r1, r5
 800082a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082c:	2208      	movs	r2, #8
 800082e:	2000      	movs	r0, #0
 8000830:	4798      	blx	r3
#if NO_COPY_DRIVER
	MEMCPY(&USB_ControlRequest,device.Endpoints[0].OutBuffer,sizeof(USB_ControlRequest));
#endif
	device.IsSetupRecieved = true;
 8000832:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
	if (ret_val != 8 )
 8000836:	2808      	cmp	r0, #8
	device.IsSetupRecieved = true;
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
	if (ret_val != 8 )
 8000840:	d000      	beq.n	8000844 <USBD_HandleEP0_SETUP+0x24>
			device.EP0_State = OUT_DATA;
			/* Do not process request here, first read data */
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
		}
	}
}
 8000842:	bd70      	pop	{r4, r5, r6, pc}
	if (USB_ControlRequest.wLength==0) {
 8000844:	88ee      	ldrh	r6, [r5, #6]
 8000846:	b16e      	cbz	r6, 8000864 <USBD_HandleEP0_SETUP+0x44>
		if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) {
 8000848:	f995 3000 	ldrsb.w	r3, [r5]
 800084c:	2b00      	cmp	r3, #0
 800084e:	db16      	blt.n	800087e <USBD_HandleEP0_SETUP+0x5e>
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
 8000850:	6823      	ldr	r3, [r4, #0]
			device.EP0_State = OUT_DATA;
 8000852:	2204      	movs	r2, #4
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
 8000854:	4631      	mov	r1, r6
 8000856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			device.EP0_State = OUT_DATA;
 8000858:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
 800085c:	2000      	movs	r0, #0
}
 800085e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
 8000862:	4718      	bx	r3
		device.EP0_State = IN_STATUS;
 8000864:	2303      	movs	r3, #3
 8000866:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
		USB_Device_ProcessControlRequest();
 800086a:	f7ff fe3b 	bl	80004e4 <USB_Device_ProcessControlRequest>
		device.Driver->EndpointWrite(0,0,0);
 800086e:	6823      	ldr	r3, [r4, #0]
 8000870:	4632      	mov	r2, r6
 8000872:	4631      	mov	r1, r6
 8000874:	4630      	mov	r0, r6
 8000876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8000878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		device.Driver->EndpointWrite(0,0,0);
 800087c:	4718      	bx	r3
			device.EP0_State = IN_DATA;
 800087e:	2302      	movs	r3, #2
 8000880:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
}
 8000884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			USB_Device_ProcessControlRequest();
 8000888:	f7ff be2c 	b.w	80004e4 <USB_Device_ProcessControlRequest>
 800088c:	20000764 	.word	0x20000764
 8000890:	20000ab4 	.word	0x20000ab4

08000894 <USBD_SignalDeviceEventHandler>:
 * The device can have several events, where it notifies the application about.
 *
 * \note Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 * \see USB_USBD_EVENT
 */
void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event) {
 8000894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000896:	b083      	sub	sp, #12
	int i;
	switch (event) {
 8000898:	2809      	cmp	r0, #9
 800089a:	d806      	bhi.n	80008aa <USBD_SignalDeviceEventHandler+0x16>
 800089c:	e8df f000 	tbb	[pc, r0]
 80008a0:	3d382e07 	.word	0x3d382e07
 80008a4:	82760545 	.word	0x82760545
 80008a8:	9605      	.short	0x9605
		EVENT_USB_Device_Suspend();
		break;
	default:
		return;
	}
}
 80008aa:	b003      	add	sp, #12
 80008ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		 memset(&device,0x0,sizeof(USB_Device_t));
 80008ae:	4b4a      	ldr	r3, [pc, #296]	; (80009d8 <USBD_SignalDeviceEventHandler+0x144>)
		 USB_DeviceState = DEVICE_STATE_Powered;
 80008b0:	4c4a      	ldr	r4, [pc, #296]	; (80009dc <USBD_SignalDeviceEventHandler+0x148>)
 80008b2:	2601      	movs	r6, #1
		 memset(&device,0x0,sizeof(USB_Device_t));
 80008b4:	4618      	mov	r0, r3
 80008b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80008ba:	2100      	movs	r1, #0
		 USB_DeviceState = DEVICE_STATE_Powered;
 80008bc:	7026      	strb	r6, [r4, #0]
		 memset(&device,0x0,sizeof(USB_Device_t));
 80008be:	f003 f919 	bl	8003af4 <memset>
		 device.Endpoints[0].IsEnabled = 1;
 80008c2:	2203      	movs	r2, #3
		 memset(&device,0x0,sizeof(USB_Device_t));
 80008c4:	4603      	mov	r3, r0
		 device.Endpoints[0].IsEnabled = 1;
 80008c6:	7202      	strb	r2, [r0, #8]
		 device.Driver = &Driver_USBD0;
 80008c8:	4c45      	ldr	r4, [pc, #276]	; (80009e0 <USBD_SignalDeviceEventHandler+0x14c>)
		 device.Endpoints[0].MaxPacketSize = 64;
 80008ca:	8905      	ldrh	r5, [r0, #8]
		 device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 80008cc:	4945      	ldr	r1, [pc, #276]	; (80009e4 <USBD_SignalDeviceEventHandler+0x150>)
		 device.Driver = &Driver_USBD0;
 80008ce:	601c      	str	r4, [r3, #0]
		 device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 80008d0:	4845      	ldr	r0, [pc, #276]	; (80009e8 <USBD_SignalDeviceEventHandler+0x154>)
		 device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 80008d2:	69e4      	ldr	r4, [r4, #28]
		 device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 80008d4:	6218      	str	r0, [r3, #32]
		 device.Endpoints[0].MaxPacketSize = 64;
 80008d6:	2240      	movs	r2, #64	; 0x40
		 device.Endpoints[0].InBufferLength = 256;
 80008d8:	f44f 7080 	mov.w	r0, #256	; 0x100
		 device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 80008dc:	6159      	str	r1, [r3, #20]
		 device.Endpoints[0].MaxPacketSize = 64;
 80008de:	f362 158c 	bfi	r5, r2, #6, #7
		 device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 80008e2:	2100      	movs	r1, #0
		 device.Endpoints[0].MaxPacketSize = 64;
 80008e4:	811d      	strh	r5, [r3, #8]
		 device.Endpoints[0].InBufferLength = 256;
 80008e6:	6258      	str	r0, [r3, #36]	; 0x24
		 device.Endpoints[0].OutBufferLength = 256;
 80008e8:	6198      	str	r0, [r3, #24]
		 device.EP0_State = IDLE;
 80008ea:	f883 613b 	strb.w	r6, [r3, #315]	; 0x13b
		 device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 80008ee:	4608      	mov	r0, r1
 80008f0:	4623      	mov	r3, r4
 80008f2:	9401      	str	r4, [sp, #4]
}
 80008f4:	b003      	add	sp, #12
 80008f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		 device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 80008fa:	4718      	bx	r3
		 device.Driver->EndpointUnconfigure(0);
 80008fc:	4b36      	ldr	r3, [pc, #216]	; (80009d8 <USBD_SignalDeviceEventHandler+0x144>)
		 USB_DeviceState = DEVICE_STATE_Unattached;
 80008fe:	4a37      	ldr	r2, [pc, #220]	; (80009dc <USBD_SignalDeviceEventHandler+0x148>)
		 device.Driver->EndpointUnconfigure(0);
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	6a1b      	ldr	r3, [r3, #32]
		 USB_DeviceState = DEVICE_STATE_Unattached;
 8000904:	2000      	movs	r0, #0
 8000906:	7010      	strb	r0, [r2, #0]
}
 8000908:	b003      	add	sp, #12
 800090a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		 device.Driver->EndpointUnconfigure(0);
 800090e:	4718      	bx	r3
}
 8000910:	b003      	add	sp, #12
 8000912:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		EVENT_USB_Device_Connect();
 8000916:	f7ff bd65 	b.w	80003e4 <EVENT_USB_Device_Connect>
		USB_DeviceState = DEVICE_STATE_Powered;
 800091a:	4b30      	ldr	r3, [pc, #192]	; (80009dc <USBD_SignalDeviceEventHandler+0x148>)
 800091c:	2201      	movs	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
}
 8000920:	b003      	add	sp, #12
 8000922:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		EVENT_USB_Device_Disconnect();
 8000926:	f7ff bd5f 	b.w	80003e8 <EVENT_USB_Device_Disconnect>
		device.EP0_State = IDLE;
 800092a:	4d2b      	ldr	r5, [pc, #172]	; (80009d8 <USBD_SignalDeviceEventHandler+0x144>)
		USB_DeviceState = DEVICE_STATE_Default;
 800092c:	4a2b      	ldr	r2, [pc, #172]	; (80009dc <USBD_SignalDeviceEventHandler+0x148>)
		device.RemoteWakeUp = 0;
 800092e:	f895 313e 	ldrb.w	r3, [r5, #318]	; 0x13e
 8000932:	6829      	ldr	r1, [r5, #0]
 8000934:	f36f 0382 	bfc	r3, #2, #1
		device.EP0_State = IDLE;
 8000938:	2401      	movs	r4, #1
		USB_DeviceState = DEVICE_STATE_Default;
 800093a:	2002      	movs	r0, #2
		device.RemoteWakeUp = 0;
 800093c:	f885 313e 	strb.w	r3, [r5, #318]	; 0x13e
		device.EP0_State = IDLE;
 8000940:	f885 413b 	strb.w	r4, [r5, #315]	; 0x13b
		USB_DeviceState = DEVICE_STATE_Default;
 8000944:	7010      	strb	r0, [r2, #0]
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 8000946:	2300      	movs	r3, #0
			device.Endpoints[i].InInUse = 0;
 8000948:	262c      	movs	r6, #44	; 0x2c
 800094a:	fb06 5403 	mla	r4, r6, r3, r5
			if (i!=0 && device.Endpoints[i].IsConfigured) {
 800094e:	1c5f      	adds	r7, r3, #1
			device.Endpoints[i].InInUse = 0;
 8000950:	8922      	ldrh	r2, [r4, #8]
 8000952:	f36f 1204 	bfc	r2, #4, #1
 8000956:	8122      	strh	r2, [r4, #8]
			device.Endpoints[i].OutInUse = 0;
 8000958:	8922      	ldrh	r2, [r4, #8]
 800095a:	f36f 02c3 	bfc	r2, #3, #1
 800095e:	8122      	strh	r2, [r4, #8]
			device.Endpoints[i].IsHalted = 0;
 8000960:	7a22      	ldrb	r2, [r4, #8]
 8000962:	f36f 0282 	bfc	r2, #2, #1
 8000966:	7222      	strb	r2, [r4, #8]
			if (i!=0 && device.Endpoints[i].IsConfigured) {
 8000968:	b173      	cbz	r3, 8000988 <USBD_SignalDeviceEventHandler+0xf4>
 800096a:	b2d3      	uxtb	r3, r2
 800096c:	07db      	lsls	r3, r3, #31
 800096e:	d509      	bpl.n	8000984 <USBD_SignalDeviceEventHandler+0xf0>
				device.Driver->EndpointUnconfigure(device.Endpoints[i].Address);
 8000970:	6a0b      	ldr	r3, [r1, #32]
 8000972:	7920      	ldrb	r0, [r4, #4]
 8000974:	4798      	blx	r3
				device.Endpoints[i].IsConfigured = 0;
 8000976:	7a23      	ldrb	r3, [r4, #8]
 8000978:	6829      	ldr	r1, [r5, #0]
				device.Endpoints[i].IsEnabled = 0;
 800097a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800097e:	f36f 0341 	bfc	r3, #1, #1
 8000982:	7223      	strb	r3, [r4, #8]
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 8000984:	2f07      	cmp	r7, #7
 8000986:	d017      	beq.n	80009b8 <USBD_SignalDeviceEventHandler+0x124>
void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event) {
 8000988:	463b      	mov	r3, r7
 800098a:	e7de      	b.n	800094a <USBD_SignalDeviceEventHandler+0xb6>
		device.PreSuspendDeviceState = USB_DeviceState;
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <USBD_SignalDeviceEventHandler+0x148>)
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <USBD_SignalDeviceEventHandler+0x144>)
 8000990:	7819      	ldrb	r1, [r3, #0]
 8000992:	f882 113a 	strb.w	r1, [r2, #314]	; 0x13a
		USB_DeviceState = DEVICE_STATE_Suspended;
 8000996:	2205      	movs	r2, #5
 8000998:	701a      	strb	r2, [r3, #0]
}
 800099a:	b003      	add	sp, #12
 800099c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		EVENT_USB_Device_Suspend();
 80009a0:	f7ff bd66 	b.w	8000470 <EVENT_USB_Device_Suspend>
		USB_DeviceState = device.PreSuspendDeviceState;
 80009a4:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <USBD_SignalDeviceEventHandler+0x144>)
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <USBD_SignalDeviceEventHandler+0x148>)
 80009a8:	f892 213a 	ldrb.w	r2, [r2, #314]	; 0x13a
 80009ac:	701a      	strb	r2, [r3, #0]
}
 80009ae:	b003      	add	sp, #12
 80009b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		EVENT_USB_Device_WakeUp();
 80009b4:	f7ff bd5a 	b.w	800046c <EVENT_USB_Device_WakeUp>
			device.InterfaceSettings[i] = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8a5 3138 	strh.w	r3, [r5, #312]	; 0x138
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 80009be:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80009c0:	7928      	ldrb	r0, [r5, #4]
 80009c2:	2118      	movs	r1, #24
}
 80009c4:	b003      	add	sp, #12
 80009c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 80009ca:	4718      	bx	r3
}
 80009cc:	b003      	add	sp, #12
 80009ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		EVENT_USB_Device_StartOfFrame();
 80009d2:	f7ff bd49 	b.w	8000468 <EVENT_USB_Device_StartOfFrame>
 80009d6:	bf00      	nop
 80009d8:	20000764 	.word	0x20000764
 80009dc:	20000ab1 	.word	0x20000ab1
 80009e0:	08003db8 	.word	0x08003db8
 80009e4:	20000664 	.word	0x20000664
 80009e8:	20000564 	.word	0x20000564

080009ec <USBD_SignalEndpointEvent_Handler>:
 *
 * \param[in] ep_addr Endpoint address
 * \param[in] ep_event Endpoint event type
 *
 */
void USBD_SignalEndpointEvent_Handler (uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event) {
 80009ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	USBD_Endpoint_t *ep =  &device.Endpoints[ep_addr & ENDPOINT_EPNUM_MASK];
	uint8_t temp_num,temp_dir;
	int32_t data_count;
	/* store CurrentEndpoint and direction for restore after handling */
	temp_num = device.CurrentEndpoint;
 80009f0:	4c3e      	ldr	r4, [pc, #248]	; (8000aec <USBD_SignalEndpointEvent_Handler+0x100>)
 80009f2:	f000 030f 	and.w	r3, r0, #15
	temp_dir = device.CurrentDirection;
	/* select the given endpoint */
	device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
	device.CurrentDirection = ep_addr & ENDPOINT_DIR_MASK;
	/* choose what to do based on the event */
	switch (ep_event) {
 80009f6:	2901      	cmp	r1, #1
	device.CurrentDirection = ep_addr & ENDPOINT_DIR_MASK;
 80009f8:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
	temp_dir = device.CurrentDirection;
 80009fc:	f894 613d 	ldrb.w	r6, [r4, #317]	; 0x13d
	temp_num = device.CurrentEndpoint;
 8000a00:	f894 713c 	ldrb.w	r7, [r4, #316]	; 0x13c
	device.CurrentDirection = ep_addr & ENDPOINT_DIR_MASK;
 8000a04:	f884 013d 	strb.w	r0, [r4, #317]	; 0x13d
	USBD_Endpoint_t *ep =  &device.Endpoints[ep_addr & ENDPOINT_EPNUM_MASK];
 8000a08:	4698      	mov	r8, r3
	device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 8000a0a:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
	switch (ep_event) {
 8000a0e:	d04c      	beq.n	8000aaa <USBD_SignalEndpointEvent_Handler+0xbe>
 8000a10:	d33f      	bcc.n	8000a92 <USBD_SignalEndpointEvent_Handler+0xa6>
 8000a12:	2902      	cmp	r1, #2
 8000a14:	d137      	bne.n	8000a86 <USBD_SignalEndpointEvent_Handler+0x9a>
			break;
		}
		break;
	case XMC_USBD_EP_EVENT_IN:
		/* loop write transfers */
		if (ep->InDataLeft> 0) {
 8000a16:	252c      	movs	r5, #44	; 0x2c
 8000a18:	fb05 4503 	mla	r5, r5, r3, r4
 8000a1c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000a1e:	b162      	cbz	r2, 8000a3a <USBD_SignalEndpointEvent_Handler+0x4e>
			data_count = device.Driver->EndpointWrite(ep->Address,ep->InDataBuffer,ep->InDataLeft);
 8000a20:	6823      	ldr	r3, [r4, #0]
 8000a22:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	7928      	ldrb	r0, [r5, #4]
 8000a28:	4798      	blx	r3
			ep->InDataLeft -= data_count;
			ep->InDataBuffer+= data_count;
 8000a2a:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
			ep->InDataLeft -= data_count;
 8000a2e:	1a12      	subs	r2, r2, r0
			ep->InDataBuffer+= data_count;
 8000a30:	4403      	add	r3, r0
 8000a32:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
		}
		break;
	}
	device.CurrentEndpoint = temp_num;
	device.CurrentDirection = temp_dir;
}
 8000a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ep->Number == 0 && ep->InBytesAvailable > 0 && ep->InBytesAvailable!=USB_ControlRequest.wLength && ep->InBytesAvailable % ep->MaxPacketSize == 0) {
 8000a3a:	7928      	ldrb	r0, [r5, #4]
 8000a3c:	0702      	lsls	r2, r0, #28
 8000a3e:	d113      	bne.n	8000a68 <USBD_SignalEndpointEvent_Handler+0x7c>
 8000a40:	69ea      	ldr	r2, [r5, #28]
 8000a42:	b18a      	cbz	r2, 8000a68 <USBD_SignalEndpointEvent_Handler+0x7c>
 8000a44:	492a      	ldr	r1, [pc, #168]	; (8000af0 <USBD_SignalEndpointEvent_Handler+0x104>)
 8000a46:	88c9      	ldrh	r1, [r1, #6]
 8000a48:	428a      	cmp	r2, r1
 8000a4a:	d00d      	beq.n	8000a68 <USBD_SignalEndpointEvent_Handler+0x7c>
 8000a4c:	8929      	ldrh	r1, [r5, #8]
 8000a4e:	f3c1 1186 	ubfx	r1, r1, #6, #7
 8000a52:	fbb2 f5f1 	udiv	r5, r2, r1
 8000a56:	fb01 2215 	mls	r2, r1, r5, r2
 8000a5a:	b92a      	cbnz	r2, 8000a68 <USBD_SignalEndpointEvent_Handler+0x7c>
			device.Driver->EndpointWrite(ep->Address,0,0);
 8000a5c:	6823      	ldr	r3, [r4, #0]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4798      	blx	r3
 8000a64:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
		ep->InBytesAvailable = 0;
 8000a68:	222c      	movs	r2, #44	; 0x2c
 8000a6a:	fb02 4808 	mla	r8, r2, r8, r4
 8000a6e:	2100      	movs	r1, #0
		ep->InInUse = 0;
 8000a70:	f8b8 2008 	ldrh.w	r2, [r8, #8]
		ep->InBytesAvailable = 0;
 8000a74:	f8c8 101c 	str.w	r1, [r8, #28]
		ep->InInUse = 0;
 8000a78:	f361 1204 	bfi	r2, r1, #4, #1
 8000a7c:	f8a8 2008 	strh.w	r2, [r8, #8]
		switch(device.CurrentEndpoint) {
 8000a80:	b90b      	cbnz	r3, 8000a86 <USBD_SignalEndpointEvent_Handler+0x9a>
			USBD_HandleEP0_IN();
 8000a82:	f7ff fe91 	bl	80007a8 <USBD_HandleEP0_IN>
	device.CurrentEndpoint = temp_num;
 8000a86:	f884 713c 	strb.w	r7, [r4, #316]	; 0x13c
	device.CurrentDirection = temp_dir;
 8000a8a:	f884 613d 	strb.w	r6, [r4, #317]	; 0x13d
}
 8000a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep->OutInUse = 0;
 8000a92:	222c      	movs	r2, #44	; 0x2c
 8000a94:	fb02 4203 	mla	r2, r2, r3, r4
 8000a98:	8911      	ldrh	r1, [r2, #8]
 8000a9a:	f36f 01c3 	bfc	r1, #3, #1
 8000a9e:	8111      	strh	r1, [r2, #8]
		switch(device.CurrentEndpoint) {
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d1f0      	bne.n	8000a86 <USBD_SignalEndpointEvent_Handler+0x9a>
			USBD_HandleEP0_SETUP();
 8000aa4:	f7ff febc 	bl	8000820 <USBD_HandleEP0_SETUP>
			break;
 8000aa8:	e7ed      	b.n	8000a86 <USBD_SignalEndpointEvent_Handler+0x9a>
		ep->IsOutRecieved = 1;
 8000aaa:	252c      	movs	r5, #44	; 0x2c
 8000aac:	fb05 4503 	mla	r5, r5, r3, r4
 8000ab0:	892a      	ldrh	r2, [r5, #8]
		if (ep->OutBytesAvailable == 0) {
 8000ab2:	68e9      	ldr	r1, [r5, #12]
		ep->IsOutRecieved = 1;
 8000ab4:	f042 0220 	orr.w	r2, r2, #32
 8000ab8:	812a      	strh	r2, [r5, #8]
		if (ep->OutBytesAvailable == 0) {
 8000aba:	b949      	cbnz	r1, 8000ad0 <USBD_SignalEndpointEvent_Handler+0xe4>
			ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8000abc:	6823      	ldr	r3, [r4, #0]
			ep->OutOffset = 0; /* clear offset, new data is there */
 8000abe:	6129      	str	r1, [r5, #16]
			ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8000ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac2:	7928      	ldrb	r0, [r5, #4]
 8000ac4:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
 8000ac8:	4798      	blx	r3
 8000aca:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
 8000ace:	60e8      	str	r0, [r5, #12]
		ep->OutInUse = 0;
 8000ad0:	222c      	movs	r2, #44	; 0x2c
 8000ad2:	fb02 4808 	mla	r8, r2, r8, r4
 8000ad6:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8000ada:	f36f 02c3 	bfc	r2, #3, #1
 8000ade:	f8a8 2008 	strh.w	r2, [r8, #8]
		switch(device.CurrentEndpoint) {
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1cf      	bne.n	8000a86 <USBD_SignalEndpointEvent_Handler+0x9a>
			USBD_HandleEP0_OUT();
 8000ae6:	f7ff fe7b 	bl	80007e0 <USBD_HandleEP0_OUT>
			break;
 8000aea:	e7cc      	b.n	8000a86 <USBD_SignalEndpointEvent_Handler+0x9a>
 8000aec:	20000764 	.word	0x20000764
 8000af0:	20000ab4 	.word	0x20000ab4

08000af4 <USBD_Initialize>:
 * \brief Initialize driver core and driver
 *
 * Intializes the USB driver core data structures and sets it into default state. Afterwards
 * it initializes the USB device controller driver and prepare it for connection via \ref USBD_Connect.
 */
int USBD_Initialize(XMC_USBD_t *usb_init) {
 8000af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int32_t status = 0;
	memset(&device,0x0,sizeof(USB_Device_t));
 8000af8:	4c17      	ldr	r4, [pc, #92]	; (8000b58 <USBD_Initialize+0x64>)
	USB_DeviceState = DEVICE_STATE_Unattached;
 8000afa:	4f18      	ldr	r7, [pc, #96]	; (8000b5c <USBD_Initialize+0x68>)
int USBD_Initialize(XMC_USBD_t *usb_init) {
 8000afc:	4680      	mov	r8, r0
	memset(&device,0x0,sizeof(USB_Device_t));
 8000afe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b02:	2100      	movs	r1, #0
 8000b04:	4620      	mov	r0, r4
 8000b06:	f002 fff5 	bl	8003af4 <memset>
	device.Endpoints[0].InBufferLength = 256;
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
	device.Endpoints[0].OutBufferLength = 256;
	device.Endpoints[0].Direction = 0;
	device.Endpoints[0].IsConfigured = 1;
	device.Endpoints[0].IsEnabled = 1;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	7223      	strb	r3, [r4, #8]
	device.Endpoints[0].MaxPacketSize = 64;
 8000b0e:	8925      	ldrh	r5, [r4, #8]
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <USBD_Initialize+0x6c>)
 8000b12:	6223      	str	r3, [r4, #32]
	device.Endpoints[0].MaxPacketSize = 64;
 8000b14:	2640      	movs	r6, #64	; 0x40
	device.EP0_State = IDLE;
 8000b16:	2301      	movs	r3, #1
	device.Driver = &Driver_USBD0;
 8000b18:	4912      	ldr	r1, [pc, #72]	; (8000b64 <USBD_Initialize+0x70>)
	device.EP0_State = IDLE;
 8000b1a:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	device.Endpoints[0].MaxPacketSize = 64;
 8000b1e:	f366 158c 	bfi	r5, r6, #6, #7
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <USBD_Initialize+0x74>)
	device.Endpoints[0].MaxPacketSize = 64;
 8000b24:	8125      	strh	r5, [r4, #8]
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8000b26:	6163      	str	r3, [r4, #20]
	USB_DeviceState = DEVICE_STATE_Unattached;
 8000b28:	2500      	movs	r5, #0
	device.Endpoints[0].InBufferLength = 256;
 8000b2a:	f44f 7380 	mov.w	r3, #256	; 0x100

	/* First initalize the device */
	status = device.Driver->Initialize(usb_init);
 8000b2e:	4640      	mov	r0, r8
	device.Driver = &Driver_USBD0;
 8000b30:	6021      	str	r1, [r4, #0]
	status = device.Driver->Initialize(usb_init);
 8000b32:	684a      	ldr	r2, [r1, #4]
	device.Endpoints[0].InBufferLength = 256;
 8000b34:	6263      	str	r3, [r4, #36]	; 0x24
	device.Endpoints[0].OutBufferLength = 256;
 8000b36:	61a3      	str	r3, [r4, #24]
	USB_DeviceState = DEVICE_STATE_Unattached;
 8000b38:	703d      	strb	r5, [r7, #0]
	status = device.Driver->Initialize(usb_init);
 8000b3a:	4790      	blx	r2
	if (status != XMC_USBD_STATUS_OK)
 8000b3c:	b940      	cbnz	r0, 8000b50 <USBD_Initialize+0x5c>
		return -1;

	/* then configure endpoint 0 */
	device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8000b3e:	6823      	ldr	r3, [r4, #0]
 8000b40:	4605      	mov	r5, r0
 8000b42:	4632      	mov	r2, r6
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	4601      	mov	r1, r0
 8000b48:	4798      	blx	r3
	if (status != XMC_USBD_STATUS_OK) {
		device.Driver->Uninitialize();
		return -1;
	}

	return 0;
 8000b4a:	4628      	mov	r0, r5
}
 8000b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b54:	e7fa      	b.n	8000b4c <USBD_Initialize+0x58>
 8000b56:	bf00      	nop
 8000b58:	20000764 	.word	0x20000764
 8000b5c:	20000ab1 	.word	0x20000ab1
 8000b60:	20000564 	.word	0x20000564
 8000b64:	08003db8 	.word	0x08003db8
 8000b68:	20000664 	.word	0x20000664

08000b6c <USB_IsEnumDone>:
/**
 * \brief Is the enumeration finished?
 *
 * Tell the USB device controller driver if the enumeration interrupt have been reached
 */
int USB_IsEnumDone(void){
 8000b6c:	b508      	push	{r3, lr}
	if (device.Driver->IsEnumDone())
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <USB_IsEnumDone+0x14>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b74:	4798      	blx	r3
		return 1;
	else
		return 0;
 }
 8000b76:	3000      	adds	r0, #0
 8000b78:	bf18      	it	ne
 8000b7a:	2001      	movne	r0, #1
 8000b7c:	bd08      	pop	{r3, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000764 	.word	0x20000764

08000b84 <USBD_SetEndpointBuffer>:
 * \param[in] buf Buffer pointer
 * \param[in] len Buffer length
 */
void USBD_SetEndpointBuffer(uint8_t addr,uint8_t *buf,uint16_t len) {
	uint8_t number  = addr & ENDPOINT_EPNUM_MASK;
	if (addr & ENDPOINT_DIR_MASK) {
 8000b84:	f010 0f80 	tst.w	r0, #128	; 0x80
 8000b88:	f000 030f 	and.w	r3, r0, #15
		device.Endpoints[number].InBuffer = buf;
 8000b8c:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <USBD_SetEndpointBuffer+0x24>)
void USBD_SetEndpointBuffer(uint8_t addr,uint8_t *buf,uint16_t len) {
 8000b8e:	b410      	push	{r4}
		device.Endpoints[number].InBuffer = buf;
 8000b90:	f04f 042c 	mov.w	r4, #44	; 0x2c
 8000b94:	fb04 0303 	mla	r3, r4, r3, r0
		device.Endpoints[number].InBufferLength = len;
 8000b98:	bf14      	ite	ne
 8000b9a:	e9c3 1208 	strdne	r1, r2, [r3, #32]
	} else {
		device.Endpoints[number].OutBuffer = buf;
		device.Endpoints[number].OutBufferLength = len;
 8000b9e:	e9c3 1205 	strdeq	r1, r2, [r3, #20]
	}
}
 8000ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	20000764 	.word	0x20000764

08000bac <XMC_USBD_lStartReadXfer>:
{
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8000bac:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8000bae:	6882      	ldr	r2, [r0, #8]
{
 8000bb0:	b430      	push	{r4, r5}
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8000bb2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000bb4:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8000bb8:	1a65      	subs	r5, r4, r1
 8000bba:	4295      	cmp	r5, r2
  {
    ep->xferLength += ep->maxTransferSize;
 8000bbc:	bf84      	itt	hi
 8000bbe:	1852      	addhi	r2, r2, r1
 8000bc0:	6282      	strhi	r2, [r0, #40]	; 0x28
  }
  else
  {
    ep->xferLength = ep->xferTotal;
  }
  if (ep->address_u.address_st.number == 0U)
 8000bc2:	7802      	ldrb	r2, [r0, #0]
    ep->xferLength = ep->xferTotal;
 8000bc4:	bf98      	it	ls
 8000bc6:	6284      	strls	r4, [r0, #40]	; 0x28
  if (ep->address_u.address_st.number == 0U)
 8000bc8:	0711      	lsls	r1, r2, #28
  data.d32 =  0U;
 8000bca:	f04f 0300 	mov.w	r3, #0
  if (ep->address_u.address_st.number == 0U)
 8000bce:	d11a      	bne.n	8000c06 <XMC_USBD_lStartReadXfer+0x5a>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
    ep0_data->b.pktcnt = 0x1U;
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	f361 43d4 	bfi	r3, r1, #19, #2
    ep0_data->b.supcnt = 0x3U;
 8000bd6:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 8000bda:	f364 0306 	bfi	r3, r4, #0, #7
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8000bde:	4c15      	ldr	r4, [pc, #84]	; (8000c34 <XMC_USBD_lStartReadXfer+0x88>)
 8000be0:	4915      	ldr	r1, [pc, #84]	; (8000c38 <XMC_USBD_lStartReadXfer+0x8c>)
 8000be2:	6824      	ldr	r4, [r4, #0]
 8000be4:	f002 020f 	and.w	r2, r2, #15
 8000be8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8000bec:	7b61      	ldrb	r1, [r4, #13]
 8000bee:	f8d2 21c4 	ldr.w	r2, [r2, #452]	; 0x1c4
 8000bf2:	b909      	cbnz	r1, 8000bf8 <XMC_USBD_lStartReadXfer+0x4c>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 8000bf4:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8000bf6:	6151      	str	r1, [r2, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 8000bf8:	6113      	str	r3, [r2, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000bfa:	6813      	ldr	r3, [r2, #0]
  epctl.b.cnak = 1U;
  epctl.b.epena = 1U;
 8000bfc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 8000c00:	6013      	str	r3, [r2, #0]
}
 8000c02:	bc30      	pop	{r4, r5}
 8000c04:	4770      	bx	lr
    if (ep->xferLength == 0U)
 8000c06:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8000c08:	b929      	cbnz	r1, 8000c16 <XMC_USBD_lStartReadXfer+0x6a>
      data.b.xfersize = 0U;
 8000c0a:	f361 0312 	bfi	r3, r1, #0, #19
      data.b.pktcnt = 1U;
 8000c0e:	2101      	movs	r1, #1
 8000c10:	f361 43dc 	bfi	r3, r1, #19, #10
 8000c14:	e7e3      	b.n	8000bde <XMC_USBD_lStartReadXfer+0x32>
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8000c16:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000c18:	6844      	ldr	r4, [r0, #4]
 8000c1a:	1b49      	subs	r1, r1, r5
 8000c1c:	f3c4 25c6 	ubfx	r5, r4, #11, #7
 8000c20:	194c      	adds	r4, r1, r5
 8000c22:	3c01      	subs	r4, #1
 8000c24:	fbb4 f4f5 	udiv	r4, r4, r5
 8000c28:	f364 43dc 	bfi	r3, r4, #19, #10
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8000c2c:	f361 0312 	bfi	r3, r1, #0, #19
 8000c30:	e7d5      	b.n	8000bde <XMC_USBD_lStartReadXfer+0x32>
 8000c32:	bf00      	nop
 8000c34:	200008a4 	.word	0x200008a4
 8000c38:	200008a8 	.word	0x200008a8

08000c3c <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 8000c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000c40:	7806      	ldrb	r6, [r0, #0]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8000c42:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000c44:	f8d0 e028 	ldr.w	lr, [r0, #40]	; 0x28
 8000c48:	6882      	ldr	r2, [r0, #8]
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000c4a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8000d00 <XMC_USBD_lStartWriteXfer+0xc4>
 8000c4e:	f006 070f 	and.w	r7, r6, #15
 8000c52:	f107 016a 	add.w	r1, r7, #106	; 0x6a
  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8000c56:	eba3 080e 	sub.w	r8, r3, lr
 8000c5a:	f3c2 0212 	ubfx	r2, r2, #0, #19
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000c5e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8000c62:	4590      	cmp	r8, r2
  {
    ep->xferLength = ep->xferTotal;
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 8000c64:	bf28      	it	cs
 8000c66:	eb0e 0302 	addcs.w	r3, lr, r2
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000c6a:	680c      	ldr	r4, [r1, #0]
    ep->xferLength += ep->maxTransferSize;
 8000c6c:	6283      	str	r3, [r0, #40]	; 0x28
  size.d32 = 0U;  
 8000c6e:	2500      	movs	r5, #0
  }
  if (ep->xferLength == 0U)
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d037      	beq.n	8000ce4 <XMC_USBD_lStartWriteXfer+0xa8>
 8000c74:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000c76:	1a9b      	subs	r3, r3, r2
    size.b.xfersize = 0U;
    size.b.pktcnt = 1U;
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 8000c78:	0732      	lsls	r2, r6, #28
 8000c7a:	f3c3 0e12 	ubfx	lr, r3, #0, #19
 8000c7e:	d018      	beq.n	8000cb2 <XMC_USBD_lStartWriteXfer+0x76>
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8000c80:	6842      	ldr	r2, [r0, #4]
 8000c82:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8000c86:	1e56      	subs	r6, r2, #1
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8000c88:	f36e 0512 	bfi	r5, lr, #0, #19
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8000c8c:	b2b6      	uxth	r6, r6
 8000c8e:	fa16 f383 	uxtah	r3, r6, r3
 8000c92:	fb93 f3f2 	sdiv	r3, r3, r2
 8000c96:	f363 45dc 	bfi	r5, r3, #19, #10
    		 ep->maxPacketSize);
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <XMC_USBD_lStartWriteXfer+0xc0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	7b5b      	ldrb	r3, [r3, #13]
 8000ca0:	b98b      	cbnz	r3, 8000cc6 <XMC_USBD_lStartWriteXfer+0x8a>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 8000ca2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ca4:	614b      	str	r3, [r1, #20]
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
  ctl.b.epena = 1U;
  ctl.b.cnak = 1U;
 8000ca6:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8000caa:	610d      	str	r5, [r1, #16]
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 8000cac:	600c      	str	r4, [r1, #0]
}
 8000cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      size.b.pktcnt = 1U;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	f363 45dc 	bfi	r5, r3, #19, #10
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8000cb8:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <XMC_USBD_lStartWriteXfer+0xc0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	7b5b      	ldrb	r3, [r3, #13]
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8000cbe:	f36e 0512 	bfi	r5, lr, #0, #19
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0ed      	beq.n	8000ca2 <XMC_USBD_lStartWriteXfer+0x66>
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d1ed      	bne.n	8000ca6 <XMC_USBD_lStartWriteXfer+0x6a>
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8000cca:	f8dc 21a4 	ldr.w	r2, [ip, #420]	; 0x1a4
 8000cce:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8000cd0:	fa03 f707 	lsl.w	r7, r3, r7
 8000cd4:	4307      	orrs	r7, r0
  ctl.b.cnak = 1U;
 8000cd6:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8000cda:	6357      	str	r7, [r2, #52]	; 0x34
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8000cdc:	610d      	str	r5, [r1, #16]
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 8000cde:	600c      	str	r4, [r1, #0]
}
 8000ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size.b.xfersize = 0U;
 8000ce4:	f363 0512 	bfi	r5, r3, #0, #19
    size.b.pktcnt = 1U;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	f363 45dc 	bfi	r5, r3, #19, #10
  ctl.b.cnak = 1U;
 8000cee:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8000cf2:	610d      	str	r5, [r1, #16]
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 8000cf4:	600c      	str	r4, [r1, #0]
}
 8000cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200008a4 	.word	0x200008a4
 8000d00:	200008a8 	.word	0x200008a8

08000d04 <XMC_USBD_GetCapabilities>:
  cap.event_reset = 1U;
  cap.event_resume = 1U;
  cap.event_suspend = 1U;
  cap.reserved = 0U;
  return cap;
}
 8000d04:	f240 10df 	movw	r0, #479	; 0x1df
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <XMC_USBD_DeviceConnect>:
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <XMC_USBD_DeviceConnect+0x14>)
 8000d0e:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8000d12:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 0U;
 8000d14:	f36f 0341 	bfc	r3, #1, #1
  xmc_device.device_register->dctl = dctl.d32;
 8000d18:	6053      	str	r3, [r2, #4]
  return XMC_USBD_STATUS_OK;
}
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	200008a8 	.word	0x200008a8

08000d24 <XMC_USBD_DeviceDisconnect>:
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <XMC_USBD_DeviceDisconnect+0x14>)
 8000d26:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8000d2a:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 1U;
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
  xmc_device.device_register->dctl = dctl.d32;
 8000d30:	6053      	str	r3, [r2, #4]
  return XMC_USBD_STATUS_OK;
}
 8000d32:	2000      	movs	r0, #0
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	200008a8 	.word	0x200008a8

08000d3c <XMC_USBD_DeviceGetState>:

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
 8000d3c:	b4f0      	push	{r4, r5, r6, r7}
  XMC_USBD_STATE_t state={0U};
  state.speed = XMC_USBD_SPEED_FULL;
  state.connected = xmc_device.IsConnected;
 8000d3e:	4d19      	ldr	r5, [pc, #100]	; (8000da4 <XMC_USBD_DeviceGetState+0x68>)
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000d40:	7b06      	ldrb	r6, [r0, #12]
  state.connected = xmc_device.IsConnected;
 8000d42:	f895 c1fe 	ldrb.w	ip, [r5, #510]	; 0x1fe
  XMC_USBD_STATE_t state={0U};
 8000d46:	2000      	movs	r0, #0
  state.connected = xmc_device.IsConnected;
 8000d48:	f00c 0c01 	and.w	ip, ip, #1
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000d4c:	b346      	cbz	r6, 8000da0 <XMC_USBD_DeviceGetState+0x64>
 8000d4e:	4603      	mov	r3, r0
  uint8_t result = 0U;
 8000d50:	4601      	mov	r1, r0
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000d52:	2734      	movs	r7, #52	; 0x34
 8000d54:	e008      	b.n	8000d68 <XMC_USBD_DeviceGetState+0x2c>
 8000d56:	6852      	ldr	r2, [r2, #4]
 8000d58:	3301      	adds	r3, #1
      result = 1U;
 8000d5a:	f012 0f10 	tst.w	r2, #16
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000d5e:	b2da      	uxtb	r2, r3
      result = 1U;
 8000d60:	bf18      	it	ne
 8000d62:	2101      	movne	r1, #1
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000d64:	42b2      	cmp	r2, r6
 8000d66:	d20a      	bcs.n	8000d7e <XMC_USBD_DeviceGetState+0x42>
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000d68:	fb07 5203 	mla	r2, r7, r3, r5
 8000d6c:	6854      	ldr	r4, [r2, #4]
 8000d6e:	0724      	lsls	r4, r4, #28
 8000d70:	d5f1      	bpl.n	8000d56 <XMC_USBD_DeviceGetState+0x1a>
 8000d72:	3301      	adds	r3, #1
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	42b2      	cmp	r2, r6
      result = 1U;
 8000d78:	f04f 0101 	mov.w	r1, #1
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000d7c:	d3f4      	bcc.n	8000d68 <XMC_USBD_DeviceGetState+0x2c>
 8000d7e:	f001 0101 	and.w	r1, r1, #1
  state.active = XMC_USBD_lDeviceActive(obj);
  state.powered = xmc_device.IsPowered;
 8000d82:	f895 31fe 	ldrb.w	r3, [r5, #510]	; 0x1fe
 8000d86:	f3c3 0380 	ubfx	r3, r3, #2, #1
  return state;
 8000d8a:	f363 0000 	bfi	r0, r3, #0, #1
 8000d8e:	f36c 0041 	bfi	r0, ip, #1, #1
 8000d92:	f361 0082 	bfi	r0, r1, #2, #1
 8000d96:	2301      	movs	r3, #1
 8000d98:	f363 00c4 	bfi	r0, r3, #3, #2
}
 8000d9c:	bcf0      	pop	{r4, r5, r6, r7}
 8000d9e:	4770      	bx	lr
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000da0:	4601      	mov	r1, r0
 8000da2:	e7ee      	b.n	8000d82 <XMC_USBD_DeviceGetState+0x46>
 8000da4:	200008a8 	.word	0x200008a8

08000da8 <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 8000da8:	b570      	push	{r4, r5, r6, lr}
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 8000daa:	4a11      	ldr	r2, [pc, #68]	; (8000df0 <XMC_USBD_EndpointReadStart+0x48>)
 8000dac:	f000 000f 	and.w	r0, r0, #15
 8000db0:	2334      	movs	r3, #52	; 0x34
 8000db2:	fb03 2300 	mla	r3, r3, r0, r2
 8000db6:	685c      	ldr	r4, [r3, #4]
 8000db8:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000dbc:	b9b4      	cbnz	r4, 8000dec <XMC_USBD_EndpointReadStart+0x44>
 8000dbe:	791d      	ldrb	r5, [r3, #4]
 8000dc0:	076d      	lsls	r5, r5, #29
 8000dc2:	d513      	bpl.n	8000dec <XMC_USBD_EndpointReadStart+0x44>
    if (size > ep->outBufferSize)
    {
      size = ep->outBufferSize;
    }
    /* set ep values */
    ep->xferTotal = size;
 8000dc4:	695e      	ldr	r6, [r3, #20]
    ep->xferCount = 0U;
    ep->xferLength = 0U;
    ep->xferBuffer = ep->outBuffer;
 8000dc6:	68dd      	ldr	r5, [r3, #12]
    ep->xferCount = 0U;
 8000dc8:	62dc      	str	r4, [r3, #44]	; 0x2c
    ep->xferTotal = size;
 8000dca:	42b1      	cmp	r1, r6
 8000dcc:	bf28      	it	cs
 8000dce:	4631      	movcs	r1, r6
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8000dd0:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 8000dd4:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    ep->outBytesAvailable = 0U;
    XMC_USBD_lStartReadXfer(ep);
 8000dd8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    ep->xferLength = 0U;
 8000ddc:	629c      	str	r4, [r3, #40]	; 0x28
    ep->outBytesAvailable = 0U;
 8000dde:	611c      	str	r4, [r3, #16]
    ep->xferTotal = size;
 8000de0:	6319      	str	r1, [r3, #48]	; 0x30
    ep->xferBuffer = ep->outBuffer;
 8000de2:	625d      	str	r5, [r3, #36]	; 0x24
    XMC_USBD_lStartReadXfer(ep);
 8000de4:	f7ff fee2 	bl	8000bac <XMC_USBD_lStartReadXfer>
    result= XMC_USBD_STATUS_OK;
 8000de8:	4620      	mov	r0, r4
  }
  return result;
}
 8000dea:	bd70      	pop	{r4, r5, r6, pc}
    result = XMC_USBD_STATUS_ERROR;
 8000dec:	2001      	movs	r0, #1
}
 8000dee:	bd70      	pop	{r4, r5, r6, pc}
 8000df0:	200008a8 	.word	0x200008a8

08000df4 <XMC_USBD_DeviceSetAddress>:
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <XMC_USBD_DeviceSetAddress+0x14>)
 8000df6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000dfa:	681a      	ldr	r2, [r3, #0]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 8000dfc:	b911      	cbnz	r1, 8000e04 <XMC_USBD_DeviceSetAddress+0x10>
  {
    data.b.devaddr = address;
 8000dfe:	f360 120a 	bfi	r2, r0, #4, #7
    xmc_device.device_register->dcfg = data.d32;
 8000e02:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
}
 8000e04:	2000      	movs	r0, #0
 8000e06:	4770      	bx	lr
 8000e08:	200008a8 	.word	0x200008a8

08000e0c <XMC_USBD_EndpointStall>:
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 8000e0c:	f000 020f 	and.w	r2, r0, #15
 8000e10:	2334      	movs	r3, #52	; 0x34
{
 8000e12:	b410      	push	{r4}
 8000e14:	fb03 f302 	mul.w	r3, r3, r2
 8000e18:	4c1b      	ldr	r4, [pc, #108]	; (8000e88 <XMC_USBD_EndpointStall+0x7c>)
 8000e1a:	5ce3      	ldrb	r3, [r4, r3]
 8000e1c:	b240      	sxtb	r0, r0
 8000e1e:	f003 030f 	and.w	r3, r3, #15
  if (stall)
 8000e22:	b1b9      	cbz	r1, 8000e54 <XMC_USBD_EndpointStall+0x48>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8000e24:	2800      	cmp	r0, #0
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000e26:	bfab      	itete	ge
 8000e28:	eb04 0383 	addge.w	r3, r4, r3, lsl #2
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000e2c:	336a      	addlt	r3, #106	; 0x6a
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000e2e:	f8d3 11c4 	ldrge.w	r1, [r3, #452]	; 0x1c4
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000e32:	f854 1023 	ldrlt.w	r1, [r4, r3, lsl #2]
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000e36:	680b      	ldr	r3, [r1, #0]
      data.b.stall = 1U;
 8000e38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8000e3c:	600b      	str	r3, [r1, #0]
    }
    ep->isStalled = 1U;
 8000e3e:	2334      	movs	r3, #52	; 0x34
 8000e40:	fb03 4202 	mla	r2, r3, r2, r4
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
		}
		ep->isStalled = 0U;
	}
	return XMC_USBD_STATUS_OK;
}
 8000e44:	2000      	movs	r0, #0
    ep->isStalled = 1U;
 8000e46:	7913      	ldrb	r3, [r2, #4]
}
 8000e48:	f85d 4b04 	ldr.w	r4, [sp], #4
    ep->isStalled = 1U;
 8000e4c:	f043 0320 	orr.w	r3, r3, #32
 8000e50:	7113      	strb	r3, [r2, #4]
}
 8000e52:	4770      	bx	lr
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8000e54:	2800      	cmp	r0, #0
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000e56:	bfab      	itete	ge
 8000e58:	eb04 0383 	addge.w	r3, r4, r3, lsl #2
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000e5c:	336a      	addlt	r3, #106	; 0x6a
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000e5e:	f8d3 01c4 	ldrge.w	r0, [r3, #452]	; 0x1c4
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000e62:	f854 0023 	ldrlt.w	r0, [r4, r3, lsl #2]
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000e66:	6803      	ldr	r3, [r0, #0]
			data.b.stall = 0U;
 8000e68:	f361 5355 	bfi	r3, r1, #21, #1
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8000e70:	6003      	str	r3, [r0, #0]
		ep->isStalled = 0U;
 8000e72:	2334      	movs	r3, #52	; 0x34
 8000e74:	fb03 4202 	mla	r2, r3, r2, r4
}
 8000e78:	2000      	movs	r0, #0
		ep->isStalled = 0U;
 8000e7a:	7913      	ldrb	r3, [r2, #4]
}
 8000e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
		ep->isStalled = 0U;
 8000e80:	f36f 1345 	bfc	r3, #5, #1
 8000e84:	7113      	strb	r3, [r2, #4]
}
 8000e86:	4770      	bx	lr
 8000e88:	200008a8 	.word	0x200008a8

08000e8c <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8000e8c:	f000 000f 	and.w	r0, r0, #15
  if (ep->address_u.address_st.direction)
 8000e90:	2234      	movs	r2, #52	; 0x34
 8000e92:	fb02 f200 	mul.w	r2, r2, r0
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <XMC_USBD_EndpointAbort+0x3c>)
 8000e98:	5699      	ldrsb	r1, [r3, r2]
 8000e9a:	441a      	add	r2, r3
 8000e9c:	2900      	cmp	r1, #0
  {
    ep->inInUse = 0U;
 8000e9e:	6851      	ldr	r1, [r2, #4]
 8000ea0:	bfb4      	ite	lt
 8000ea2:	f36f 01c3 	bfclt	r1, #3, #1
  }
  if (!ep->address_u.address_st.direction)
  {
    ep->outInUse = 0U;
 8000ea6:	f36f 1104 	bfcge	r1, #4, #1
 8000eaa:	6051      	str	r1, [r2, #4]
  }
  ep->isStalled = 0U;
 8000eac:	2234      	movs	r2, #52	; 0x34
 8000eae:	fb02 3300 	mla	r3, r2, r0, r3
  ep->outBytesAvailable = 0U;
 8000eb2:	2000      	movs	r0, #0
  ep->isStalled = 0U;
 8000eb4:	791a      	ldrb	r2, [r3, #4]
  ep->outBytesAvailable = 0U;
 8000eb6:	6118      	str	r0, [r3, #16]
  ep->isStalled = 0U;
 8000eb8:	f36f 1245 	bfc	r2, #5, #1
 8000ebc:	711a      	strb	r2, [r3, #4]
  ep->outOffset = 0U;
 8000ebe:	6198      	str	r0, [r3, #24]
  ep->xferLength = 0U;
  ep->xferCount = 0U;
 8000ec0:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
  ep->xferTotal = 0U;
 8000ec4:	6318      	str	r0, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
}
 8000ec6:	4770      	bx	lr
 8000ec8:	200008a8 	.word	0x200008a8

08000ecc <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 8000ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8000ed0:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <XMC_USBD_EndpointUnconfigure+0xf4>)
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8000ed2:	f000 000f 	and.w	r0, r0, #15
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
  /* if not configured return an error */
  if (!ep->isConfigured)
 8000ed6:	2134      	movs	r1, #52	; 0x34
 8000ed8:	fb01 f100 	mul.w	r1, r1, r0
 8000edc:	185a      	adds	r2, r3, r1
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8000ede:	f8d3 61a4 	ldr.w	r6, [r3, #420]	; 0x1a4
  if (!ep->isConfigured)
 8000ee2:	7914      	ldrb	r4, [r2, #4]
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8000ee4:	f8d6 e01c 	ldr.w	lr, [r6, #28]
  if (!ep->isConfigured)
 8000ee8:	0765      	lsls	r5, r4, #29
 8000eea:	d54a      	bpl.n	8000f82 <XMC_USBD_EndpointUnconfigure+0xb6>
    data.b.usbactep = 0U;
    data.b.epdis =  1U;
    data.b.snak =  1U;
    data.b.stall =  0U;
    ep->isConfigured =  0U;
    ep->isStalled =  0U;
 8000eec:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
 8000ef0:	f36f 1445 	bfc	r4, #5, #1
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8000ef4:	f813 8001 	ldrb.w	r8, [r3, r1]
    ep->isStalled =  0U;
 8000ef8:	7114      	strb	r4, [r2, #4]
    ep->outInUse =  0U;
 8000efa:	6854      	ldr	r4, [r2, #4]
 8000efc:	f36f 1404 	bfc	r4, #4, #1
 8000f00:	6054      	str	r4, [r2, #4]
    ep->inInUse =  0U;
 8000f02:	6854      	ldr	r4, [r2, #4]
 8000f04:	f36f 04c3 	bfc	r4, #3, #1
 8000f08:	6054      	str	r4, [r2, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8000f0a:	f913 9001 	ldrsb.w	r9, [r3, r1]
 8000f0e:	f04f 0c00 	mov.w	ip, #0
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8000f12:	f008 080f 	and.w	r8, r8, #15
 8000f16:	2501      	movs	r5, #1
    data.b.usbactep = 0U;
 8000f18:	f36c 3ccf 	bfi	ip, ip, #15, #1
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8000f1c:	fa05 f108 	lsl.w	r1, r5, r8
    data.b.snak =  1U;
 8000f20:	f04c 4c90 	orr.w	ip, ip, #1207959552	; 0x48000000
 8000f24:	43c9      	mvns	r1, r1
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8000f26:	f1b9 0f00 	cmp.w	r9, #0
 8000f2a:	4677      	mov	r7, lr
    data.b.stall =  0U;
 8000f2c:	f36f 5c55 	bfc	ip, #21, #1
 8000f30:	b28c      	uxth	r4, r1
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8000f32:	db29      	blt.n	8000f88 <XMC_USBD_EndpointUnconfigure+0xbc>
 8000f34:	7912      	ldrb	r2, [r2, #4]
 8000f36:	0792      	lsls	r2, r2, #30
 8000f38:	d036      	beq.n	8000fa8 <XMC_USBD_EndpointUnconfigure+0xdc>
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8000f3a:	4a22      	ldr	r2, [pc, #136]	; (8000fc4 <XMC_USBD_EndpointUnconfigure+0xf8>)
 8000f3c:	6812      	ldr	r2, [r2, #0]
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8000f3e:	eb03 0888 	add.w	r8, r3, r8, lsl #2
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8000f42:	7b52      	ldrb	r2, [r2, #13]
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8000f44:	f8d8 51c4 	ldr.w	r5, [r8, #452]	; 0x1c4
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 8000f48:	ea04 441e 	and.w	r4, r4, lr, lsr #16
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8000f4c:	2a01      	cmp	r2, #1
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8000f4e:	f8c5 c000 	str.w	ip, [r5]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 8000f52:	f364 471f 	bfi	r7, r4, #16, #16
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8000f56:	d102      	bne.n	8000f5e <XMC_USBD_EndpointUnconfigure+0x92>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 8000f58:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8000f5a:	4011      	ands	r1, r2
 8000f5c:	6371      	str	r1, [r6, #52]	; 0x34
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8000f5e:	2234      	movs	r2, #52	; 0x34
 8000f60:	fb02 3000 	mla	r0, r2, r0, r3
    xmc_device.device_register->daintmsk = daintmsk.d32;
 8000f64:	61f7      	str	r7, [r6, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8000f66:	8881      	ldrh	r1, [r0, #4]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 8000f68:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8000f6c:	f3c1 1083 	ubfx	r0, r1, #6, #4
 8000f70:	2101      	movs	r1, #1
 8000f72:	4081      	lsls	r1, r0
 8000f74:	ea22 0201 	bic.w	r2, r2, r1
 8000f78:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result = XMC_USBD_STATUS_OK;
 8000f7c:	2000      	movs	r0, #0
  }
  return result;
}
 8000f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     result = XMC_USBD_STATUS_ERROR;
 8000f82:	2001      	movs	r0, #1
}
 8000f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8000f88:	f108 096a 	add.w	r9, r8, #106	; 0x6a
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8000f8c:	ea04 050e 	and.w	r5, r4, lr
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8000f90:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 8000f94:	f8c9 c000 	str.w	ip, [r9]
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8000f98:	f892 9004 	ldrb.w	r9, [r2, #4]
 8000f9c:	f019 0f03 	tst.w	r9, #3
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8000fa0:	f365 070f 	bfi	r7, r5, #0, #16
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8000fa4:	d0c9      	beq.n	8000f3a <XMC_USBD_EndpointUnconfigure+0x6e>
 8000fa6:	e7da      	b.n	8000f5e <XMC_USBD_EndpointUnconfigure+0x92>
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8000fa8:	f108 056a 	add.w	r5, r8, #106	; 0x6a
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8000fac:	ea04 020e 	and.w	r2, r4, lr
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8000fb0:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8000fb4:	f362 070f 	bfi	r7, r2, #0, #16
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8000fb8:	f8c5 c000 	str.w	ip, [r5]
 8000fbc:	e7bd      	b.n	8000f3a <XMC_USBD_EndpointUnconfigure+0x6e>
 8000fbe:	bf00      	nop
 8000fc0:	200008a8 	.word	0x200008a8
 8000fc4:	200008a4 	.word	0x200008a4

08000fc8 <XMC_USBD_GetFrameNumber>:
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <XMC_USBD_GetFrameNumber+0x10>)
 8000fca:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000fce:	6898      	ldr	r0, [r3, #8]
  result = (uint16_t)dsts.b.soffn;
  return result;
}
 8000fd0:	f3c0 200d 	ubfx	r0, r0, #8, #14
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	200008a8 	.word	0x200008a8

08000fdc <XMC_USBD_IsEnumDone>:
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <XMC_USBD_IsEnumDone+0x18>)
 8000fde:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
 8000fe2:	f000 0005 	and.w	r0, r0, #5
}
 8000fe6:	f1a0 0005 	sub.w	r0, r0, #5
 8000fea:	fab0 f080 	clz	r0, r0
 8000fee:	0940      	lsrs	r0, r0, #5
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	200008a8 	.word	0x200008a8

08000ff8 <XMC_USBD_Uninitialize>:
	dctl.d32 = xmc_device.device_register->dctl;
 8000ff8:	4807      	ldr	r0, [pc, #28]	; (8001018 <XMC_USBD_Uninitialize+0x20>)
 8000ffa:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
{
 8000ffe:	b508      	push	{r3, lr}
	dctl.d32 = xmc_device.device_register->dctl;
 8001000:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 1U;
 8001002:	f043 0302 	orr.w	r3, r3, #2
  xmc_device.device_register->dctl = dctl.d32;
 8001006:	6053      	str	r3, [r2, #4]
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 8001008:	2100      	movs	r1, #0
 800100a:	f44f 7202 	mov.w	r2, #520	; 0x208
 800100e:	f002 fd71 	bl	8003af4 <memset>
}
 8001012:	2000      	movs	r0, #0
 8001014:	bd08      	pop	{r3, pc}
 8001016:	bf00      	nop
 8001018:	200008a8 	.word	0x200008a8

0800101c <XMC_USBD_EndpointConfigure>:
{
 800101c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8001020:	4c96      	ldr	r4, [pc, #600]	; (800127c <XMC_USBD_EndpointConfigure+0x260>)
 8001022:	f000 050f 	and.w	r5, r0, #15
{
 8001026:	4681      	mov	r9, r0
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8001028:	eb05 0045 	add.w	r0, r5, r5, lsl #1
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 800102c:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 8001030:	f04f 0a34 	mov.w	sl, #52	; 0x34
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8001034:	eb05 0080 	add.w	r0, r5, r0, lsl #2
{
 8001038:	4616      	mov	r6, r2
 800103a:	b083      	sub	sp, #12
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 800103c:	4652      	mov	r2, sl
{
 800103e:	460f      	mov	r7, r1
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 8001040:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001044:	2100      	movs	r1, #0
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8001046:	f8d3 801c 	ldr.w	r8, [r3, #28]
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 800104a:	f002 fd53 	bl	8003af4 <memset>
  ep->address_u.address = ep_addr;
 800104e:	fb0a f205 	mul.w	r2, sl, r5
 8001052:	eb04 0c02 	add.w	ip, r4, r2
 8001056:	f804 9002 	strb.w	r9, [r4, r2]
  ep->isConfigured = 1U;
 800105a:	f89c 3004 	ldrb.w	r3, [ip, #4]
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	f88c 3004 	strb.w	r3, [ip, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 8001066:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800106a:	f366 23d1 	bfi	r3, r6, #11, #7
 800106e:	f8cc 3004 	str.w	r3, [ip, #4]
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8001072:	46c2      	mov	sl, r8
 8001074:	fa4f fb89 	sxtb.w	fp, r9
  if (ep->address_u.address != 0U)
 8001078:	f1b9 0f00 	cmp.w	r9, #0
 800107c:	d06d      	beq.n	800115a <XMC_USBD_EndpointConfigure+0x13e>
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 800107e:	f8dc 1008 	ldr.w	r1, [ip, #8]
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8001082:	f8df e200 	ldr.w	lr, [pc, #512]	; 8001284 <XMC_USBD_EndpointConfigure+0x268>
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 8001086:	f64f 70c0 	movw	r0, #65472	; 0xffc0
 800108a:	f360 0112 	bfi	r1, r0, #0, #19
 800108e:	f8cc 1008 	str.w	r1, [ip, #8]
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8001092:	5ca1      	ldrb	r1, [r4, r2]
 8001094:	4a7a      	ldr	r2, [pc, #488]	; (8001280 <XMC_USBD_EndpointConfigure+0x264>)
 8001096:	f001 010f 	and.w	r1, r1, #15
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 800109a:	eb0e 0381 	add.w	r3, lr, r1, lsl #2
 800109e:	0208      	lsls	r0, r1, #8
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	9301      	str	r3, [sp, #4]
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 80010a4:	f85e 3021 	ldr.w	r3, [lr, r1, lsl #2]
 80010a8:	f8cc 3020 	str.w	r3, [ip, #32]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 80010ac:	f502 6ee0 	add.w	lr, r2, #1792	; 0x700
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 80010b0:	9b01      	ldr	r3, [sp, #4]
 80010b2:	f8cc 3014 	str.w	r3, [ip, #20]
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 80010b6:	1813      	adds	r3, r2, r0
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 80010b8:	eb0e 0200 	add.w	r2, lr, r0
 80010bc:	2001      	movs	r0, #1
 80010be:	4088      	lsls	r0, r1
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80010c0:	f1bb 0f00 	cmp.w	fp, #0
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 80010c4:	f8cc 301c 	str.w	r3, [ip, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 80010c8:	f8cc 200c 	str.w	r2, [ip, #12]
 80010cc:	b280      	uxth	r0, r0
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80010ce:	da69      	bge.n	80011a4 <XMC_USBD_EndpointConfigure+0x188>
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80010d0:	f101 036a 	add.w	r3, r1, #106	; 0x6a
 80010d4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	f8d3 c000 	ldr.w	ip, [r3]
		data.b.usbactep = 1U;
 80010de:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 80010e2:	f367 4c93 	bfi	ip, r7, #18, #2
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 80010e6:	2f00      	cmp	r7, #0
 80010e8:	f000 8084 	beq.w	80011f4 <XMC_USBD_EndpointConfigure+0x1d8>
			data.b.mps = ep_max_packet_size;
 80010ec:	f366 0c0a 	bfi	ip, r6, #0, #11
		data.b.setd0pid = 1U;
 80010f0:	f04c 5c80 	orr.w	ip, ip, #268435456	; 0x10000000
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80010f4:	f8b4 91fc 	ldrh.w	r9, [r4, #508]	; 0x1fc
		data.b.stall = 0U;
 80010f8:	f36f 5c55 	bfc	ip, #21, #1
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80010fc:	2300      	movs	r3, #0
  uint16_t mask = 1U;
 80010fe:	2201      	movs	r2, #1
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8001100:	ea19 0f02 	tst.w	r9, r2
    mask = (uint16_t)(mask << 1U);
 8001104:	ea4f 0e42 	mov.w	lr, r2, lsl #1
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8001108:	d07f      	beq.n	800120a <XMC_USBD_EndpointConfigure+0x1ee>
 800110a:	3301      	adds	r3, #1
 800110c:	2b07      	cmp	r3, #7
    mask = (uint16_t)(mask << 1U);
 800110e:	fa1f f28e 	uxth.w	r2, lr
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8001112:	d1f5      	bne.n	8001100 <XMC_USBD_EndpointConfigure+0xe4>
  if ((xmc_device.txfifomsk & mask) == 0U)
 8001114:	ea12 0f09 	tst.w	r2, r9
 8001118:	d079      	beq.n	800120e <XMC_USBD_EndpointConfigure+0x1f2>
 800111a:	2300      	movs	r3, #0
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 800111c:	2234      	movs	r2, #52	; 0x34
 800111e:	fb02 4505 	mla	r5, r2, r5, r4
		data.b.txfnum = ep->txFifoNum;
 8001122:	f363 5c99 	bfi	ip, r3, #22, #4
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 8001126:	88aa      	ldrh	r2, [r5, #4]
 8001128:	f363 1289 	bfi	r2, r3, #6, #4
 800112c:	80aa      	strh	r2, [r5, #4]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 800112e:	ea40 0308 	orr.w	r3, r0, r8
 8001132:	f363 0a0f 	bfi	sl, r3, #0, #16
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 8001136:	9b01      	ldr	r3, [sp, #4]
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001138:	f1bb 0f00 	cmp.w	fp, #0
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 800113c:	f8c3 c000 	str.w	ip, [r3]
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001140:	da6a      	bge.n	8001218 <XMC_USBD_EndpointConfigure+0x1fc>
 8001142:	2f00      	cmp	r7, #0
 8001144:	d143      	bne.n	80011ce <XMC_USBD_EndpointConfigure+0x1b2>
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001146:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800114a:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 800114e:	6813      	ldr	r3, [r2, #0]
		data.b.usbactep = 1U;
 8001150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 8001154:	f367 4393 	bfi	r3, r7, #18, #2
 8001158:	e069      	b.n	800122e <XMC_USBD_EndpointConfigure+0x212>
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 800115a:	f8dc 1008 	ldr.w	r1, [ip, #8]
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 800115e:	f8df e124 	ldr.w	lr, [pc, #292]	; 8001284 <XMC_USBD_EndpointConfigure+0x268>
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 8001162:	2040      	movs	r0, #64	; 0x40
 8001164:	f360 0112 	bfi	r1, r0, #0, #19
 8001168:	f8cc 1008 	str.w	r1, [ip, #8]
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 800116c:	5ca1      	ldrb	r1, [r4, r2]
 800116e:	4a44      	ldr	r2, [pc, #272]	; (8001280 <XMC_USBD_EndpointConfigure+0x264>)
 8001170:	f001 010f 	and.w	r1, r1, #15
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8001174:	eb0e 0381 	add.w	r3, lr, r1, lsl #2
 8001178:	0208      	lsls	r0, r1, #8
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	9301      	str	r3, [sp, #4]
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 800117e:	f85e 3021 	ldr.w	r3, [lr, r1, lsl #2]
 8001182:	f8cc 3020 	str.w	r3, [ip, #32]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8001186:	f502 6ee0 	add.w	lr, r2, #1792	; 0x700
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 800118a:	9b01      	ldr	r3, [sp, #4]
 800118c:	f8cc 3014 	str.w	r3, [ip, #20]
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8001190:	1813      	adds	r3, r2, r0
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8001192:	eb0e 0200 	add.w	r2, lr, r0
 8001196:	2001      	movs	r0, #1
 8001198:	4088      	lsls	r0, r1
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 800119a:	f8cc 301c 	str.w	r3, [ip, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 800119e:	f8cc 200c 	str.w	r2, [ip, #12]
 80011a2:	b280      	uxth	r0, r0
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80011a4:	b1df      	cbz	r7, 80011de <XMC_USBD_EndpointConfigure+0x1c2>
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80011a6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80011aa:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 80011ae:	6813      	ldr	r3, [r2, #0]
		data.b.usbactep = 1U;
 80011b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 80011b4:	f367 4393 	bfi	r3, r7, #18, #2
			data.b.mps = ep_max_packet_size;
 80011b8:	f366 030a 	bfi	r3, r6, #0, #11
		data.b.setd0pid = 1U;
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		data.b.stall =(uint8_t) 0U;
 80011c0:	f36f 5355 	bfc	r3, #21, #1
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 80011c4:	ea40 4018 	orr.w	r0, r0, r8, lsr #16
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 80011c8:	6013      	str	r3, [r2, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 80011ca:	f360 4a1f 	bfi	sl, r0, #16, #16
  xmc_device.device_register->daintmsk = daintmsk.d32;
 80011ce:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
}
 80011d2:	2000      	movs	r0, #0
  xmc_device.device_register->daintmsk = daintmsk.d32;
 80011d4:	f8c3 a01c 	str.w	sl, [r3, #28]
}
 80011d8:	b003      	add	sp, #12
 80011da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80011de:	f101 036a 	add.w	r3, r1, #106	; 0x6a
 80011e2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	f8d3 c000 	ldr.w	ip, [r3]
		data.b.usbactep = 1U;
 80011ec:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 80011f0:	f367 4c93 	bfi	ip, r7, #18, #2
			switch(ep_max_packet_size)
 80011f4:	2e10      	cmp	r6, #16
 80011f6:	d039      	beq.n	800126c <XMC_USBD_EndpointConfigure+0x250>
 80011f8:	d923      	bls.n	8001242 <XMC_USBD_EndpointConfigure+0x226>
 80011fa:	2e20      	cmp	r6, #32
 80011fc:	d03a      	beq.n	8001274 <XMC_USBD_EndpointConfigure+0x258>
 80011fe:	2e40      	cmp	r6, #64	; 0x40
 8001200:	f47f af76 	bne.w	80010f0 <XMC_USBD_EndpointConfigure+0xd4>
				data.b.mps = 0x0U;
 8001204:	f36f 0c0a 	bfc	ip, #0, #11
				break;
 8001208:	e772      	b.n	80010f0 <XMC_USBD_EndpointConfigure+0xd4>
 800120a:	f003 030f 	and.w	r3, r3, #15
    xmc_device.txfifomsk |= mask;
 800120e:	ea49 0202 	orr.w	r2, r9, r2
 8001212:	f8a4 21fc 	strh.w	r2, [r4, #508]	; 0x1fc
 8001216:	e781      	b.n	800111c <XMC_USBD_EndpointConfigure+0x100>
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001218:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800121c:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 8001220:	6813      	ldr	r3, [r2, #0]
		data.b.usbactep = 1U;
 8001222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 8001226:	f367 4393 	bfi	r3, r7, #18, #2
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 800122a:	2f00      	cmp	r7, #0
 800122c:	d1c4      	bne.n	80011b8 <XMC_USBD_EndpointConfigure+0x19c>
			switch(ep_max_packet_size)
 800122e:	2e10      	cmp	r6, #16
 8001230:	d018      	beq.n	8001264 <XMC_USBD_EndpointConfigure+0x248>
 8001232:	d911      	bls.n	8001258 <XMC_USBD_EndpointConfigure+0x23c>
 8001234:	2e20      	cmp	r6, #32
 8001236:	d00b      	beq.n	8001250 <XMC_USBD_EndpointConfigure+0x234>
 8001238:	2e40      	cmp	r6, #64	; 0x40
 800123a:	d1bf      	bne.n	80011bc <XMC_USBD_EndpointConfigure+0x1a0>
					data.b.mps = 0x0U;
 800123c:	f36f 030a 	bfc	r3, #0, #11
					break;
 8001240:	e7bc      	b.n	80011bc <XMC_USBD_EndpointConfigure+0x1a0>
			switch(ep_max_packet_size)
 8001242:	2e08      	cmp	r6, #8
 8001244:	f47f af54 	bne.w	80010f0 <XMC_USBD_EndpointConfigure+0xd4>
				data.b.mps = 0x3U;
 8001248:	2303      	movs	r3, #3
 800124a:	f363 0c0a 	bfi	ip, r3, #0, #11
				break;
 800124e:	e74f      	b.n	80010f0 <XMC_USBD_EndpointConfigure+0xd4>
					data.b.mps = 0x1U;
 8001250:	2101      	movs	r1, #1
 8001252:	f361 030a 	bfi	r3, r1, #0, #11
					break;
 8001256:	e7b1      	b.n	80011bc <XMC_USBD_EndpointConfigure+0x1a0>
			switch(ep_max_packet_size)
 8001258:	2e08      	cmp	r6, #8
 800125a:	d1af      	bne.n	80011bc <XMC_USBD_EndpointConfigure+0x1a0>
					data.b.mps = 0x3U;
 800125c:	2103      	movs	r1, #3
 800125e:	f361 030a 	bfi	r3, r1, #0, #11
					break;
 8001262:	e7ab      	b.n	80011bc <XMC_USBD_EndpointConfigure+0x1a0>
					data.b.mps = 0x2U;
 8001264:	2102      	movs	r1, #2
 8001266:	f361 030a 	bfi	r3, r1, #0, #11
					break;
 800126a:	e7a7      	b.n	80011bc <XMC_USBD_EndpointConfigure+0x1a0>
				data.b.mps = 0x2U;
 800126c:	2302      	movs	r3, #2
 800126e:	f363 0c0a 	bfi	ip, r3, #0, #11
				break;
 8001272:	e73d      	b.n	80010f0 <XMC_USBD_EndpointConfigure+0xd4>
				data.b.mps = 0x1U;
 8001274:	2301      	movs	r3, #1
 8001276:	f363 0c0a 	bfi	ip, r3, #0, #11
				break;
 800127a:	e739      	b.n	80010f0 <XMC_USBD_EndpointConfigure+0xd4>
 800127c:	200008a8 	.word	0x200008a8
 8001280:	30000000 	.word	0x30000000
 8001284:	20000460 	.word	0x20000460

08001288 <XMC_USBD_Init>:
{
 8001288:	b530      	push	{r4, r5, lr}
 800128a:	4604      	mov	r4, r0
 800128c:	b083      	sub	sp, #12
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 800128e:	484c      	ldr	r0, [pc, #304]	; (80013c0 <XMC_USBD_Init+0x138>)
 8001290:	f001 f9b0 	bl	80025f4 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 8001294:	f001 fc02 	bl	8002a9c <XMC_SCU_POWER_EnableUsb>
  usbd_init = obj;
 8001298:	4a4a      	ldr	r2, [pc, #296]	; (80013c4 <XMC_USBD_Init+0x13c>)
 800129a:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <XMC_USBD_Init+0x140>)
 800129c:	6014      	str	r4, [r2, #0]
 800129e:	f1a3 011c 	sub.w	r1, r3, #28
 80012a2:	f103 001c 	add.w	r0, r3, #28
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 80012a6:	2240      	movs	r2, #64	; 0x40
 80012a8:	f843 2f04 	str.w	r2, [r3, #4]!
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80012ac:	4283      	cmp	r3, r0
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 80012ae:	f841 2f04 	str.w	r2, [r1, #4]!
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80012b2:	d1f9      	bne.n	80012a8 <XMC_USBD_Init+0x20>
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 80012b4:	4d45      	ldr	r5, [pc, #276]	; (80013cc <XMC_USBD_Init+0x144>)
 80012b6:	f44f 7202 	mov.w	r2, #520	; 0x208
 80012ba:	4628      	mov	r0, r5
 80012bc:	2100      	movs	r1, #0
 80012be:	f002 fc19 	bl	8003af4 <memset>
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 80012c2:	e9d4 3200 	ldrd	r3, r2, [r4]
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 80012c6:	68a1      	ldr	r1, [r4, #8]
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 80012c8:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 80012cc:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 80012d0:	f8c5 1204 	str.w	r1, [r5, #516]	; 0x204
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 80012d4:	f8c5 21a4 	str.w	r2, [r5, #420]	; 0x1a4
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 80012d8:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
 80012dc:	f505 72d4 	add.w	r2, r5, #424	; 0x1a8
 80012e0:	f503 6110 	add.w	r1, r3, #2304	; 0x900
 80012e4:	f505 75e2 	add.w	r5, r5, #452	; 0x1c4
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 80012e8:	f842 1b04 	str.w	r1, [r2], #4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80012ec:	42aa      	cmp	r2, r5
 80012ee:	f101 0120 	add.w	r1, r1, #32
 80012f2:	d1f9      	bne.n	80012e8 <XMC_USBD_Init+0x60>
 80012f4:	4a36      	ldr	r2, [pc, #216]	; (80013d0 <XMC_USBD_Init+0x148>)
 80012f6:	f503 6130 	add.w	r1, r3, #2816	; 0xb00
 80012fa:	f102 001c 	add.w	r0, r2, #28
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 80012fe:	f842 1b04 	str.w	r1, [r2], #4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8001302:	4282      	cmp	r2, r0
 8001304:	f101 0120 	add.w	r1, r1, #32
 8001308:	d1f9      	bne.n	80012fe <XMC_USBD_Init+0x76>
 800130a:	4a32      	ldr	r2, [pc, #200]	; (80013d4 <XMC_USBD_Init+0x14c>)
 800130c:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
 8001310:	f102 001c 	add.w	r0, r2, #28
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 8001314:	f842 1b04 	str.w	r1, [r2], #4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8001318:	4282      	cmp	r2, r0
 800131a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800131e:	d1f9      	bne.n	8001314 <XMC_USBD_Init+0x8c>
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 8001320:	689a      	ldr	r2, [r3, #8]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001322:	7b61      	ldrb	r1, [r4, #13]
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 8001324:	f042 0281 	orr.w	r2, r2, #129	; 0x81
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001328:	2900      	cmp	r1, #0
 800132a:	d146      	bne.n	80013ba <XMC_USBD_Init+0x132>
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 800132c:	f042 0220 	orr.w	r2, r2, #32
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 8001330:	609a      	str	r2, [r3, #8]
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 8001332:	68da      	ldr	r2, [r3, #12]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 8001334:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 800133c:	60da      	str	r2, [r3, #12]
  dcfg.d32 = xmc_device.device_register->dcfg;
 800133e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 8001342:	f042 0203 	orr.w	r2, r2, #3
  dcfg.b.descdma = 0U;
 8001346:	f36f 52d7 	bfc	r2, #23, #1
  xmc_device.device_register->dcfg = dcfg.d32;
 800134a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  dctl.d32 = xmc_device.device_register->dctl;
 800134e:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
  data.d32 = 0U;
 8001352:	2000      	movs	r0, #0
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 8001354:	f042 0202 	orr.w	r2, r2, #2
  xmc_device.device_register->dctl = dctl.d32;
 8001358:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  data.d32 = 0U;
 800135c:	9001      	str	r0, [sp, #4]
  data.b.txfflsh = 1U;
 800135e:	9a01      	ldr	r2, [sp, #4]
 8001360:	f042 0220 	orr.w	r2, r2, #32
 8001364:	9201      	str	r2, [sp, #4]
  data.b.txfnum = fifo_num;
 8001366:	9a01      	ldr	r2, [sp, #4]
 8001368:	2010      	movs	r0, #16
 800136a:	f360 128a 	bfi	r2, r0, #6, #5
 800136e:	9201      	str	r2, [sp, #4]
  xmc_device.global_register->grstctl = data.d32;
 8001370:	9a01      	ldr	r2, [sp, #4]
 8001372:	611a      	str	r2, [r3, #16]
   data.d32 = xmc_device.global_register->grstctl;
 8001374:	691a      	ldr	r2, [r3, #16]
 8001376:	9201      	str	r2, [sp, #4]
  } while (data.b.txfflsh);
 8001378:	9a01      	ldr	r2, [sp, #4]
 800137a:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800137e:	2a00      	cmp	r2, #0
 8001380:	d1f8      	bne.n	8001374 <XMC_USBD_Init+0xec>
	data.d32 = 0U;
 8001382:	9200      	str	r2, [sp, #0]
  data.b.rxfflsh = 1U;
 8001384:	9a00      	ldr	r2, [sp, #0]
 8001386:	f042 0210 	orr.w	r2, r2, #16
 800138a:	9200      	str	r2, [sp, #0]
  xmc_device.global_register->grstctl = data.d32;
 800138c:	9a00      	ldr	r2, [sp, #0]
 800138e:	611a      	str	r2, [r3, #16]
    data.d32 = xmc_device.global_register->grstctl;
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	9200      	str	r2, [sp, #0]
  } while (data.b.rxfflsh);
 8001394:	9800      	ldr	r0, [sp, #0]
 8001396:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800139a:	2800      	cmp	r0, #0
 800139c:	d1f8      	bne.n	8001390 <XMC_USBD_Init+0x108>
    gintmsk.b.rxstsqlvl = 1U;
 800139e:	4c0e      	ldr	r4, [pc, #56]	; (80013d8 <XMC_USBD_Init+0x150>)
  gintmsk.d32 = 0U;
 80013a0:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <XMC_USBD_Init+0x154>)
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 80013a2:	6198      	str	r0, [r3, #24]
    gintmsk.b.rxstsqlvl = 1U;
 80013a4:	2901      	cmp	r1, #1
 80013a6:	bf08      	it	eq
 80013a8:	4622      	moveq	r2, r4
  gintmsk.b.inepintr = 1U;
 80013aa:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 80013ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013b2:	6159      	str	r1, [r3, #20]
  xmc_device.global_register->gintmsk = gintmsk.d32;
 80013b4:	619a      	str	r2, [r3, #24]
}
 80013b6:	b003      	add	sp, #12
 80013b8:	bd30      	pop	{r4, r5, pc}
    gahbcfg.b.dmaenable = 0U;
 80013ba:	f36f 1245 	bfc	r2, #5, #1
 80013be:	e7b7      	b.n	8001330 <XMC_USBD_Init+0xa8>
 80013c0:	20000080 	.word	0x20000080
 80013c4:	200008a4 	.word	0x200008a4
 80013c8:	20000478 	.word	0x20000478
 80013cc:	200008a8 	.word	0x200008a8
 80013d0:	20000a6c 	.word	0x20000a6c
 80013d4:	20000a88 	.word	0x20000a88
 80013d8:	c0003c1e 	.word	0xc0003c1e
 80013dc:	c0003c0e 	.word	0xc0003c0e

080013e0 <XMC_USBD_EndpointRead>:
  if (length > ep->outBytesAvailable)
 80013e0:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <XMC_USBD_EndpointRead+0x38>)
{
 80013e2:	b570      	push	{r4, r5, r6, lr}
  if (length > ep->outBytesAvailable)
 80013e4:	2434      	movs	r4, #52	; 0x34
 80013e6:	fb04 3400 	mla	r4, r4, r0, r3
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 80013ea:	e9d4 6503 	ldrd	r6, r5, [r4, #12]
 80013ee:	69a3      	ldr	r3, [r4, #24]
 80013f0:	4295      	cmp	r5, r2
 80013f2:	bf28      	it	cs
 80013f4:	4615      	movcs	r5, r2
 80013f6:	4608      	mov	r0, r1
 80013f8:	462a      	mov	r2, r5
 80013fa:	18f1      	adds	r1, r6, r3
 80013fc:	f002 fae0 	bl	80039c0 <memcpy>
  ep->outBytesAvailable -= length;
 8001400:	6923      	ldr	r3, [r4, #16]
 8001402:	1b5b      	subs	r3, r3, r5
 8001404:	6123      	str	r3, [r4, #16]
  if (ep->outBytesAvailable)
 8001406:	b913      	cbnz	r3, 800140e <XMC_USBD_EndpointRead+0x2e>
    ep->outOffset = 0U;
 8001408:	61a3      	str	r3, [r4, #24]
}
 800140a:	4628      	mov	r0, r5
 800140c:	bd70      	pop	{r4, r5, r6, pc}
    ep->outOffset += length;
 800140e:	69a3      	ldr	r3, [r4, #24]
 8001410:	442b      	add	r3, r5
 8001412:	61a3      	str	r3, [r4, #24]
}
 8001414:	4628      	mov	r0, r5
 8001416:	bd70      	pop	{r4, r5, r6, pc}
 8001418:	200008a8 	.word	0x200008a8

0800141c <XMC_USBD_EndpointWrite>:
{
 800141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!ep->isConfigured)
 800141e:	4f16      	ldr	r7, [pc, #88]	; (8001478 <XMC_USBD_EndpointWrite+0x5c>)
 8001420:	f000 060f 	and.w	r6, r0, #15
 8001424:	2434      	movs	r4, #52	; 0x34
 8001426:	fb04 7406 	mla	r4, r4, r6, r7
 800142a:	7923      	ldrb	r3, [r4, #4]
 800142c:	0758      	lsls	r0, r3, #29
 800142e:	d51e      	bpl.n	800146e <XMC_USBD_EndpointWrite+0x52>
  else if (ep->inInUse == 1U)
 8001430:	6863      	ldr	r3, [r4, #4]
 8001432:	071b      	lsls	r3, r3, #28
 8001434:	d41d      	bmi.n	8001472 <XMC_USBD_EndpointWrite+0x56>
		memcpy(ep->inBuffer,(const void *)buffer,length);
 8001436:	e9d4 0507 	ldrd	r0, r5, [r4, #28]
 800143a:	4295      	cmp	r5, r2
 800143c:	bf28      	it	cs
 800143e:	4615      	movcs	r5, r2
 8001440:	462a      	mov	r2, r5
 8001442:	f002 fabd 	bl	80039c0 <memcpy>
    ep->inInUse = 1U;
 8001446:	6863      	ldr	r3, [r4, #4]
		ep->xferBuffer = ep->inBuffer;
 8001448:	69e2      	ldr	r2, [r4, #28]
    ep->xferTotal = length;
 800144a:	6325      	str	r5, [r4, #48]	; 0x30
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 800144c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    ep->xferLength = 0U;
 8001450:	2100      	movs	r1, #0
    ep->inInUse = 1U;
 8001452:	f043 0308 	orr.w	r3, r3, #8
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8001456:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    XMC_USBD_lStartWriteXfer(ep);
 800145a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    ep->inInUse = 1U;
 800145e:	6063      	str	r3, [r4, #4]
    ep->xferLength = 0U;
 8001460:	e9c4 2109 	strd	r2, r1, [r4, #36]	; 0x24
    ep->xferCount = 0U;
 8001464:	62e1      	str	r1, [r4, #44]	; 0x2c
    XMC_USBD_lStartWriteXfer(ep);
 8001466:	f7ff fbe9 	bl	8000c3c <XMC_USBD_lStartWriteXfer>
    result=(int32_t)ep->xferTotal;
 800146a:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 800146c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 800146e:	2001      	movs	r0, #1
}
 8001470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    result=(int32_t)0;
 8001472:	2000      	movs	r0, #0
}
 8001474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001476:	bf00      	nop
 8001478:	200008a8 	.word	0x200008a8

0800147c <XMC_USBD_lReadFifo>:
{
 800147c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8001480:	4e23      	ldr	r6, [pc, #140]	; (8001510 <XMC_USBD_lReadFifo+0x94>)
 8001482:	eb06 0380 	add.w	r3, r6, r0, lsl #2
 8001486:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800148a:	681b      	ldr	r3, [r3, #0]
  if (!data.b.usbactep)
 800148c:	041b      	lsls	r3, r3, #16
 800148e:	d401      	bmi.n	8001494 <XMC_USBD_lReadFifo+0x18>
}
 8001490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ep->xferBuffer == NULL)
 8001494:	2534      	movs	r5, #52	; 0x34
 8001496:	fb05 6500 	mla	r5, r5, r0, r6
 800149a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800149c:	2a00      	cmp	r2, #0
 800149e:	d0f7      	beq.n	8001490 <XMC_USBD_lReadFifo+0x14>
    for (i = 0U;i < word_count; i++)
 80014a0:	088c      	lsrs	r4, r1, #2
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 80014a2:	f8d6 c1e0 	ldr.w	ip, [r6, #480]	; 0x1e0
    for (i = 0U;i < word_count; i++)
 80014a6:	d00a      	beq.n	80014be <XMC_USBD_lReadFifo+0x42>
 80014a8:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80014ac:	2300      	movs	r3, #0
 80014ae:	e000      	b.n	80014b2 <XMC_USBD_lReadFifo+0x36>
 80014b0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 80014b2:	f8dc 7000 	ldr.w	r7, [ip]
 80014b6:	50d7      	str	r7, [r2, r3]
 80014b8:	3304      	adds	r3, #4
    for (i = 0U;i < word_count; i++)
 80014ba:	459e      	cmp	lr, r3
 80014bc:	d1f8      	bne.n	80014b0 <XMC_USBD_lReadFifo+0x34>
  temp_word_count = (word_count << 2U);
 80014be:	f021 0703 	bic.w	r7, r1, #3
    if (byte_count!=temp_word_count)
 80014c2:	42b9      	cmp	r1, r7
 80014c4:	d019      	beq.n	80014fa <XMC_USBD_lReadFifo+0x7e>
      temp_data = *fifo;
 80014c6:	f8dc 5000 	ldr.w	r5, [ip]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 80014ca:	d916      	bls.n	80014fa <XMC_USBD_lReadFifo+0x7e>
 80014cc:	1bcf      	subs	r7, r1, r7
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 80014ce:	f04f 0c34 	mov.w	ip, #52	; 0x34
 80014d2:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 80014d6:	00a4      	lsls	r4, r4, #2
 80014d8:	fb0c 6c00 	mla	ip, ip, r0, r6
 80014dc:	2200      	movs	r2, #0
 80014de:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80014e2:	fa08 f302 	lsl.w	r3, r8, r2
 80014e6:	402b      	ands	r3, r5
 80014e8:	40d3      	lsrs	r3, r2
 80014ea:	f8dc 7024 	ldr.w	r7, [ip, #36]	; 0x24
 80014ee:	3208      	adds	r2, #8
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 80014f0:	4572      	cmp	r2, lr
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 80014f2:	553b      	strb	r3, [r7, r4]
 80014f4:	f104 0401 	add.w	r4, r4, #1
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 80014f8:	d1f3      	bne.n	80014e2 <XMC_USBD_lReadFifo+0x66>
    ep->xferCount += byte_count;
 80014fa:	2334      	movs	r3, #52	; 0x34
 80014fc:	fb03 6000 	mla	r0, r3, r0, r6
 8001500:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8001502:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ep->xferCount += byte_count;
 8001504:	440a      	add	r2, r1
    ep->xferBuffer += byte_count;
 8001506:	4419      	add	r1, r3
    ep->xferCount += byte_count;
 8001508:	62c2      	str	r2, [r0, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 800150a:	6241      	str	r1, [r0, #36]	; 0x24
}
 800150c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001510:	200008a8 	.word	0x200008a8

08001514 <XMC_USBD_lDeviceActive>:
{
 8001514:	b470      	push	{r4, r5, r6}
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001516:	7b04      	ldrb	r4, [r0, #12]
 8001518:	b1d4      	cbz	r4, 8001550 <XMC_USBD_lDeviceActive+0x3c>
 800151a:	2300      	movs	r3, #0
 800151c:	4e0e      	ldr	r6, [pc, #56]	; (8001558 <XMC_USBD_lDeviceActive+0x44>)
  uint8_t result = 0U;
 800151e:	4618      	mov	r0, r3
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8001520:	2534      	movs	r5, #52	; 0x34
 8001522:	e008      	b.n	8001536 <XMC_USBD_lDeviceActive+0x22>
 8001524:	6852      	ldr	r2, [r2, #4]
 8001526:	3301      	adds	r3, #1
      result = 1U;
 8001528:	f012 0f10 	tst.w	r2, #16
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 800152c:	b2da      	uxtb	r2, r3
      result = 1U;
 800152e:	bf18      	it	ne
 8001530:	2001      	movne	r0, #1
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001532:	42a2      	cmp	r2, r4
 8001534:	d20a      	bcs.n	800154c <XMC_USBD_lDeviceActive+0x38>
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8001536:	fb05 6203 	mla	r2, r5, r3, r6
 800153a:	6851      	ldr	r1, [r2, #4]
 800153c:	0709      	lsls	r1, r1, #28
 800153e:	d5f1      	bpl.n	8001524 <XMC_USBD_lDeviceActive+0x10>
 8001540:	3301      	adds	r3, #1
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001542:	b2da      	uxtb	r2, r3
 8001544:	42a2      	cmp	r2, r4
      result = 1U;
 8001546:	f04f 0001 	mov.w	r0, #1
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 800154a:	d3f4      	bcc.n	8001536 <XMC_USBD_lDeviceActive+0x22>
}
 800154c:	bc70      	pop	{r4, r5, r6}
 800154e:	4770      	bx	lr
  uint8_t result = 0U;
 8001550:	4620      	mov	r0, r4
}
 8001552:	bc70      	pop	{r4, r5, r6}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	200008a8 	.word	0x200008a8

0800155c <XMC_USBD_IRQHandler>:
{
 800155c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 8001560:	4c93      	ldr	r4, [pc, #588]	; (80017b0 <XMC_USBD_IRQHandler+0x254>)
 8001562:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8001566:	699e      	ldr	r6, [r3, #24]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8001568:	695d      	ldr	r5, [r3, #20]
 800156a:	4035      	ands	r5, r6
 800156c:	fa5f fb85 	uxtb.w	fp, r5
  if (data.b.sofintr)
 8001570:	f01b 0f08 	tst.w	fp, #8
{
 8001574:	b08f      	sub	sp, #60	; 0x3c
 8001576:	4681      	mov	r9, r0
  if (data.b.sofintr)
 8001578:	d007      	beq.n	800158a <XMC_USBD_IRQHandler+0x2e>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 800157a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800157e:	2009      	movs	r0, #9
 8001580:	4798      	blx	r3
	xmc_device.global_register->gintsts = clear.d32;
 8001582:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
  clear.d32 = 0U;
 8001586:	2208      	movs	r2, #8
	xmc_device.global_register->gintsts = clear.d32;
 8001588:	615a      	str	r2, [r3, #20]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800158a:	f899 300d 	ldrb.w	r3, [r9, #13]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d059      	beq.n	8001646 <XMC_USBD_IRQHandler+0xea>
 8001592:	f3c5 2607 	ubfx	r6, r5, #8, #8
  if (data.b.erlysuspend)
 8001596:	0770      	lsls	r0, r6, #29
 8001598:	d504      	bpl.n	80015a4 <XMC_USBD_IRQHandler+0x48>
	xmc_device.global_register->gintsts = clear.d32;
 800159a:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
  clear.d32 = 0U;
 800159e:	f44f 6280 	mov.w	r2, #1024	; 0x400
	xmc_device.global_register->gintsts = clear.d32;
 80015a2:	615a      	str	r2, [r3, #20]
  if (data.b.usbsuspend)
 80015a4:	0731      	lsls	r1, r6, #28
 80015a6:	d508      	bpl.n	80015ba <XMC_USBD_IRQHandler+0x5e>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 80015a8:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80015ac:	2006      	movs	r0, #6
 80015ae:	4798      	blx	r3
	xmc_device.global_register->gintsts = clear.d32;
 80015b0:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
  clear.d32 = 0U;
 80015b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
	xmc_device.global_register->gintsts = clear.d32;
 80015b8:	615a      	str	r2, [r3, #20]
 80015ba:	f3c5 6307 	ubfx	r3, r5, #24, #8
  if (data.b.wkupintr)
 80015be:	061a      	lsls	r2, r3, #24
 80015c0:	b2df      	uxtb	r7, r3
 80015c2:	d508      	bpl.n	80015d6 <XMC_USBD_IRQHandler+0x7a>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 80015c4:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80015c8:	2008      	movs	r0, #8
 80015ca:	4798      	blx	r3
	xmc_device.global_register->gintsts = clear.d32;
 80015cc:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
  clear.d32 = 0U;
 80015d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	xmc_device.global_register->gintsts = clear.d32;
 80015d4:	615a      	str	r2, [r3, #20]
  if (data.b.sessreqintr)
 80015d6:	067b      	lsls	r3, r7, #25
 80015d8:	d50e      	bpl.n	80015f8 <XMC_USBD_IRQHandler+0x9c>
    xmc_device.IsPowered = 1U;
 80015da:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 80015de:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    xmc_device.IsPowered = 1U;
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 80015ea:	2000      	movs	r0, #0
 80015ec:	4790      	blx	r2
	xmc_device.global_register->gintsts = clear.d32;
 80015ee:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
  clear.d32 = 0U;
 80015f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	xmc_device.global_register->gintsts = clear.d32;
 80015f6:	615a      	str	r2, [r3, #20]
  if (data.b.usbreset)
 80015f8:	06f7      	lsls	r7, r6, #27
 80015fa:	f100 80db 	bmi.w	80017b4 <XMC_USBD_IRQHandler+0x258>
  if (data.b.enumdone)
 80015fe:	06b6      	lsls	r6, r6, #26
 8001600:	f100 8161 	bmi.w	80018c6 <XMC_USBD_IRQHandler+0x36a>
 8001604:	f3c5 4a07 	ubfx	sl, r5, #16, #8
  if (data.b.inepint)
 8001608:	f01a 0f04 	tst.w	sl, #4
 800160c:	f040 817b 	bne.w	8001906 <XMC_USBD_IRQHandler+0x3aa>
  if (data.b.outepintr)
 8001610:	f01a 0f08 	tst.w	sl, #8
 8001614:	d12c      	bne.n	8001670 <XMC_USBD_IRQHandler+0x114>
	if (data.b.otgintr)
 8001616:	f01b 0f04 	tst.w	fp, #4
 800161a:	d011      	beq.n	8001640 <XMC_USBD_IRQHandler+0xe4>
  data.d32 = xmc_device.global_register->gotgint;
 800161c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8001620:	685d      	ldr	r5, [r3, #4]
  if (data.b.sesenddet)
 8001622:	0769      	lsls	r1, r5, #29
 8001624:	d50b      	bpl.n	800163e <XMC_USBD_IRQHandler+0xe2>
		xmc_device.IsPowered = 0U;
 8001626:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 800162a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
		xmc_device.IsPowered = 0U;
 800162e:	f36f 0382 	bfc	r3, #2, #1
 8001632:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 8001636:	2001      	movs	r0, #1
 8001638:	4790      	blx	r2
 800163a:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
  xmc_device.global_register->gotgint = clear.d32;
 800163e:	605d      	str	r5, [r3, #4]
}
 8001640:	b00f      	add	sp, #60	; 0x3c
 8001642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (data.b.rxstsqlvl)
 8001646:	f01b 0f10 	tst.w	fp, #16
 800164a:	d0a2      	beq.n	8001592 <XMC_USBD_IRQHandler+0x36>
      xmc_device.global_register->gintmsk = gintmsk.d32;
 800164c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
      gintmsk.b.rxstsqlvl = 0U;
 8001650:	f36f 1604 	bfc	r6, #4, #1
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8001654:	619e      	str	r6, [r3, #24]
  data.d32 = xmc_device.global_register->grxstsp;
 8001656:	6a18      	ldr	r0, [r3, #32]
  switch (data.b.pktsts)
 8001658:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800165c:	2a02      	cmp	r2, #2
 800165e:	f000 8232 	beq.w	8001ac6 <XMC_USBD_IRQHandler+0x56a>
 8001662:	2a06      	cmp	r2, #6
 8001664:	f000 822f 	beq.w	8001ac6 <XMC_USBD_IRQHandler+0x56a>
      gintmsk.b.rxstsqlvl = 1U;
 8001668:	f046 0610 	orr.w	r6, r6, #16
      xmc_device.global_register->gintmsk = gintmsk.d32;
 800166c:	619e      	str	r6, [r3, #24]
 800166e:	e790      	b.n	8001592 <XMC_USBD_IRQHandler+0x36>
  daint.d32 = xmc_device.device_register->daint;
 8001670:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8001674:	699a      	ldr	r2, [r3, #24]
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 8001676:	69df      	ldr	r7, [r3, #28]
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	9300      	str	r3, [sp, #0]
  mask = daint.ep.out & daintmsk.ep.out;
 800167c:	f3c7 470f 	ubfx	r7, r7, #16, #16
  doeptsiz.d32 = 0U;
 8001680:	2100      	movs	r1, #0
  while ((uint16_t)mask >> ep_num)
 8001682:	ea17 4712 	ands.w	r7, r7, r2, lsr #16
  doeptsiz.d32 = 0U;
 8001686:	9101      	str	r1, [sp, #4]
  while ((uint16_t)mask >> ep_num)
 8001688:	d062      	beq.n	8001750 <XMC_USBD_IRQHandler+0x1f4>
 800168a:	463b      	mov	r3, r7
  ep_num = 0U;
 800168c:	460d      	mov	r5, r1
  while ((uint16_t)mask >> ep_num)
 800168e:	460e      	mov	r6, r1
        ep->isStalled = 0U;
 8001690:	f8cd b008 	str.w	fp, [sp, #8]
 8001694:	46b8      	mov	r8, r7
    if (temp)
 8001696:	07d9      	lsls	r1, r3, #31
 8001698:	d552      	bpl.n	8001740 <XMC_USBD_IRQHandler+0x1e4>
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 800169a:	f106 0a70 	add.w	sl, r6, #112	; 0x70
 800169e:	eb04 038a 	add.w	r3, r4, sl, lsl #2
 80016a2:	9a00      	ldr	r2, [sp, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80016a6:	f899 000d 	ldrb.w	r0, [r9, #13]
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 80016aa:	689f      	ldr	r7, [r3, #8]
 80016ac:	4017      	ands	r7, r2
 80016ae:	b2f9      	uxtb	r1, r7
 80016b0:	f001 0b01 	and.w	fp, r1, #1
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80016b4:	2800      	cmp	r0, #0
 80016b6:	d164      	bne.n	8001782 <XMC_USBD_IRQHandler+0x226>
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	9201      	str	r2, [sp, #4]
      if (doepint.b.setup)
 80016bc:	070a      	lsls	r2, r1, #28
 80016be:	d54d      	bpl.n	800175c <XMC_USBD_IRQHandler+0x200>
        ep->isStalled = 0U;
 80016c0:	2334      	movs	r3, #52	; 0x34
 80016c2:	fb03 4106 	mla	r1, r3, r6, r4
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 80016c6:	9b01      	ldr	r3, [sp, #4]
        ep->isStalled = 0U;
 80016c8:	f891 c004 	ldrb.w	ip, [r1, #4]
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 80016cc:	f3c3 7341 	ubfx	r3, r3, #29, #2
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 80016d0:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	3318      	adds	r3, #24
        ep->isStalled = 0U;
 80016d8:	f360 1c45 	bfi	ip, r0, #5, #1
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 80016dc:	610b      	str	r3, [r1, #16]
        ep->isStalled = 0U;
 80016de:	f881 c004 	strb.w	ip, [r1, #4]
		ep->outInUse = 0U;
 80016e2:	2334      	movs	r3, #52	; 0x34
 80016e4:	fb03 4306 	mla	r3, r3, r6, r4
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 80016e8:	2100      	movs	r1, #0
		ep->outInUse = 0U;
 80016ea:	6858      	ldr	r0, [r3, #4]
 80016ec:	f36f 1004 	bfc	r0, #4, #1
 80016f0:	6058      	str	r0, [r3, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 80016f2:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 80016f6:	4608      	mov	r0, r1
 80016f8:	4798      	blx	r3
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 80016fa:	eb04 038a 	add.w	r3, r4, sl, lsl #2
 80016fe:	2108      	movs	r1, #8
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	6099      	str	r1, [r3, #8]
      if (doepint.b.xfercompl)
 8001704:	f1bb 0f00 	cmp.w	fp, #0
 8001708:	d019      	beq.n	800173e <XMC_USBD_IRQHandler+0x1e2>
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800170a:	f899 300d 	ldrb.w	r3, [r9, #13]
 800170e:	b343      	cbz	r3, 8001762 <XMC_USBD_IRQHandler+0x206>
        if (ep->xferTotal == ep->xferLength)
 8001710:	2334      	movs	r3, #52	; 0x34
 8001712:	fb03 4006 	mla	r0, r3, r6, r4
 8001716:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001718:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800171a:	429a      	cmp	r2, r3
 800171c:	f040 81dc 	bne.w	8001ad8 <XMC_USBD_IRQHandler+0x57c>
          ep->outInUse = 0U;
 8001720:	6842      	ldr	r2, [r0, #4]
          ep->outBytesAvailable = ep->xferCount;
 8001722:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001724:	6103      	str	r3, [r0, #16]
          ep->outInUse = 0U;
 8001726:	f36f 1204 	bfc	r2, #4, #1
 800172a:	6042      	str	r2, [r0, #4]
 800172c:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 8001730:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 8001734:	2101      	movs	r1, #1
 8001736:	4628      	mov	r0, r5
 8001738:	4798      	blx	r3
 800173a:	f8da 3004 	ldr.w	r3, [sl, #4]
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 800173e:	609f      	str	r7, [r3, #8]
    ep_num++;
 8001740:	3501      	adds	r5, #1
 8001742:	b2ed      	uxtb	r5, r5
  while ((uint16_t)mask >> ep_num)
 8001744:	fa58 f305 	asrs.w	r3, r8, r5
 8001748:	462e      	mov	r6, r5
 800174a:	d1a4      	bne.n	8001696 <XMC_USBD_IRQHandler+0x13a>
 800174c:	f8dd b008 	ldr.w	fp, [sp, #8]
	xmc_device.global_register->gintsts = clear.d32;
 8001750:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
  clear.d32 = 0U;
 8001754:	f44f 2200 	mov.w	r2, #524288	; 0x80000
	xmc_device.global_register->gintsts = clear.d32;
 8001758:	615a      	str	r2, [r3, #20]
 800175a:	e75c      	b.n	8001616 <XMC_USBD_IRQHandler+0xba>
      if (doepint.b.xfercompl)
 800175c:	f1bb 0f00 	cmp.w	fp, #0
 8001760:	d0ed      	beq.n	800173e <XMC_USBD_IRQHandler+0x1e2>
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 8001762:	2334      	movs	r3, #52	; 0x34
 8001764:	fb03 4006 	mla	r0, r3, r6, r4
 8001768:	9b01      	ldr	r3, [sp, #4]
 800176a:	f3c3 0112 	ubfx	r1, r3, #0, #19
 800176e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 8001772:	1ad2      	subs	r2, r2, r3
 8001774:	1a52      	subs	r2, r2, r1
          ep->xferCount += bytes;
 8001776:	1899      	adds	r1, r3, r2
          ep->xferBuffer += bytes;
 8001778:	6a43      	ldr	r3, [r0, #36]	; 0x24
          ep->xferCount += bytes;
 800177a:	62c1      	str	r1, [r0, #44]	; 0x2c
          ep->xferBuffer += bytes;
 800177c:	441a      	add	r2, r3
 800177e:	6242      	str	r2, [r0, #36]	; 0x24
 8001780:	e7c6      	b.n	8001710 <XMC_USBD_IRQHandler+0x1b4>
      if (doepint.b.setup)
 8001782:	070a      	lsls	r2, r1, #28
 8001784:	f140 8181 	bpl.w	8001a8a <XMC_USBD_IRQHandler+0x52e>
        ep->isStalled = 0U;
 8001788:	2334      	movs	r3, #52	; 0x34
 800178a:	fb03 4c06 	mla	ip, r3, r6, r4
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800178e:	2801      	cmp	r0, #1
        ep->isStalled = 0U;
 8001790:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8001794:	f36f 1345 	bfc	r3, #5, #1
 8001798:	f88c 3004 	strb.w	r3, [ip, #4]
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800179c:	d1a1      	bne.n	80016e2 <XMC_USBD_IRQHandler+0x186>
			ep->outBytesAvailable += ep->xferCount;
 800179e:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80017a2:	f8dc 102c 	ldr.w	r1, [ip, #44]	; 0x2c
 80017a6:	440b      	add	r3, r1
 80017a8:	f8cc 3010 	str.w	r3, [ip, #16]
 80017ac:	e799      	b.n	80016e2 <XMC_USBD_IRQHandler+0x186>
 80017ae:	bf00      	nop
 80017b0:	200008a8 	.word	0x200008a8
  dctl.d32 = xmc_device.device_register->dctl;
 80017b4:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
 80017b8:	4ab6      	ldr	r2, [pc, #728]	; (8001a94 <XMC_USBD_IRQHandler+0x538>)
 80017ba:	684b      	ldr	r3, [r1, #4]
  dctl.b.rmtwkupsig = 1U;
 80017bc:	f043 0301 	orr.w	r3, r3, #1
  xmc_device.device_register->dctl = dctl.d32;
 80017c0:	604b      	str	r3, [r1, #4]
 80017c2:	f102 071c 	add.w	r7, r2, #28
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 80017c6:	f852 0b04 	ldr.w	r0, [r2], #4
 80017ca:	6803      	ldr	r3, [r0, #0]
		epctl.b.snak = 1U;
 80017cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 80017d0:	f36f 5355 	bfc	r3, #21, #1
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 80017d4:	4297      	cmp	r7, r2
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 80017d6:	6003      	str	r3, [r0, #0]
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 80017d8:	d1f5      	bne.n	80017c6 <XMC_USBD_IRQHandler+0x26a>
  xmc_device.global_register->grxfsiz = 64U;
 80017da:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
  gnptxfsiz.b.startaddr = 64U;
 80017de:	48ae      	ldr	r0, [pc, #696]	; (8001a98 <XMC_USBD_IRQHandler+0x53c>)
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 80017e0:	4aae      	ldr	r2, [pc, #696]	; (8001a9c <XMC_USBD_IRQHandler+0x540>)
 80017e2:	4faf      	ldr	r7, [pc, #700]	; (8001aa0 <XMC_USBD_IRQHandler+0x544>)
  xmc_device.global_register->grxfsiz = 64U;
 80017e4:	f04f 0c40 	mov.w	ip, #64	; 0x40
 80017e8:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 80017ec:	6298      	str	r0, [r3, #40]	; 0x28
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 80017ee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80017f2:	3030      	adds	r0, #48	; 0x30
 80017f4:	3230      	adds	r2, #48	; 0x30
 80017f6:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
 80017fa:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
 80017fe:	3730      	adds	r7, #48	; 0x30
 8001800:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8001804:	3030      	adds	r0, #48	; 0x30
  data.d32 = 0U;
 8001806:	2200      	movs	r2, #0
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001808:	f8c3 7114 	str.w	r7, [r3, #276]	; 0x114
 800180c:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
  data.d32 = 0U;
 8001810:	920b      	str	r2, [sp, #44]	; 0x2c
  data.b.txfflsh = 1U;
 8001812:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001814:	f042 0220 	orr.w	r2, r2, #32
 8001818:	920b      	str	r2, [sp, #44]	; 0x2c
  data.b.txfnum = fifo_num;
 800181a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800181c:	2010      	movs	r0, #16
 800181e:	f360 128a 	bfi	r2, r0, #6, #5
 8001822:	920b      	str	r2, [sp, #44]	; 0x2c
  xmc_device.global_register->grstctl = data.d32;
 8001824:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001826:	611a      	str	r2, [r3, #16]
   data.d32 = xmc_device.global_register->grstctl;
 8001828:	691a      	ldr	r2, [r3, #16]
 800182a:	920b      	str	r2, [sp, #44]	; 0x2c
  } while (data.b.txfflsh);
 800182c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800182e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8001832:	2a00      	cmp	r2, #0
 8001834:	d1f8      	bne.n	8001828 <XMC_USBD_IRQHandler+0x2cc>
  data.d32 = 0U;
 8001836:	920c      	str	r2, [sp, #48]	; 0x30
  data.b.txfflsh = 1U;
 8001838:	980c      	ldr	r0, [sp, #48]	; 0x30
 800183a:	f040 0020 	orr.w	r0, r0, #32
 800183e:	900c      	str	r0, [sp, #48]	; 0x30
  data.b.txfnum = fifo_num;
 8001840:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001842:	f362 108a 	bfi	r0, r2, #6, #5
 8001846:	900c      	str	r0, [sp, #48]	; 0x30
  xmc_device.global_register->grstctl = data.d32;
 8001848:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800184a:	611a      	str	r2, [r3, #16]
   data.d32 = xmc_device.global_register->grstctl;
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	920c      	str	r2, [sp, #48]	; 0x30
  } while (data.b.txfflsh);
 8001850:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001852:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8001856:	2a00      	cmp	r2, #0
 8001858:	d1f8      	bne.n	800184c <XMC_USBD_IRQHandler+0x2f0>
	data.d32 = 0U;
 800185a:	920d      	str	r2, [sp, #52]	; 0x34
  data.b.rxfflsh = 1U;
 800185c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800185e:	f042 0210 	orr.w	r2, r2, #16
 8001862:	920d      	str	r2, [sp, #52]	; 0x34
  xmc_device.global_register->grstctl = data.d32;
 8001864:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001866:	611a      	str	r2, [r3, #16]
    data.d32 = xmc_device.global_register->grstctl;
 8001868:	691a      	ldr	r2, [r3, #16]
 800186a:	920d      	str	r2, [sp, #52]	; 0x34
  } while (data.b.rxfflsh);
 800186c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800186e:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001872:	2a00      	cmp	r2, #0
 8001874:	d1f8      	bne.n	8001868 <XMC_USBD_IRQHandler+0x30c>
  daint.d32 = 0U;
 8001876:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  xmc_device.device_register->daintmsk = daint.d32;
 800187a:	61cb      	str	r3, [r1, #28]
	xmc_device.device_register->doepmsk |= doepint.d32;
 800187c:	694b      	ldr	r3, [r1, #20]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800187e:	f899 000d 	ldrb.w	r0, [r9, #13]
	xmc_device.device_register->doepmsk |= doepint.d32;
 8001882:	f043 030f 	orr.w	r3, r3, #15
 8001886:	614b      	str	r3, [r1, #20]
	xmc_device.device_register->diepmsk |= diepint.d32;
 8001888:	690b      	ldr	r3, [r1, #16]
 800188a:	f043 030f 	orr.w	r3, r3, #15
 800188e:	610b      	str	r3, [r1, #16]
  dcfg.d32 = xmc_device.device_register->dcfg;
 8001890:	680b      	ldr	r3, [r1, #0]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001892:	2801      	cmp	r0, #1
  dcfg.b.devaddr = 0U;
 8001894:	f362 130a 	bfi	r3, r2, #4, #7
  xmc_device.device_register->dcfg = dcfg.d32;
 8001898:	600b      	str	r3, [r1, #0]
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 800189a:	bf08      	it	eq
 800189c:	634a      	streq	r2, [r1, #52]	; 0x34
  xmc_device.ep[0U].outInUse = 0U;
 800189e:	6863      	ldr	r3, [r4, #4]
  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 80018a0:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
  xmc_device.ep[0U].outInUse = 0U;
 80018a4:	f36f 1304 	bfc	r3, #4, #1
 80018a8:	6063      	str	r3, [r4, #4]
  xmc_device.ep[0U].inInUse = 0U;
 80018aa:	6863      	ldr	r3, [r4, #4]
 80018ac:	f36f 03c3 	bfc	r3, #3, #1
 80018b0:	6063      	str	r3, [r4, #4]
  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 80018b2:	2004      	movs	r0, #4
 80018b4:	4790      	blx	r2
	xmc_device.global_register->gintsts = clear.d32;
 80018b6:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
  clear.d32 = 0U;
 80018ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (data.b.enumdone)
 80018be:	06b6      	lsls	r6, r6, #26
	xmc_device.global_register->gintsts = clear.d32;
 80018c0:	615a      	str	r2, [r3, #20]
  if (data.b.enumdone)
 80018c2:	f57f ae9f 	bpl.w	8001604 <XMC_USBD_IRQHandler+0xa8>
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 80018c6:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 80018ca:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 80018ce:	6813      	ldr	r3, [r2, #0]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 80018d0:	f36f 030a 	bfc	r3, #0, #11
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 80018d4:	6013      	str	r3, [r2, #0]
  xmc_device.IsConnected = 1U;
 80018d6:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 80018da:	f043 0305 	orr.w	r3, r3, #5
 80018de:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 80018e2:	2002      	movs	r0, #2
 80018e4:	4788      	blx	r1
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 80018e6:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 80018ea:	68d3      	ldr	r3, [r2, #12]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 80018ec:	2109      	movs	r1, #9
 80018ee:	f3c5 4a07 	ubfx	sl, r5, #16, #8
 80018f2:	f361 238d 	bfi	r3, r1, #10, #4
  if (data.b.inepint)
 80018f6:	f01a 0f04 	tst.w	sl, #4
  clear.d32 = 0U;
 80018fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 80018fe:	60d3      	str	r3, [r2, #12]
	xmc_device.global_register->gintsts = clear.d32;
 8001900:	6151      	str	r1, [r2, #20]
  if (data.b.inepint)
 8001902:	f43f ae85 	beq.w	8001610 <XMC_USBD_IRQHandler+0xb4>
  daint.d32 = xmc_device.device_register->daint;
 8001906:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800190a:	699a      	ldr	r2, [r3, #24]
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	b293      	uxth	r3, r2
  while ((uint16_t)mask >> ep_num)
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80b4 	beq.w	8001a80 <XMC_USBD_IRQHandler+0x524>
  ep_num = 0U;
 8001918:	2600      	movs	r6, #0
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 800191a:	e9cd ba02 	strd	fp, sl, [sp, #8]
  while ((uint16_t)mask >> ep_num)
 800191e:	46b6      	mov	lr, r6
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001920:	469b      	mov	fp, r3
    if ((uint16_t)temp)
 8001922:	07dd      	lsls	r5, r3, #31
 8001924:	f140 80a3 	bpl.w	8001a6e <XMC_USBD_IRQHandler+0x512>
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001928:	2334      	movs	r3, #52	; 0x34
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 800192a:	f10e 076a 	add.w	r7, lr, #106	; 0x6a
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 800192e:	fb03 f20e 	mul.w	r2, r3, lr
 8001932:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8001936:	f854 3027 	ldr.w	r3, [r4, r7, lsl #2]
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 800193a:	f814 8002 	ldrb.w	r8, [r4, r2]
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 800193e:	f8d3 c008 	ldr.w	ip, [r3, #8]
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001942:	6b4d      	ldr	r5, [r1, #52]	; 0x34
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 8001944:	9800      	ldr	r0, [sp, #0]
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001946:	9101      	str	r1, [sp, #4]
 8001948:	f008 080f 	and.w	r8, r8, #15
 800194c:	fa25 f508 	lsr.w	r5, r5, r8
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 8001950:	01ed      	lsls	r5, r5, #7
 8001952:	b2ed      	uxtb	r5, r5
 8001954:	4305      	orrs	r5, r0
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001956:	f899 100d 	ldrb.w	r1, [r9, #13]
      diepint.d32 = inepint &
 800195a:	ea05 050c 	and.w	r5, r5, ip
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 800195e:	4422      	add	r2, r4
 8001960:	f005 0c01 	and.w	ip, r5, #1
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001964:	bb09      	cbnz	r1, 80019aa <XMC_USBD_IRQHandler+0x44e>
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 8001966:	6919      	ldr	r1, [r3, #16]
      if (diepint.b.xfercompl)
 8001968:	f1bc 0f00 	cmp.w	ip, #0
 800196c:	d07e      	beq.n	8001a6c <XMC_USBD_IRQHandler+0x510>
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 800196e:	f031 4360 	bics.w	r3, r1, #3758096384	; 0xe0000000
 8001972:	d106      	bne.n	8001982 <XMC_USBD_IRQHandler+0x426>
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 8001974:	e9d2 100a 	ldrd	r1, r0, [r2, #40]	; 0x28
            ep->xferBuffer += Bytes;
 8001978:	6a53      	ldr	r3, [r2, #36]	; 0x24
            ep->xferCount += Bytes;
 800197a:	62d1      	str	r1, [r2, #44]	; 0x2c
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 800197c:	1a09      	subs	r1, r1, r0
            ep->xferBuffer += Bytes;
 800197e:	4419      	add	r1, r3
 8001980:	6251      	str	r1, [r2, #36]	; 0x24
        if (ep->xferTotal==ep->xferLength)
 8001982:	2334      	movs	r3, #52	; 0x34
 8001984:	fb03 410e 	mla	r1, r3, lr, r4
 8001988:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800198a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800198c:	429a      	cmp	r2, r3
 800198e:	d166      	bne.n	8001a5e <XMC_USBD_IRQHandler+0x502>
          ep->inInUse = 0U;
 8001990:	684b      	ldr	r3, [r1, #4]
 8001992:	f36f 03c3 	bfc	r3, #3, #1
 8001996:	604b      	str	r3, [r1, #4]
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 8001998:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 800199c:	2102      	movs	r1, #2
 800199e:	f046 0080 	orr.w	r0, r6, #128	; 0x80
 80019a2:	4798      	blx	r3
 80019a4:	f854 3027 	ldr.w	r3, [r4, r7, lsl #2]
 80019a8:	e060      	b.n	8001a6c <XMC_USBD_IRQHandler+0x510>
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80019aa:	2901      	cmp	r1, #1
 80019ac:	d14b      	bne.n	8001a46 <XMC_USBD_IRQHandler+0x4ea>
        if (diepint.b.emptyintr)
 80019ae:	0628      	lsls	r0, r5, #24
 80019b0:	d549      	bpl.n	8001a46 <XMC_USBD_IRQHandler+0x4ea>
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 80019b2:	f108 0a6a 	add.w	sl, r8, #106	; 0x6a
  byte_count = ep->xferLength - ep->xferCount;
 80019b6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80019b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 80019ba:	f854 a02a 	ldr.w	sl, [r4, sl, lsl #2]
  byte_count = ep->xferLength - ep->xferCount;
 80019be:	9004      	str	r0, [sp, #16]
  if (!byte_count)
 80019c0:	1a12      	subs	r2, r2, r0
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 80019c2:	f8da a018 	ldr.w	sl, [sl, #24]
  if (!byte_count)
 80019c6:	9205      	str	r2, [sp, #20]
 80019c8:	d02f      	beq.n	8001a2a <XMC_USBD_IRQHandler+0x4ce>
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 80019ca:	3203      	adds	r2, #3
 80019cc:	fa1f f08a 	uxth.w	r0, sl
 80019d0:	ea4f 0a92 	mov.w	sl, r2, lsr #2
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 80019d4:	4550      	cmp	r0, sl
 80019d6:	4602      	mov	r2, r0
 80019d8:	d202      	bcs.n	80019e0 <XMC_USBD_IRQHandler+0x484>
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 80019da:	0080      	lsls	r0, r0, #2
 80019dc:	9005      	str	r0, [sp, #20]
 80019de:	4692      	mov	sl, r2
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 80019e0:	f1ba 0f00 	cmp.w	sl, #0
 80019e4:	d021      	beq.n	8001a2a <XMC_USBD_IRQHandler+0x4ce>
 80019e6:	2234      	movs	r2, #52	; 0x34
 80019e8:	fb02 400e 	mla	r0, r2, lr, r4
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 80019ec:	f108 0878 	add.w	r8, r8, #120	; 0x78
 80019f0:	9004      	str	r0, [sp, #16]
 80019f2:	f854 2028 	ldr.w	r2, [r4, r8, lsl #2]
 80019f6:	9007      	str	r0, [sp, #28]
 80019f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80019fa:	9006      	str	r0, [sp, #24]
 80019fc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001a00:	e9cd e308 	strd	lr, r3, [sp, #32]
 8001a04:	9801      	ldr	r0, [sp, #4]
 8001a06:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8001a0a:	4696      	mov	lr, r2
 8001a0c:	9a06      	ldr	r2, [sp, #24]
      *fifo = *(uint32_t*)ep->xferBuffer;
 8001a0e:	f852 3b04 	ldr.w	r3, [r2], #4
 8001a12:	f8ce 3000 	str.w	r3, [lr]
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001a16:	4552      	cmp	r2, sl
 8001a18:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 8001a1c:	d1f7      	bne.n	8001a0e <XMC_USBD_IRQHandler+0x4b2>
 8001a1e:	9a07      	ldr	r2, [sp, #28]
 8001a20:	9001      	str	r0, [sp, #4]
 8001a22:	e9dd e308 	ldrd	lr, r3, [sp, #32]
 8001a26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a28:	9204      	str	r2, [sp, #16]
          ep->xferCount += bytes;
 8001a2a:	2234      	movs	r2, #52	; 0x34
 8001a2c:	fb02 4a0e 	mla	sl, r2, lr, r4
 8001a30:	9a04      	ldr	r2, [sp, #16]
 8001a32:	9805      	ldr	r0, [sp, #20]
 8001a34:	4690      	mov	r8, r2
          ep->xferBuffer += bytes;
 8001a36:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
          ep->xferCount += bytes;
 8001a3a:	4480      	add	r8, r0
          ep->xferBuffer += bytes;
 8001a3c:	4402      	add	r2, r0
          ep->xferCount += bytes;
 8001a3e:	f8ca 802c 	str.w	r8, [sl, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8001a42:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
      if (diepint.b.xfercompl)
 8001a46:	f1bc 0f00 	cmp.w	ip, #0
 8001a4a:	d00f      	beq.n	8001a6c <XMC_USBD_IRQHandler+0x510>
        if (ep->xferTotal==ep->xferLength)
 8001a4c:	2334      	movs	r3, #52	; 0x34
 8001a4e:	fb03 4c0e 	mla	ip, r3, lr, r4
 8001a52:	f8dc 2030 	ldr.w	r2, [ip, #48]	; 0x30
 8001a56:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d022      	beq.n	8001aa4 <XMC_USBD_IRQHandler+0x548>
          XMC_USBD_lStartWriteXfer(ep);
 8001a5e:	2334      	movs	r3, #52	; 0x34
 8001a60:	fb03 400e 	mla	r0, r3, lr, r4
 8001a64:	f7ff f8ea 	bl	8000c3c <XMC_USBD_lStartWriteXfer>
 8001a68:	f854 3027 	ldr.w	r3, [r4, r7, lsl #2]
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8001a6c:	609d      	str	r5, [r3, #8]
    ep_num++;
 8001a6e:	3601      	adds	r6, #1
 8001a70:	b2f6      	uxtb	r6, r6
  while ((uint16_t)mask >> ep_num)
 8001a72:	fa5b f306 	asrs.w	r3, fp, r6
 8001a76:	46b6      	mov	lr, r6
 8001a78:	f47f af53 	bne.w	8001922 <XMC_USBD_IRQHandler+0x3c6>
 8001a7c:	e9dd ba02 	ldrd	fp, sl, [sp, #8]
	xmc_device.global_register->gintsts = clear.d32;
 8001a80:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8001a84:	2200      	movs	r2, #0
 8001a86:	615a      	str	r2, [r3, #20]
 8001a88:	e5c2      	b.n	8001610 <XMC_USBD_IRQHandler+0xb4>
      if (doepint.b.xfercompl)
 8001a8a:	f1bb 0f00 	cmp.w	fp, #0
 8001a8e:	f47f ae3f 	bne.w	8001710 <XMC_USBD_IRQHandler+0x1b4>
 8001a92:	e654      	b.n	800173e <XMC_USBD_IRQHandler+0x1e2>
 8001a94:	20000a6c 	.word	0x20000a6c
 8001a98:	00100040 	.word	0x00100040
 8001a9c:	00100050 	.word	0x00100050
 8001aa0:	00100060 	.word	0x00100060
          ep->inInUse = 0U;
 8001aa4:	f8dc 3004 	ldr.w	r3, [ip, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001aa8:	2901      	cmp	r1, #1
          ep->inInUse = 0U;
 8001aaa:	f36f 03c3 	bfc	r3, #3, #1
 8001aae:	f8cc 3004 	str.w	r3, [ip, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001ab2:	f47f af71 	bne.w	8001998 <XMC_USBD_IRQHandler+0x43c>
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 8001ab6:	9a01      	ldr	r2, [sp, #4]
 8001ab8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001aba:	fa01 f10e 	lsl.w	r1, r1, lr
 8001abe:	ea23 0101 	bic.w	r1, r3, r1
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8001ac2:	6351      	str	r1, [r2, #52]	; 0x34
 8001ac4:	e768      	b.n	8001998 <XMC_USBD_IRQHandler+0x43c>
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8001ac6:	f3c0 110a 	ubfx	r1, r0, #4, #11
 8001aca:	f000 000f 	and.w	r0, r0, #15
 8001ace:	f7ff fcd5 	bl	800147c <XMC_USBD_lReadFifo>
 8001ad2:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8001ad6:	e5c7      	b.n	8001668 <XMC_USBD_IRQHandler+0x10c>
 8001ad8:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
          XMC_USBD_lStartReadXfer(ep);
 8001adc:	f7ff f866 	bl	8000bac <XMC_USBD_lStartReadXfer>
 8001ae0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001ae4:	e62b      	b.n	800173e <XMC_USBD_IRQHandler+0x1e2>
 8001ae6:	bf00      	nop

08001ae8 <XMC_USBD_Enable>:
{
 8001ae8:	b508      	push	{r3, lr}
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8001aea:	4803      	ldr	r0, [pc, #12]	; (8001af8 <XMC_USBD_Enable+0x10>)
 8001aec:	f000 fd82 	bl	80025f4 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8001af0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  XMC_SCU_POWER_EnableUsb();
 8001af4:	f000 bfd2 	b.w	8002a9c <XMC_SCU_POWER_EnableUsb>
 8001af8:	20000080 	.word	0x20000080

08001afc <XMC_USBD_Disable>:
{
 8001afc:	b508      	push	{r3, lr}
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8001afe:	4803      	ldr	r0, [pc, #12]	; (8001b0c <XMC_USBD_Disable+0x10>)
 8001b00:	f000 fd6c 	bl	80025dc <XMC_SCU_RESET_AssertPeripheralReset>
}
 8001b04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  XMC_SCU_POWER_DisableUsb();
 8001b08:	f000 bfd0 	b.w	8002aac <XMC_SCU_POWER_DisableUsb>
 8001b0c:	20000080 	.word	0x20000080

08001b10 <XMC_USBD_ClearEvent>:
  switch(event)
 8001b10:	280d      	cmp	r0, #13
 8001b12:	d83f      	bhi.n	8001b94 <XMC_USBD_ClearEvent+0x84>
 8001b14:	e8df f000 	tbb	[pc, r0]
 8001b18:	3e3e3e30 	.word	0x3e3e3e30
 8001b1c:	070e3e37 	.word	0x070e3e37
 8001b20:	29221c07 	.word	0x29221c07
 8001b24:	153e      	.short	0x153e
	  clear.b.wkupintr = 1U;
 8001b26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	xmc_device.global_register->gintsts = clear.d32;
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <XMC_USBD_ClearEvent+0x88>)
 8001b2c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001b30:	615a      	str	r2, [r3, #20]
}
 8001b32:	4770      	bx	lr
	xmc_device.global_register->gintsts = clear.d32;
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <XMC_USBD_ClearEvent+0x88>)
 8001b36:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
	  clear.b.usbsuspend = 1U;
 8001b3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
	xmc_device.global_register->gintsts = clear.d32;
 8001b3e:	615a      	str	r2, [r3, #20]
}
 8001b40:	4770      	bx	lr
	xmc_device.global_register->gintsts = clear.d32;
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <XMC_USBD_ClearEvent+0x88>)
 8001b44:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
	  clear.b.outepintr = 1U;
 8001b48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
	xmc_device.global_register->gintsts = clear.d32;
 8001b4c:	615a      	str	r2, [r3, #20]
}
 8001b4e:	4770      	bx	lr
	xmc_device.global_register->gintsts = clear.d32;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <XMC_USBD_ClearEvent+0x88>)
 8001b52:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
	  clear.b.sofintr = 1U;
 8001b56:	2208      	movs	r2, #8
	xmc_device.global_register->gintsts = clear.d32;
 8001b58:	615a      	str	r2, [r3, #20]
}
 8001b5a:	4770      	bx	lr
	xmc_device.global_register->gintsts = clear.d32;
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <XMC_USBD_ClearEvent+0x88>)
 8001b5e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
	  clear.b.erlysuspend = 1U;
 8001b62:	f44f 6280 	mov.w	r2, #1024	; 0x400
	xmc_device.global_register->gintsts = clear.d32;
 8001b66:	615a      	str	r2, [r3, #20]
}
 8001b68:	4770      	bx	lr
	xmc_device.global_register->gintsts = clear.d32;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <XMC_USBD_ClearEvent+0x88>)
 8001b6c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
	  clear.b.enumdone = 1U;
 8001b70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	xmc_device.global_register->gintsts = clear.d32;
 8001b74:	615a      	str	r2, [r3, #20]
}
 8001b76:	4770      	bx	lr
	xmc_device.global_register->gintsts = clear.d32;
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <XMC_USBD_ClearEvent+0x88>)
 8001b7a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
	  clear.b.sessreqintr = 1U;
 8001b7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	xmc_device.global_register->gintsts = clear.d32;
 8001b82:	615a      	str	r2, [r3, #20]
}
 8001b84:	4770      	bx	lr
	xmc_device.global_register->gintsts = clear.d32;
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <XMC_USBD_ClearEvent+0x88>)
 8001b88:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
	  clear.b.usbreset = 1U;
 8001b8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	xmc_device.global_register->gintsts = clear.d32;
 8001b90:	615a      	str	r2, [r3, #20]
}
 8001b92:	4770      	bx	lr
  switch(event)
 8001b94:	2200      	movs	r2, #0
 8001b96:	e7c8      	b.n	8001b2a <XMC_USBD_ClearEvent+0x1a>
 8001b98:	200008a8 	.word	0x200008a8

08001b9c <XMC_USBD_ClearEventINEP>:
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8001b9c:	316a      	adds	r1, #106	; 0x6a
 8001b9e:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <XMC_USBD_ClearEventINEP+0xc>)
 8001ba0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ba4:	6098      	str	r0, [r3, #8]
}
 8001ba6:	4770      	bx	lr
 8001ba8:	200008a8 	.word	0x200008a8

08001bac <XMC_USBD_ClearEventOUTEP>:
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <XMC_USBD_ClearEventOUTEP+0x10>)
 8001bae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001bb2:	f8d1 31c4 	ldr.w	r3, [r1, #452]	; 0x1c4
 8001bb6:	6098      	str	r0, [r3, #8]
}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	200008a8 	.word	0x200008a8

08001bc0 <XMC_USBD_EnableEventOUTEP>:
	xmc_device.device_register->doepmsk |= doepint.d32;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <XMC_USBD_EnableEventOUTEP+0x10>)
 8001bc2:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001bc6:	6953      	ldr	r3, [r2, #20]
 8001bc8:	4318      	orrs	r0, r3
 8001bca:	6150      	str	r0, [r2, #20]
}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	200008a8 	.word	0x200008a8

08001bd4 <XMC_USBD_EnableEventINEP>:
	xmc_device.device_register->diepmsk |= diepint.d32;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <XMC_USBD_EnableEventINEP+0x10>)
 8001bd6:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001bda:	6913      	ldr	r3, [r2, #16]
 8001bdc:	4318      	orrs	r0, r3
 8001bde:	6110      	str	r0, [r2, #16]
}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	200008a8 	.word	0x200008a8

08001be8 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8001be8:	b538      	push	{r3, r4, r5, lr}
 8001bea:	4604      	mov	r4, r0
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8001bec:	2300      	movs	r3, #0

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 8001bee:	2202      	movs	r2, #2
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 8001bf0:	2503      	movs	r5, #3
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8001bf2:	6143      	str	r3, [r0, #20]
 8001bf4:	6183      	str	r3, [r0, #24]
 8001bf6:	61c3      	str	r3, [r0, #28]

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	4410      	add	r0, r2
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 8001bfc:	74a5      	strb	r5, [r4, #18]
	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 8001bfe:	71a2      	strb	r2, [r4, #6]
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 8001c00:	7322      	strb	r2, [r4, #12]
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 8001c02:	f000 fb6f 	bl	80022e4 <Endpoint_ConfigureEndpointTable>
 8001c06:	b908      	cbnz	r0, 8001c0c <CDC_Device_ConfigureEndpoints+0x24>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
 8001c08:	2000      	movs	r0, #0
 8001c0a:	bd38      	pop	{r3, r4, r5, pc}
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	f104 0008 	add.w	r0, r4, #8
 8001c12:	f000 fb67 	bl	80022e4 <Endpoint_ConfigureEndpointTable>
 8001c16:	2800      	cmp	r0, #0
 8001c18:	d0f6      	beq.n	8001c08 <CDC_Device_ConfigureEndpoints+0x20>
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 8001c1a:	f104 000e 	add.w	r0, r4, #14
 8001c1e:	2101      	movs	r1, #1
}
 8001c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 8001c24:	f000 bb5e 	b.w	80022e4 <Endpoint_ConfigureEndpointTable>

08001c28 <CDC_Device_SendString>:
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <CDC_Device_SendString+0x3c>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d117      	bne.n	8001c60 <CDC_Device_SendString+0x38>
 8001c30:	6983      	ldr	r3, [r0, #24]
 8001c32:	b1ab      	cbz	r3, 8001c60 <CDC_Device_SendString+0x38>
{
 8001c34:	b510      	push	{r4, lr}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8001c36:	7883      	ldrb	r3, [r0, #2]
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001c38:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <CDC_Device_SendString+0x40>)
 8001c3a:	460c      	mov	r4, r1
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f003 010f 	and.w	r1, r3, #15
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001c42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001c46:	f882 113c 	strb.w	r1, [r2, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001c4a:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
 8001c4e:	f001 ffb7 	bl	8003bc0 <strlen>
 8001c52:	2200      	movs	r2, #0
 8001c54:	b281      	uxth	r1, r0
 8001c56:	4620      	mov	r0, r4
}
 8001c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 8001c5c:	f001 ba86 	b.w	800316c <Endpoint_Write_Stream_LE>
}
 8001c60:	2002      	movs	r0, #2
 8001c62:	4770      	bx	lr
 8001c64:	20000ab1 	.word	0x20000ab1
 8001c68:	20000764 	.word	0x20000764

08001c6c <CDC_Device_SendData>:

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <CDC_Device_SendData+0x34>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d113      	bne.n	8001c9c <CDC_Device_SendData+0x30>
 8001c74:	6983      	ldr	r3, [r0, #24]
 8001c76:	b18b      	cbz	r3, 8001c9c <CDC_Device_SendData+0x30>
{
 8001c78:	b430      	push	{r4, r5}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8001c7a:	7883      	ldrb	r3, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001c7c:	4d09      	ldr	r5, [pc, #36]	; (8001ca4 <CDC_Device_SendData+0x38>)
 8001c7e:	460c      	mov	r4, r1
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 8001c80:	4620      	mov	r0, r4
 8001c82:	f003 040f 	and.w	r4, r3, #15
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001c86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001c8a:	4611      	mov	r1, r2
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001c8c:	f885 413c 	strb.w	r4, [r5, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001c90:	f885 313d 	strb.w	r3, [r5, #317]	; 0x13d
 8001c94:	2200      	movs	r2, #0
}
 8001c96:	bc30      	pop	{r4, r5}
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 8001c98:	f001 ba68 	b.w	800316c <Endpoint_Write_Stream_LE>
}
 8001c9c:	2002      	movs	r0, #2
 8001c9e:	4770      	bx	lr
 8001ca0:	20000ab1 	.word	0x20000ab1
 8001ca4:	20000764 	.word	0x20000764

08001ca8 <CDC_Device_SendByte>:

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001ca8:	4b10      	ldr	r3, [pc, #64]	; (8001cec <CDC_Device_SendByte+0x44>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d11a      	bne.n	8001ce6 <CDC_Device_SendByte+0x3e>
 8001cb0:	6983      	ldr	r3, [r0, #24]
 8001cb2:	b1c3      	cbz	r3, 8001ce6 <CDC_Device_SendByte+0x3e>
{
 8001cb4:	b510      	push	{r4, lr}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8001cb6:	7883      	ldrb	r3, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <CDC_Device_SendByte+0x48>)
 8001cba:	460c      	mov	r4, r1
 8001cbc:	f003 010f 	and.w	r1, r3, #15
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001cc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001cc4:	f882 113c 	strb.w	r1, [r2, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001cc8:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d

	if (!(Endpoint_IsReadWriteAllowed()))
 8001ccc:	f000 fa96 	bl	80021fc <Endpoint_IsReadWriteAllowed>
 8001cd0:	b920      	cbnz	r0, 8001cdc <CDC_Device_SendByte+0x34>
	{
		Endpoint_ClearIN();
 8001cd2:	f000 fa45 	bl	8002160 <Endpoint_ClearIN>

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 8001cd6:	f000 f9c9 	bl	800206c <Endpoint_WaitUntilReady>
 8001cda:	b918      	cbnz	r0, 8001ce4 <CDC_Device_SendByte+0x3c>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f000 faa5 	bl	800222c <Endpoint_Write_8>
	return ENDPOINT_READYWAIT_NoError;
 8001ce2:	2000      	movs	r0, #0
}
 8001ce4:	bd10      	pop	{r4, pc}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 8001ce6:	2002      	movs	r0, #2
}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000ab1 	.word	0x20000ab1
 8001cf0:	20000764 	.word	0x20000764

08001cf4 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001cf4:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <CDC_Device_Flush+0x64>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d117      	bne.n	8001d2c <CDC_Device_Flush+0x38>
 8001cfc:	6983      	ldr	r3, [r0, #24]
 8001cfe:	b1ab      	cbz	r3, 8001d2c <CDC_Device_Flush+0x38>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8001d00:	7883      	ldrb	r3, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001d02:	4916      	ldr	r1, [pc, #88]	; (8001d5c <CDC_Device_Flush+0x68>)
 8001d04:	f003 000f 	and.w	r0, r3, #15
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		if (ep->Direction)
 8001d08:	222c      	movs	r2, #44	; 0x2c
 8001d0a:	fb02 1200 	mla	r2, r2, r0, r1
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001d0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d12:	f881 313d 	strb.w	r3, [r1, #317]	; 0x13d
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001d16:	f881 013c 	strb.w	r0, [r1, #316]	; 0x13c
		if (ep->Direction)
 8001d1a:	f992 3004 	ldrsb.w	r3, [r2, #4]
 8001d1e:	2b00      	cmp	r3, #0
			return ep->InBytesAvailable;
 8001d20:	bfb4      	ite	lt
 8001d22:	8b93      	ldrhlt	r3, [r2, #28]
		else
			return ep->OutBytesAvailable;
 8001d24:	8993      	ldrhge	r3, [r2, #12]

	if (!(Endpoint_BytesInEndpoint()))
 8001d26:	b91b      	cbnz	r3, 8001d30 <CDC_Device_Flush+0x3c>
	  return ENDPOINT_READYWAIT_NoError;
 8001d28:	2000      	movs	r0, #0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
 8001d2a:	4770      	bx	lr
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 8001d2c:	2002      	movs	r0, #2
 8001d2e:	4770      	bx	lr
{
 8001d30:	b510      	push	{r4, lr}
 8001d32:	b082      	sub	sp, #8
	bool BankFull = !(Endpoint_IsReadWriteAllowed());
 8001d34:	f000 fa62 	bl	80021fc <Endpoint_IsReadWriteAllowed>
 8001d38:	4604      	mov	r4, r0
	Endpoint_ClearIN();
 8001d3a:	f000 fa11 	bl	8002160 <Endpoint_ClearIN>
	if (BankFull)
 8001d3e:	b114      	cbz	r4, 8001d46 <CDC_Device_Flush+0x52>
	  return ENDPOINT_READYWAIT_NoError;
 8001d40:	2000      	movs	r0, #0
}
 8001d42:	b002      	add	sp, #8
 8001d44:	bd10      	pop	{r4, pc}
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 8001d46:	f000 f991 	bl	800206c <Endpoint_WaitUntilReady>
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	d1f9      	bne.n	8001d42 <CDC_Device_Flush+0x4e>
 8001d4e:	9001      	str	r0, [sp, #4]
		Endpoint_ClearIN();
 8001d50:	f000 fa06 	bl	8002160 <Endpoint_ClearIN>
 8001d54:	9801      	ldr	r0, [sp, #4]
 8001d56:	e7f4      	b.n	8001d42 <CDC_Device_Flush+0x4e>
 8001d58:	20000ab1 	.word	0x20000ab1
 8001d5c:	20000764 	.word	0x20000764

08001d60 <CDC_Device_USBTask>:
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <CDC_Device_USBTask+0x48>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d000      	beq.n	8001d6a <CDC_Device_USBTask+0xa>
 8001d68:	4770      	bx	lr
 8001d6a:	6983      	ldr	r3, [r0, #24]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0fb      	beq.n	8001d68 <CDC_Device_USBTask+0x8>
{
 8001d70:	b410      	push	{r4}
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8001d72:	7883      	ldrb	r3, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001d74:	490d      	ldr	r1, [pc, #52]	; (8001dac <CDC_Device_USBTask+0x4c>)
 8001d76:	f003 040f 	and.w	r4, r3, #15
		return ep->InInUse == 0 && ep->IsEnabled;
 8001d7a:	222c      	movs	r2, #44	; 0x2c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001d7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		return ep->InInUse == 0 && ep->IsEnabled;
 8001d80:	fb02 1204 	mla	r2, r2, r4, r1
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001d84:	f881 313d 	strb.w	r3, [r1, #317]	; 0x13d
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001d88:	f881 413c 	strb.w	r4, [r1, #316]	; 0x13c
		return ep->InInUse == 0 && ep->IsEnabled;
 8001d8c:	6893      	ldr	r3, [r2, #8]
 8001d8e:	06d9      	lsls	r1, r3, #27
 8001d90:	d406      	bmi.n	8001da0 <CDC_Device_USBTask+0x40>
 8001d92:	7a13      	ldrb	r3, [r2, #8]
 8001d94:	079b      	lsls	r3, r3, #30
 8001d96:	d503      	bpl.n	8001da0 <CDC_Device_USBTask+0x40>
}
 8001d98:	f85d 4b04 	ldr.w	r4, [sp], #4
	  CDC_Device_Flush(CDCInterfaceInfo);
 8001d9c:	f7ff bfaa 	b.w	8001cf4 <CDC_Device_Flush>
}
 8001da0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000ab1 	.word	0x20000ab1
 8001dac:	20000764 	.word	0x20000764

08001db0 <CDC_Device_BytesReceived>:

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001db0:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <CDC_Device_BytesReceived+0x54>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d001      	beq.n	8001dbc <CDC_Device_BytesReceived+0xc>
	  return 0;
 8001db8:	2000      	movs	r0, #0
 8001dba:	4770      	bx	lr
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001dbc:	6983      	ldr	r3, [r0, #24]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0fa      	beq.n	8001db8 <CDC_Device_BytesReceived+0x8>

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 8001dc2:	7a02      	ldrb	r2, [r0, #8]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001dc4:	4910      	ldr	r1, [pc, #64]	; (8001e08 <CDC_Device_BytesReceived+0x58>)
 8001dc6:	f002 000f 	and.w	r0, r2, #15
		return ep->IsOutRecieved;
 8001dca:	232c      	movs	r3, #44	; 0x2c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001dcc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
		return ep->IsOutRecieved;
 8001dd0:	fb03 1300 	mla	r3, r3, r0, r1
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001dd4:	f881 213d 	strb.w	r2, [r1, #317]	; 0x13d
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001dd8:	f881 013c 	strb.w	r0, [r1, #316]	; 0x13c
		return ep->IsOutRecieved;
 8001ddc:	689a      	ldr	r2, [r3, #8]

	if (Endpoint_IsOUTReceived())
 8001dde:	0692      	lsls	r2, r2, #26
 8001de0:	d5ea      	bpl.n	8001db8 <CDC_Device_BytesReceived+0x8>
		if (ep->Direction)
 8001de2:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8001de6:	2a00      	cmp	r2, #0
			return ep->InBytesAvailable;
 8001de8:	bfb4      	ite	lt
 8001dea:	8b98      	ldrhlt	r0, [r3, #28]
			return ep->OutBytesAvailable;
 8001dec:	8998      	ldrhge	r0, [r3, #12]
	{
		if (!(Endpoint_BytesInEndpoint()))
 8001dee:	b100      	cbz	r0, 8001df2 <CDC_Device_BytesReceived+0x42>
	}
	else
	{
		return 0;
	}
}
 8001df0:	4770      	bx	lr
{
 8001df2:	b500      	push	{lr}
 8001df4:	b083      	sub	sp, #12
 8001df6:	9001      	str	r0, [sp, #4]
			Endpoint_ClearOUT();
 8001df8:	f000 f988 	bl	800210c <Endpoint_ClearOUT>
 8001dfc:	9801      	ldr	r0, [sp, #4]
}
 8001dfe:	b003      	add	sp, #12
 8001e00:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e04:	20000ab1 	.word	0x20000ab1
 8001e08:	20000764 	.word	0x20000764

08001e0c <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8001e0c:	b538      	push	{r3, r4, r5, lr}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <CDC_Device_ReceiveByte+0x84>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d138      	bne.n	8001e88 <CDC_Device_ReceiveByte+0x7c>
 8001e16:	6983      	ldr	r3, [r0, #24]
 8001e18:	b3b3      	cbz	r3, 8001e88 <CDC_Device_ReceiveByte+0x7c>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 8001e1a:	7a02      	ldrb	r2, [r0, #8]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001e1c:	4c1d      	ldr	r4, [pc, #116]	; (8001e94 <CDC_Device_ReceiveByte+0x88>)
 8001e1e:	f002 000f 	and.w	r0, r2, #15
		return ep->IsOutRecieved;
 8001e22:	232c      	movs	r3, #44	; 0x2c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001e24:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
		return ep->IsOutRecieved;
 8001e28:	fb03 4300 	mla	r3, r3, r0, r4
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001e2c:	f884 213d 	strb.w	r2, [r4, #317]	; 0x13d
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001e30:	f884 013c 	strb.w	r0, [r4, #316]	; 0x13c
		return ep->IsOutRecieved;
 8001e34:	689a      	ldr	r2, [r3, #8]

	if (Endpoint_IsOUTReceived())
 8001e36:	0692      	lsls	r2, r2, #26
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8001e38:	4601      	mov	r1, r0
 8001e3a:	d525      	bpl.n	8001e88 <CDC_Device_ReceiveByte+0x7c>
		if (ep->Direction)
 8001e3c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8001e40:	2a00      	cmp	r2, #0
 8001e42:	db0c      	blt.n	8001e5e <CDC_Device_ReceiveByte+0x52>
	{
		if (Endpoint_BytesInEndpoint())
 8001e44:	899b      	ldrh	r3, [r3, #12]
	int16_t ReceivedByte = -1;
 8001e46:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		if (Endpoint_BytesInEndpoint())
 8001e4a:	b963      	cbnz	r3, 8001e66 <CDC_Device_ReceiveByte+0x5a>
			return ep->OutBytesAvailable;
 8001e4c:	232c      	movs	r3, #44	; 0x2c
 8001e4e:	fb03 4401 	mla	r4, r3, r1, r4
 8001e52:	89a3      	ldrh	r3, [r4, #12]
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
 8001e54:	b90b      	cbnz	r3, 8001e5a <CDC_Device_ReceiveByte+0x4e>
		  Endpoint_ClearOUT();
 8001e56:	f000 f959 	bl	800210c <Endpoint_ClearOUT>
	}

	return ReceivedByte;
}
 8001e5a:	4628      	mov	r0, r5
 8001e5c:	bd38      	pop	{r3, r4, r5, pc}
		if (Endpoint_BytesInEndpoint())
 8001e5e:	8b9b      	ldrh	r3, [r3, #28]
	int16_t ReceivedByte = -1;
 8001e60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		if (Endpoint_BytesInEndpoint())
 8001e64:	b15b      	cbz	r3, 8001e7e <CDC_Device_ReceiveByte+0x72>
		  ReceivedByte = Endpoint_Read_8();
 8001e66:	f000 f9f9 	bl	800225c <Endpoint_Read_8>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8001e6a:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
		if (ep->Direction)
 8001e6e:	232c      	movs	r3, #44	; 0x2c
 8001e70:	fb03 4301 	mla	r3, r3, r1, r4
 8001e74:	b205      	sxth	r5, r0
 8001e76:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	dae6      	bge.n	8001e4c <CDC_Device_ReceiveByte+0x40>
			return ep->InBytesAvailable;
 8001e7e:	232c      	movs	r3, #44	; 0x2c
 8001e80:	fb03 4401 	mla	r4, r3, r1, r4
 8001e84:	8ba3      	ldrh	r3, [r4, #28]
 8001e86:	e7e5      	b.n	8001e54 <CDC_Device_ReceiveByte+0x48>
	  return -1;
 8001e88:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001e8c:	e7e5      	b.n	8001e5a <CDC_Device_ReceiveByte+0x4e>
 8001e8e:	bf00      	nop
 8001e90:	20000ab1 	.word	0x20000ab1
 8001e94:	20000764 	.word	0x20000764

08001e98 <CDC_Device_SendControlLineStateChange>:

void CDC_Device_SendControlLineStateChange(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <CDC_Device_SendControlLineStateChange+0x54>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d000      	beq.n	8001ea2 <CDC_Device_SendControlLineStateChange+0xa>
 8001ea0:	4770      	bx	lr
 8001ea2:	6983      	ldr	r3, [r0, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0fb      	beq.n	8001ea0 <CDC_Device_SendControlLineStateChange+0x8>
{
 8001ea8:	b530      	push	{r4, r5, lr}
	  return;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.NotificationEndpoint.Address);

	USB_Request_Header_t Notification = (USB_Request_Header_t)
 8001eaa:	4a11      	ldr	r2, [pc, #68]	; (8001ef0 <CDC_Device_SendControlLineStateChange+0x58>)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.NotificationEndpoint.Address);
 8001eac:	7b83      	ldrb	r3, [r0, #14]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001eae:	4d11      	ldr	r5, [pc, #68]	; (8001ef4 <CDC_Device_SendControlLineStateChange+0x5c>)
 8001eb0:	4604      	mov	r4, r0
	USB_Request_Header_t Notification = (USB_Request_Header_t)
 8001eb2:	e892 0003 	ldmia.w	r2, {r0, r1}
{
 8001eb6:	b083      	sub	sp, #12
	USB_Request_Header_t Notification = (USB_Request_Header_t)
 8001eb8:	466a      	mov	r2, sp
 8001eba:	e882 0003 	stmia.w	r2, {r0, r1}
 8001ebe:	f003 010f 	and.w	r1, r3, #15
 8001ec2:	f885 113c 	strb.w	r1, [r5, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001ec6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
			.wValue        = CPU_TO_LE16(0),
			.wIndex        = CPU_TO_LE16(0),
			.wLength       = CPU_TO_LE16(sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost)),
		};

	Endpoint_Write_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
 8001eca:	4610      	mov	r0, r2
 8001ecc:	2108      	movs	r1, #8
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f885 313d 	strb.w	r3, [r5, #317]	; 0x13d
 8001ed4:	f001 f94a 	bl	800316c <Endpoint_Write_Stream_LE>
	Endpoint_Write_Stream_LE(&CDCInterfaceInfo->State.ControlLineStates.DeviceToHost,
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2102      	movs	r1, #2
 8001edc:	f104 0016 	add.w	r0, r4, #22
 8001ee0:	f001 f944 	bl	800316c <Endpoint_Write_Stream_LE>
	                         sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost),
	                         NULL);
	Endpoint_ClearIN();
 8001ee4:	f000 f93c 	bl	8002160 <Endpoint_ClearIN>
}
 8001ee8:	b003      	add	sp, #12
 8001eea:	bd30      	pop	{r4, r5, pc}
 8001eec:	20000ab1 	.word	0x20000ab1
 8001ef0:	08003df8 	.word	0x08003df8
 8001ef4:	20000764 	.word	0x20000764

08001ef8 <EVENT_CDC_Device_LineEncodingChanged>:
}
#endif

__WEAK void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop

08001efc <EVENT_CDC_Device_ControLineStateChanged>:
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop

08001f00 <EVENT_CDC_Device_BreakSent>:
}

__WEAK void EVENT_CDC_Device_BreakSent(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
				                               const uint8_t Duration)
{
}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop

08001f04 <CDC_Device_ProcessControlRequest>:
{
 8001f04:	b538      	push	{r3, r4, r5, lr}
		return device.IsSetupRecieved;
 8001f06:	4b41      	ldr	r3, [pc, #260]	; (800200c <CDC_Device_ProcessControlRequest+0x108>)
 8001f08:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	if (!(Endpoint_IsSETUPReceived()))
 8001f0c:	0794      	lsls	r4, r2, #30
 8001f0e:	d504      	bpl.n	8001f1a <CDC_Device_ProcessControlRequest+0x16>
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 8001f10:	4a3f      	ldr	r2, [pc, #252]	; (8002010 <CDC_Device_ProcessControlRequest+0x10c>)
 8001f12:	7801      	ldrb	r1, [r0, #0]
 8001f14:	8894      	ldrh	r4, [r2, #4]
 8001f16:	428c      	cmp	r4, r1
 8001f18:	d000      	beq.n	8001f1c <CDC_Device_ProcessControlRequest+0x18>
}
 8001f1a:	bd38      	pop	{r3, r4, r5, pc}
	switch (USB_ControlRequest.bRequest)
 8001f1c:	7851      	ldrb	r1, [r2, #1]
 8001f1e:	3920      	subs	r1, #32
 8001f20:	4604      	mov	r4, r0
 8001f22:	2903      	cmp	r1, #3
 8001f24:	d8f9      	bhi.n	8001f1a <CDC_Device_ProcessControlRequest+0x16>
 8001f26:	e8df f001 	tbb	[pc, r1]
 8001f2a:	3a12      	.short	0x3a12
 8001f2c:	025e      	.short	0x025e
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8001f2e:	7811      	ldrb	r1, [r2, #0]
 8001f30:	2921      	cmp	r1, #33	; 0x21
 8001f32:	d1f2      	bne.n	8001f1a <CDC_Device_ProcessControlRequest+0x16>
		device.IsSetupRecieved = 0;
 8001f34:	f893 013e 	ldrb.w	r0, [r3, #318]	; 0x13e
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 8001f38:	8851      	ldrh	r1, [r2, #2]
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	f36f 0241 	bfc	r2, #1, #1
 8001f40:	b2c9      	uxtb	r1, r1
 8001f42:	4620      	mov	r0, r4
 8001f44:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
 8001f48:	f7ff ffda 	bl	8001f00 <EVENT_CDC_Device_BreakSent>
}
 8001f4c:	bd38      	pop	{r3, r4, r5, pc}
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8001f4e:	7812      	ldrb	r2, [r2, #0]
 8001f50:	2a21      	cmp	r2, #33	; 0x21
 8001f52:	d1e2      	bne.n	8001f1a <CDC_Device_ProcessControlRequest+0x16>
 8001f54:	f893 013e 	ldrb.w	r0, [r3, #318]	; 0x13e
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8001f58:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 8001f5c:	492d      	ldr	r1, [pc, #180]	; (8002014 <CDC_Device_ProcessControlRequest+0x110>)
		device.IsSetupRecieved = 0;
 8001f5e:	f36f 0041 	bfc	r0, #1, #1
		return ep->IsOutRecieved;
 8001f62:	252c      	movs	r5, #44	; 0x2c
		device.IsSetupRecieved = 0;
 8001f64:	f883 013e 	strb.w	r0, [r3, #318]	; 0x13e
		return ep->IsOutRecieved;
 8001f68:	fb05 3202 	mla	r2, r5, r2, r3
 8001f6c:	e002      	b.n	8001f74 <CDC_Device_ProcessControlRequest+0x70>
 8001f6e:	780b      	ldrb	r3, [r1, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0d2      	beq.n	8001f1a <CDC_Device_ProcessControlRequest+0x16>
 8001f74:	6893      	ldr	r3, [r2, #8]
				while (!(Endpoint_IsOUTReceived()))
 8001f76:	069b      	lsls	r3, r3, #26
 8001f78:	d5f9      	bpl.n	8001f6e <CDC_Device_ProcessControlRequest+0x6a>
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 8001f7a:	f000 f99d 	bl	80022b8 <Endpoint_Read_32_LE>
 8001f7e:	61a0      	str	r0, [r4, #24]
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 8001f80:	f000 f96c 	bl	800225c <Endpoint_Read_8>
 8001f84:	7720      	strb	r0, [r4, #28]
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 8001f86:	f000 f969 	bl	800225c <Endpoint_Read_8>
 8001f8a:	7760      	strb	r0, [r4, #29]
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 8001f8c:	f000 f966 	bl	800225c <Endpoint_Read_8>
 8001f90:	77a0      	strb	r0, [r4, #30]
				Endpoint_ClearOUT();
 8001f92:	f000 f8bb 	bl	800210c <Endpoint_ClearOUT>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 8001f96:	4620      	mov	r0, r4
 8001f98:	f7ff ffae 	bl	8001ef8 <EVENT_CDC_Device_LineEncodingChanged>
}
 8001f9c:	bd38      	pop	{r3, r4, r5, pc}
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 8001f9e:	7812      	ldrb	r2, [r2, #0]
 8001fa0:	2aa1      	cmp	r2, #161	; 0xa1
 8001fa2:	d1ba      	bne.n	8001f1a <CDC_Device_ProcessControlRequest+0x16>
		device.IsSetupRecieved = 0;
 8001fa4:	f893 113e 	ldrb.w	r1, [r3, #318]	; 0x13e
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8001fa8:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
		device.IsSetupRecieved = 0;
 8001fac:	f36f 0141 	bfc	r1, #1, #1
		return ep->InInUse == 0 && ep->IsEnabled;
 8001fb0:	202c      	movs	r0, #44	; 0x2c
		device.IsSetupRecieved = 0;
 8001fb2:	f883 113e 	strb.w	r1, [r3, #318]	; 0x13e
		return ep->InInUse == 0 && ep->IsEnabled;
 8001fb6:	fb00 3202 	mla	r2, r0, r2, r3
 8001fba:	6893      	ldr	r3, [r2, #8]
 8001fbc:	06d8      	lsls	r0, r3, #27
 8001fbe:	d4fc      	bmi.n	8001fba <CDC_Device_ProcessControlRequest+0xb6>
 8001fc0:	7a13      	ldrb	r3, [r2, #8]
 8001fc2:	0799      	lsls	r1, r3, #30
 8001fc4:	d5f9      	bpl.n	8001fba <CDC_Device_ProcessControlRequest+0xb6>
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 8001fc6:	69a0      	ldr	r0, [r4, #24]
 8001fc8:	f000 f95c 	bl	8002284 <Endpoint_Write_32_LE>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 8001fcc:	7f20      	ldrb	r0, [r4, #28]
 8001fce:	f000 f92d 	bl	800222c <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 8001fd2:	7f60      	ldrb	r0, [r4, #29]
 8001fd4:	f000 f92a 	bl	800222c <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 8001fd8:	7fa0      	ldrb	r0, [r4, #30]
 8001fda:	f000 f927 	bl	800222c <Endpoint_Write_8>
}
 8001fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				Endpoint_ClearIN();
 8001fe2:	f000 b8bd 	b.w	8002160 <Endpoint_ClearIN>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8001fe6:	7811      	ldrb	r1, [r2, #0]
 8001fe8:	2921      	cmp	r1, #33	; 0x21
 8001fea:	d196      	bne.n	8001f1a <CDC_Device_ProcessControlRequest+0x16>
		device.IsSetupRecieved = 0;
 8001fec:	f893 113e 	ldrb.w	r1, [r3, #318]	; 0x13e
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 8001ff0:	7890      	ldrb	r0, [r2, #2]
 8001ff2:	78d5      	ldrb	r5, [r2, #3]
 8001ff4:	460a      	mov	r2, r1
 8001ff6:	f36f 0241 	bfc	r2, #1, #1
 8001ffa:	ea40 2105 	orr.w	r1, r0, r5, lsl #8
 8001ffe:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 8002002:	4620      	mov	r0, r4
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 8002004:	82a1      	strh	r1, [r4, #20]
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 8002006:	f7ff ff79 	bl	8001efc <EVENT_CDC_Device_ControLineStateChanged>
}
 800200a:	bd38      	pop	{r3, r4, r5, pc}
 800200c:	20000764 	.word	0x20000764
 8002010:	20000ab4 	.word	0x20000ab4
 8002014:	20000ab1 	.word	0x20000ab1

08002018 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 8002018:	b538      	push	{r3, r4, r5, lr}
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <USB_USBTask+0x4c>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b1ab      	cbz	r3, 800204c <USB_USBTask+0x34>
	 *  \return Index of the currently selected endpoint.
	 */
	static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetCurrentEndpoint(void)
	{
		return device.CurrentDirection | device.CurrentEndpoint;
 8002020:	4c11      	ldr	r4, [pc, #68]	; (8002068 <USB_USBTask+0x50>)
	 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 8002022:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
		return device.CurrentDirection | device.CurrentEndpoint;
 8002026:	f894 513d 	ldrb.w	r5, [r4, #317]	; 0x13d
 800202a:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800202e:	2200      	movs	r2, #0

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 8002030:	079b      	lsls	r3, r3, #30
		return device.CurrentDirection | device.CurrentEndpoint;
 8002032:	ea45 0501 	orr.w	r5, r5, r1
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002036:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
 800203a:	d408      	bmi.n	800204e <USB_USBTask+0x36>
 800203c:	f005 030f 	and.w	r3, r5, #15
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002040:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002044:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002048:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
}
 800204c:	bd38      	pop	{r3, r4, r5, pc}
	  USB_Device_ProcessControlRequest();
 800204e:	f7fe fa49 	bl	80004e4 <USB_Device_ProcessControlRequest>
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002052:	f005 030f 	and.w	r3, r5, #15
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002056:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800205a:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800205e:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
 8002062:	e7f3      	b.n	800204c <USB_USBTask+0x34>
 8002064:	20000ab1 	.word	0x20000ab1
 8002068:	20000764 	.word	0x20000764

0800206c <Endpoint_WaitUntilReady>:
#define USB_STREAM_TIMEOUT_MS 100

extern volatile uint8_t zlp_flag;

uint8_t Endpoint_WaitUntilReady(void)
{
 800206c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			 *  \return Current USB frame number from the USB controller.
			 */
    
            static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE;
            static inline uint16_t USB_Device_GetFrameNumber(void) {
                return device.Driver->GetFrameNumber();
 8002070:	4c24      	ldr	r4, [pc, #144]	; (8002104 <Endpoint_WaitUntilReady+0x98>)
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8002072:	4d25      	ldr	r5, [pc, #148]	; (8002108 <Endpoint_WaitUntilReady+0x9c>)
 8002074:	6823      	ldr	r3, [r4, #0]
 8002076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002078:	4798      	blx	r3
	 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800207a:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
		return ep->Address & ENDPOINT_DIR_MASK;
 800207e:	262c      	movs	r6, #44	; 0x2c
 8002080:	fb06 4203 	mla	r2, r6, r3, r4
 8002084:	4680      	mov	r8, r0
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 8002086:	f992 1004 	ldrsb.w	r1, [r2, #4]
 800208a:	2900      	cmp	r1, #0
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 800208c:	f04f 0764 	mov.w	r7, #100	; 0x64
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 8002090:	db1f      	blt.n	80020d2 <Endpoint_WaitUntilReady+0x66>
		return ep->IsOutRecieved;
 8002092:	6892      	ldr	r2, [r2, #8]
			if (Endpoint_IsOUTReceived())
 8002094:	0692      	lsls	r2, r2, #26
 8002096:	d42f      	bmi.n	80020f8 <Endpoint_WaitUntilReady+0x8c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8002098:	782a      	ldrb	r2, [r5, #0]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 800209a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800209e:	b312      	cbz	r2, 80020e6 <Endpoint_WaitUntilReady+0x7a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 80020a0:	2905      	cmp	r1, #5
 80020a2:	d023      	beq.n	80020ec <Endpoint_WaitUntilReady+0x80>
	 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
	 */
	static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsStalled(void)
	{
		return device.Endpoints[device.CurrentEndpoint].IsHalted == 1 ? true : false;
 80020a4:	fb06 4303 	mla	r3, r6, r3, r4
 80020a8:	7a1b      	ldrb	r3, [r3, #8]
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 80020aa:	075b      	lsls	r3, r3, #29
 80020ac:	d421      	bmi.n	80020f2 <Endpoint_WaitUntilReady+0x86>
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	4798      	blx	r3
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 80020b4:	4580      	cmp	r8, r0
 80020b6:	d003      	beq.n	80020c0 <Endpoint_WaitUntilReady+0x54>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 80020b8:	1e7b      	subs	r3, r7, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	b1ff      	cbz	r7, 80020fe <Endpoint_WaitUntilReady+0x92>
 80020be:	461f      	mov	r7, r3
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80020c0:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
		return ep->Address & ENDPOINT_DIR_MASK;
 80020c4:	fb06 4203 	mla	r2, r6, r3, r4
 80020c8:	4680      	mov	r8, r0
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 80020ca:	f992 1004 	ldrsb.w	r1, [r2, #4]
 80020ce:	2900      	cmp	r1, #0
 80020d0:	dadf      	bge.n	8002092 <Endpoint_WaitUntilReady+0x26>
		return ep->InInUse == 0 && ep->IsEnabled;
 80020d2:	6890      	ldr	r0, [r2, #8]
 80020d4:	f3c0 1000 	ubfx	r0, r0, #4, #1
 80020d8:	2800      	cmp	r0, #0
 80020da:	d1dd      	bne.n	8002098 <Endpoint_WaitUntilReady+0x2c>
 80020dc:	7a12      	ldrb	r2, [r2, #8]
 80020de:	0791      	lsls	r1, r2, #30
 80020e0:	d5da      	bpl.n	8002098 <Endpoint_WaitUntilReady+0x2c>
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 80020e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 80020e6:	2002      	movs	r0, #2
}
 80020e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		  return ENDPOINT_READYWAIT_BusSuspended;
 80020ec:	2003      	movs	r0, #3
}
 80020ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		  return ENDPOINT_READYWAIT_EndpointStalled;
 80020f2:	2001      	movs	r0, #1
}
 80020f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  return ENDPOINT_READYWAIT_NoError;
 80020f8:	2000      	movs	r0, #0
}
 80020fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  return ENDPOINT_READYWAIT_Timeout;
 80020fe:	2004      	movs	r0, #4
}
 8002100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002104:	20000764 	.word	0x20000764
 8002108:	20000ab1 	.word	0x20000ab1

0800210c <Endpoint_ClearOUT>:

void Endpoint_ClearOUT(void) {
 800210c:	b570      	push	{r4, r5, r6, lr}
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800210e:	4d13      	ldr	r5, [pc, #76]	; (800215c <Endpoint_ClearOUT+0x50>)
 8002110:	f895 413c 	ldrb.w	r4, [r5, #316]	; 0x13c
	/* if we have data left which isn't read yet, we leave this routine to not override it */
	if (ep->IsEnabled == 0)
 8002114:	232c      	movs	r3, #44	; 0x2c
 8002116:	fb03 5404 	mla	r4, r3, r4, r5
 800211a:	7a23      	ldrb	r3, [r4, #8]
 800211c:	0799      	lsls	r1, r3, #30
 800211e:	d51c      	bpl.n	800215a <Endpoint_ClearOUT+0x4e>
		return;
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8002120:	682b      	ldr	r3, [r5, #0]
 8002122:	69a2      	ldr	r2, [r4, #24]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	6961      	ldr	r1, [r4, #20]
 8002128:	7920      	ldrb	r0, [r4, #4]
 800212a:	4798      	blx	r3
	ep->OutOffset = 0;
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) {
 800212c:	68a2      	ldr	r2, [r4, #8]
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 800212e:	60e0      	str	r0, [r4, #12]
	ep->OutOffset = 0;
 8002130:	2100      	movs	r1, #0
	if (!ep->OutInUse && !ep->OutBytesAvailable) {
 8002132:	0712      	lsls	r2, r2, #28
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8002134:	4603      	mov	r3, r0
	ep->OutOffset = 0;
 8002136:	6121      	str	r1, [r4, #16]
	if (!ep->OutInUse && !ep->OutBytesAvailable) {
 8002138:	d40f      	bmi.n	800215a <Endpoint_ClearOUT+0x4e>
 800213a:	b970      	cbnz	r0, 800215a <Endpoint_ClearOUT+0x4e>
		ep->OutInUse = true;
 800213c:	8922      	ldrh	r2, [r4, #8]
		ep->IsOutRecieved = 0;
		device.Driver->EndpointReadStart(ep->Address,
 800213e:	69a1      	ldr	r1, [r4, #24]
 8002140:	7920      	ldrb	r0, [r4, #4]
		ep->OutInUse = true;
 8002142:	f042 0208 	orr.w	r2, r2, #8
 8002146:	8122      	strh	r2, [r4, #8]
		ep->IsOutRecieved = 0;
 8002148:	8922      	ldrh	r2, [r4, #8]
 800214a:	f363 1245 	bfi	r2, r3, #5, #1
 800214e:	8122      	strh	r2, [r4, #8]
		device.Driver->EndpointReadStart(ep->Address,
 8002150:	682b      	ldr	r3, [r5, #0]
				ep->OutBufferLength);
	}
}
 8002152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		device.Driver->EndpointReadStart(ep->Address,
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	4718      	bx	r3
}
 800215a:	bd70      	pop	{r4, r5, r6, pc}
 800215c:	20000764 	.word	0x20000764

08002160 <Endpoint_ClearIN>:

void Endpoint_ClearIN(void)
{
 8002160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002164:	4d22      	ldr	r5, [pc, #136]	; (80021f0 <Endpoint_ClearIN+0x90>)
 8002166:	f895 413c 	ldrb.w	r4, [r5, #316]	; 0x13c
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 800216a:	232c      	movs	r3, #44	; 0x2c
 800216c:	fb03 5404 	mla	r4, r3, r4, r5
 8002170:	68a3      	ldr	r3, [r4, #8]
 8002172:	06d9      	lsls	r1, r3, #27
 8002174:	d427      	bmi.n	80021c6 <Endpoint_ClearIN+0x66>
 8002176:	7a23      	ldrb	r3, [r4, #8]
 8002178:	079a      	lsls	r2, r3, #30
 800217a:	d524      	bpl.n	80021c6 <Endpoint_ClearIN+0x66>
		return;
	ep->InInUse = true;
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
	ep->InDataLeft = ep->InBytesAvailable;
 800217c:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
	ep->InInUse = true;
 8002180:	8923      	ldrh	r3, [r4, #8]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002182:	4e1c      	ldr	r6, [pc, #112]	; (80021f4 <Endpoint_ClearIN+0x94>)
	ep->InDataBuffer = ep->InBuffer;
 8002184:	62e2      	str	r2, [r4, #44]	; 0x2c
	ep->InInUse = true;
 8002186:	f043 0310 	orr.w	r3, r3, #16
	ep->InBytesAvailable = 0;
 800218a:	2200      	movs	r2, #0
 800218c:	f44f 6800 	mov.w	r8, #2048	; 0x800
	ep->InInUse = true;
 8002190:	8123      	strh	r3, [r4, #8]
	ep->InDataLeft = ep->InBytesAvailable;
 8002192:	62a1      	str	r1, [r4, #40]	; 0x28
	ep->InBytesAvailable = 0;
 8002194:	61e2      	str	r2, [r4, #28]
 8002196:	f8c6 808c 	str.w	r8, [r6, #140]	; 0x8c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800219a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800219e:	f3bf 8f6f 	isb	sy
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
 80021a2:	682b      	ldr	r3, [r5, #0]
 80021a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80021aa:	7920      	ldrb	r0, [r4, #4]
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
	ep->InDataLeft -= data_count;
	NVIC_EnableIRQ(USB0_0_IRQn);
	if((zlp_flag == true) && (ep->Number != 0))
 80021ac:	4f12      	ldr	r7, [pc, #72]	; (80021f8 <Endpoint_ClearIN+0x98>)
	data_count = device.Driver->EndpointWrite(ep->Address,
 80021ae:	4798      	blx	r3
	ep->InDataBuffer += data_count;
 80021b0:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	ep->InDataLeft -= data_count;
 80021b4:	1a1b      	subs	r3, r3, r0
	ep->InDataBuffer += data_count;
 80021b6:	4401      	add	r1, r0
 80021b8:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80021bc:	f8c6 800c 	str.w	r8, [r6, #12]
	if((zlp_flag == true) && (ep->Number != 0))
 80021c0:	783b      	ldrb	r3, [r7, #0]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d001      	beq.n	80021ca <Endpoint_ClearIN+0x6a>
	  ep->InInUse = true;
	  device.Driver->EndpointWrite(ep->Address,
	  			ep->InDataBuffer,0);
	  zlp_flag = false;
	}
}
 80021c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if((zlp_flag == true) && (ep->Number != 0))
 80021ca:	7920      	ldrb	r0, [r4, #4]
 80021cc:	0703      	lsls	r3, r0, #28
 80021ce:	d0fa      	beq.n	80021c6 <Endpoint_ClearIN+0x66>
	  while(ep->InInUse)
 80021d0:	68a6      	ldr	r6, [r4, #8]
 80021d2:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80021d6:	2e00      	cmp	r6, #0
 80021d8:	d1fa      	bne.n	80021d0 <Endpoint_ClearIN+0x70>
	  ep->InInUse = true;
 80021da:	8923      	ldrh	r3, [r4, #8]
 80021dc:	f043 0310 	orr.w	r3, r3, #16
 80021e0:	8123      	strh	r3, [r4, #8]
	  device.Driver->EndpointWrite(ep->Address,
 80021e2:	682b      	ldr	r3, [r5, #0]
 80021e4:	4632      	mov	r2, r6
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	4798      	blx	r3
	  zlp_flag = false;
 80021ea:	703e      	strb	r6, [r7, #0]
}
 80021ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021f0:	20000764 	.word	0x20000764
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	20000498 	.word	0x20000498

080021fc <Endpoint_IsReadWriteAllowed>:

bool Endpoint_IsReadWriteAllowed(void) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80021fc:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <Endpoint_IsReadWriteAllowed+0x2c>)
 80021fe:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
	bool Retval = false;

	if(EndPoint->Direction)
 8002202:	212c      	movs	r1, #44	; 0x2c
 8002204:	fb01 2303 	mla	r3, r1, r3, r2
 8002208:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800220c:	2a00      	cmp	r2, #0
 800220e:	db04      	blt.n	800221a <Endpoint_IsReadWriteAllowed+0x1e>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength) ? true : false;
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 8002210:	68d8      	ldr	r0, [r3, #12]
 8002212:	3000      	adds	r0, #0
 8002214:	bf18      	it	ne
 8002216:	2001      	movne	r0, #1
	}
	return Retval;
}
 8002218:	4770      	bx	lr
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength) ? true : false;
 800221a:	69d8      	ldr	r0, [r3, #28]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	4298      	cmp	r0, r3
 8002220:	bf2c      	ite	cs
 8002222:	2000      	movcs	r0, #0
 8002224:	2001      	movcc	r0, #1
 8002226:	4770      	bx	lr
 8002228:	20000764 	.word	0x20000764

0800222c <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
 800222c:	b430      	push	{r4, r5}
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 800222e:	4d0a      	ldr	r5, [pc, #40]	; (8002258 <Endpoint_Write_8+0x2c>)
 8002230:	f895 113c 	ldrb.w	r1, [r5, #316]	; 0x13c
	bool Success = false;

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8002234:	242c      	movs	r4, #44	; 0x2c
 8002236:	fb04 5401 	mla	r4, r4, r1, r5
 800223a:	69e3      	ldr	r3, [r4, #28]
 800223c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800223e:	4293      	cmp	r3, r2
 8002240:	d2fd      	bcs.n	800223e <Endpoint_Write_8+0x12>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 8002242:	222c      	movs	r2, #44	; 0x2c
 8002244:	fb02 5201 	mla	r2, r2, r1, r5
 8002248:	6a11      	ldr	r1, [r2, #32]
 800224a:	54c8      	strb	r0, [r1, r3]
	      EndPoint->InBytesAvailable++;
 800224c:	69d3      	ldr	r3, [r2, #28]
 800224e:	3301      	adds	r3, #1
 8002250:	61d3      	str	r3, [r2, #28]

	      Success = true;
	    }
	  }while(!Success);
}
 8002252:	bc30      	pop	{r4, r5}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20000764 	.word	0x20000764

0800225c <Endpoint_Read_8>:

uint8_t Endpoint_Read_8(void) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 800225c:	4a08      	ldr	r2, [pc, #32]	; (8002280 <Endpoint_Read_8+0x24>)
 800225e:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
	bool Success = false;
	uint8_t data = 0;
	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	fb01 2303 	mla	r3, r1, r3, r2
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	b13a      	cbz	r2, 800227c <Endpoint_Read_8+0x20>
		{
          data = EndPoint->OutBuffer[EndPoint->OutOffset];
 800226c:	e9d3 1004 	ldrd	r1, r0, [r3, #16]
          EndPoint->OutOffset++;
          EndPoint->OutBytesAvailable--;
 8002270:	3a01      	subs	r2, #1
          data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8002272:	5c40      	ldrb	r0, [r0, r1]
          EndPoint->OutOffset++;
 8002274:	3101      	adds	r1, #1
 8002276:	e9c3 2103 	strd	r2, r1, [r3, #12]
		  Success = true;
		}
	  }while(!Success);
	 return data;
}
 800227a:	4770      	bx	lr
 800227c:	e7fe      	b.n	800227c <Endpoint_Read_8+0x20>
 800227e:	bf00      	nop
 8002280:	20000764 	.word	0x20000764

08002284 <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 8002284:	b410      	push	{r4}
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002286:	4c0b      	ldr	r4, [pc, #44]	; (80022b4 <Endpoint_Write_32_LE+0x30>)
 8002288:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
	bool Success = false;

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 800228c:	222c      	movs	r2, #44	; 0x2c
 800228e:	fb02 4201 	mla	r2, r2, r1, r4
 8002292:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002294:	69d2      	ldr	r2, [r2, #28]
 8002296:	3b03      	subs	r3, #3
 8002298:	429a      	cmp	r2, r3
 800229a:	d2fd      	bcs.n	8002298 <Endpoint_Write_32_LE+0x14>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) = Data;
 800229c:	232c      	movs	r3, #44	; 0x2c
 800229e:	fb03 4301 	mla	r3, r3, r1, r4
			EndPoint->InBytesAvailable+=4;

			Success = true;
		}
	}while(!Success);
}
 80022a2:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) = Data;
 80022a6:	6a19      	ldr	r1, [r3, #32]
 80022a8:	5088      	str	r0, [r1, r2]
			EndPoint->InBytesAvailable+=4;
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	3204      	adds	r2, #4
 80022ae:	61da      	str	r2, [r3, #28]
}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20000764 	.word	0x20000764

080022b8 <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE(void) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80022b8:	4909      	ldr	r1, [pc, #36]	; (80022e0 <Endpoint_Read_32_LE+0x28>)
 80022ba:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
	bool Success = false;
	uint32_t data = 0;

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 80022be:	222c      	movs	r2, #44	; 0x2c
 80022c0:	fb02 1203 	mla	r2, r2, r3, r1
 80022c4:	68d2      	ldr	r2, [r2, #12]
 80022c6:	2a03      	cmp	r2, #3
 80022c8:	d9fd      	bls.n	80022c6 <Endpoint_Read_32_LE+0xe>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 80022ca:	202c      	movs	r0, #44	; 0x2c
 80022cc:	fb00 1303 	mla	r3, r0, r3, r1
 80022d0:	e9d3 1004 	ldrd	r1, r0, [r3, #16]
			EndPoint->OutOffset+=4;
			EndPoint->OutBytesAvailable-=4;
 80022d4:	3a04      	subs	r2, #4
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 80022d6:	5840      	ldr	r0, [r0, r1]
			EndPoint->OutBytesAvailable-=4;
 80022d8:	60da      	str	r2, [r3, #12]
			EndPoint->OutOffset+=4;
 80022da:	3104      	adds	r1, #4
 80022dc:	6119      	str	r1, [r3, #16]

			Success = true;
		}
	} while(!Success);
	return data;
}
 80022de:	4770      	bx	lr
 80022e0:	20000764 	.word	0x20000764

080022e4 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 80022e4:	2900      	cmp	r1, #0
 80022e6:	d037      	beq.n	8002358 <Endpoint_ConfigureEndpointTable+0x74>
 80022e8:	3901      	subs	r1, #1
			                                     const uint8_t Entries) {
 80022ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022ee:	b2c9      	uxtb	r1, r1
 80022f0:	1d83      	adds	r3, r0, #6
 80022f2:	2606      	movs	r6, #6
 80022f4:	4605      	mov	r5, r0
 80022f6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800235c <Endpoint_ConfigureEndpointTable+0x78>
 80022fa:	fb16 3601 	smlabb	r6, r6, r1, r3
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
			return false;
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 80022fe:	272c      	movs	r7, #44	; 0x2c
 8002300:	e015      	b.n	800232e <Endpoint_ConfigureEndpointTable+0x4a>
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 8002302:	886a      	ldrh	r2, [r5, #2]
 8002304:	8919      	ldrh	r1, [r3, #8]
		device.Endpoints[Number].Address = Table[i].Address;
 8002306:	7828      	ldrb	r0, [r5, #0]
 8002308:	7118      	strb	r0, [r3, #4]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 800230a:	f362 118c 	bfi	r1, r2, #6, #7
		device.Endpoints[Number].IsConfigured = 1;
 800230e:	b2ca      	uxtb	r2, r1
		device.Endpoints[Number].IsEnabled = 1;
 8002310:	f042 0203 	orr.w	r2, r2, #3
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 8002314:	8119      	strh	r1, [r3, #8]
		device.Endpoints[Number].IsEnabled = 1;
 8002316:	721a      	strb	r2, [r3, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 8002318:	0602      	lsls	r2, r0, #24
 800231a:	f105 0506 	add.w	r5, r5, #6
 800231e:	d404      	bmi.n	800232a <Endpoint_ConfigureEndpointTable+0x46>
			device.Driver->EndpointReadStart(Table[i].Address,
 8002320:	f8d8 2000 	ldr.w	r2, [r8]
 8002324:	6999      	ldr	r1, [r3, #24]
 8002326:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002328:	4798      	blx	r3
	for (i=0;i<Entries;i++) {
 800232a:	42b5      	cmp	r5, r6
 800232c:	d011      	beq.n	8002352 <Endpoint_ConfigureEndpointTable+0x6e>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 800232e:	782c      	ldrb	r4, [r5, #0]
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 8002330:	f8d8 1000 	ldr.w	r1, [r8]
 8002334:	886a      	ldrh	r2, [r5, #2]
 8002336:	f8d1 901c 	ldr.w	r9, [r1, #28]
 800233a:	7929      	ldrb	r1, [r5, #4]
 800233c:	4620      	mov	r0, r4
 800233e:	47c8      	blx	r9
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 8002340:	f004 040f 	and.w	r4, r4, #15
		device.Endpoints[Number].Address = Table[i].Address;
 8002344:	fb07 8304 	mla	r3, r7, r4, r8
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 8002348:	2800      	cmp	r0, #0
 800234a:	d0da      	beq.n	8002302 <Endpoint_ConfigureEndpointTable+0x1e>
			return false;
 800234c:	2000      	movs	r0, #0
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
}
 800234e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return true;
 8002352:	2001      	movs	r0, #1
}
 8002354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return true;
 8002358:	2001      	movs	r0, #1
}
 800235a:	4770      	bx	lr
 800235c:	20000764 	.word	0x20000764

08002360 <XMC_SCU_INTERRUPT_EnableEvent>:
}

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8002360:	4a02      	ldr	r2, [pc, #8]	; (800236c <XMC_SCU_INTERRUPT_EnableEvent+0xc>)
 8002362:	6893      	ldr	r3, [r2, #8]
 8002364:	4318      	orrs	r0, r3
 8002366:	6090      	str	r0, [r2, #8]
}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	50004074 	.word	0x50004074

08002370 <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 8002370:	4a02      	ldr	r2, [pc, #8]	; (800237c <XMC_SCU_INTERRUPT_DisableEvent+0xc>)
 8002372:	6893      	ldr	r3, [r2, #8]
 8002374:	ea23 0000 	bic.w	r0, r3, r0
 8002378:	6090      	str	r0, [r2, #8]
}
 800237a:	4770      	bx	lr
 800237c:	50004074 	.word	0x50004074

08002380 <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 8002380:	4a02      	ldr	r2, [pc, #8]	; (800238c <XMC_SCU_INTERRUPT_TriggerEvent+0xc>)
 8002382:	6913      	ldr	r3, [r2, #16]
 8002384:	4318      	orrs	r0, r3
 8002386:	6110      	str	r0, [r2, #16]
}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	50004074 	.word	0x50004074

08002390 <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 8002390:	4b01      	ldr	r3, [pc, #4]	; (8002398 <XMC_SCU_INTERUPT_GetEventStatus+0x8>)
 8002392:	6858      	ldr	r0, [r3, #4]
}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	50004074 	.word	0x50004074

0800239c <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 800239c:	4b01      	ldr	r3, [pc, #4]	; (80023a4 <XMC_SCU_INTERRUPT_ClearEventStatus+0x8>)
 800239e:	60d8      	str	r0, [r3, #12]
}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	50004074 	.word	0x50004074

080023a8 <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 80023a8:	4b02      	ldr	r3, [pc, #8]	; (80023b4 <XMC_SCU_GetBootMode+0xc>)
 80023aa:	6918      	ldr	r0, [r3, #16]
}
 80023ac:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	50004000 	.word	0x50004000

080023b8 <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 80023b8:	4b01      	ldr	r3, [pc, #4]	; (80023c0 <XMC_SCU_SetBootMode+0x8>)
 80023ba:	6118      	str	r0, [r3, #16]
}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	50004000 	.word	0x50004000

080023c4 <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
  return (SCU_GENERAL->GPR[index]);
 80023c4:	4b02      	ldr	r3, [pc, #8]	; (80023d0 <XMC_SCU_ReadGPR+0xc>)
 80023c6:	0080      	lsls	r0, r0, #2
 80023c8:	4403      	add	r3, r0
 80023ca:	6858      	ldr	r0, [r3, #4]
}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	50004028 	.word	0x50004028

080023d4 <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
  SCU_GENERAL->GPR[index] = data;
 80023d4:	4b02      	ldr	r3, [pc, #8]	; (80023e0 <XMC_SCU_WriteGPR+0xc>)
 80023d6:	0080      	lsls	r0, r0, #2
 80023d8:	4403      	add	r3, r0
 80023da:	6059      	str	r1, [r3, #4]
}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	50004028 	.word	0x50004028

080023e4 <XMC_SCU_EnableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 80023e4:	0080      	lsls	r0, r0, #2
 80023e6:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
 80023ea:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 80023ee:	2301      	movs	r3, #1
 80023f0:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 80023f4:	fa03 f101 	lsl.w	r1, r3, r1
 80023f8:	4311      	orrs	r1, r2
 80023fa:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
}
 80023fe:	4770      	bx	lr

08002400 <XMC_SCU_DisableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8002400:	0080      	lsls	r0, r0, #2
 8002402:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
 8002406:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 800240a:	2201      	movs	r2, #1
 800240c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8002410:	fa02 f101 	lsl.w	r1, r2, r1
 8002414:	ea23 0301 	bic.w	r3, r3, r1
 8002418:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop

08002420 <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 8002420:	02c9      	lsls	r1, r1, #11
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 8002422:	f441 0108 	orr.w	r1, r1, #8912896	; 0x880000
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8002426:	4b03      	ldr	r3, [pc, #12]	; (8002434 <XMC_SCU_CalibrateTemperatureSensor+0x14>)
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 8002428:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 800242c:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	50004000 	.word	0x50004000

08002438 <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 8002438:	4a03      	ldr	r2, [pc, #12]	; (8002448 <XMC_SCU_EnableTemperatureSensor+0x10>)
 800243a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8002446:	4770      	bx	lr
 8002448:	50004000 	.word	0x50004000

0800244c <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 800244c:	4a03      	ldr	r2, [pc, #12]	; (800245c <XMC_SCU_DisableTemperatureSensor+0x10>)
 800244e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 800245a:	4770      	bx	lr
 800245c:	50004000 	.word	0x50004000

08002460 <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <XMC_SCU_IsTemperatureSensorEnabled+0x10>)
 8002462:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 8002466:	43c0      	mvns	r0, r0
}
 8002468:	f000 0001 	and.w	r0, r0, #1
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	50004000 	.word	0x50004000

08002474 <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 8002474:	4b02      	ldr	r3, [pc, #8]	; (8002480 <XMC_SCU_IsTemperatureSensorReady+0xc>)
 8002476:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 800247a:	f3c0 3080 	ubfx	r0, r0, #14, #1
 800247e:	4770      	bx	lr
 8002480:	50004000 	.word	0x50004000

08002484 <XMC_SCU_StartTemperatureMeasurement>:
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <XMC_SCU_StartTemperatureMeasurement+0x24>)
  {
    status = XMC_SCU_STATUS_BUSY;
  }

  /* And start the measurement */
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 8002486:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <XMC_SCU_StartTemperatureMeasurement+0x24>)
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8002488:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
}

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 8002490:	041b      	lsls	r3, r3, #16
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 8002492:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002496:	f043 0302 	orr.w	r3, r3, #2
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 800249a:	bf54      	ite	pl
 800249c:	f000 0001 	andpl.w	r0, r0, #1
    status = XMC_SCU_STATUS_BUSY;
 80024a0:	2002      	movmi	r0, #2
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 80024a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80024a6:	4770      	bx	lr
 80024a8:	50004000 	.word	0x50004000

080024ac <XMC_SCU_GetTemperatureMeasurement>:
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <XMC_SCU_GetTemperatureMeasurement+0x18>)
 80024ae:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 80024b2:	07d2      	lsls	r2, r2, #31
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 80024b4:	bf5a      	itte	pl
 80024b6:	f8d3 0090 	ldrpl.w	r0, [r3, #144]	; 0x90
 80024ba:	f3c0 0009 	ubfxpl	r0, r0, #0, #10
    temperature = 0x7FFFFFFFUL;
 80024be:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
}
 80024c2:	4770      	bx	lr
 80024c4:	50004000 	.word	0x50004000

080024c8 <XMC_SCU_IsTemperatureSensorBusy>:
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 80024c8:	4b02      	ldr	r3, [pc, #8]	; (80024d4 <XMC_SCU_IsTemperatureSensorBusy+0xc>)
 80024ca:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 80024ce:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80024d2:	4770      	bx	lr
 80024d4:	50004000 	.word	0x50004000

080024d8 <XMC_SCU_WriteToRetentionMemory>:
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 80024d8:	0400      	lsls	r0, r0, #16
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 80024da:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <XMC_SCU_WriteToRetentionMemory+0x20>)
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 80024dc:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 80024e0:	f040 0001 	orr.w	r0, r0, #1
  SCU_GENERAL->RMDATA = data;
 80024e4:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 80024e8:	461a      	mov	r2, r3
  SCU_GENERAL->RMACR = rmacr;
 80024ea:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 80024ee:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80024f2:	049b      	lsls	r3, r3, #18
 80024f4:	d4fb      	bmi.n	80024ee <XMC_SCU_WriteToRetentionMemory+0x16>
  {
  }
}
 80024f6:	4770      	bx	lr
 80024f8:	50004000 	.word	0x50004000

080024fc <XMC_SCU_ReadFromRetentionMemory>:
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 80024fc:	0400      	lsls	r0, r0, #16
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 80024fe:	4a06      	ldr	r2, [pc, #24]	; (8002518 <XMC_SCU_ReadFromRetentionMemory+0x1c>)
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8002500:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
  SCU_GENERAL->RMACR = rmacr;
 8002504:	f8c2 00c8 	str.w	r0, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8002508:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800250c:	049b      	lsls	r3, r3, #18
 800250e:	d4fb      	bmi.n	8002508 <XMC_SCU_ReadFromRetentionMemory+0xc>
  {
  }

  return (SCU_GENERAL->RMDATA);
 8002510:	f8d2 00cc 	ldr.w	r0, [r2, #204]	; 0xcc
}
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	50004000 	.word	0x50004000

0800251c <XMC_SCU_TRAP_Enable>:
}

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 800251c:	4a02      	ldr	r2, [pc, #8]	; (8002528 <XMC_SCU_TRAP_Enable+0xc>)
 800251e:	6893      	ldr	r3, [r2, #8]
 8002520:	ea23 0000 	bic.w	r0, r3, r0
 8002524:	6090      	str	r0, [r2, #8]
}
 8002526:	4770      	bx	lr
 8002528:	50004160 	.word	0x50004160

0800252c <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 800252c:	4a02      	ldr	r2, [pc, #8]	; (8002538 <XMC_SCU_TRAP_Disable+0xc>)
 800252e:	6893      	ldr	r3, [r2, #8]
 8002530:	4318      	orrs	r0, r3
 8002532:	6090      	str	r0, [r2, #8]
}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	50004160 	.word	0x50004160

0800253c <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
  return (SCU_TRAP->TRAPRAW);
 800253c:	4b01      	ldr	r3, [pc, #4]	; (8002544 <XMC_SCU_TRAP_GetStatus+0x8>)
 800253e:	6858      	ldr	r0, [r3, #4]
}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	50004160 	.word	0x50004160

08002548 <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 8002548:	4b01      	ldr	r3, [pc, #4]	; (8002550 <XMC_SCU_TRAP_Trigger+0x8>)
 800254a:	6118      	str	r0, [r3, #16]
}
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	50004160 	.word	0x50004160

08002554 <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 8002554:	4b01      	ldr	r3, [pc, #4]	; (800255c <XMC_SCU_TRAP_ClearStatus+0x8>)
 8002556:	60d8      	str	r0, [r3, #12]
}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	50004160 	.word	0x50004160

08002560 <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 8002560:	4a02      	ldr	r2, [pc, #8]	; (800256c <XMC_SCU_PARITY_ClearStatus+0xc>)
 8002562:	6953      	ldr	r3, [r2, #20]
 8002564:	4318      	orrs	r0, r3
 8002566:	6150      	str	r0, [r2, #20]
}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	5000413c 	.word	0x5000413c

08002570 <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
  return (SCU_PARITY->PEFLAG);
 8002570:	4b01      	ldr	r3, [pc, #4]	; (8002578 <XMC_SCU_PARITY_GetStatus+0x8>)
 8002572:	6958      	ldr	r0, [r3, #20]
} 
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	5000413c 	.word	0x5000413c

0800257c <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 800257c:	4a02      	ldr	r2, [pc, #8]	; (8002588 <XMC_SCU_PARITY_Enable+0xc>)
 800257e:	6813      	ldr	r3, [r2, #0]
 8002580:	4318      	orrs	r0, r3
 8002582:	6010      	str	r0, [r2, #0]
}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	5000413c 	.word	0x5000413c

0800258c <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 800258c:	4a02      	ldr	r2, [pc, #8]	; (8002598 <XMC_SCU_PARITY_Disable+0xc>)
 800258e:	6813      	ldr	r3, [r2, #0]
 8002590:	ea23 0000 	bic.w	r0, r3, r0
 8002594:	6010      	str	r0, [r2, #0]
}
 8002596:	4770      	bx	lr
 8002598:	5000413c 	.word	0x5000413c

0800259c <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
  SCU_PARITY->PETE |= (uint32_t)memory; 
 800259c:	4a02      	ldr	r2, [pc, #8]	; (80025a8 <XMC_SCU_PARITY_EnableTrapGeneration+0xc>)
 800259e:	6893      	ldr	r3, [r2, #8]
 80025a0:	4318      	orrs	r0, r3
 80025a2:	6090      	str	r0, [r2, #8]
}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	5000413c 	.word	0x5000413c

080025ac <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 80025ac:	4a02      	ldr	r2, [pc, #8]	; (80025b8 <XMC_SCU_PARITY_DisableTrapGeneration+0xc>)
 80025ae:	6893      	ldr	r3, [r2, #8]
 80025b0:	ea23 0000 	bic.w	r0, r3, r0
 80025b4:	6090      	str	r0, [r2, #8]
}
 80025b6:	4770      	bx	lr
 80025b8:	5000413c 	.word	0x5000413c

080025bc <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 80025bc:	4a02      	ldr	r2, [pc, #8]	; (80025c8 <XMC_SCU_INTERRUPT_EnableNmiRequest+0xc>)
 80025be:	6953      	ldr	r3, [r2, #20]
 80025c0:	4318      	orrs	r0, r3
 80025c2:	6150      	str	r0, [r2, #20]
}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	50004074 	.word	0x50004074

080025cc <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 80025cc:	4a02      	ldr	r2, [pc, #8]	; (80025d8 <XMC_SCU_INTERRUPT_DisableNmiRequest+0xc>)
 80025ce:	6953      	ldr	r3, [r2, #20]
 80025d0:	ea23 0000 	bic.w	r0, r3, r0
 80025d4:	6150      	str	r0, [r2, #20]
}
 80025d6:	4770      	bx	lr
 80025d8:	50004074 	.word	0x50004074

080025dc <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80025dc:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 80025de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80025e2:	4a03      	ldr	r2, [pc, #12]	; (80025f0 <XMC_SCU_RESET_AssertPeripheralReset+0x14>)
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80025e4:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 80025e8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	50004410 	.word	0x50004410

080025f4 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80025f4:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80025f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80025fa:	4a03      	ldr	r2, [pc, #12]	; (8002608 <XMC_SCU_RESET_DeassertPeripheralReset+0x14>)
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80025fc:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8002600:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	50004414 	.word	0x50004414

0800260c <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800260c:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 800260e:	4a06      	ldr	r2, [pc, #24]	; (8002628 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x1c>)
 8002610:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8002614:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8002618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261c:	4218      	tst	r0, r3
}
 800261e:	bf14      	ite	ne
 8002620:	2001      	movne	r0, #1
 8002622:	2000      	moveq	r0, #0
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	5000440c 	.word	0x5000440c

0800262c <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x4c>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	07da      	lsls	r2, r3, #31
{
 8002632:	b510      	push	{r4, lr}
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8002634:	d51c      	bpl.n	8002670 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x44>
  {
    clock_frequency = OSCHP_GetFrequency();
  }
  else
  {
    clock_frequency = OFI_FREQUENCY;
 8002636:	4811      	ldr	r0, [pc, #68]	; (800267c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x50>)
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 8002638:	4a0f      	ldr	r2, [pc, #60]	; (8002678 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x4c>)
 800263a:	6813      	ldr	r3, [r2, #0]
 800263c:	07db      	lsls	r3, r3, #31
 800263e:	d410      	bmi.n	8002662 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x36>
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 8002640:	6894      	ldr	r4, [r2, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 8002642:	6891      	ldr	r1, [r2, #8]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 8002644:	6892      	ldr	r2, [r2, #8]
 8002646:	f3c2 4206 	ubfx	r2, r2, #16, #7
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 800264a:	f3c4 6403 	ubfx	r4, r4, #24, #4
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 800264e:	1c53      	adds	r3, r2, #1
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 8002650:	f3c1 2206 	ubfx	r2, r1, #8, #7
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 8002654:	fb04 3303 	mla	r3, r4, r3, r3
 8002658:	fb02 0000 	mla	r0, r2, r0, r0
 800265c:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002660:	bd10      	pop	{r4, pc}
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 8002662:	6893      	ldr	r3, [r2, #8]
 8002664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002668:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 800266a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800266e:	bd10      	pop	{r4, pc}
    clock_frequency = OSCHP_GetFrequency();
 8002670:	f001 f816 	bl	80036a0 <OSCHP_GetFrequency>
 8002674:	e7e0      	b.n	8002638 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0xc>
 8002676:	bf00      	nop
 8002678:	50004710 	.word	0x50004710
 800267c:	016e3600 	.word	0x016e3600

08002680 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x10>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	07db      	lsls	r3, r3, #31
 8002686:	d401      	bmi.n	800268c <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0xc>
    clock_frequency = OSCHP_GetFrequency();
 8002688:	f001 b80a 	b.w	80036a0 <OSCHP_GetFrequency>
  }
  
  return (clock_frequency);
}
 800268c:	4801      	ldr	r0, [pc, #4]	; (8002694 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x14>)
 800268e:	4770      	bx	lr
 8002690:	50004710 	.word	0x50004710
 8002694:	016e3600 	.word	0x016e3600

08002698 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 8002698:	b508      	push	{r3, lr}
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 800269a:	f001 f801 	bl	80036a0 <OSCHP_GetFrequency>
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x28>)
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	07d2      	lsls	r2, r2, #31
 80026a4:	d40b      	bmi.n	80026be <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x26>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 80026a6:	695a      	ldr	r2, [r3, #20]
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f3c3 6303 	ubfx	r3, r3, #24, #4
 80026ae:	3301      	adds	r3, #1
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 80026b0:	f3c2 2206 	ubfx	r2, r2, #8, #7
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fb02 0000 	mla	r0, r2, r0, r0
 80026ba:	fbb0 f0f3 	udiv	r0, r0, r3
  }
  return (clock_frequency);
}
 80026be:	bd08      	pop	{r3, pc}
 80026c0:	50004710 	.word	0x50004710

080026c4 <XMC_SCU_CLOCK_GetCcuClockFrequency>:
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <XMC_SCU_CLOCK_GetCcuClockFrequency+0x18>)
 80026c6:	4906      	ldr	r1, [pc, #24]	; (80026e0 <XMC_SCU_CLOCK_GetCcuClockFrequency+0x1c>)
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	6808      	ldr	r0, [r1, #0]
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
  uint32_t frequency = 0UL;
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	f002 0201 	and.w	r2, r2, #1
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	4090      	lsls	r0, r2
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 80026d8:	40d8      	lsrs	r0, r3
 80026da:	4770      	bx	lr
 80026dc:	50004600 	.word	0x50004600
 80026e0:	2000ffc0 	.word	0x2000ffc0

080026e4 <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 80026e4:	b508      	push	{r3, lr}
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x24>)
 80026e8:	699b      	ldr	r3, [r3, #24]
  uint32_t frequency = 0UL;
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 80026ea:	03db      	lsls	r3, r3, #15
 80026ec:	d409      	bmi.n	8002702 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x1e>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
  }
  else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 80026ee:	f7ff ffd3 	bl	8002698 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x24>)
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 80026fa:	3301      	adds	r3, #1
}
 80026fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8002700:	bd08      	pop	{r3, pc}
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8002702:	f7ff ff93 	bl	800262c <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8002706:	e7f4      	b.n	80026f2 <XMC_SCU_CLOCK_GetUsbClockFrequency+0xe>
 8002708:	50004600 	.word	0x50004600

0800270c <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 800270c:	b508      	push	{r3, lr}
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 800270e:	f7ff ff8d 	bl	800262c <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8002712:	4b04      	ldr	r3, [pc, #16]	; (8002724 <XMC_SCU_CLOCK_GetEbuClockFrequency+0x18>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 800271a:	3301      	adds	r3, #1
}
 800271c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002720:	bd08      	pop	{r3, pc}
 8002722:	bf00      	nop
 8002724:	50004600 	.word	0x50004600

08002728 <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 8002728:	b508      	push	{r3, lr}
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x38>)
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  uint32_t frequency = 0UL;
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 8002732:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002736:	d00f      	beq.n	8002758 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x30>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 8002738:	b163      	cbz	r3, 8002754 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = OFI_FREQUENCY;
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 800273a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  {
    frequency = OSI_FREQUENCY;
 800273e:	bf14      	ite	ne
 8002740:	2000      	movne	r0, #0
 8002742:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x38>)
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 800274c:	3301      	adds	r3, #1
}
 800274e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002752:	bd08      	pop	{r3, pc}
    frequency = OFI_FREQUENCY;
 8002754:	4803      	ldr	r0, [pc, #12]	; (8002764 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3c>)
 8002756:	e7f6      	b.n	8002746 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x1e>
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8002758:	f7ff ff68 	bl	800262c <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 800275c:	e7f3      	b.n	8002746 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x1e>
 800275e:	bf00      	nop
 8002760:	50004600 	.word	0x50004600
 8002764:	016e3600 	.word	0x016e3600

08002768 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 8002768:	b510      	push	{r4, lr}
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 800276a:	4c12      	ldr	r4, [pc, #72]	; (80027b4 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x4c>)
 800276c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800276e:	f003 0303 	and.w	r3, r3, #3
  uint32_t frequency = 0UL;
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 8002772:	2b03      	cmp	r3, #3
 8002774:	d00b      	beq.n	800278e <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x26>
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 8002776:	b11b      	cbz	r3, 8002780 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x18>
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 8002778:	2b02      	cmp	r3, #2
 800277a:	d011      	beq.n	80027a0 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x38>
  uint32_t frequency = 0UL;
 800277c:	2000      	movs	r0, #0
  {

  }

  return (frequency);
}
 800277e:	bd10      	pop	{r4, pc}
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8002780:	4a0d      	ldr	r2, [pc, #52]	; (80027b8 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x50>)
 8002782:	6923      	ldr	r3, [r4, #16]
 8002784:	6810      	ldr	r0, [r2, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	4098      	lsls	r0, r3
 800278c:	bd10      	pop	{r4, pc}
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 800278e:	f7ff ff4d 	bl	800262c <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8002792:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002794:	f3c3 4308 	ubfx	r3, r3, #16, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8002798:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 800279a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800279e:	bd10      	pop	{r4, pc}
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 80027a0:	f7ff ff7a 	bl	8002698 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 80027a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027a6:	f3c3 4308 	ubfx	r3, r3, #16, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 80027aa:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 80027ac:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80027b0:	bd10      	pop	{r4, pc}
 80027b2:	bf00      	nop
 80027b4:	50004600 	.word	0x50004600
 80027b8:	2000ffc0 	.word	0x2000ffc0

080027bc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80027bc:	4b03      	ldr	r3, [pc, #12]	; (80027cc <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
  return SystemCoreClock;
 80027be:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x14>)
 80027c0:	695b      	ldr	r3, [r3, #20]
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80027c2:	6810      	ldr	r0, [r2, #0]
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80027c4:	f003 0301 	and.w	r3, r3, #1
}
 80027c8:	40d8      	lsrs	r0, r3
 80027ca:	4770      	bx	lr
 80027cc:	50004600 	.word	0x50004600
 80027d0:	2000ffc0 	.word	0x2000ffc0

080027d4 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80027d4:	4a03      	ldr	r2, [pc, #12]	; (80027e4 <XMC_SCU_CLOCK_SetSystemClockSource+0x10>)
 80027d6:	68d3      	ldr	r3, [r2, #12]
 80027d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027dc:	4318      	orrs	r0, r3
 80027de:	60d0      	str	r0, [r2, #12]
                      ((uint32_t)source);
}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	50004600 	.word	0x50004600

080027e8 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80027e8:	4a03      	ldr	r2, [pc, #12]	; (80027f8 <XMC_SCU_CLOCK_SetUsbClockSource+0x10>)
 80027ea:	6993      	ldr	r3, [r2, #24]
 80027ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f0:	4318      	orrs	r0, r3
 80027f2:	6190      	str	r0, [r2, #24]
                      ((uint32_t)source);
}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	50004600 	.word	0x50004600

080027fc <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80027fc:	4a03      	ldr	r2, [pc, #12]	; (800280c <XMC_SCU_CLOCK_SetWdtClockSource+0x10>)
 80027fe:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002800:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002804:	4318      	orrs	r0, r3
 8002806:	6250      	str	r0, [r2, #36]	; 0x24
                      ((uint32_t)source);
}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	50004600 	.word	0x50004600

08002810 <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8002810:	4a03      	ldr	r2, [pc, #12]	; (8002820 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x10>)
 8002812:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002814:	f023 0303 	bic.w	r3, r3, #3
 8002818:	4318      	orrs	r0, r3
 800281a:	6290      	str	r0, [r2, #40]	; 0x28
                      ((uint32_t)source);
}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	50004600 	.word	0x50004600

08002824 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002824:	4a07      	ldr	r2, [pc, #28]	; (8002844 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x20>)
 8002826:	68d3      	ldr	r3, [r2, #12]
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8002828:	b128      	cbz	r0, 8002836 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x12>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800282a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	60d3      	str	r3, [r2, #12]
  }
}
 8002834:	4770      	bx	lr
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002836:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	60d3      	str	r3, [r2, #12]
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	50004710 	.word	0x50004710

08002848 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002848:	4a05      	ldr	r2, [pc, #20]	; (8002860 <XMC_SCU_HIB_SetRtcClockSource+0x18>)
 800284a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800284e:	071b      	lsls	r3, r3, #28
 8002850:	d4fb      	bmi.n	800284a <XMC_SCU_HIB_SetRtcClockSource+0x2>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8002852:	4a04      	ldr	r2, [pc, #16]	; (8002864 <XMC_SCU_HIB_SetRtcClockSource+0x1c>)
 8002854:	68d3      	ldr	r3, [r2, #12]
 8002856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800285a:	4318      	orrs	r0, r3
 800285c:	60d0      	str	r0, [r2, #12]
                        ((uint32_t)source);
}
 800285e:	4770      	bx	lr
 8002860:	50004000 	.word	0x50004000
 8002864:	50004300 	.word	0x50004300

08002868 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002868:	4a05      	ldr	r2, [pc, #20]	; (8002880 <XMC_SCU_HIB_SetStandbyClockSource+0x18>)
 800286a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800286e:	071b      	lsls	r3, r3, #28
 8002870:	d4fb      	bmi.n	800286a <XMC_SCU_HIB_SetStandbyClockSource+0x2>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8002872:	4a04      	ldr	r2, [pc, #16]	; (8002884 <XMC_SCU_HIB_SetStandbyClockSource+0x1c>)
 8002874:	68d3      	ldr	r3, [r2, #12]
 8002876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800287a:	4318      	orrs	r0, r3
 800287c:	60d0      	str	r0, [r2, #12]
                        ((uint32_t)source);
}
 800287e:	4770      	bx	lr
 8002880:	50004000 	.word	0x50004000
 8002884:	50004300 	.word	0x50004300

08002888 <XMC_SCU_CLOCK_SetSystemClockDivider>:
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8002888:	4a03      	ldr	r2, [pc, #12]	; (8002898 <XMC_SCU_CLOCK_SetSystemClockDivider+0x10>)
 800288a:	68d3      	ldr	r3, [r2, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800288c:	3801      	subs	r0, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800288e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002892:	4303      	orrs	r3, r0
 8002894:	60d3      	str	r3, [r2, #12]
}
 8002896:	4770      	bx	lr
 8002898:	50004600 	.word	0x50004600

0800289c <XMC_SCU_CLOCK_SetCcuClockDivider>:
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800289c:	4a03      	ldr	r2, [pc, #12]	; (80028ac <XMC_SCU_CLOCK_SetCcuClockDivider+0x10>)
 800289e:	6a13      	ldr	r3, [r2, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80028a0:	3801      	subs	r0, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	4303      	orrs	r3, r0
 80028a8:	6213      	str	r3, [r2, #32]
}
 80028aa:	4770      	bx	lr
 80028ac:	50004600 	.word	0x50004600

080028b0 <XMC_SCU_CLOCK_SetCpuClockDivider>:
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80028b0:	4a03      	ldr	r2, [pc, #12]	; (80028c0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x10>)
 80028b2:	6913      	ldr	r3, [r2, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80028b4:	3801      	subs	r0, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	4303      	orrs	r3, r0
 80028bc:	6113      	str	r3, [r2, #16]
}
 80028be:	4770      	bx	lr
 80028c0:	50004600 	.word	0x50004600

080028c4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80028c4:	4a03      	ldr	r2, [pc, #12]	; (80028d4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x10>)
 80028c6:	6953      	ldr	r3, [r2, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80028c8:	3801      	subs	r0, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80028ca:	f023 0301 	bic.w	r3, r3, #1
 80028ce:	4303      	orrs	r3, r0
 80028d0:	6153      	str	r3, [r2, #20]
}
 80028d2:	4770      	bx	lr
 80028d4:	50004600 	.word	0x50004600

080028d8 <XMC_SCU_CLOCK_SetUsbClockDivider>:
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80028d8:	4a03      	ldr	r2, [pc, #12]	; (80028e8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x10>)
 80028da:	6993      	ldr	r3, [r2, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80028dc:	3801      	subs	r0, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80028de:	f023 0307 	bic.w	r3, r3, #7
 80028e2:	4303      	orrs	r3, r0
 80028e4:	6193      	str	r3, [r2, #24]
}
 80028e6:	4770      	bx	lr
 80028e8:	50004600 	.word	0x50004600

080028ec <XMC_SCU_CLOCK_SetEbuClockDivider>:
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80028ec:	4a03      	ldr	r2, [pc, #12]	; (80028fc <XMC_SCU_CLOCK_SetEbuClockDivider+0x10>)
 80028ee:	69d3      	ldr	r3, [r2, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80028f0:	3801      	subs	r0, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80028f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028f6:	4303      	orrs	r3, r0
 80028f8:	61d3      	str	r3, [r2, #28]
}
 80028fa:	4770      	bx	lr
 80028fc:	50004600 	.word	0x50004600

08002900 <XMC_SCU_CLOCK_SetWdtClockDivider>:
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8002900:	4a03      	ldr	r2, [pc, #12]	; (8002910 <XMC_SCU_CLOCK_SetWdtClockDivider+0x10>)
 8002902:	6a53      	ldr	r3, [r2, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8002904:	3801      	subs	r0, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8002906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800290a:	4303      	orrs	r3, r0
 800290c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800290e:	4770      	bx	lr
 8002910:	50004600 	.word	0x50004600

08002914 <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8002914:	4a05      	ldr	r2, [pc, #20]	; (800292c <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x18>)
 8002916:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002918:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 800291c:	3801      	subs	r0, #1
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 800291e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002922:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002926:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	50004600 	.word	0x50004600

08002930 <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8002930:	4b01      	ldr	r3, [pc, #4]	; (8002938 <XMC_SCU_CLOCK_EnableClock+0x8>)
 8002932:	6058      	str	r0, [r3, #4]
}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	50004600 	.word	0x50004600

0800293c <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 800293c:	4b01      	ldr	r3, [pc, #4]	; (8002944 <XMC_SCU_CLOCK_DisableClock+0x8>)
 800293e:	6098      	str	r0, [r3, #8]
}
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	50004600 	.word	0x50004600

08002948 <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <XMC_SCU_CLOCK_IsClockEnabled+0x10>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4218      	tst	r0, r3
}
 800294e:	bf14      	ite	ne
 8002950:	2001      	movne	r0, #1
 8002952:	2000      	moveq	r0, #0
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	50004600 	.word	0x50004600

0800295c <XMC_SCU_POWER_GetEVR13Voltage>:
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <XMC_SCU_POWER_GetEVR13Voltage+0x1c>)
 800295e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800297c <XMC_SCU_POWER_GetEVR13Voltage+0x20>
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	ee07 3a90 	vmov	s15, r3
 800296a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800296e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002972:	ee17 0a90 	vmov	r0, s15
 8002976:	4770      	bx	lr
 8002978:	50004200 	.word	0x50004200
 800297c:	3bbe0ded 	.word	0x3bbe0ded

08002980 <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 8002980:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <XMC_SCU_POWER_GetEVR33Voltage+0x20>)
 8002982:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80029a4 <XMC_SCU_POWER_GetEVR33Voltage+0x24>
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800298c:	ee07 3a90 	vmov	s15, r3
 8002990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002994:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002998:	ee17 0a90 	vmov	r0, s15
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	50004200 	.word	0x50004200
 80029a4:	3cb851ec 	.word	0x3cb851ec

080029a8 <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 80029a8:	4a03      	ldr	r2, [pc, #12]	; (80029b8 <XMC_SCU_CLOCK_EnableUsbPll+0x10>)
 80029aa:	6953      	ldr	r3, [r2, #20]
 80029ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b0:	f023 0302 	bic.w	r3, r3, #2
 80029b4:	6153      	str	r3, [r2, #20]
}
 80029b6:	4770      	bx	lr
 80029b8:	50004710 	.word	0x50004710

080029bc <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 80029bc:	4a03      	ldr	r2, [pc, #12]	; (80029cc <XMC_SCU_CLOCK_DisableUsbPll+0x10>)
 80029be:	6953      	ldr	r3, [r2, #20]
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	6153      	str	r3, [r2, #20]
}
 80029ca:	4770      	bx	lr
 80029cc:	50004710 	.word	0x50004710

080029d0 <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <XMC_SCU_CLOCK_StartUsbPll+0x40>)
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	f042 0201 	orr.w	r2, r2, #1
 80029d8:	615a      	str	r2, [r3, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80029da:	695a      	ldr	r2, [r3, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80029dc:	3801      	subs	r0, #1
 80029de:	0600      	lsls	r0, r0, #24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80029e0:	3901      	subs	r1, #1
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80029e2:	f042 0210 	orr.w	r2, r2, #16
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80029e6:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80029ea:	615a      	str	r2, [r3, #20]
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80029ec:	6158      	str	r0, [r3, #20]

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029f4:	615a      	str	r2, [r3, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	f022 0210 	bic.w	r2, r2, #16
 80029fc:	615a      	str	r2, [r3, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a04:	615a      	str	r2, [r3, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	0752      	lsls	r2, r2, #29
 8002a0a:	d5fc      	bpl.n	8002a06 <XMC_SCU_CLOCK_StartUsbPll+0x36>
  {
    /* wait for PLL Lock */
  }

}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	50004710 	.word	0x50004710

08002a14 <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 8002a14:	4b01      	ldr	r3, [pc, #4]	; (8002a1c <XMC_SCU_CLOCK_StopUsbPll+0x8>)
 8002a16:	4a02      	ldr	r2, [pc, #8]	; (8002a20 <XMC_SCU_CLOCK_StopUsbPll+0xc>)
 8002a18:	615a      	str	r2, [r3, #20]
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 8002a1a:	4770      	bx	lr
 8002a1c:	50004710 	.word	0x50004710
 8002a20:	00010003 	.word	0x00010003

08002a24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8002a24:	4a1a      	ldr	r2, [pc, #104]	; (8002a90 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x6c>)
 8002a26:	6853      	ldr	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8002a28:	2801      	cmp	r0, #1
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8002a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
{
 8002a2e:	b510      	push	{r4, lr}
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8002a30:	6053      	str	r3, [r2, #4]
  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8002a32:	d011      	beq.n	8002a58 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x34>
 8002a34:	4c17      	ldr	r4, [pc, #92]	; (8002a94 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x70>)
  SystemCoreClockUpdate();
 8002a36:	f000 fe37 	bl	80036a8 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8002a3a:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x74>)
 8002a3c:	6822      	ldr	r2, [r4, #0]
 8002a3e:	fba3 3202 	umull	r3, r2, r3, r2
 8002a42:	0c93      	lsrs	r3, r2, #18
 8002a44:	2264      	movs	r2, #100	; 0x64
 8002a46:	fb02 f203 	mul.w	r2, r2, r3
  for (i = 0U; i < delay; ++i)
 8002a4a:	b122      	cbz	r2, 8002a56 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x32>
 8002a4c:	2300      	movs	r3, #0
    __NOP();
 8002a4e:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8002a50:	3301      	adds	r3, #1
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d1fb      	bne.n	8002a4e <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x2a>
    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
  }

  XMC_SCU_lDelay(100UL);
}
 8002a56:	bd10      	pop	{r4, pc}
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8002a58:	6853      	ldr	r3, [r2, #4]
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8002a5a:	4c0e      	ldr	r4, [pc, #56]	; (8002a94 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x70>)
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8002a5c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a60:	6053      	str	r3, [r2, #4]
  SystemCoreClockUpdate();
 8002a62:	f000 fe21 	bl	80036a8 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8002a66:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x74>)
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	0c9b      	lsrs	r3, r3, #18
 8002a70:	2264      	movs	r2, #100	; 0x64
 8002a72:	fb02 f203 	mul.w	r2, r2, r3
  for (i = 0U; i < delay; ++i)
 8002a76:	b122      	cbz	r2, 8002a82 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x5e>
 8002a78:	2300      	movs	r3, #0
    __NOP();
 8002a7a:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d1fb      	bne.n	8002a7a <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x56>
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8002a82:	4a03      	ldr	r2, [pc, #12]	; (8002a90 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x6c>)
 8002a84:	6853      	ldr	r3, [r2, #4]
 8002a86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a8a:	6053      	str	r3, [r2, #4]
 8002a8c:	e7d3      	b.n	8002a36 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x12>
 8002a8e:	bf00      	nop
 8002a90:	50004710 	.word	0x50004710
 8002a94:	2000ffc0 	.word	0x2000ffc0
 8002a98:	431bde83 	.word	0x431bde83

08002a9c <XMC_SCU_POWER_EnableUsb>:

/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8002a9c:	4b02      	ldr	r3, [pc, #8]	; (8002aa8 <XMC_SCU_POWER_EnableUsb+0xc>)
 8002a9e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002aa2:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	50004200 	.word	0x50004200

08002aac <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8002aac:	4b02      	ldr	r3, [pc, #8]	; (8002ab8 <XMC_SCU_POWER_DisableUsb+0xc>)
 8002aae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ab2:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	50004200 	.word	0x50004200

08002abc <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 8002abc:	4b02      	ldr	r3, [pc, #8]	; (8002ac8 <XMC_SCU_CLOCK_IsUsbPllLocked+0xc>)
 8002abe:	6918      	ldr	r0, [r3, #16]
}
 8002ac0:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	50004710 	.word	0x50004710

08002acc <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8002acc:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <XMC_SCU_HIB_EnableHibernateDomain+0x28>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	07d2      	lsls	r2, r2, #31
 8002ad2:	d404      	bmi.n	8002ade <XMC_SCU_HIB_EnableHibernateDomain+0x12>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	07d0      	lsls	r0, r2, #31
 8002adc:	d5fc      	bpl.n	8002ad8 <XMC_SCU_HIB_EnableHibernateDomain+0xc>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <XMC_SCU_HIB_EnableHibernateDomain+0x2c>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	0591      	lsls	r1, r2, #22
 8002ae4:	d505      	bpl.n	8002af2 <XMC_SCU_HIB_EnableHibernateDomain+0x26>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8002ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aea:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	0592      	lsls	r2, r2, #22
 8002af0:	d4fc      	bmi.n	8002aec <XMC_SCU_HIB_EnableHibernateDomain+0x20>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8002af2:	4770      	bx	lr
 8002af4:	50004200 	.word	0x50004200
 8002af8:	50004400 	.word	0x50004400

08002afc <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8002afc:	4903      	ldr	r1, [pc, #12]	; (8002b0c <XMC_SCU_HIB_DisableHibernateDomain+0x10>)
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 8002afe:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <XMC_SCU_HIB_DisableHibernateDomain+0x14>)
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8002b00:	2001      	movs	r0, #1
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 8002b02:	f44f 7200 	mov.w	r2, #512	; 0x200
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8002b06:	6088      	str	r0, [r1, #8]
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 8002b08:	605a      	str	r2, [r3, #4]
}
 8002b0a:	4770      	bx	lr
 8002b0c:	50004200 	.word	0x50004200
 8002b10:	50004400 	.word	0x50004400

08002b14 <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <XMC_SCU_HIB_IsHibernateDomainEnabled+0x18>)
 8002b16:	6818      	ldr	r0, [r3, #0]
 8002b18:	f010 0001 	ands.w	r0, r0, #1
 8002b1c:	d005      	beq.n	8002b2a <XMC_SCU_HIB_IsHibernateDomainEnabled+0x16>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8002b1e:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8002b22:	f480 7000 	eor.w	r0, r0, #512	; 0x200
 8002b26:	f3c0 2040 	ubfx	r0, r0, #9, #1
}
 8002b2a:	4770      	bx	lr
 8002b2c:	50004200 	.word	0x50004200

08002b30 <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8002b30:	4a05      	ldr	r2, [pc, #20]	; (8002b48 <XMC_SCU_HIB_EnableInternalSlowClock+0x18>)
 8002b32:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002b36:	069b      	lsls	r3, r3, #26
 8002b38:	d4fb      	bmi.n	8002b32 <XMC_SCU_HIB_EnableInternalSlowClock+0x2>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 8002b3a:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <XMC_SCU_HIB_EnableInternalSlowClock+0x1c>)
 8002b3c:	6953      	ldr	r3, [r2, #20]
 8002b3e:	f023 0301 	bic.w	r3, r3, #1
 8002b42:	6153      	str	r3, [r2, #20]
}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	50004000 	.word	0x50004000
 8002b4c:	50004300 	.word	0x50004300

08002b50 <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8002b50:	4a05      	ldr	r2, [pc, #20]	; (8002b68 <XMC_SCU_HIB_DisableInternalSlowClock+0x18>)
 8002b52:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002b56:	069b      	lsls	r3, r3, #26
 8002b58:	d4fb      	bmi.n	8002b52 <XMC_SCU_HIB_DisableInternalSlowClock+0x2>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 8002b5a:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <XMC_SCU_HIB_DisableInternalSlowClock+0x1c>)
 8002b5c:	6953      	ldr	r3, [r2, #20]
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6153      	str	r3, [r2, #20]
}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	50004000 	.word	0x50004000
 8002b6c:	50004300 	.word	0x50004300

08002b70 <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8002b70:	4a03      	ldr	r2, [pc, #12]	; (8002b80 <XMC_SCU_HIB_ClearEventStatus+0x10>)
 8002b72:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002b76:	079b      	lsls	r3, r3, #30
 8002b78:	d4fb      	bmi.n	8002b72 <XMC_SCU_HIB_ClearEventStatus+0x2>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 8002b7a:	4b02      	ldr	r3, [pc, #8]	; (8002b84 <XMC_SCU_HIB_ClearEventStatus+0x14>)
 8002b7c:	6058      	str	r0, [r3, #4]
}
 8002b7e:	4770      	bx	lr
 8002b80:	50004000 	.word	0x50004000
 8002b84:	50004300 	.word	0x50004300

08002b88 <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8002b88:	4a03      	ldr	r2, [pc, #12]	; (8002b98 <XMC_SCU_HIB_TriggerEvent+0x10>)
 8002b8a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002b8e:	075b      	lsls	r3, r3, #29
 8002b90:	d4fb      	bmi.n	8002b8a <XMC_SCU_HIB_TriggerEvent+0x2>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 8002b92:	4b02      	ldr	r3, [pc, #8]	; (8002b9c <XMC_SCU_HIB_TriggerEvent+0x14>)
 8002b94:	6098      	str	r0, [r3, #8]
}
 8002b96:	4770      	bx	lr
 8002b98:	50004000 	.word	0x50004000
 8002b9c:	50004300 	.word	0x50004300

08002ba0 <XMC_SCU_HIB_EnableEvent>:
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002ba0:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <XMC_SCU_HIB_EnableEvent+0x14>)
 8002ba2:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002ba6:	071b      	lsls	r3, r3, #28
 8002ba8:	d4fb      	bmi.n	8002ba2 <XMC_SCU_HIB_EnableEvent+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 8002baa:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <XMC_SCU_HIB_EnableEvent+0x18>)
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	4310      	orrs	r0, r2
 8002bb0:	60d8      	str	r0, [r3, #12]
}
 8002bb2:	4770      	bx	lr
 8002bb4:	50004000 	.word	0x50004000
 8002bb8:	50004300 	.word	0x50004300

08002bbc <XMC_SCU_HIB_DisableEvent>:
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002bbc:	4a05      	ldr	r2, [pc, #20]	; (8002bd4 <XMC_SCU_HIB_DisableEvent+0x18>)
 8002bbe:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002bc2:	071b      	lsls	r3, r3, #28
 8002bc4:	d4fb      	bmi.n	8002bbe <XMC_SCU_HIB_DisableEvent+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 8002bc6:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <XMC_SCU_HIB_DisableEvent+0x1c>)
 8002bc8:	68d3      	ldr	r3, [r2, #12]
 8002bca:	ea23 0000 	bic.w	r0, r3, r0
 8002bce:	60d0      	str	r0, [r2, #12]
}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	50004000 	.word	0x50004000
 8002bd8:	50004300 	.word	0x50004300

08002bdc <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002bdc:	4a05      	ldr	r2, [pc, #20]	; (8002bf4 <XMC_SCU_HIB_EnterHibernateState+0x18>)
 8002bde:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002be2:	071b      	lsls	r3, r3, #28
 8002be4:	d4fb      	bmi.n	8002bde <XMC_SCU_HIB_EnterHibernateState+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 8002be6:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <XMC_SCU_HIB_EnterHibernateState+0x1c>)
 8002be8:	68d3      	ldr	r3, [r2, #12]
 8002bea:	f043 0310 	orr.w	r3, r3, #16
 8002bee:	60d3      	str	r3, [r2, #12]
}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	50004000 	.word	0x50004000
 8002bf8:	50004300 	.word	0x50004300

08002bfc <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 8002bfc:	b948      	cbnz	r0, 8002c12 <XMC_SCU_HIB_EnterHibernateStateEx+0x16>
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002bfe:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <XMC_SCU_HIB_EnterHibernateStateEx+0x18>)
 8002c00:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002c04:	071b      	lsls	r3, r3, #28
 8002c06:	d4fb      	bmi.n	8002c00 <XMC_SCU_HIB_EnterHibernateStateEx+0x4>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 8002c08:	4a03      	ldr	r2, [pc, #12]	; (8002c18 <XMC_SCU_HIB_EnterHibernateStateEx+0x1c>)
 8002c0a:	68d3      	ldr	r3, [r2, #12]
 8002c0c:	f043 0310 	orr.w	r3, r3, #16
 8002c10:	60d3      	str	r3, [r2, #12]
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 8002c12:	4770      	bx	lr
 8002c14:	50004000 	.word	0x50004000
 8002c18:	50004300 	.word	0x50004300

08002c1c <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002c1c:	4a07      	ldr	r2, [pc, #28]	; (8002c3c <XMC_SCU_HIB_SetWakeupTriggerInput+0x20>)
 8002c1e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002c22:	071b      	lsls	r3, r3, #28
 8002c24:	d4fb      	bmi.n	8002c1e <XMC_SCU_HIB_SetWakeupTriggerInput+0x2>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 8002c26:	4a06      	ldr	r2, [pc, #24]	; (8002c40 <XMC_SCU_HIB_SetWakeupTriggerInput+0x24>)
 8002c28:	68d3      	ldr	r3, [r2, #12]
  if (pin == XMC_SCU_HIB_IO_0)
 8002c2a:	b118      	cbz	r0, 8002c34 <XMC_SCU_HIB_SetWakeupTriggerInput+0x18>
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 8002c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c30:	60d3      	str	r3, [r2, #12]
  }
}
 8002c32:	4770      	bx	lr
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 8002c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c38:	60d3      	str	r3, [r2, #12]
 8002c3a:	4770      	bx	lr
 8002c3c:	50004000 	.word	0x50004000
 8002c40:	50004300 	.word	0x50004300

08002c44 <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 8002c44:	b410      	push	{r4}
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002c46:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <XMC_SCU_HIB_SetPinMode+0x2c>)
 8002c48:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002c4c:	071b      	lsls	r3, r3, #28
 8002c4e:	d4fb      	bmi.n	8002c48 <XMC_SCU_HIB_SetPinMode+0x4>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8002c50:	4c08      	ldr	r4, [pc, #32]	; (8002c74 <XMC_SCU_HIB_SetPinMode+0x30>)
 8002c52:	0080      	lsls	r0, r0, #2
 8002c54:	68e3      	ldr	r3, [r4, #12]
 8002c56:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8002c5a:	4082      	lsls	r2, r0
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 8002c5c:	fa01 f000 	lsl.w	r0, r1, r0
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8002c60:	ea23 0102 	bic.w	r1, r3, r2
 8002c64:	4301      	orrs	r1, r0
 8002c66:	60e1      	str	r1, [r4, #12]
}
 8002c68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	50004000 	.word	0x50004000
 8002c74:	50004300 	.word	0x50004300

08002c78 <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 8002c78:	b410      	push	{r4}
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002c7a:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <XMC_SCU_HIB_SetPinOutputLevel+0x28>)
 8002c7c:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002c80:	071b      	lsls	r3, r3, #28
 8002c82:	d4fb      	bmi.n	8002c7c <XMC_SCU_HIB_SetPinOutputLevel+0x4>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8002c84:	4c07      	ldr	r4, [pc, #28]	; (8002ca4 <XMC_SCU_HIB_SetPinOutputLevel+0x2c>)
 8002c86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c8a:	68e3      	ldr	r3, [r4, #12]
 8002c8c:	4082      	lsls	r2, r0
                        (level << pin);
 8002c8e:	fa01 f000 	lsl.w	r0, r1, r0
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8002c92:	ea23 0102 	bic.w	r1, r3, r2
 8002c96:	4301      	orrs	r1, r0
 8002c98:	60e1      	str	r1, [r4, #12]
}
 8002c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	50004000 	.word	0x50004000
 8002ca4:	50004300 	.word	0x50004300

08002ca8 <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002ca8:	4a07      	ldr	r2, [pc, #28]	; (8002cc8 <XMC_SCU_HIB_SetInput0+0x20>)
 8002caa:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002cae:	071b      	lsls	r3, r3, #28
 8002cb0:	d4fb      	bmi.n	8002caa <XMC_SCU_HIB_SetInput0+0x2>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 8002cb2:	4a06      	ldr	r2, [pc, #24]	; (8002ccc <XMC_SCU_HIB_SetInput0+0x24>)
 8002cb4:	68d3      	ldr	r3, [r2, #12]
  if (pin == XMC_SCU_HIB_IO_0)
 8002cb6:	b118      	cbz	r0, 8002cc0 <XMC_SCU_HIB_SetInput0+0x18>
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 8002cb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cbc:	60d3      	str	r3, [r2, #12]
  }
}
 8002cbe:	4770      	bx	lr
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 8002cc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cc4:	60d3      	str	r3, [r2, #12]
 8002cc6:	4770      	bx	lr
 8002cc8:	50004000 	.word	0x50004000
 8002ccc:	50004300 	.word	0x50004300

08002cd0 <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002cd0:	4a05      	ldr	r2, [pc, #20]	; (8002ce8 <XMC_SCU_HIB_SetSR0Input+0x18>)
 8002cd2:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002cd6:	071b      	lsls	r3, r3, #28
 8002cd8:	d4fb      	bmi.n	8002cd2 <XMC_SCU_HIB_SetSR0Input+0x2>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 8002cda:	4a04      	ldr	r2, [pc, #16]	; (8002cec <XMC_SCU_HIB_SetSR0Input+0x1c>)
 8002cdc:	68d3      	ldr	r3, [r2, #12]
 8002cde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ce2:	4318      	orrs	r0, r3
 8002ce4:	60d0      	str	r0, [r2, #12]
#endif  
                        input;
}
 8002ce6:	4770      	bx	lr
 8002ce8:	50004000 	.word	0x50004000
 8002cec:	50004300 	.word	0x50004300

08002cf0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8002cf0:	4b03      	ldr	r3, [pc, #12]	; (8002d00 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x10>)
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	f080 0008 	eor.w	r0, r0, #8
}
 8002cf8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	50004300 	.word	0x50004300

08002d04 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002d04:	4a10      	ldr	r2, [pc, #64]	; (8002d48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
 8002d06:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002d0a:	0618      	lsls	r0, r3, #24
 8002d0c:	d4fb      	bmi.n	8002d06 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x2>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002d0e:	490f      	ldr	r1, [pc, #60]	; (8002d4c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x48>)

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002d10:	4a0d      	ldr	r2, [pc, #52]	; (8002d48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002d12:	69cb      	ldr	r3, [r1, #28]
 8002d14:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d18:	61cb      	str	r3, [r1, #28]
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002d1a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002d1e:	0719      	lsls	r1, r3, #28
 8002d20:	d4fb      	bmi.n	8002d1a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x16>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8002d22:	490a      	ldr	r1, [pc, #40]	; (8002d4c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x48>)

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8002d24:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8002d26:	68cb      	ldr	r3, [r1, #12]
 8002d28:	f043 0308 	orr.w	r3, r3, #8
 8002d2c:	60cb      	str	r3, [r1, #12]
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8002d2e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002d32:	075b      	lsls	r3, r3, #29
 8002d34:	d4fb      	bmi.n	8002d2e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x2a>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x48>)
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
  return(SCU_GENERAL->MIRRSTS);
 8002d38:	4a03      	ldr	r2, [pc, #12]	; (8002d48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
 8002d3a:	2108      	movs	r1, #8
 8002d3c:	6099      	str	r1, [r3, #8]
 8002d3e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4

  while (XMC_SCU_GetMirrorStatus() != 0)
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1fb      	bne.n	8002d3e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3a>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8002d46:	4770      	bx	lr
 8002d48:	50004000 	.word	0x50004000
 8002d4c:	50004300 	.word	0x50004300

08002d50 <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002d50:	4a05      	ldr	r2, [pc, #20]	; (8002d68 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x18>)
 8002d52:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002d56:	061b      	lsls	r3, r3, #24
 8002d58:	d4fb      	bmi.n	8002d52 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002d5a:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x1c>)
 8002d5c:	69d3      	ldr	r3, [r2, #28]
 8002d5e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002d62:	61d3      	str	r3, [r2, #28]
}
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	50004000 	.word	0x50004000
 8002d6c:	50004300 	.word	0x50004300

08002d70 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002d70:	4a05      	ldr	r2, [pc, #20]	; (8002d88 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x18>)
 8002d72:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002d76:	061b      	lsls	r3, r3, #24
 8002d78:	d4fb      	bmi.n	8002d72 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002d7a:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x1c>)
 8002d7c:	69d3      	ldr	r3, [r2, #28]
 8002d7e:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 8002d82:	61d3      	str	r3, [r2, #28]
}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	50004000 	.word	0x50004000
 8002d8c:	50004300 	.word	0x50004300

08002d90 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002d90:	4a06      	ldr	r2, [pc, #24]	; (8002dac <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x1c>)
 8002d92:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002d96:	061b      	lsls	r3, r3, #24
 8002d98:	d4fb      	bmi.n	8002d92 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x2>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 8002d9a:	4a05      	ldr	r2, [pc, #20]	; (8002db0 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x20>)
 8002d9c:	69d3      	ldr	r3, [r2, #28]
 8002d9e:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 8002da2:	f043 0320 	orr.w	r3, r3, #32
 8002da6:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	50004000 	.word	0x50004000
 8002db0:	50004300 	.word	0x50004300

08002db4 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 8002db4:	4b02      	ldr	r3, [pc, #8]	; (8002dc0 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0xc>)
 8002db6:	6998      	ldr	r0, [r3, #24]
}
 8002db8:	f000 0001 	and.w	r0, r0, #1
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	50004300 	.word	0x50004300

08002dc4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8002dc4:	b570      	push	{r4, r5, r6, lr}
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8002dc6:	4d0d      	ldr	r5, [pc, #52]	; (8002dfc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x38>)

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002dc8:	4e0d      	ldr	r6, [pc, #52]	; (8002e00 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x3c>)
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8002dca:	686b      	ldr	r3, [r5, #4]
 8002dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd0:	606b      	str	r3, [r5, #4]
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002dd2:	6874      	ldr	r4, [r6, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8002dd4:	f000 fc64 	bl	80036a0 <OSCHP_GetFrequency>
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x40>)
 8002dda:	fba3 3000 	umull	r3, r0, r3, r0
 8002dde:	0d00      	lsrs	r0, r0, #20
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002de0:	f424 2370 	bic.w	r3, r4, #983040	; 0xf0000
 8002de4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8002de8:	3801      	subs	r0, #1
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002dea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002dee:	6073      	str	r3, [r6, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8002df0:	686b      	ldr	r3, [r5, #4]
 8002df2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002df6:	606b      	str	r3, [r5, #4]
}
 8002df8:	bd70      	pop	{r4, r5, r6, pc}
 8002dfa:	bf00      	nop
 8002dfc:	50004710 	.word	0x50004710
 8002e00:	50004700 	.word	0x50004700
 8002e04:	6b5fca6b 	.word	0x6b5fca6b

08002e08 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8002e08:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x14>)
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	f400 7060 	and.w	r0, r0, #896	; 0x380
}
 8002e10:	f5a0 7060 	sub.w	r0, r0, #896	; 0x380
 8002e14:	fab0 f080 	clz	r0, r0
 8002e18:	0940      	lsrs	r0, r0, #5
 8002e1a:	4770      	bx	lr
 8002e1c:	50004710 	.word	0x50004710

08002e20 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 8002e20:	4a02      	ldr	r2, [pc, #8]	; (8002e2c <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0xc>)
 8002e22:	6853      	ldr	r3, [r2, #4]
 8002e24:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002e28:	6053      	str	r3, [r2, #4]
}
 8002e2a:	4770      	bx	lr
 8002e2c:	50004700 	.word	0x50004700

08002e30 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8002e30:	4a02      	ldr	r2, [pc, #8]	; (8002e3c <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0xc>)
 8002e32:	6853      	ldr	r3, [r2, #4]
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	6053      	str	r3, [r2, #4]
}
 8002e3a:	4770      	bx	lr
 8002e3c:	50004700 	.word	0x50004700

08002e40 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8002e40:	4a02      	ldr	r2, [pc, #8]	; (8002e4c <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0xc>)
 8002e42:	6853      	ldr	r3, [r2, #4]
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	6053      	str	r3, [r2, #4]
}
 8002e4a:	4770      	bx	lr
 8002e4c:	50004700 	.word	0x50004700

08002e50 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 8002e50:	4b02      	ldr	r3, [pc, #8]	; (8002e5c <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0xc>)
 8002e52:	6818      	ldr	r0, [r3, #0]
}
 8002e54:	f000 0001 	and.w	r0, r0, #1
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	50004700 	.word	0x50004700

08002e60 <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002e60:	4a03      	ldr	r2, [pc, #12]	; (8002e70 <XMC_SCU_CLOCK_EnableSystemPll+0x10>)
 8002e62:	6853      	ldr	r3, [r2, #4]
 8002e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e68:	f023 0302 	bic.w	r3, r3, #2
 8002e6c:	6053      	str	r3, [r2, #4]
}
 8002e6e:	4770      	bx	lr
 8002e70:	50004710 	.word	0x50004710

08002e74 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002e74:	4a03      	ldr	r2, [pc, #12]	; (8002e84 <XMC_SCU_CLOCK_DisableSystemPll+0x10>)
 8002e76:	6853      	ldr	r3, [r2, #4]
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	f043 0302 	orr.w	r3, r3, #2
 8002e80:	6053      	str	r3, [r2, #4]
}
 8002e82:	4770      	bx	lr
 8002e84:	50004710 	.word	0x50004710

08002e88 <XMC_SCU_CLOCK_StopSystemPll>:
}

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 8002e88:	4a02      	ldr	r2, [pc, #8]	; (8002e94 <XMC_SCU_CLOCK_StopSystemPll+0xc>)
 8002e8a:	6853      	ldr	r3, [r2, #4]
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e90:	6053      	str	r3, [r2, #4]
}
 8002e92:	4770      	bx	lr
 8002e94:	50004710 	.word	0x50004710

08002e98 <XMC_SCU_CLOCK_StepSystemPllFrequency>:

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002e98:	4a0d      	ldr	r2, [pc, #52]	; (8002ed0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
{
 8002e9a:	b508      	push	{r3, lr}
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002e9c:	6893      	ldr	r3, [r2, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8002e9e:	3801      	subs	r0, #1
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002ea0:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002ea4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002ea8:	6093      	str	r3, [r2, #8]
  SystemCoreClockUpdate();
 8002eaa:	f000 fbfd 	bl	80036a8 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8002eae:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x3c>)
 8002eb0:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x40>)
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	fba3 3202 	umull	r3, r2, r3, r2
 8002eb8:	0c93      	lsrs	r3, r2, #18
 8002eba:	2232      	movs	r2, #50	; 0x32
 8002ebc:	fb02 f203 	mul.w	r2, r2, r3
  for (i = 0U; i < delay; ++i)
 8002ec0:	b122      	cbz	r2, 8002ecc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x34>
 8002ec2:	2300      	movs	r3, #0
    __NOP();
 8002ec4:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d1fb      	bne.n	8002ec4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>

  XMC_SCU_lDelay(50U);
}
 8002ecc:	bd08      	pop	{r3, pc}
 8002ece:	bf00      	nop
 8002ed0:	50004710 	.word	0x50004710
 8002ed4:	2000ffc0 	.word	0x2000ffc0
 8002ed8:	431bde83 	.word	0x431bde83

08002edc <XMC_SCU_CLOCK_StartSystemPll>:
{
 8002edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ede:	b083      	sub	sp, #12
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002ee0:	4c3f      	ldr	r4, [pc, #252]	; (8002fe0 <XMC_SCU_CLOCK_StartSystemPll+0x104>)
{
 8002ee2:	9d08      	ldr	r5, [sp, #32]
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	d063      	beq.n	8002fb0 <XMC_SCU_CLOCK_StartSystemPll+0xd4>
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002ee8:	68e0      	ldr	r0, [r4, #12]
 8002eea:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8002eee:	f040 0001 	orr.w	r0, r0, #1
  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8002ef2:	2901      	cmp	r1, #1
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002ef4:	60e0      	str	r0, [r4, #12]
  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8002ef6:	d00f      	beq.n	8002f18 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002ef8:	4b39      	ldr	r3, [pc, #228]	; (8002fe0 <XMC_SCU_CLOCK_StartSystemPll+0x104>)
 8002efa:	689a      	ldr	r2, [r3, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8002efc:	1e68      	subs	r0, r5, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002efe:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002f02:	4310      	orrs	r0, r2
 8002f04:	6098      	str	r0, [r3, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	f042 0201 	orr.w	r2, r2, #1
 8002f0c:	605a      	str	r2, [r3, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	07d2      	lsls	r2, r2, #31
 8002f12:	d5fc      	bpl.n	8002f0e <XMC_SCU_CLOCK_StartSystemPll+0x32>
}
 8002f14:	b003      	add	sp, #12
 8002f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8002f18:	f04f 64c0 	mov.w	r4, #100663296	; 0x6000000
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002f1c:	4930      	ldr	r1, [pc, #192]	; (8002fe0 <XMC_SCU_CLOCK_StartSystemPll+0x104>)
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002f1e:	4831      	ldr	r0, [pc, #196]	; (8002fe4 <XMC_SCU_CLOCK_StartSystemPll+0x108>)
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002f20:	684f      	ldr	r7, [r1, #4]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8002f22:	4e31      	ldr	r6, [pc, #196]	; (8002fe8 <XMC_SCU_CLOCK_StartSystemPll+0x10c>)
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002f24:	f047 0701 	orr.w	r7, r7, #1
 8002f28:	604f      	str	r7, [r1, #4]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8002f2a:	684f      	ldr	r7, [r1, #4]
 8002f2c:	f047 0710 	orr.w	r7, r7, #16
 8002f30:	604f      	str	r7, [r1, #4]
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002f32:	688f      	ldr	r7, [r1, #8]
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8002f34:	fb04 f403 	mul.w	r4, r4, r3
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002f38:	4038      	ands	r0, r7
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8002f3a:	fbb4 f4f2 	udiv	r4, r4, r2
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8002f3e:	3a01      	subs	r2, #1
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8002f40:	fba6 7604 	umull	r7, r6, r6, r4
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002f44:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002f48:	1e5f      	subs	r7, r3, #1
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8002f4a:	0eb3      	lsrs	r3, r6, #26
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8002f4c:	3b01      	subs	r3, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002f4e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 8002f52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002f56:	6088      	str	r0, [r1, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002f58:	684b      	ldr	r3, [r1, #4]
 8002f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f5e:	604b      	str	r3, [r1, #4]
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8002f60:	684b      	ldr	r3, [r1, #4]
 8002f62:	f023 0310 	bic.w	r3, r3, #16
 8002f66:	604b      	str	r3, [r1, #4]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8002f68:	684b      	ldr	r3, [r1, #4]
 8002f6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f6e:	604b      	str	r3, [r1, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002f70:	680b      	ldr	r3, [r1, #0]
 8002f72:	0758      	lsls	r0, r3, #29
 8002f74:	d5fc      	bpl.n	8002f70 <XMC_SCU_CLOCK_StartSystemPll+0x94>
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002f76:	684b      	ldr	r3, [r1, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8002f78:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <XMC_SCU_CLOCK_StartSystemPll+0x104>)
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	604b      	str	r3, [r1, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8002f80:	6813      	ldr	r3, [r2, #0]
 8002f82:	07d9      	lsls	r1, r3, #31
 8002f84:	d4fc      	bmi.n	8002f80 <XMC_SCU_CLOCK_StartSystemPll+0xa4>
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8002f86:	4819      	ldr	r0, [pc, #100]	; (8002fec <XMC_SCU_CLOCK_StartSystemPll+0x110>)
 8002f88:	fba0 3004 	umull	r3, r0, r0, r4
 8002f8c:	0ec0      	lsrs	r0, r0, #27
    if (kdiv < kdiv_temp)
 8002f8e:	4285      	cmp	r5, r0
 8002f90:	d322      	bcc.n	8002fd8 <XMC_SCU_CLOCK_StartSystemPll+0xfc>
    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8002f92:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <XMC_SCU_CLOCK_StartSystemPll+0x114>)
 8002f94:	0860      	lsrs	r0, r4, #1
 8002f96:	fba3 3000 	umull	r3, r0, r3, r0
 8002f9a:	0ec0      	lsrs	r0, r0, #27
    if (kdiv < kdiv_temp)
 8002f9c:	4285      	cmp	r5, r0
 8002f9e:	d201      	bcs.n	8002fa4 <XMC_SCU_CLOCK_StartSystemPll+0xc8>
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002fa0:	f7ff ff7a 	bl	8002e98 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8002fa4:	4628      	mov	r0, r5
}
 8002fa6:	b003      	add	sp, #12
 8002fa8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8002fac:	f7ff bf74 	b.w	8002e98 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002fb0:	68e0      	ldr	r0, [r4, #12]
 8002fb2:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8002fb6:	f020 0001 	bic.w	r0, r0, #1
  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8002fba:	2901      	cmp	r1, #1
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002fbc:	60e0      	str	r0, [r4, #12]
  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8002fbe:	d19b      	bne.n	8002ef8 <XMC_SCU_CLOCK_StartSystemPll+0x1c>
 8002fc0:	e9cd 2300 	strd	r2, r3, [sp]
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8002fc4:	f000 fb6c 	bl	80036a0 <OSCHP_GetFrequency>
 8002fc8:	4c0a      	ldr	r4, [pc, #40]	; (8002ff4 <XMC_SCU_CLOCK_StartSystemPll+0x118>)
 8002fca:	fba4 3400 	umull	r3, r4, r4, r0
 8002fce:	0ca4      	lsrs	r4, r4, #18
 8002fd0:	05a4      	lsls	r4, r4, #22
 8002fd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002fd6:	e7a1      	b.n	8002f1c <XMC_SCU_CLOCK_StartSystemPll+0x40>
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002fd8:	f7ff ff5e 	bl	8002e98 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8002fdc:	e7d9      	b.n	8002f92 <XMC_SCU_CLOCK_StartSystemPll+0xb6>
 8002fde:	bf00      	nop
 8002fe0:	50004710 	.word	0x50004710
 8002fe4:	f08080ff 	.word	0xf08080ff
 8002fe8:	aaaaaaab 	.word	0xaaaaaaab
 8002fec:	88888889 	.word	0x88888889
 8002ff0:	b60b60b7 	.word	0xb60b60b7
 8002ff4:	431bde83 	.word	0x431bde83

08002ff8 <XMC_SCU_CLOCK_Init>:
{
 8002ff8:	b530      	push	{r4, r5, lr}
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8002ffa:	4a3a      	ldr	r2, [pc, #232]	; (80030e4 <XMC_SCU_CLOCK_Init+0xec>)
 8002ffc:	68d3      	ldr	r3, [r2, #12]
{
 8002ffe:	4604      	mov	r4, r0
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8003000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003004:	60d3      	str	r3, [r2, #12]
{
 8003006:	b083      	sub	sp, #12
  XMC_SCU_HIB_EnableHibernateDomain();
 8003008:	f7ff fd60 	bl	8002acc <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 800300c:	79e3      	ldrb	r3, [r4, #7]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d161      	bne.n	80030d6 <XMC_SCU_CLOCK_Init+0xde>
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8003012:	7a60      	ldrb	r0, [r4, #9]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003014:	4a34      	ldr	r2, [pc, #208]	; (80030e8 <XMC_SCU_CLOCK_Init+0xf0>)
 8003016:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800301a:	071b      	lsls	r3, r3, #28
 800301c:	d4fb      	bmi.n	8003016 <XMC_SCU_CLOCK_Init+0x1e>
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800301e:	4933      	ldr	r1, [pc, #204]	; (80030ec <XMC_SCU_CLOCK_Init+0xf4>)
 8003020:	4a31      	ldr	r2, [pc, #196]	; (80030e8 <XMC_SCU_CLOCK_Init+0xf0>)
 8003022:	68cb      	ldr	r3, [r1, #12]
 8003024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003028:	4303      	orrs	r3, r0
 800302a:	60cb      	str	r3, [r1, #12]
 800302c:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
  while (XMC_SCU_GetMirrorStatus() != 0)
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1fb      	bne.n	800302c <XMC_SCU_CLOCK_Init+0x34>
  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8003034:	7a20      	ldrb	r0, [r4, #8]
 8003036:	f7ff fcf5 	bl	8002a24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800303a:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <XMC_SCU_CLOCK_Init+0xec>)
  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 800303c:	7c22      	ldrb	r2, [r4, #16]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800303e:	68d8      	ldr	r0, [r3, #12]
  if (config->enable_oschp == true)
 8003040:	79a1      	ldrb	r1, [r4, #6]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8003042:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8003046:	3a01      	subs	r2, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8003048:	4302      	orrs	r2, r0
 800304a:	60da      	str	r2, [r3, #12]
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800304c:	6918      	ldr	r0, [r3, #16]
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800304e:	7c62      	ldrb	r2, [r4, #17]
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8003050:	f020 0001 	bic.w	r0, r0, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8003054:	3a01      	subs	r2, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8003056:	4302      	orrs	r2, r0
 8003058:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800305a:	6a18      	ldr	r0, [r3, #32]
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 800305c:	7ca2      	ldrb	r2, [r4, #18]
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800305e:	f020 0001 	bic.w	r0, r0, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8003062:	3a01      	subs	r2, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8003064:	4302      	orrs	r2, r0
 8003066:	621a      	str	r2, [r3, #32]
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8003068:	6958      	ldr	r0, [r3, #20]
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800306a:	7ce2      	ldrb	r2, [r4, #19]
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800306c:	f020 0001 	bic.w	r0, r0, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8003070:	3a01      	subs	r2, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8003072:	4302      	orrs	r2, r0
 8003074:	615a      	str	r2, [r3, #20]
  if (config->enable_oschp == true)
 8003076:	bb21      	cbnz	r1, 80030c2 <XMC_SCU_CLOCK_Init+0xca>
  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8003078:	78e1      	ldrb	r1, [r4, #3]
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800307a:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <XMC_SCU_CLOCK_Init+0xf8>)
  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800307c:	b999      	cbnz	r1, 80030a6 <XMC_SCU_CLOCK_Init+0xae>
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800307e:	6853      	ldr	r3, [r2, #4]
 8003080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003084:	f043 0302 	orr.w	r3, r3, #2
 8003088:	6053      	str	r3, [r2, #4]
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800308a:	68e3      	ldr	r3, [r4, #12]
 800308c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003090:	d104      	bne.n	800309c <XMC_SCU_CLOCK_Init+0xa4>
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8003092:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <XMC_SCU_CLOCK_Init+0xec>)
 8003094:	68d3      	ldr	r3, [r2, #12]
 8003096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309a:	60d3      	str	r3, [r2, #12]
}
 800309c:	b003      	add	sp, #12
 800309e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  SystemCoreClockUpdate();
 80030a2:	f000 bb01 	b.w	80036a8 <SystemCoreClockUpdate>
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80030a6:	6853      	ldr	r3, [r2, #4]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80030a8:	88a0      	ldrh	r0, [r4, #4]
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	f023 0302 	bic.w	r3, r3, #2
 80030b2:	6053      	str	r3, [r2, #4]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80030b4:	78a5      	ldrb	r5, [r4, #2]
 80030b6:	7823      	ldrb	r3, [r4, #0]
 80030b8:	7862      	ldrb	r2, [r4, #1]
 80030ba:	9500      	str	r5, [sp, #0]
 80030bc:	f7ff ff0e 	bl	8002edc <XMC_SCU_CLOCK_StartSystemPll>
 80030c0:	e7e3      	b.n	800308a <XMC_SCU_CLOCK_Init+0x92>
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80030c2:	f7ff fe7f 	bl	8002dc4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 80030c6:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <XMC_SCU_CLOCK_Init+0xf8>)
 80030c8:	6813      	ldr	r3, [r2, #0]
 80030ca:	f403 7360 	and.w	r3, r3, #896	; 0x380
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80030ce:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80030d2:	d1f9      	bne.n	80030c8 <XMC_SCU_CLOCK_Init+0xd0>
 80030d4:	e7d0      	b.n	8003078 <XMC_SCU_CLOCK_Init+0x80>
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80030d6:	f7ff fe15 	bl	8002d04 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 80030da:	4a04      	ldr	r2, [pc, #16]	; (80030ec <XMC_SCU_CLOCK_Init+0xf4>)
 80030dc:	6813      	ldr	r3, [r2, #0]
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80030de:	0719      	lsls	r1, r3, #28
 80030e0:	d4fc      	bmi.n	80030dc <XMC_SCU_CLOCK_Init+0xe4>
 80030e2:	e796      	b.n	8003012 <XMC_SCU_CLOCK_Init+0x1a>
 80030e4:	50004600 	.word	0x50004600
 80030e8:	50004000 	.word	0x50004000
 80030ec:	50004300 	.word	0x50004300
 80030f0:	50004710 	.word	0x50004710

080030f4 <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 80030f4:	4b02      	ldr	r3, [pc, #8]	; (8003100 <XMC_SCU_CLOCK_IsSystemPllLocked+0xc>)
 80030f6:	6818      	ldr	r0, [r3, #0]
}
 80030f8:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	50004710 	.word	0x50004710

08003104 <XMC_SCU_INTERRUPT_SetEventHandler>:
{
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8003104:	f010 0301 	ands.w	r3, r0, #1
 8003108:	d002      	beq.n	8003110 <XMC_SCU_INTERRUPT_SetEventHandler+0xc>
 800310a:	e00f      	b.n	800312c <XMC_SCU_INTERRUPT_SetEventHandler+0x28>
 800310c:	2b20      	cmp	r3, #32
 800310e:	d00b      	beq.n	8003128 <XMC_SCU_INTERRUPT_SetEventHandler+0x24>
  {
    index++;
 8003110:	3301      	adds	r3, #1
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8003112:	fa20 f203 	lsr.w	r2, r0, r3
 8003116:	07d2      	lsls	r2, r2, #31
 8003118:	d5f8      	bpl.n	800310c <XMC_SCU_INTERRUPT_SetEventHandler+0x8>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 800311a:	2b20      	cmp	r3, #32
 800311c:	d004      	beq.n	8003128 <XMC_SCU_INTERRUPT_SetEventHandler+0x24>
  {
    status = XMC_SCU_STATUS_ERROR;
  }
  else
  {
    event_handler_list[index] = handler;
 800311e:	4a04      	ldr	r2, [pc, #16]	; (8003130 <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>)
    status = XMC_SCU_STATUS_OK;      
 8003120:	2000      	movs	r0, #0
    event_handler_list[index] = handler;
 8003122:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003126:	4770      	bx	lr
    status = XMC_SCU_STATUS_ERROR;
 8003128:	2001      	movs	r0, #1
  }
  
  return (status);
}
 800312a:	4770      	bx	lr
  index = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	e7f6      	b.n	800311e <XMC_SCU_INTERRUPT_SetEventHandler+0x1a>
 8003130:	20000abc 	.word	0x20000abc

08003134 <XMC_SCU_IRQHandler>:
  return (SCU_INTERRUPT->SRRAW);
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <XMC_SCU_IRQHandler+0x30>)

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 8003136:	b510      	push	{r4, lr}
  return (SCU_INTERRUPT->SRRAW);
 8003138:	685a      	ldr	r2, [r3, #4]
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
 800313a:	2400      	movs	r4, #0
 800313c:	e002      	b.n	8003144 <XMC_SCU_IRQHandler+0x10>
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
      
      break;
    }   
    index++;    
 800313e:	3401      	adds	r4, #1
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 8003140:	2c20      	cmp	r4, #32
 8003142:	d00d      	beq.n	8003160 <XMC_SCU_IRQHandler+0x2c>
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 8003144:	fa22 f304 	lsr.w	r3, r2, r4
 8003148:	07db      	lsls	r3, r3, #31
 800314a:	d5f8      	bpl.n	800313e <XMC_SCU_IRQHandler+0xa>
      event_handler = event_handler_list[index];
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <XMC_SCU_IRQHandler+0x34>)
 800314e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
      if (event_handler != NULL)
 8003152:	b103      	cbz	r3, 8003156 <XMC_SCU_IRQHandler+0x22>
          (event_handler)();
 8003154:	4798      	blx	r3
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 8003156:	2301      	movs	r3, #1
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8003158:	4a02      	ldr	r2, [pc, #8]	; (8003164 <XMC_SCU_IRQHandler+0x30>)
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 800315a:	fa03 f404 	lsl.w	r4, r3, r4
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 800315e:	60d4      	str	r4, [r2, #12]
  }
}
 8003160:	bd10      	pop	{r4, pc}
 8003162:	bf00      	nop
 8003164:	50004074 	.word	0x50004074
 8003168:	20000abc 	.word	0x20000abc

0800316c <Endpoint_Write_Stream_LE>:

#if defined(USB_CAN_BE_DEVICE)

#include "EndpointStream_XMC4000.h"

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed)  {
 800316c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003170:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 800321c <Endpoint_Write_Stream_LE+0xb0>
uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed)  {
 8003174:	4681      	mov	r9, r0
 8003176:	460e      	mov	r6, r1
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003178:	f89b a13c 	ldrb.w	sl, [fp, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;
	uint16_t prev_length = 0;
	if (BytesProcessed!=NULL) {
 800317c:	4690      	mov	r8, r2
 800317e:	2a00      	cmp	r2, #0
 8003180:	d042      	beq.n	8003208 <Endpoint_Write_Stream_LE+0x9c>
		Length -= *BytesProcessed;
 8003182:	8817      	ldrh	r7, [r2, #0]
 8003184:	1bce      	subs	r6, r1, r7
 8003186:	b2b6      	uxth	r6, r6
		BytesTransfered = *BytesProcessed;
	}

	while (Length) {
		if (ep->InInUse)
 8003188:	242c      	movs	r4, #44	; 0x2c
 800318a:	fb04 b40a 	mla	r4, r4, sl, fp
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
			ep->InBytesAvailable += Bytes;
			BytesTransfered += Bytes;
			prev_length = Length;
			Length -= Bytes;
 800318e:	2500      	movs	r5, #0
	while (Length) {
 8003190:	b1ee      	cbz	r6, 80031ce <Endpoint_Write_Stream_LE+0x62>
		if (ep->InInUse)
 8003192:	68a3      	ldr	r3, [r4, #8]
 8003194:	06db      	lsls	r3, r3, #27
 8003196:	d4fc      	bmi.n	8003192 <Endpoint_Write_Stream_LE+0x26>
		if (Endpoint_IsReadWriteAllowed()) {
 8003198:	f7ff f830 	bl	80021fc <Endpoint_IsReadWriteAllowed>
 800319c:	b318      	cbz	r0, 80031e6 <Endpoint_Write_Stream_LE+0x7a>
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 800319e:	f104 001c 	add.w	r0, r4, #28
 80031a2:	c829      	ldmia	r0, {r0, r3, r5}
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 80031a4:	1a2d      	subs	r5, r5, r0
 80031a6:	42b5      	cmp	r5, r6
 80031a8:	bf28      	it	cs
 80031aa:	4635      	movcs	r5, r6
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 80031ac:	462a      	mov	r2, r5
 80031ae:	4418      	add	r0, r3
 80031b0:	eb09 0107 	add.w	r1, r9, r7
 80031b4:	f000 f9b4 	bl	8003520 <thumb2_memcpy>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 80031b8:	b2ab      	uxth	r3, r5
			ep->InBytesAvailable += Bytes;
 80031ba:	69e2      	ldr	r2, [r4, #28]
			BytesTransfered += Bytes;
 80031bc:	441f      	add	r7, r3
			Length -= Bytes;
 80031be:	1af3      	subs	r3, r6, r3
			ep->InBytesAvailable += Bytes;
 80031c0:	442a      	add	r2, r5
 80031c2:	4635      	mov	r5, r6
			Length -= Bytes;
 80031c4:	b29e      	uxth	r6, r3
			BytesTransfered += Bytes;
 80031c6:	b2bf      	uxth	r7, r7
			ep->InBytesAvailable += Bytes;
 80031c8:	61e2      	str	r2, [r4, #28]
	while (Length) {
 80031ca:	2e00      	cmp	r6, #0
 80031cc:	d1e1      	bne.n	8003192 <Endpoint_Write_Stream_LE+0x26>


		}
	}
	
	if((Length == 0) && (prev_length == ep->MaxPacketSize))
 80031ce:	232c      	movs	r3, #44	; 0x2c
 80031d0:	fb03 ba0a 	mla	sl, r3, sl, fp
 80031d4:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 80031d8:	f3c3 1386 	ubfx	r3, r3, #6, #7
 80031dc:	42ab      	cmp	r3, r5
 80031de:	d00d      	beq.n	80031fc <Endpoint_Write_Stream_LE+0x90>
	{
	   zlp_flag = true;
	}
	return ENDPOINT_RWSTREAM_NoError;
 80031e0:	4630      	mov	r0, r6
}
 80031e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			Endpoint_ClearIN();
 80031e6:	f7fe ffbb 	bl	8002160 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 80031ea:	f1b8 0f00 	cmp.w	r8, #0
 80031ee:	d10d      	bne.n	800320c <Endpoint_Write_Stream_LE+0xa0>
			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 80031f0:	f7fe ff3c 	bl	800206c <Endpoint_WaitUntilReady>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	d0cb      	beq.n	8003190 <Endpoint_Write_Stream_LE+0x24>
}
 80031f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	   zlp_flag = true;
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <Endpoint_Write_Stream_LE+0xac>)
 80031fe:	2201      	movs	r2, #1
 8003200:	701a      	strb	r2, [r3, #0]
	return ENDPOINT_RWSTREAM_NoError;
 8003202:	4630      	mov	r0, r6
}
 8003204:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t BytesTransfered = 0;
 8003208:	4617      	mov	r7, r2
 800320a:	e7bd      	b.n	8003188 <Endpoint_Write_Stream_LE+0x1c>
				*BytesProcessed = BytesTransfered;
 800320c:	f8a8 7000 	strh.w	r7, [r8]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003210:	2005      	movs	r0, #5
}
 8003212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003216:	bf00      	nop
 8003218:	20000498 	.word	0x20000498
 800321c:	20000764 	.word	0x20000764

08003220 <SwapCopy>:

void SwapCopy(void *const Dest, const void *const Src,uint32_t Length) {
	uint32_t i = 0;
	while(i<Length) {
 8003220:	b152      	cbz	r2, 8003238 <SwapCopy+0x18>
 8003222:	188b      	adds	r3, r1, r2
 8003224:	3801      	subs	r0, #1
 8003226:	4402      	add	r2, r0
 8003228:	3901      	subs	r1, #1
 800322a:	1e58      	subs	r0, r3, #1
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 800322c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003230:	f802 3901 	strb.w	r3, [r2], #-1
	while(i<Length) {
 8003234:	4288      	cmp	r0, r1
 8003236:	d1f9      	bne.n	800322c <SwapCopy+0xc>
		i++;
	}
}
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop

0800323c <Endpoint_Write_Stream_BE>:
uint8_t	Endpoint_Write_Stream_BE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 800323c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003240:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <Endpoint_Write_Stream_BE+0x9c>)
uint8_t	Endpoint_Write_Stream_BE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8003242:	4607      	mov	r7, r0
 8003244:	460c      	mov	r4, r1
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003246:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 800324a:	4616      	mov	r6, r2
 800324c:	2a00      	cmp	r2, #0
 800324e:	d03d      	beq.n	80032cc <Endpoint_Write_Stream_BE+0x90>
		Length -= *BytesProcessed;
 8003250:	8815      	ldrh	r5, [r2, #0]
 8003252:	1b4c      	subs	r4, r1, r5
 8003254:	b2a4      	uxth	r4, r4
		BytesTransfered = *BytesProcessed;
	}

	while (Length) {
		if (ep->InInUse)
 8003256:	222c      	movs	r2, #44	; 0x2c
 8003258:	fb02 3808 	mla	r8, r2, r8, r3
	while (Length) {
 800325c:	b354      	cbz	r4, 80032b4 <Endpoint_Write_Stream_BE+0x78>
		if (ep->InInUse)
 800325e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003262:	06db      	lsls	r3, r3, #27
 8003264:	d4fb      	bmi.n	800325e <Endpoint_Write_Stream_BE+0x22>
			continue;
		if (Endpoint_IsReadWriteAllowed()) {
 8003266:	f7fe ffc9 	bl	80021fc <Endpoint_IsReadWriteAllowed>
 800326a:	b330      	cbz	r0, 80032ba <Endpoint_Write_Stream_BE+0x7e>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
			SwapCopy((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable),(void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 800326c:	e9d8 2108 	ldrd	r2, r1, [r8, #32]
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8003270:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8003274:	1a09      	subs	r1, r1, r0
 8003276:	42a1      	cmp	r1, r4
 8003278:	bf28      	it	cs
 800327a:	4621      	movcs	r1, r4
 800327c:	fa1f fe81 	uxth.w	lr, r1
 8003280:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
			SwapCopy((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable),(void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 8003284:	197b      	adds	r3, r7, r5
	while(i<Length) {
 8003286:	b159      	cbz	r1, 80032a0 <Endpoint_Write_Stream_BE+0x64>
 8003288:	4462      	add	r2, ip
 800328a:	440a      	add	r2, r1
 800328c:	eb01 0c03 	add.w	ip, r1, r3
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 8003290:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003294:	f802 0901 	strb.w	r0, [r2], #-1
	while(i<Length) {
 8003298:	459c      	cmp	ip, r3
 800329a:	d1f9      	bne.n	8003290 <Endpoint_Write_Stream_BE+0x54>
 800329c:	f8d8 001c 	ldr.w	r0, [r8, #28]
			ep->InBytesAvailable += Bytes;
			BytesTransfered += Bytes;
			Length -= Bytes;
 80032a0:	eba4 040e 	sub.w	r4, r4, lr
			ep->InBytesAvailable += Bytes;
 80032a4:	4401      	add	r1, r0
			BytesTransfered += Bytes;
 80032a6:	4475      	add	r5, lr
			Length -= Bytes;
 80032a8:	b2a4      	uxth	r4, r4
			ep->InBytesAvailable += Bytes;
 80032aa:	f8c8 101c 	str.w	r1, [r8, #28]
			BytesTransfered += Bytes;
 80032ae:	b2ad      	uxth	r5, r5
	while (Length) {
 80032b0:	2c00      	cmp	r4, #0
 80032b2:	d1d4      	bne.n	800325e <Endpoint_Write_Stream_BE+0x22>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 80032b4:	4620      	mov	r0, r4
}
 80032b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			Endpoint_ClearIN();
 80032ba:	f7fe ff51 	bl	8002160 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 80032be:	b93e      	cbnz	r6, 80032d0 <Endpoint_Write_Stream_BE+0x94>
			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 80032c0:	f7fe fed4 	bl	800206c <Endpoint_WaitUntilReady>
 80032c4:	2800      	cmp	r0, #0
 80032c6:	d0c9      	beq.n	800325c <Endpoint_Write_Stream_BE+0x20>
}
 80032c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint16_t BytesTransfered = 0;
 80032cc:	4615      	mov	r5, r2
 80032ce:	e7c2      	b.n	8003256 <Endpoint_Write_Stream_BE+0x1a>
				*BytesProcessed = BytesTransfered;
 80032d0:	8035      	strh	r5, [r6, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 80032d2:	2005      	movs	r0, #5
}
 80032d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032d8:	20000764 	.word	0x20000764

080032dc <Endpoint_Read_Stream_LE>:

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 80032dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80032e0:	4b21      	ldr	r3, [pc, #132]	; (8003368 <Endpoint_Read_Stream_LE+0x8c>)
uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 80032e2:	4681      	mov	r9, r0
 80032e4:	460e      	mov	r6, r1
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80032e6:	f893 413c 	ldrb.w	r4, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 80032ea:	4690      	mov	r8, r2
 80032ec:	2a00      	cmp	r2, #0
 80032ee:	d033      	beq.n	8003358 <Endpoint_Read_Stream_LE+0x7c>
		Length -= *BytesProcessed;
 80032f0:	8817      	ldrh	r7, [r2, #0]
 80032f2:	1bce      	subs	r6, r1, r7
 80032f4:	b2b6      	uxth	r6, r6
		BytesTransfered = *BytesProcessed;
	}

	while (Length) {
		if (ep->OutInUse)
 80032f6:	222c      	movs	r2, #44	; 0x2c
 80032f8:	fb02 3404 	mla	r4, r2, r4, r3
	while (Length) {
 80032fc:	b1f6      	cbz	r6, 800333c <Endpoint_Read_Stream_LE+0x60>
		if (ep->OutInUse)
 80032fe:	68a3      	ldr	r3, [r4, #8]
 8003300:	071b      	lsls	r3, r3, #28
 8003302:	d4fc      	bmi.n	80032fe <Endpoint_Read_Stream_LE+0x22>
			continue;
		if (Endpoint_IsReadWriteAllowed()) {
 8003304:	f7fe ff7a 	bl	80021fc <Endpoint_IsReadWriteAllowed>
 8003308:	b1d8      	cbz	r0, 8003342 <Endpoint_Read_Stream_LE+0x66>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 800330a:	68e5      	ldr	r5, [r4, #12]
			MEMCPY((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 800330c:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 8003310:	42b5      	cmp	r5, r6
 8003312:	bf28      	it	cs
 8003314:	4635      	movcs	r5, r6
			MEMCPY((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8003316:	462a      	mov	r2, r5
 8003318:	4419      	add	r1, r3
 800331a:	eb09 0007 	add.w	r0, r9, r7
 800331e:	f000 f8ff 	bl	8003520 <thumb2_memcpy>
			ep->OutBytesAvailable -= Bytes;
			ep->OutOffset += Bytes;
 8003322:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 8003326:	b2ab      	uxth	r3, r5
			BytesTransfered += Bytes;
			Length -= Bytes;
 8003328:	1af6      	subs	r6, r6, r3
			ep->OutBytesAvailable -= Bytes;
 800332a:	1b49      	subs	r1, r1, r5
			BytesTransfered += Bytes;
 800332c:	441f      	add	r7, r3
			ep->OutOffset += Bytes;
 800332e:	4415      	add	r5, r2
			Length -= Bytes;
 8003330:	b2b6      	uxth	r6, r6
			BytesTransfered += Bytes;
 8003332:	b2bf      	uxth	r7, r7
			ep->OutOffset += Bytes;
 8003334:	e9c4 1503 	strd	r1, r5, [r4, #12]
	while (Length) {
 8003338:	2e00      	cmp	r6, #0
 800333a:	d1e0      	bne.n	80032fe <Endpoint_Read_Stream_LE+0x22>
				return ErrorCode;
			}

		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 800333c:	4630      	mov	r0, r6
}
 800333e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			Endpoint_ClearOUT();
 8003342:	f7fe fee3 	bl	800210c <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 8003346:	f1b8 0f00 	cmp.w	r8, #0
 800334a:	d107      	bne.n	800335c <Endpoint_Read_Stream_LE+0x80>
			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 800334c:	f7fe fe8e 	bl	800206c <Endpoint_WaitUntilReady>
 8003350:	2800      	cmp	r0, #0
 8003352:	d0d3      	beq.n	80032fc <Endpoint_Read_Stream_LE+0x20>
}
 8003354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint16_t BytesTransfered = 0;
 8003358:	4617      	mov	r7, r2
 800335a:	e7cc      	b.n	80032f6 <Endpoint_Read_Stream_LE+0x1a>
				*BytesProcessed = BytesTransfered;
 800335c:	f8a8 7000 	strh.w	r7, [r8]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003360:	2005      	movs	r0, #5
}
 8003362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003366:	bf00      	nop
 8003368:	20000764 	.word	0x20000764

0800336c <Endpoint_Read_Stream_BE>:

uint8_t	Endpoint_Read_Stream_BE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 800336c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003370:	4b27      	ldr	r3, [pc, #156]	; (8003410 <Endpoint_Read_Stream_BE+0xa4>)
uint8_t	Endpoint_Read_Stream_BE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8003372:	4607      	mov	r7, r0
 8003374:	460c      	mov	r4, r1
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003376:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 800337a:	4616      	mov	r6, r2
 800337c:	2a00      	cmp	r2, #0
 800337e:	d040      	beq.n	8003402 <Endpoint_Read_Stream_BE+0x96>
		Length -= *BytesProcessed;
 8003380:	8815      	ldrh	r5, [r2, #0]
 8003382:	1b4c      	subs	r4, r1, r5
 8003384:	b2a4      	uxth	r4, r4
		BytesTransfered = *BytesProcessed;
	}

	while (Length) {
		if (ep->InInUse)
 8003386:	222c      	movs	r2, #44	; 0x2c
 8003388:	fb02 3808 	mla	r8, r2, r8, r3
	while (Length) {
 800338c:	b36c      	cbz	r4, 80033ea <Endpoint_Read_Stream_BE+0x7e>
		if (ep->InInUse)
 800338e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003392:	06db      	lsls	r3, r3, #27
 8003394:	d4fb      	bmi.n	800338e <Endpoint_Read_Stream_BE+0x22>
			continue;
		if (Endpoint_IsReadWriteAllowed()) {
 8003396:	f7fe ff31 	bl	80021fc <Endpoint_IsReadWriteAllowed>
 800339a:	b348      	cbz	r0, 80033f0 <Endpoint_Read_Stream_BE+0x84>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
			SwapCopy((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 800339c:	f108 010c 	add.w	r1, r8, #12
 80033a0:	c90e      	ldmia	r1, {r1, r2, r3}
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 80033a2:	428c      	cmp	r4, r1
 80033a4:	4620      	mov	r0, r4
 80033a6:	bf28      	it	cs
 80033a8:	4608      	movcs	r0, r1
			SwapCopy((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 80033aa:	4413      	add	r3, r2
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 80033ac:	fa1f fc80 	uxth.w	ip, r0
			SwapCopy((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 80033b0:	197a      	adds	r2, r7, r5
	while(i<Length) {
 80033b2:	b158      	cbz	r0, 80033cc <Endpoint_Read_Stream_BE+0x60>
 80033b4:	4402      	add	r2, r0
 80033b6:	3a01      	subs	r2, #1
 80033b8:	eb00 0e03 	add.w	lr, r0, r3
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 80033bc:	f813 1b01 	ldrb.w	r1, [r3], #1
 80033c0:	f802 1901 	strb.w	r1, [r2], #-1
	while(i<Length) {
 80033c4:	459e      	cmp	lr, r3
 80033c6:	d1f9      	bne.n	80033bc <Endpoint_Read_Stream_BE+0x50>
 80033c8:	f8d8 100c 	ldr.w	r1, [r8, #12]
			ep->OutBytesAvailable -= Bytes;
			ep->OutOffset += Bytes;
 80033cc:	f8d8 3010 	ldr.w	r3, [r8, #16]
			BytesTransfered += Bytes;
			Length -= Bytes;
 80033d0:	eba4 040c 	sub.w	r4, r4, ip
			ep->OutBytesAvailable -= Bytes;
 80033d4:	1a09      	subs	r1, r1, r0
			BytesTransfered += Bytes;
 80033d6:	4465      	add	r5, ip
			ep->OutOffset += Bytes;
 80033d8:	4418      	add	r0, r3
			Length -= Bytes;
 80033da:	b2a4      	uxth	r4, r4
			ep->OutBytesAvailable -= Bytes;
 80033dc:	f8c8 100c 	str.w	r1, [r8, #12]
			BytesTransfered += Bytes;
 80033e0:	b2ad      	uxth	r5, r5
			ep->OutOffset += Bytes;
 80033e2:	f8c8 0010 	str.w	r0, [r8, #16]
	while (Length) {
 80033e6:	2c00      	cmp	r4, #0
 80033e8:	d1d1      	bne.n	800338e <Endpoint_Read_Stream_BE+0x22>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 80033ea:	4620      	mov	r0, r4
}
 80033ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			Endpoint_ClearOUT();
 80033f0:	f7fe fe8c 	bl	800210c <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 80033f4:	b93e      	cbnz	r6, 8003406 <Endpoint_Read_Stream_BE+0x9a>
			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 80033f6:	f7fe fe39 	bl	800206c <Endpoint_WaitUntilReady>
 80033fa:	2800      	cmp	r0, #0
 80033fc:	d0c6      	beq.n	800338c <Endpoint_Read_Stream_BE+0x20>
}
 80033fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint16_t BytesTransfered = 0;
 8003402:	4615      	mov	r5, r2
 8003404:	e7bf      	b.n	8003386 <Endpoint_Read_Stream_BE+0x1a>
				*BytesProcessed = BytesTransfered;
 8003406:	8035      	strh	r5, [r6, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003408:	2005      	movs	r0, #5
}
 800340a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800340e:	bf00      	nop
 8003410:	20000764 	.word	0x20000764

08003414 <Endpoint_Write_Control_Stream_LE>:

uint8_t	Endpoint_Write_Control_Stream_LE (const void *const Buffer, uint16_t Length) {
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	460d      	mov	r5, r1
 8003418:	4607      	mov	r7, r0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
	uint16_t Bytes;

	while (Length) {
		if (!EndPoint->InInUse) {
 800341a:	4c0e      	ldr	r4, [pc, #56]	; (8003454 <Endpoint_Write_Control_Stream_LE+0x40>)
	while (Length) {
 800341c:	b1bd      	cbz	r5, 800344e <Endpoint_Write_Control_Stream_LE+0x3a>
		if (!EndPoint->InInUse) {
 800341e:	68a3      	ldr	r3, [r4, #8]
 8003420:	06db      	lsls	r3, r3, #27
 8003422:	d4fc      	bmi.n	800341e <Endpoint_Write_Control_Stream_LE+0xa>
			if (EndPoint->InBufferLength > Length) {
 8003424:	6a63      	ldr	r3, [r4, #36]	; 0x24
				Bytes = Length;
			} else {
				Bytes = EndPoint->InBufferLength;
			}
			MEMCPY(EndPoint->InBuffer,Buffer,Bytes);
 8003426:	6a20      	ldr	r0, [r4, #32]
			if (EndPoint->InBufferLength > Length) {
 8003428:	42ab      	cmp	r3, r5
 800342a:	462e      	mov	r6, r5
				Bytes = EndPoint->InBufferLength;
 800342c:	bf9c      	itt	ls
 800342e:	461e      	movls	r6, r3
 8003430:	1aed      	subls	r5, r5, r3
			MEMCPY(EndPoint->InBuffer,Buffer,Bytes);
 8003432:	4632      	mov	r2, r6
 8003434:	4639      	mov	r1, r7
 8003436:	bf94      	ite	ls
 8003438:	b2ad      	uxthls	r5, r5
 800343a:	2500      	movhi	r5, #0
 800343c:	f000 f870 	bl	8003520 <thumb2_memcpy>
			EndPoint->InBytesAvailable += Bytes;
 8003440:	69e3      	ldr	r3, [r4, #28]
 8003442:	4433      	add	r3, r6
 8003444:	61e3      	str	r3, [r4, #28]
			Length -= Bytes;

			Endpoint_ClearIN();
 8003446:	f7fe fe8b 	bl	8002160 <Endpoint_ClearIN>
	while (Length) {
 800344a:	2d00      	cmp	r5, #0
 800344c:	d1e7      	bne.n	800341e <Endpoint_Write_Control_Stream_LE+0xa>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
}
 800344e:	4628      	mov	r0, r5
 8003450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003452:	bf00      	nop
 8003454:	20000764 	.word	0x20000764

08003458 <Endpoint_Write_Control_Stream_BE>:

uint8_t	Endpoint_Write_Control_Stream_BE (const void *const Buffer, uint16_t Length) {
	return Endpoint_Write_Control_Stream_LE(Buffer,Length);
 8003458:	f7ff bfdc 	b.w	8003414 <Endpoint_Write_Control_Stream_LE>

0800345c <Endpoint_Read_Control_Stream_LE>:
}

uint8_t	Endpoint_Read_Control_Stream_LE (void *const Buffer, uint16_t Length) {
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	460d      	mov	r5, r1
 8003460:	4607      	mov	r7, r0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
	uint16_t Bytes;

	while (Length) {
		if (EndPoint->IsOutRecieved) {
 8003462:	4c0c      	ldr	r4, [pc, #48]	; (8003494 <Endpoint_Read_Control_Stream_LE+0x38>)
	while (Length) {
 8003464:	b1a5      	cbz	r5, 8003490 <Endpoint_Read_Control_Stream_LE+0x34>
		if (EndPoint->IsOutRecieved) {
 8003466:	68a3      	ldr	r3, [r4, #8]
 8003468:	069b      	lsls	r3, r3, #26
 800346a:	d5fc      	bpl.n	8003466 <Endpoint_Read_Control_Stream_LE+0xa>
			Bytes = EndPoint->OutBytesAvailable > Length
					? Length : EndPoint->OutBytesAvailable;
 800346c:	68e6      	ldr	r6, [r4, #12]
			MEMCPY(Buffer,EndPoint->OutBuffer,Bytes);
 800346e:	6961      	ldr	r1, [r4, #20]
					? Length : EndPoint->OutBytesAvailable;
 8003470:	42ae      	cmp	r6, r5
 8003472:	bf28      	it	cs
 8003474:	462e      	movcs	r6, r5
			MEMCPY(Buffer,EndPoint->OutBuffer,Bytes);
 8003476:	4632      	mov	r2, r6
 8003478:	4638      	mov	r0, r7
 800347a:	f000 f851 	bl	8003520 <thumb2_memcpy>
			EndPoint->OutBytesAvailable -= Bytes;
 800347e:	68e3      	ldr	r3, [r4, #12]
			Length -= Bytes;
 8003480:	1bad      	subs	r5, r5, r6
 8003482:	b2ad      	uxth	r5, r5
			EndPoint->OutBytesAvailable -= Bytes;
 8003484:	1b9e      	subs	r6, r3, r6
 8003486:	60e6      	str	r6, [r4, #12]

			Endpoint_ClearOUT();
 8003488:	f7fe fe40 	bl	800210c <Endpoint_ClearOUT>
	while (Length) {
 800348c:	2d00      	cmp	r5, #0
 800348e:	d1ea      	bne.n	8003466 <Endpoint_Read_Control_Stream_LE+0xa>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
}
 8003490:	4628      	mov	r0, r5
 8003492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003494:	20000764 	.word	0x20000764

08003498 <Endpoint_Read_Control_Stream_BE>:

uint8_t	Endpoint_Read_Control_Stream_BE (void *const Buffer, uint16_t Length) {
	return Endpoint_Read_Control_Stream_LE(Buffer,Length);
 8003498:	f7ff bfe0 	b.w	800345c <Endpoint_Read_Control_Stream_LE>

0800349c <Endpoint_Null_Stream>:
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
								 uint16_t* const BytesProcessed) {
 800349c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80034a0:	4b1e      	ldr	r3, [pc, #120]	; (800351c <Endpoint_Null_Stream+0x80>)
								 uint16_t* const BytesProcessed) {
 80034a2:	4606      	mov	r6, r0
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80034a4:	f893 413c 	ldrb.w	r4, [r3, #316]	; 0x13c
		uint16_t Bytes = 0;
		uint16_t BytesTransfered = 0;
		uint8_t ErrorCode;

		if (BytesProcessed!=NULL) {
 80034a8:	4688      	mov	r8, r1
 80034aa:	b381      	cbz	r1, 800350e <Endpoint_Null_Stream+0x72>
			Length -= *BytesProcessed;
 80034ac:	880f      	ldrh	r7, [r1, #0]
 80034ae:	1bc6      	subs	r6, r0, r7
 80034b0:	b2b6      	uxth	r6, r6
			BytesTransfered = *BytesProcessed;
		}

		while (Length) {
			if (ep->InInUse)
 80034b2:	222c      	movs	r2, #44	; 0x2c
 80034b4:	fb02 3404 	mla	r4, r2, r4, r3
		while (Length) {
 80034b8:	b1de      	cbz	r6, 80034f2 <Endpoint_Null_Stream+0x56>
			if (ep->InInUse)
 80034ba:	68a3      	ldr	r3, [r4, #8]
 80034bc:	06db      	lsls	r3, r3, #27
 80034be:	d4fc      	bmi.n	80034ba <Endpoint_Null_Stream+0x1e>
				continue;
			if (Endpoint_IsReadWriteAllowed()) {
 80034c0:	f7fe fe9c 	bl	80021fc <Endpoint_IsReadWriteAllowed>
 80034c4:	b1c0      	cbz	r0, 80034f8 <Endpoint_Null_Stream+0x5c>
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
				memset(ep->InBuffer + ep->InBytesAvailable,0x0,Bytes);
 80034c6:	f104 001c 	add.w	r0, r4, #28
 80034ca:	c829      	ldmia	r0, {r0, r3, r5}
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 80034cc:	1a2d      	subs	r5, r5, r0
 80034ce:	42b5      	cmp	r5, r6
 80034d0:	bf28      	it	cs
 80034d2:	4635      	movcs	r5, r6
				memset(ep->InBuffer + ep->InBytesAvailable,0x0,Bytes);
 80034d4:	462a      	mov	r2, r5
 80034d6:	4418      	add	r0, r3
 80034d8:	2100      	movs	r1, #0
 80034da:	f000 fb0b 	bl	8003af4 <memset>
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 80034de:	b2ab      	uxth	r3, r5
				ep->InBytesAvailable += Bytes;
 80034e0:	69e2      	ldr	r2, [r4, #28]
				BytesTransfered += Bytes;
				Length -= Bytes;
 80034e2:	1af6      	subs	r6, r6, r3
				BytesTransfered += Bytes;
 80034e4:	441f      	add	r7, r3
				ep->InBytesAvailable += Bytes;
 80034e6:	4415      	add	r5, r2
				Length -= Bytes;
 80034e8:	b2b6      	uxth	r6, r6
				BytesTransfered += Bytes;
 80034ea:	b2bf      	uxth	r7, r7
				ep->InBytesAvailable += Bytes;
 80034ec:	61e5      	str	r5, [r4, #28]
		while (Length) {
 80034ee:	2e00      	cmp	r6, #0
 80034f0:	d1e3      	bne.n	80034ba <Endpoint_Null_Stream+0x1e>
				}


			}
		}
		return ENDPOINT_RWSTREAM_NoError;
 80034f2:	4630      	mov	r0, r6
}
 80034f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				Endpoint_ClearIN();
 80034f8:	f7fe fe32 	bl	8002160 <Endpoint_ClearIN>
				if (BytesProcessed!=NULL) {
 80034fc:	f1b8 0f00 	cmp.w	r8, #0
 8003500:	d107      	bne.n	8003512 <Endpoint_Null_Stream+0x76>
				if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003502:	f7fe fdb3 	bl	800206c <Endpoint_WaitUntilReady>
 8003506:	2800      	cmp	r0, #0
 8003508:	d0d6      	beq.n	80034b8 <Endpoint_Null_Stream+0x1c>
}
 800350a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint16_t BytesTransfered = 0;
 800350e:	460f      	mov	r7, r1
 8003510:	e7cf      	b.n	80034b2 <Endpoint_Null_Stream+0x16>
					*BytesProcessed = BytesTransfered;
 8003512:	f8a8 7000 	strh.w	r7, [r8]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003516:	2005      	movs	r0, #5
}
 8003518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800351c:	20000764 	.word	0x20000764

08003520 <thumb2_memcpy>:
   stack to improve its performance.  It copies 4 bytes at a time and
   unrolls the loop to perform 4 of these copies per loop iteration.
*/
__attribute__((naked)) void thumb2_memcpy(void* pDest, const void* pSource, size_t length)
{
    __asm (
 8003520:	0913      	lsrs	r3, r2, #4
 8003522:	d011      	beq.n	8003548 <thumb2_memcpy+0x28>
 8003524:	f851 cb04 	ldr.w	ip, [r1], #4
 8003528:	f840 cb04 	str.w	ip, [r0], #4
 800352c:	f851 cb04 	ldr.w	ip, [r1], #4
 8003530:	f840 cb04 	str.w	ip, [r0], #4
 8003534:	f851 cb04 	ldr.w	ip, [r1], #4
 8003538:	f840 cb04 	str.w	ip, [r0], #4
 800353c:	f851 cb04 	ldr.w	ip, [r1], #4
 8003540:	f840 cb04 	str.w	ip, [r0], #4
 8003544:	3b01      	subs	r3, #1
 8003546:	d1ed      	bne.n	8003524 <thumb2_memcpy+0x4>
 8003548:	f012 030f 	ands.w	r3, r2, #15
 800354c:	d005      	beq.n	800355a <thumb2_memcpy+0x3a>
 800354e:	f811 cb01 	ldrb.w	ip, [r1], #1
 8003552:	f800 cb01 	strb.w	ip, [r0], #1
 8003556:	3b01      	subs	r3, #1
 8003558:	d1f9      	bne.n	800354e <thumb2_memcpy+0x2e>
 800355a:	4770      	bx	lr

0800355c <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 800355c:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8003560:	4418      	add	r0, r3
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8003562:	f001 0103 	and.w	r1, r1, #3
{
 8003566:	b410      	push	{r4}
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8003568:	6903      	ldr	r3, [r0, #16]
 800356a:	00c9      	lsls	r1, r1, #3
 800356c:	24f8      	movs	r4, #248	; 0xf8
 800356e:	408c      	lsls	r4, r1
 8003570:	ea23 0304 	bic.w	r3, r3, r4
 8003574:	6103      	str	r3, [r0, #16]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8003576:	6903      	ldr	r3, [r0, #16]
}
 8003578:	f85d 4b04 	ldr.w	r4, [sp], #4
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800357c:	fa02 f101 	lsl.w	r1, r2, r1
 8003580:	4319      	orrs	r1, r3
 8003582:	6101      	str	r1, [r0, #16]
}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop

08003588 <XMC_GPIO_SetHardwareControl>:
void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8003588:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800358a:	b410      	push	{r4}
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800358c:	0049      	lsls	r1, r1, #1
 800358e:	2403      	movs	r4, #3
 8003590:	408c      	lsls	r4, r1
 8003592:	ea23 0304 	bic.w	r3, r3, r4
 8003596:	6743      	str	r3, [r0, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8003598:	6f43      	ldr	r3, [r0, #116]	; 0x74
}
 800359a:	f85d 4b04 	ldr.w	r4, [sp], #4
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800359e:	408a      	lsls	r2, r1
 80035a0:	431a      	orrs	r2, r3
 80035a2:	6742      	str	r2, [r0, #116]	; 0x74
}
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop

080035a8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80035a8:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 80035ac:	4403      	add	r3, r0
 80035ae:	b4f0      	push	{r4, r5, r6, r7}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80035b0:	f001 0403 	and.w	r4, r1, #3
 80035b4:	691d      	ldr	r5, [r3, #16]
  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80035b6:	4f1c      	ldr	r7, [pc, #112]	; (8003628 <XMC_GPIO_Init+0x80>)
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80035b8:	00e4      	lsls	r4, r4, #3
 80035ba:	26f8      	movs	r6, #248	; 0xf8
 80035bc:	40a6      	lsls	r6, r4
 80035be:	ea25 0506 	bic.w	r5, r5, r6
 80035c2:	611d      	str	r5, [r3, #16]
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80035c4:	6f45      	ldr	r5, [r0, #116]	; 0x74
 80035c6:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80035ca:	2603      	movs	r6, #3
 80035cc:	fa06 f60c 	lsl.w	r6, r6, ip
 80035d0:	ea25 0506 	bic.w	r5, r5, r6
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80035d4:	42b8      	cmp	r0, r7
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80035d6:	6745      	str	r5, [r0, #116]	; 0x74
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80035d8:	d01e      	beq.n	8003618 <XMC_GPIO_Init+0x70>
 80035da:	4d14      	ldr	r5, [pc, #80]	; (800362c <XMC_GPIO_Init+0x84>)
 80035dc:	42a8      	cmp	r0, r5
 80035de:	d01b      	beq.n	8003618 <XMC_GPIO_Init+0x70>
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 80035e0:	6857      	ldr	r7, [r2, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80035e2:	7a16      	ldrb	r6, [r2, #8]
 80035e4:	08cd      	lsrs	r5, r1, #3
 80035e6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    port->OMR = (uint32_t)config->output_level << pin;
 80035ea:	408f      	lsls	r7, r1
 80035ec:	6047      	str	r7, [r0, #4]
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80035ee:	f001 0107 	and.w	r1, r1, #7
 80035f2:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80035f4:	0089      	lsls	r1, r1, #2
 80035f6:	2707      	movs	r7, #7
 80035f8:	408f      	lsls	r7, r1
 80035fa:	ea20 0007 	bic.w	r0, r0, r7
 80035fe:	6428      	str	r0, [r5, #64]	; 0x40
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8003600:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8003602:	fa06 f101 	lsl.w	r1, r6, r1
 8003606:	4301      	orrs	r1, r0
 8003608:	6429      	str	r1, [r5, #64]	; 0x40
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800360a:	7812      	ldrb	r2, [r2, #0]
 800360c:	6919      	ldr	r1, [r3, #16]
 800360e:	40a2      	lsls	r2, r4
 8003610:	430a      	orrs	r2, r1
 8003612:	611a      	str	r2, [r3, #16]
}
 8003614:	bcf0      	pop	{r4, r5, r6, r7}
 8003616:	4770      	bx	lr
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8003618:	6e05      	ldr	r5, [r0, #96]	; 0x60
 800361a:	2601      	movs	r6, #1
 800361c:	fa06 f101 	lsl.w	r1, r6, r1
 8003620:	ea25 0101 	bic.w	r1, r5, r1
 8003624:	6601      	str	r1, [r0, #96]	; 0x60
 8003626:	e7f0      	b.n	800360a <XMC_GPIO_Init+0x62>
 8003628:	48028e00 	.word	0x48028e00
 800362c:	48028f00 	.word	0x48028f00

08003630 <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 8003630:	08cb      	lsrs	r3, r1, #3
 8003632:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8003636:	f001 0107 	and.w	r1, r1, #7
{
 800363a:	b410      	push	{r4}
  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800363c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800363e:	0089      	lsls	r1, r1, #2
 8003640:	2407      	movs	r4, #7
 8003642:	408c      	lsls	r4, r1
 8003644:	ea23 0304 	bic.w	r3, r3, r4
 8003648:	6403      	str	r3, [r0, #64]	; 0x40
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800364a:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 800364c:	f85d 4b04 	ldr.w	r4, [sp], #4
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8003650:	fa02 f101 	lsl.w	r1, r2, r1
 8003654:	4319      	orrs	r1, r3
 8003656:	6401      	str	r1, [r0, #64]	; 0x40
}
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop

0800365c <SystemCoreSetup>:
  __ASM volatile ("cpsid i" : : : "memory");
 800365c:	b672      	cpsid	i
{
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <SystemCoreSetup+0x38>)
 8003660:	4a0d      	ldr	r2, [pc, #52]	; (8003698 <SystemCoreSetup+0x3c>)
 8003662:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8003664:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 8003668:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800366a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);

  temp = FLASH0->FCON;
 800366e:	480b      	ldr	r0, [pc, #44]	; (800369c <SystemCoreSetup+0x40>)
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8003670:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003674:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8003678:	695a      	ldr	r2, [r3, #20]
  temp = FLASH0->FCON;
 800367a:	f241 0114 	movw	r1, #4116	; 0x1014
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 800367e:	f022 0208 	bic.w	r2, r2, #8
 8003682:	615a      	str	r2, [r3, #20]
  temp = FLASH0->FCON;
 8003684:	5843      	ldr	r3, [r0, r1]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8003686:	f023 030f 	bic.w	r3, r3, #15
  temp |= PMU_FLASH_WS;
 800368a:	f043 0303 	orr.w	r3, r3, #3
  FLASH0->FCON = temp;
 800368e:	5043      	str	r3, [r0, r1]
}
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e000ed00 	.word	0xe000ed00
 8003698:	08000000 	.word	0x08000000
 800369c:	58001000 	.word	0x58001000

080036a0 <OSCHP_GetFrequency>:
}

__WEAK uint32_t OSCHP_GetFrequency(void)
{
  return OSCHP_FREQUENCY;
}
 80036a0:	4800      	ldr	r0, [pc, #0]	; (80036a4 <OSCHP_GetFrequency+0x4>)
 80036a2:	4770      	bx	lr
 80036a4:	00b71b00 	.word	0x00b71b00

080036a8 <SystemCoreClockUpdate>:
  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80036a8:	4b1c      	ldr	r3, [pc, #112]	; (800371c <SystemCoreClockUpdate+0x74>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	03d9      	lsls	r1, r3, #15
{
 80036ae:	b510      	push	{r4, lr}
  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80036b0:	d51d      	bpl.n	80036ee <SystemCoreClockUpdate+0x46>
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80036b2:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <SystemCoreClockUpdate+0x78>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	07da      	lsls	r2, r3, #31
 80036b8:	d52c      	bpl.n	8003714 <SystemCoreClockUpdate+0x6c>
      temp = OFI_FREQUENCY;
 80036ba:	481a      	ldr	r0, [pc, #104]	; (8003724 <SystemCoreClockUpdate+0x7c>)
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80036bc:	4a18      	ldr	r2, [pc, #96]	; (8003720 <SystemCoreClockUpdate+0x78>)
 80036be:	6813      	ldr	r3, [r2, #0]
 80036c0:	075b      	lsls	r3, r3, #29
 80036c2:	d416      	bmi.n	80036f2 <SystemCoreClockUpdate+0x4a>
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80036c4:	6893      	ldr	r3, [r2, #8]
 80036c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ca:	3301      	adds	r3, #1
      temp = (temp / kdiv);
 80036cc:	fbb0 f0f3 	udiv	r0, r0, r3
  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80036d0:	4b12      	ldr	r3, [pc, #72]	; (800371c <SystemCoreClockUpdate+0x74>)
  SystemCoreClock = temp;
 80036d2:	4915      	ldr	r1, [pc, #84]	; (8003728 <SystemCoreClockUpdate+0x80>)
  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80036d4:	68da      	ldr	r2, [r3, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80036d6:	691b      	ldr	r3, [r3, #16]
  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80036d8:	b2d2      	uxtb	r2, r2
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80036da:	f003 0301 	and.w	r3, r3, #1
  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80036de:	3201      	adds	r2, #1
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80036e0:	3301      	adds	r3, #1
  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80036e2:	fbb0 f0f2 	udiv	r0, r0, r2
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80036e6:	fbb0 f0f3 	udiv	r0, r0, r3
  SystemCoreClock = temp;
 80036ea:	6008      	str	r0, [r1, #0]
}
 80036ec:	bd10      	pop	{r4, pc}
    temp = OFI_FREQUENCY;
 80036ee:	480d      	ldr	r0, [pc, #52]	; (8003724 <SystemCoreClockUpdate+0x7c>)
 80036f0:	e7ee      	b.n	80036d0 <SystemCoreClockUpdate+0x28>
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80036f2:	6894      	ldr	r4, [r2, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80036f4:	6891      	ldr	r1, [r2, #8]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80036f6:	6892      	ldr	r2, [r2, #8]
 80036f8:	f3c2 4206 	ubfx	r2, r2, #16, #7
 80036fc:	1c53      	adds	r3, r2, #1
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80036fe:	f3c4 6403 	ubfx	r4, r4, #24, #4
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8003702:	f3c1 2206 	ubfx	r2, r1, #8, #7
      temp = (temp / (pdiv * kdiv)) * ndiv;
 8003706:	fb04 3303 	mla	r3, r4, r3, r3
 800370a:	fbb0 f0f3 	udiv	r0, r0, r3
 800370e:	fb02 0000 	mla	r0, r2, r0, r0
 8003712:	e7dd      	b.n	80036d0 <SystemCoreClockUpdate+0x28>
      temp = OSCHP_GetFrequency();
 8003714:	f7ff ffc4 	bl	80036a0 <OSCHP_GetFrequency>
 8003718:	e7d0      	b.n	80036bc <SystemCoreClockUpdate+0x14>
 800371a:	bf00      	nop
 800371c:	50004600 	.word	0x50004600
 8003720:	50004710 	.word	0x50004710
 8003724:	016e3600 	.word	0x016e3600
 8003728:	2000ffc0 	.word	0x2000ffc0
{
 800372c:	b530      	push	{r4, r5, lr}
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 800372e:	4b6c      	ldr	r3, [pc, #432]	; (80038e0 <SystemCoreClockUpdate+0x238>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	07d1      	lsls	r1, r2, #31
{
 8003734:	b087      	sub	sp, #28
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8003736:	d406      	bmi.n	8003746 <SystemCoreClockUpdate+0x9e>
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	605a      	str	r2, [r3, #4]
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	07d2      	lsls	r2, r2, #31
 8003744:	d5fc      	bpl.n	8003740 <SystemCoreClockUpdate+0x98>
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8003746:	4b67      	ldr	r3, [pc, #412]	; (80038e4 <SystemCoreClockUpdate+0x23c>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	0595      	lsls	r5, r2, #22
 800374c:	d511      	bpl.n	8003772 <SystemCoreClockUpdate+0xca>
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 800374e:	689a      	ldr	r2, [r3, #8]
  for(i = 0UL; i < cycles ;++i)
 8003750:	2100      	movs	r1, #0
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8003752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003756:	609a      	str	r2, [r3, #8]
  for(i = 0UL; i < cycles ;++i)
 8003758:	9101      	str	r1, [sp, #4]
 800375a:	9b01      	ldr	r3, [sp, #4]
 800375c:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8003760:	4293      	cmp	r3, r2
 8003762:	d806      	bhi.n	8003772 <SystemCoreClockUpdate+0xca>
    __NOP();
 8003764:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8003766:	9b01      	ldr	r3, [sp, #4]
 8003768:	3301      	adds	r3, #1
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	9b01      	ldr	r3, [sp, #4]
 800376e:	4293      	cmp	r3, r2
 8003770:	d9f8      	bls.n	8003764 <SystemCoreClockUpdate+0xbc>
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8003772:	4a5d      	ldr	r2, [pc, #372]	; (80038e8 <SystemCoreClockUpdate+0x240>)
 8003774:	6853      	ldr	r3, [r2, #4]
  for(i = 0UL; i < cycles ;++i)
 8003776:	2100      	movs	r1, #0
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8003778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800377c:	6053      	str	r3, [r2, #4]
  for(i = 0UL; i < cycles ;++i)
 800377e:	9102      	str	r1, [sp, #8]
 8003780:	9b02      	ldr	r3, [sp, #8]
 8003782:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8003786:	4293      	cmp	r3, r2
 8003788:	d806      	bhi.n	8003798 <SystemCoreClockUpdate+0xf0>
    __NOP();
 800378a:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 800378c:	9b02      	ldr	r3, [sp, #8]
 800378e:	3301      	adds	r3, #1
 8003790:	9302      	str	r3, [sp, #8]
 8003792:	9b02      	ldr	r3, [sp, #8]
 8003794:	4293      	cmp	r3, r2
 8003796:	d9f8      	bls.n	800378a <SystemCoreClockUpdate+0xe2>
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8003798:	4c53      	ldr	r4, [pc, #332]	; (80038e8 <SystemCoreClockUpdate+0x240>)
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 800379a:	4d54      	ldr	r5, [pc, #336]	; (80038ec <SystemCoreClockUpdate+0x244>)
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800379c:	6863      	ldr	r3, [r4, #4]
 800379e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a2:	f023 0302 	bic.w	r3, r3, #2
 80037a6:	6063      	str	r3, [r4, #4]
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80037a8:	686b      	ldr	r3, [r5, #4]
 80037aa:	f013 0f30 	tst.w	r3, #48	; 0x30
 80037ae:	d177      	bne.n	80038a0 <SystemCoreClockUpdate+0x1f8>
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 80037b0:	4b4d      	ldr	r3, [pc, #308]	; (80038e8 <SystemCoreClockUpdate+0x240>)
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80037b2:	494f      	ldr	r1, [pc, #316]	; (80038f0 <SystemCoreClockUpdate+0x248>)
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	f042 0210 	orr.w	r2, r2, #16
 80037c2:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80037c4:	6099      	str	r1, [r3, #8]
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037cc:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	f022 0210 	bic.w	r2, r2, #16
 80037d4:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80037dc:	605a      	str	r2, [r3, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	0754      	lsls	r4, r2, #29
 80037e2:	d5fc      	bpl.n	80037de <SystemCoreClockUpdate+0x136>
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80037e4:	6859      	ldr	r1, [r3, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80037e6:	4a40      	ldr	r2, [pc, #256]	; (80038e8 <SystemCoreClockUpdate+0x240>)
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80037e8:	f021 0101 	bic.w	r1, r1, #1
 80037ec:	6059      	str	r1, [r3, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80037ee:	6813      	ldr	r3, [r2, #0]
 80037f0:	f013 0301 	ands.w	r3, r3, #1
 80037f4:	d1fb      	bne.n	80037ee <SystemCoreClockUpdate+0x146>
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80037f6:	493f      	ldr	r1, [pc, #252]	; (80038f4 <SystemCoreClockUpdate+0x24c>)
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80037f8:	4c3f      	ldr	r4, [pc, #252]	; (80038f8 <SystemCoreClockUpdate+0x250>)
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80037fa:	68c8      	ldr	r0, [r1, #12]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 80037fc:	2503      	movs	r5, #3
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80037fe:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003802:	60c8      	str	r0, [r1, #12]
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8003804:	614b      	str	r3, [r1, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8003806:	610b      	str	r3, [r1, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8003808:	620b      	str	r3, [r1, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 800380a:	624b      	str	r3, [r1, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 800380c:	61cb      	str	r3, [r1, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 800380e:	618d      	str	r5, [r1, #24]
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8003810:	6851      	ldr	r1, [r2, #4]
 8003812:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003816:	6051      	str	r1, [r2, #4]
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8003818:	6094      	str	r4, [r2, #8]
  for(i = 0UL; i < cycles ;++i)
 800381a:	9303      	str	r3, [sp, #12]
 800381c:	9b03      	ldr	r3, [sp, #12]
 800381e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003822:	4293      	cmp	r3, r2
 8003824:	d806      	bhi.n	8003834 <SystemCoreClockUpdate+0x18c>
    __NOP();
 8003826:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8003828:	9b03      	ldr	r3, [sp, #12]
 800382a:	3301      	adds	r3, #1
 800382c:	9303      	str	r3, [sp, #12]
 800382e:	9b03      	ldr	r3, [sp, #12]
 8003830:	4293      	cmp	r3, r2
 8003832:	d9f8      	bls.n	8003826 <SystemCoreClockUpdate+0x17e>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8003834:	4a2c      	ldr	r2, [pc, #176]	; (80038e8 <SystemCoreClockUpdate+0x240>)
 8003836:	6813      	ldr	r3, [r2, #0]
 8003838:	0758      	lsls	r0, r3, #29
 800383a:	d5fc      	bpl.n	8003836 <SystemCoreClockUpdate+0x18e>
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800383c:	4b2f      	ldr	r3, [pc, #188]	; (80038fc <SystemCoreClockUpdate+0x254>)
 800383e:	6093      	str	r3, [r2, #8]
  for(i = 0UL; i < cycles ;++i)
 8003840:	2300      	movs	r3, #0
 8003842:	9304      	str	r3, [sp, #16]
 8003844:	9b04      	ldr	r3, [sp, #16]
 8003846:	f241 1293 	movw	r2, #4499	; 0x1193
 800384a:	4293      	cmp	r3, r2
 800384c:	d806      	bhi.n	800385c <SystemCoreClockUpdate+0x1b4>
    __NOP();
 800384e:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8003850:	9b04      	ldr	r3, [sp, #16]
 8003852:	3301      	adds	r3, #1
 8003854:	9304      	str	r3, [sp, #16]
 8003856:	9b04      	ldr	r3, [sp, #16]
 8003858:	4293      	cmp	r3, r2
 800385a:	d9f8      	bls.n	800384e <SystemCoreClockUpdate+0x1a6>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800385c:	4a22      	ldr	r2, [pc, #136]	; (80038e8 <SystemCoreClockUpdate+0x240>)
 800385e:	6813      	ldr	r3, [r2, #0]
 8003860:	0759      	lsls	r1, r3, #29
 8003862:	d5fc      	bpl.n	800385e <SystemCoreClockUpdate+0x1b6>
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8003864:	4b26      	ldr	r3, [pc, #152]	; (8003900 <SystemCoreClockUpdate+0x258>)
 8003866:	6093      	str	r3, [r2, #8]
  for(i = 0UL; i < cycles ;++i)
 8003868:	2300      	movs	r3, #0
 800386a:	9305      	str	r3, [sp, #20]
 800386c:	9b05      	ldr	r3, [sp, #20]
 800386e:	f241 726f 	movw	r2, #5999	; 0x176f
 8003872:	4293      	cmp	r3, r2
 8003874:	d806      	bhi.n	8003884 <SystemCoreClockUpdate+0x1dc>
    __NOP();
 8003876:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8003878:	9b05      	ldr	r3, [sp, #20]
 800387a:	3301      	adds	r3, #1
 800387c:	9305      	str	r3, [sp, #20]
 800387e:	9b05      	ldr	r3, [sp, #20]
 8003880:	4293      	cmp	r3, r2
 8003882:	d9f8      	bls.n	8003876 <SystemCoreClockUpdate+0x1ce>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8003884:	4a18      	ldr	r2, [pc, #96]	; (80038e8 <SystemCoreClockUpdate+0x240>)
 8003886:	6813      	ldr	r3, [r2, #0]
 8003888:	075b      	lsls	r3, r3, #29
 800388a:	d5fc      	bpl.n	8003886 <SystemCoreClockUpdate+0x1de>
  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 800388c:	491d      	ldr	r1, [pc, #116]	; (8003904 <SystemCoreClockUpdate+0x25c>)
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 800388e:	4b19      	ldr	r3, [pc, #100]	; (80038f4 <SystemCoreClockUpdate+0x24c>)
  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8003890:	2005      	movs	r0, #5
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8003892:	2200      	movs	r2, #0
  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8003894:	60c8      	str	r0, [r1, #12]
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8003896:	605a      	str	r2, [r3, #4]
  SystemCoreClockUpdate();
 8003898:	f7ff ff06 	bl	80036a8 <SystemCoreClockUpdate>
}
 800389c:	b007      	add	sp, #28
 800389e:	bd30      	pop	{r4, r5, pc}
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80038a0:	686b      	ldr	r3, [r5, #4]
 80038a2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80038a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80038aa:	606b      	str	r3, [r5, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80038ac:	f7ff fef8 	bl	80036a0 <OSCHP_GetFrequency>
 80038b0:	4b15      	ldr	r3, [pc, #84]	; (8003908 <SystemCoreClockUpdate+0x260>)
 80038b2:	686a      	ldr	r2, [r5, #4]
 80038b4:	fba3 1300 	umull	r1, r3, r3, r0
 80038b8:	0d1b      	lsrs	r3, r3, #20
 80038ba:	3b01      	subs	r3, #1
 80038bc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80038c0:	606b      	str	r3, [r5, #4]
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 80038c2:	68e3      	ldr	r3, [r4, #12]
 80038c4:	f023 0301 	bic.w	r3, r3, #1
 80038c8:	60e3      	str	r3, [r4, #12]
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 80038ca:	6863      	ldr	r3, [r4, #4]
 80038cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80038d0:	6063      	str	r3, [r4, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80038d8:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80038dc:	d1f9      	bne.n	80038d2 <SystemCoreClockUpdate+0x22a>
 80038de:	e767      	b.n	80037b0 <SystemCoreClockUpdate+0x108>
 80038e0:	50004200 	.word	0x50004200
 80038e4:	50004400 	.word	0x50004400
 80038e8:	50004710 	.word	0x50004710
 80038ec:	50004700 	.word	0x50004700
 80038f0:	01134f00 	.word	0x01134f00
 80038f4:	50004600 	.word	0x50004600
 80038f8:	01074f00 	.word	0x01074f00
 80038fc:	01044f00 	.word	0x01044f00
 8003900:	01034f00 	.word	0x01034f00
 8003904:	50004160 	.word	0x50004160
 8003908:	6b5fca6b 	.word	0x6b5fca6b

0800390c <SystemInit>:
{
 800390c:	b510      	push	{r4, lr}
  memcpy(g_chipid, CHIPID_LOC, 16);
 800390e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003914:	4c03      	ldr	r4, [pc, #12]	; (8003924 <SystemInit+0x18>)
 8003916:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SystemCoreSetup();
 800391a:	f7ff fe9f 	bl	800365c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 800391e:	f7fc fcc9 	bl	80002b4 <SystemCoreClockSetup>
}
 8003922:	bd10      	pop	{r4, pc}
 8003924:	2000ffc4 	.word	0x2000ffc4

08003928 <_sbrk>:
caddr_t _sbrk(int nbytes)
{
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8003928:	4a0c      	ldr	r2, [pc, #48]	; (800395c <_sbrk+0x34>)
{
 800392a:	b508      	push	{r3, lr}
  if (heap_ptr == NULL) {
 800392c:	6813      	ldr	r3, [r2, #0]
 800392e:	b18b      	cbz	r3, 8003954 <_sbrk+0x2c>
  }

  base = heap_ptr;

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8003930:	3003      	adds	r0, #3
 8003932:	f020 0003 	bic.w	r0, r0, #3
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8003936:	490a      	ldr	r1, [pc, #40]	; (8003960 <_sbrk+0x38>)
 8003938:	4418      	add	r0, r3
 800393a:	4288      	cmp	r0, r1
 800393c:	d202      	bcs.n	8003944 <_sbrk+0x1c>
  {
    heap_ptr += nbytes;
 800393e:	6010      	str	r0, [r2, #0]
  {
    /* Heap overflow */
    errno = ENOMEM;
    return ((caddr_t)-1);
  }
}
 8003940:	4618      	mov	r0, r3
 8003942:	bd08      	pop	{r3, pc}
    errno = ENOMEM;
 8003944:	f000 f812 	bl	800396c <__errno>
 8003948:	230c      	movs	r3, #12
 800394a:	6003      	str	r3, [r0, #0]
    return ((caddr_t)-1);
 800394c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd08      	pop	{r3, pc}
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <_sbrk+0x3c>)
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	e7ea      	b.n	8003930 <_sbrk+0x8>
 800395a:	bf00      	nop
 800395c:	2000049c 	.word	0x2000049c
 8003960:	2000ffc0 	.word	0x2000ffc0
 8003964:	20000b40 	.word	0x20000b40

08003968 <_init>:

/* Init */
void _init(void)
{}
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop

0800396c <__errno>:
 800396c:	4b01      	ldr	r3, [pc, #4]	; (8003974 <__errno+0x8>)
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000030 	.word	0x20000030

08003978 <__libc_init_array>:
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	4e0d      	ldr	r6, [pc, #52]	; (80039b0 <__libc_init_array+0x38>)
 800397c:	4d0d      	ldr	r5, [pc, #52]	; (80039b4 <__libc_init_array+0x3c>)
 800397e:	1b76      	subs	r6, r6, r5
 8003980:	10b6      	asrs	r6, r6, #2
 8003982:	d006      	beq.n	8003992 <__libc_init_array+0x1a>
 8003984:	2400      	movs	r4, #0
 8003986:	3401      	adds	r4, #1
 8003988:	f855 3b04 	ldr.w	r3, [r5], #4
 800398c:	4798      	blx	r3
 800398e:	42a6      	cmp	r6, r4
 8003990:	d1f9      	bne.n	8003986 <__libc_init_array+0xe>
 8003992:	4e09      	ldr	r6, [pc, #36]	; (80039b8 <__libc_init_array+0x40>)
 8003994:	4d09      	ldr	r5, [pc, #36]	; (80039bc <__libc_init_array+0x44>)
 8003996:	1b76      	subs	r6, r6, r5
 8003998:	f7ff ffe6 	bl	8003968 <_init>
 800399c:	10b6      	asrs	r6, r6, #2
 800399e:	d006      	beq.n	80039ae <__libc_init_array+0x36>
 80039a0:	2400      	movs	r4, #0
 80039a2:	3401      	adds	r4, #1
 80039a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a8:	4798      	blx	r3
 80039aa:	42a6      	cmp	r6, r4
 80039ac:	d1f9      	bne.n	80039a2 <__libc_init_array+0x2a>
 80039ae:	bd70      	pop	{r4, r5, r6, pc}
 80039b0:	20000460 	.word	0x20000460
 80039b4:	20000460 	.word	0x20000460
 80039b8:	20000460 	.word	0x20000460
 80039bc:	20000460 	.word	0x20000460

080039c0 <memcpy>:
 80039c0:	4684      	mov	ip, r0
 80039c2:	ea41 0300 	orr.w	r3, r1, r0
 80039c6:	f013 0303 	ands.w	r3, r3, #3
 80039ca:	d16d      	bne.n	8003aa8 <memcpy+0xe8>
 80039cc:	3a40      	subs	r2, #64	; 0x40
 80039ce:	d341      	bcc.n	8003a54 <memcpy+0x94>
 80039d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80039d4:	f840 3b04 	str.w	r3, [r0], #4
 80039d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80039dc:	f840 3b04 	str.w	r3, [r0], #4
 80039e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80039e4:	f840 3b04 	str.w	r3, [r0], #4
 80039e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80039ec:	f840 3b04 	str.w	r3, [r0], #4
 80039f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80039f4:	f840 3b04 	str.w	r3, [r0], #4
 80039f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80039fc:	f840 3b04 	str.w	r3, [r0], #4
 8003a00:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a04:	f840 3b04 	str.w	r3, [r0], #4
 8003a08:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a0c:	f840 3b04 	str.w	r3, [r0], #4
 8003a10:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a14:	f840 3b04 	str.w	r3, [r0], #4
 8003a18:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a1c:	f840 3b04 	str.w	r3, [r0], #4
 8003a20:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a24:	f840 3b04 	str.w	r3, [r0], #4
 8003a28:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a2c:	f840 3b04 	str.w	r3, [r0], #4
 8003a30:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a34:	f840 3b04 	str.w	r3, [r0], #4
 8003a38:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a3c:	f840 3b04 	str.w	r3, [r0], #4
 8003a40:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a44:	f840 3b04 	str.w	r3, [r0], #4
 8003a48:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a4c:	f840 3b04 	str.w	r3, [r0], #4
 8003a50:	3a40      	subs	r2, #64	; 0x40
 8003a52:	d2bd      	bcs.n	80039d0 <memcpy+0x10>
 8003a54:	3230      	adds	r2, #48	; 0x30
 8003a56:	d311      	bcc.n	8003a7c <memcpy+0xbc>
 8003a58:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a5c:	f840 3b04 	str.w	r3, [r0], #4
 8003a60:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a64:	f840 3b04 	str.w	r3, [r0], #4
 8003a68:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a6c:	f840 3b04 	str.w	r3, [r0], #4
 8003a70:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a74:	f840 3b04 	str.w	r3, [r0], #4
 8003a78:	3a10      	subs	r2, #16
 8003a7a:	d2ed      	bcs.n	8003a58 <memcpy+0x98>
 8003a7c:	320c      	adds	r2, #12
 8003a7e:	d305      	bcc.n	8003a8c <memcpy+0xcc>
 8003a80:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a84:	f840 3b04 	str.w	r3, [r0], #4
 8003a88:	3a04      	subs	r2, #4
 8003a8a:	d2f9      	bcs.n	8003a80 <memcpy+0xc0>
 8003a8c:	3204      	adds	r2, #4
 8003a8e:	d008      	beq.n	8003aa2 <memcpy+0xe2>
 8003a90:	07d2      	lsls	r2, r2, #31
 8003a92:	bf1c      	itt	ne
 8003a94:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003a98:	f800 3b01 	strbne.w	r3, [r0], #1
 8003a9c:	d301      	bcc.n	8003aa2 <memcpy+0xe2>
 8003a9e:	880b      	ldrh	r3, [r1, #0]
 8003aa0:	8003      	strh	r3, [r0, #0]
 8003aa2:	4660      	mov	r0, ip
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	2a08      	cmp	r2, #8
 8003aaa:	d313      	bcc.n	8003ad4 <memcpy+0x114>
 8003aac:	078b      	lsls	r3, r1, #30
 8003aae:	d08d      	beq.n	80039cc <memcpy+0xc>
 8003ab0:	f010 0303 	ands.w	r3, r0, #3
 8003ab4:	d08a      	beq.n	80039cc <memcpy+0xc>
 8003ab6:	f1c3 0304 	rsb	r3, r3, #4
 8003aba:	1ad2      	subs	r2, r2, r3
 8003abc:	07db      	lsls	r3, r3, #31
 8003abe:	bf1c      	itt	ne
 8003ac0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003ac4:	f800 3b01 	strbne.w	r3, [r0], #1
 8003ac8:	d380      	bcc.n	80039cc <memcpy+0xc>
 8003aca:	f831 3b02 	ldrh.w	r3, [r1], #2
 8003ace:	f820 3b02 	strh.w	r3, [r0], #2
 8003ad2:	e77b      	b.n	80039cc <memcpy+0xc>
 8003ad4:	3a04      	subs	r2, #4
 8003ad6:	d3d9      	bcc.n	8003a8c <memcpy+0xcc>
 8003ad8:	3a01      	subs	r2, #1
 8003ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ade:	f800 3b01 	strb.w	r3, [r0], #1
 8003ae2:	d2f9      	bcs.n	8003ad8 <memcpy+0x118>
 8003ae4:	780b      	ldrb	r3, [r1, #0]
 8003ae6:	7003      	strb	r3, [r0, #0]
 8003ae8:	784b      	ldrb	r3, [r1, #1]
 8003aea:	7043      	strb	r3, [r0, #1]
 8003aec:	788b      	ldrb	r3, [r1, #2]
 8003aee:	7083      	strb	r3, [r0, #2]
 8003af0:	4660      	mov	r0, ip
 8003af2:	4770      	bx	lr

08003af4 <memset>:
 8003af4:	b4f0      	push	{r4, r5, r6, r7}
 8003af6:	0786      	lsls	r6, r0, #30
 8003af8:	d043      	beq.n	8003b82 <memset+0x8e>
 8003afa:	1e54      	subs	r4, r2, #1
 8003afc:	2a00      	cmp	r2, #0
 8003afe:	d03e      	beq.n	8003b7e <memset+0x8a>
 8003b00:	b2ca      	uxtb	r2, r1
 8003b02:	4603      	mov	r3, r0
 8003b04:	e002      	b.n	8003b0c <memset+0x18>
 8003b06:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8003b0a:	d338      	bcc.n	8003b7e <memset+0x8a>
 8003b0c:	f803 2b01 	strb.w	r2, [r3], #1
 8003b10:	079d      	lsls	r5, r3, #30
 8003b12:	d1f8      	bne.n	8003b06 <memset+0x12>
 8003b14:	2c03      	cmp	r4, #3
 8003b16:	d92b      	bls.n	8003b70 <memset+0x7c>
 8003b18:	b2cd      	uxtb	r5, r1
 8003b1a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003b1e:	2c0f      	cmp	r4, #15
 8003b20:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003b24:	d916      	bls.n	8003b54 <memset+0x60>
 8003b26:	f1a4 0710 	sub.w	r7, r4, #16
 8003b2a:	093f      	lsrs	r7, r7, #4
 8003b2c:	f103 0620 	add.w	r6, r3, #32
 8003b30:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8003b34:	f103 0210 	add.w	r2, r3, #16
 8003b38:	e942 5504 	strd	r5, r5, [r2, #-16]
 8003b3c:	e942 5502 	strd	r5, r5, [r2, #-8]
 8003b40:	3210      	adds	r2, #16
 8003b42:	42b2      	cmp	r2, r6
 8003b44:	d1f8      	bne.n	8003b38 <memset+0x44>
 8003b46:	f004 040f 	and.w	r4, r4, #15
 8003b4a:	3701      	adds	r7, #1
 8003b4c:	2c03      	cmp	r4, #3
 8003b4e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8003b52:	d90d      	bls.n	8003b70 <memset+0x7c>
 8003b54:	461e      	mov	r6, r3
 8003b56:	4622      	mov	r2, r4
 8003b58:	3a04      	subs	r2, #4
 8003b5a:	2a03      	cmp	r2, #3
 8003b5c:	f846 5b04 	str.w	r5, [r6], #4
 8003b60:	d8fa      	bhi.n	8003b58 <memset+0x64>
 8003b62:	1f22      	subs	r2, r4, #4
 8003b64:	f022 0203 	bic.w	r2, r2, #3
 8003b68:	3204      	adds	r2, #4
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f004 0403 	and.w	r4, r4, #3
 8003b70:	b12c      	cbz	r4, 8003b7e <memset+0x8a>
 8003b72:	b2c9      	uxtb	r1, r1
 8003b74:	441c      	add	r4, r3
 8003b76:	f803 1b01 	strb.w	r1, [r3], #1
 8003b7a:	429c      	cmp	r4, r3
 8003b7c:	d1fb      	bne.n	8003b76 <memset+0x82>
 8003b7e:	bcf0      	pop	{r4, r5, r6, r7}
 8003b80:	4770      	bx	lr
 8003b82:	4614      	mov	r4, r2
 8003b84:	4603      	mov	r3, r0
 8003b86:	e7c5      	b.n	8003b14 <memset+0x20>
	...

08003bc0 <strlen>:
 8003bc0:	f890 f000 	pld	[r0]
 8003bc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8003bc8:	f020 0107 	bic.w	r1, r0, #7
 8003bcc:	f06f 0c00 	mvn.w	ip, #0
 8003bd0:	f010 0407 	ands.w	r4, r0, #7
 8003bd4:	f891 f020 	pld	[r1, #32]
 8003bd8:	f040 8049 	bne.w	8003c6e <strlen+0xae>
 8003bdc:	f04f 0400 	mov.w	r4, #0
 8003be0:	f06f 0007 	mvn.w	r0, #7
 8003be4:	e9d1 2300 	ldrd	r2, r3, [r1]
 8003be8:	f891 f040 	pld	[r1, #64]	; 0x40
 8003bec:	f100 0008 	add.w	r0, r0, #8
 8003bf0:	fa82 f24c 	uadd8	r2, r2, ip
 8003bf4:	faa4 f28c 	sel	r2, r4, ip
 8003bf8:	fa83 f34c 	uadd8	r3, r3, ip
 8003bfc:	faa2 f38c 	sel	r3, r2, ip
 8003c00:	bb4b      	cbnz	r3, 8003c56 <strlen+0x96>
 8003c02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8003c06:	fa82 f24c 	uadd8	r2, r2, ip
 8003c0a:	f100 0008 	add.w	r0, r0, #8
 8003c0e:	faa4 f28c 	sel	r2, r4, ip
 8003c12:	fa83 f34c 	uadd8	r3, r3, ip
 8003c16:	faa2 f38c 	sel	r3, r2, ip
 8003c1a:	b9e3      	cbnz	r3, 8003c56 <strlen+0x96>
 8003c1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8003c20:	fa82 f24c 	uadd8	r2, r2, ip
 8003c24:	f100 0008 	add.w	r0, r0, #8
 8003c28:	faa4 f28c 	sel	r2, r4, ip
 8003c2c:	fa83 f34c 	uadd8	r3, r3, ip
 8003c30:	faa2 f38c 	sel	r3, r2, ip
 8003c34:	b97b      	cbnz	r3, 8003c56 <strlen+0x96>
 8003c36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8003c3a:	f101 0120 	add.w	r1, r1, #32
 8003c3e:	fa82 f24c 	uadd8	r2, r2, ip
 8003c42:	f100 0008 	add.w	r0, r0, #8
 8003c46:	faa4 f28c 	sel	r2, r4, ip
 8003c4a:	fa83 f34c 	uadd8	r3, r3, ip
 8003c4e:	faa2 f38c 	sel	r3, r2, ip
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0c6      	beq.n	8003be4 <strlen+0x24>
 8003c56:	2a00      	cmp	r2, #0
 8003c58:	bf04      	itt	eq
 8003c5a:	3004      	addeq	r0, #4
 8003c5c:	461a      	moveq	r2, r3
 8003c5e:	ba12      	rev	r2, r2
 8003c60:	fab2 f282 	clz	r2, r2
 8003c64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8003c68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8003c6c:	4770      	bx	lr
 8003c6e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8003c72:	f004 0503 	and.w	r5, r4, #3
 8003c76:	f1c4 0000 	rsb	r0, r4, #0
 8003c7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8003c7e:	f014 0f04 	tst.w	r4, #4
 8003c82:	f891 f040 	pld	[r1, #64]	; 0x40
 8003c86:	fa0c f505 	lsl.w	r5, ip, r5
 8003c8a:	ea62 0205 	orn	r2, r2, r5
 8003c8e:	bf1c      	itt	ne
 8003c90:	ea63 0305 	ornne	r3, r3, r5
 8003c94:	4662      	movne	r2, ip
 8003c96:	f04f 0400 	mov.w	r4, #0
 8003c9a:	e7a9      	b.n	8003bf0 <strlen+0x30>

08003c9c <clock_config>:
 8003c9c:	0250 0104 0000 0001 0000 0000 0000 0001     P...............
 8003cac:	0101 0101                                   ....

08003cb0 <out_config>:
 8003cb0:	0080 0000 0000 0001 0000 0000               ............

08003cbc <in_config>:
 8003cbc:	0000 0000 0000 0001 0000 0000               ............

08003cc8 <DeviceDescriptor>:
 8003cc8:	0112 0110 0002 4000 058b 0058 0010 0201     .......@..X.....
 8003cd8:	0100 0000                                   ....

08003cdc <ConfigurationDescriptor>:
 8003cdc:	0209 003e 0102 8000 0932 0004 0100 0202     ..>.....2.......
 8003cec:	0001 2405 1000 0401 0224 0506 0624 0100     ...$....$...$...
 8003cfc:	0507 0381 0008 09ff 0104 0200 000a 0000     ................
 8003d0c:	0507 0203 0040 0705 8205 4002 0500 0000     ....@......@....

08003d1c <CSWTCH.1>:
 8003d1c:	3db0 0800 3d54 0800 3d30 0800               .=..T=..0=..

08003d28 <CSWTCH.2>:
 8003d28:	0004 0058 0020 0000                         ..X. ...

08003d30 <ProductString>:
 8003d30:	0320 0049 0000 0046 0000 0058 0000 0020      .I...F...X... .
 8003d40:	0000 0043 0000 0044 0000 0043 0000 0000     ..C...D...C.....
 8003d50:	0000 0000                                   ....

08003d54 <ManufacturerString>:
 8003d54:	0358 0049 0000 006e 0000 0066 0000 0069     X.I...n...f...i.
 8003d64:	0000 006e 0000 0065 0000 006f 0000 006e     ..n...e...o...n.
 8003d74:	0000 0020 0000 0054 0000 0065 0000 0063     .. ...T...e...c.
 8003d84:	0000 0068 0000 006e 0000 006f 0000 006c     ..h...n...o...l.
 8003d94:	0000 006f 0000 0067 0000 0069 0000 0065     ..o...g...i...e.
 8003da4:	0000 0073 0000 0000 0000 0000               ..s.........

08003db0 <LanguageString>:
 8003db0:	0304 0409 0000 0000                         ........

08003db8 <Driver_USBD0>:
 8003db8:	0d05 0800 1289 0800 0ff9 0800 0d0d 0800     ................
 8003dc8:	0d25 0800 0d3d 0800 0df5 0800 101d 0800     %...=...........
 8003dd8:	0ecd 0800 0e0d 0800 0da9 0800 13e1 0800     ................
 8003de8:	141d 0800 0e8d 0800 0fc9 0800 0fdd 0800     ................
 8003df8:	20a1 0000 0000 0002                         . ......

08003e00 <_global_impure_ptr>:
 8003e00:	0038 2000                                   8.. 
