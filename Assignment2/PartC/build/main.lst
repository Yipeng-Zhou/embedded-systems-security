
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e320  08000000  0c000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0800e320  0c00e320  0001e320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  3 .ram_code     00000000  10000800  10000800  00020eb4  2**0
                  CONTENTS
  4 PSRAM_DATA    00000000  10000800  10000800  00020eb4  2**0
                  CONTENTS
  5 PSRAM_BSS     00000000  10000800  10000800  00020eb4  2**0
                  CONTENTS
  6 .data         00000e94  20000000  0c00e328  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .got          00000014  20000e94  0c00f1bc  00020e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .got.plt      0000000c  20000ea8  0c00f1d0  00020ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000078c  20000eb4  0c00f1dc  00020eb4  2**2
                  ALLOC
 10 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
 11 DSRAM2_DATA   00000000  30000000  30000000  00020eb4  2**0
                  CONTENTS
 12 DSRAM2_BSS    00000e00  30000000  0c00f1dc  00030000  2**2
                  ALLOC
 13 .stab         000000e4  00000000  00000000  00020eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .stabstr      000001ed  00000000  00000000  00020f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000010d0  00000000  00000000  00021188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_info   0003fa02  00000000  00000000  00022258  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00007782  00000000  00000000  00061c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00013424  00000000  00000000  000693dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame  00003c6c  00000000  00000000  0007c800  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0009172c  00000000  00000000  0008046c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000123fe  00000000  00000000  00111b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00003218  00000000  00000000  00123f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .build_attributes 00001529  00000000  00000000  001271ae  2**0
                  CONTENTS, READONLY
 24 .debug_macro  00024648  00000000  00000000  001286d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 fd 03 00 08     ................
 8000010:	fd 0a 00 08 ff 03 00 08 01 04 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	05 04 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00e328 	.word	0x0c00e328
 800024c:	20000000 	.word	0x20000000
 8000250:	00000e94 	.word	0x00000e94
 8000254:	0c00f1dc 	.word	0x0c00f1dc
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00e328 	.word	0x0c00e328
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00e328 	.word	0x0c00e328
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000eb4 	.word	0x20000eb4
 800027c:	00000788 	.word	0x00000788
 8000280:	30000000 	.word	0x30000000
 8000284:	00000e00 	.word	0x00000e00
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	08004721 	.word	0x08004721
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	0800a43d 	.word	0x0800a43d
    ldr  r0, =main
 80002ac:	080002b5 	.word	0x080002b5

080002b0 <CAN0_0_IRQHandler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <CAN0_0_IRQHandler>
	...

080002b4 <main>:
#include "crypto.h"
#include "sodium.h"
#include "randombytes_salsa20XMC_random.h"


int main(void) {
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	b090      	sub	sp, #64	; 0x40
 80002b8:	4b29      	ldr	r3, [pc, #164]	; (8000360 <main+0xac>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	930f      	str	r3, [sp, #60]	; 0x3c

  uint8_t key[32] = {0xc1, 0x00, 0x09, 0x0e, 0x12, 0xc0, 0x98, 0x16, 0x83, 0x06, 0x00, 0x10, 0x0a, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x09, 0x0e, 0x12, 0xc0, 0x98, 0x16, 0x83, 0x06, 0x00, 0x10, 0x0a, 0x00, 0x00, 0x00};
 80002be:	ac07      	add	r4, sp, #28
 80002c0:	4d28      	ldr	r5, [pc, #160]	; (8000364 <main+0xb0>)
 80002c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80002ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  pt_s plaintext = { 0 };
 80002ce:	2300      	movs	r3, #0
 80002d0:	9304      	str	r3, [sp, #16]
 80002d2:	9305      	str	r3, [sp, #20]
 80002d4:	9306      	str	r3, [sp, #24]
  ct_s ciphertext = { 0 };
 80002d6:	9302      	str	r3, [sp, #8]
 80002d8:	9303      	str	r3, [sp, #12]

  USB_Init();
 80002da:	f000 f89b 	bl	8000414 <USB_Init>
        for(size_t i = 0; i < CRYPTO_NONCE_BYTES; i++) { 
	  plaintext.nonce[i] = randombytes_random() & UINT8_MAX;
        }
      }
      /* Now encrypt the plaintext */
      randombytes_set_implementation(&randombytes_salsa20XMC_implementation);
 80002de:	4e22      	ldr	r6, [pc, #136]	; (8000368 <main+0xb4>)
      if(sodium_init() == 0) {
	ciphertext.text = (unsigned char *) sodium_malloc(plaintext.textLen + crypto_secretbox_MACBYTES);
        if(crypto_secretbox_easy(ciphertext.text, plaintext.text, plaintext.textLen, plaintext.nonce, key) == 0) {
 80002e0:	2500      	movs	r5, #0
 80002e2:	e014      	b.n	800030e <main+0x5a>
        plaintext.nonce = malloc(CRYPTO_NONCE_BYTES);
 80002e4:	2018      	movs	r0, #24
 80002e6:	f00a f8cd 	bl	800a484 <malloc>
 80002ea:	9006      	str	r0, [sp, #24]
        for(size_t i = 0; i < CRYPTO_NONCE_BYTES; i++) { 
 80002ec:	2400      	movs	r4, #0
	  plaintext.nonce[i] = randombytes_random() & UINT8_MAX;
 80002ee:	f004 fce3 	bl	8004cb8 <randombytes_random>
 80002f2:	9b06      	ldr	r3, [sp, #24]
 80002f4:	5518      	strb	r0, [r3, r4]
        for(size_t i = 0; i < CRYPTO_NONCE_BYTES; i++) { 
 80002f6:	3401      	adds	r4, #1
 80002f8:	2c18      	cmp	r4, #24
 80002fa:	d1f8      	bne.n	80002ee <main+0x3a>
 80002fc:	e00f      	b.n	800031e <main+0x6a>
          /* Finally, if encryption was successful, send ciphertext back in a packet */
          packetizerSend(&ciphertext);
        }
      }
      /* Free all buffers that were allocated in the meantime */
      free(plaintext.text);
 80002fe:	9804      	ldr	r0, [sp, #16]
 8000300:	f00a f8c8 	bl	800a494 <free>
      plaintext.text = NULL;
 8000304:	9504      	str	r5, [sp, #16]
      free(ciphertext.text);
 8000306:	9802      	ldr	r0, [sp, #8]
 8000308:	f00a f8c4 	bl	800a494 <free>
      ciphertext.text = NULL;
 800030c:	9502      	str	r5, [sp, #8]
    if(packetizerReceive(&plaintext) == 0) {
 800030e:	a804      	add	r0, sp, #16
 8000310:	f000 f9fc 	bl	800070c <packetizerReceive>
 8000314:	2800      	cmp	r0, #0
 8000316:	d1fa      	bne.n	800030e <main+0x5a>
      if(plaintext.nonce == NULL) {
 8000318:	9b06      	ldr	r3, [sp, #24]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d0e2      	beq.n	80002e4 <main+0x30>
      randombytes_set_implementation(&randombytes_salsa20XMC_implementation);
 800031e:	4630      	mov	r0, r6
 8000320:	f004 fc96 	bl	8004c50 <randombytes_set_implementation>
      if(sodium_init() == 0) {
 8000324:	f004 fd4e 	bl	8004dc4 <sodium_init>
 8000328:	2800      	cmp	r0, #0
 800032a:	d1e8      	bne.n	80002fe <main+0x4a>
	ciphertext.text = (unsigned char *) sodium_malloc(plaintext.textLen + crypto_secretbox_MACBYTES);
 800032c:	9805      	ldr	r0, [sp, #20]
 800032e:	3010      	adds	r0, #16
 8000330:	f004 fe7a 	bl	8005028 <sodium_malloc>
 8000334:	9002      	str	r0, [sp, #8]
        if(crypto_secretbox_easy(ciphertext.text, plaintext.text, plaintext.textLen, plaintext.nonce, key) == 0) {
 8000336:	ab07      	add	r3, sp, #28
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	9b06      	ldr	r3, [sp, #24]
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	9a05      	ldr	r2, [sp, #20]
 8000340:	462b      	mov	r3, r5
 8000342:	9904      	ldr	r1, [sp, #16]
 8000344:	f004 fb75 	bl	8004a32 <crypto_secretbox_easy>
 8000348:	2800      	cmp	r0, #0
 800034a:	d1d8      	bne.n	80002fe <main+0x4a>
          ciphertext.textLen = getCiphertextLength(plaintext.textLen) + crypto_secretbox_MACBYTES;
 800034c:	9805      	ldr	r0, [sp, #20]
 800034e:	f000 fa47 	bl	80007e0 <getCiphertextLength>
 8000352:	3010      	adds	r0, #16
 8000354:	9003      	str	r0, [sp, #12]
          packetizerSend(&ciphertext);
 8000356:	a802      	add	r0, sp, #8
 8000358:	f000 f9ea 	bl	8000730 <packetizerSend>
 800035c:	e7cf      	b.n	80002fe <main+0x4a>
 800035e:	bf00      	nop
 8000360:	0800de5c 	.word	0x0800de5c
 8000364:	0800dc14 	.word	0x0800dc14
 8000368:	20000468 	.word	0x20000468

0800036c <SystemCoreClockSetup>:
#include "VirtualSerial.h"
#include "MPUeasy.h"

/* This function is only weakly declared in system_XMC4500.c so one can simply reimplement it if
   necessary. The values to use are copied from Infineon's VirtualSerial example. */
void SystemCoreClockSetup(void) {
 800036c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036e:	b089      	sub	sp, #36	; 0x24
  XMC_SCU_CLOCK_CONFIG_t clock_config = {
 8000370:	2500      	movs	r5, #0
 8000372:	9504      	str	r5, [sp, #16]
 8000374:	9505      	str	r5, [sp, #20]
 8000376:	2350      	movs	r3, #80	; 0x50
 8000378:	f88d 300c 	strb.w	r3, [sp, #12]
 800037c:	2702      	movs	r7, #2
 800037e:	f88d 700d 	strb.w	r7, [sp, #13]
 8000382:	2604      	movs	r6, #4
 8000384:	f88d 600e 	strb.w	r6, [sp, #14]
 8000388:	2401      	movs	r4, #1
 800038a:	f88d 400f 	strb.w	r4, [sp, #15]
 800038e:	f88d 4012 	strb.w	r4, [sp, #18]
 8000392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000396:	9306      	str	r3, [sp, #24]
 8000398:	f88d 401c 	strb.w	r4, [sp, #28]
 800039c:	f88d 401d 	strb.w	r4, [sp, #29]
 80003a0:	f88d 401e 	strb.w	r4, [sp, #30]
 80003a4:	f88d 401f 	strb.w	r4, [sp, #31]
    .fccu_clkdiv = 1,
    .fperipheral_clkdiv = 1
    };

  /* General setup of clock tree with recommended default values, see above */
  XMC_SCU_CLOCK_Init(&clock_config);
 80003a8:	a803      	add	r0, sp, #12
 80003aa:	f003 fa2f 	bl	800380c <XMC_SCU_CLOCK_Init>

  /* Enable clock to USB peripheral */
  XMC_SCU_CLOCK_EnableUsbPll();
 80003ae:	f002 ff27 	bl	8003200 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(2, 64);
 80003b2:	2140      	movs	r1, #64	; 0x40
 80003b4:	4638      	mov	r0, r7
 80003b6:	f002 ff37 	bl	8003228 <XMC_SCU_CLOCK_StartUsbPll>
  XMC_SCU_CLOCK_SetUsbClockDivider(4);
 80003ba:	4630      	mov	r0, r6
 80003bc:	f002 feb8 	bl	8003130 <XMC_SCU_CLOCK_SetUsbClockDivider>
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80003c0:	4628      	mov	r0, r5
 80003c2:	f002 fe37 	bl	8003034 <XMC_SCU_CLOCK_SetUsbClockSource>
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 80003c6:	4620      	mov	r0, r4
 80003c8:	f002 fede 	bl	8003188 <XMC_SCU_CLOCK_EnableClock>

  /* Update clock status information */
  SystemCoreClockUpdate();
 80003cc:	f004 f892 	bl	80044f4 <SystemCoreClockUpdate>

  /* Secretly activate MPU without calling any function with telltale name */
  MPUconfig_t Stack = \
 80003d0:	4a08      	ldr	r2, [pc, #32]	; (80003f4 <SystemCoreClockSetup+0x88>)
 80003d2:	466b      	mov	r3, sp
 80003d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80003d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    {.baseAddress=(void *) 0x10000000, .size=16, .priority=1, \
     .permissions=MPUeasyENABLEREGION | MPUeasyXN | MPUeasy_RW_RW};
  configMPU(Stack);
 80003da:	f000 fb4a 	bl	8000a72 <configMPU>
  enableMPU(1);
 80003de:	4620      	mov	r0, r4
 80003e0:	f000 fb23 	bl	8000a2a <enableMPU>

  /* Pull P2.10 low to allow the ESS control board to recognize if a system reset was initiated. */
  *((uint32_t *) (0x48028200+0x18)) |= 0x18<<19; /* set P2.10 as open-drain output */
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <SystemCoreClockSetup+0x8c>)
 80003e6:	6813      	ldr	r3, [r2, #0]
 80003e8:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80003ec:	6013      	str	r3, [r2, #0]
}
 80003ee:	b009      	add	sp, #36	; 0x24
 80003f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003f2:	bf00      	nop
 80003f4:	0800dc34 	.word	0x0800dc34
 80003f8:	48028218 	.word	0x48028218

080003fc <HardFault_Handler>:

/* Add individual handlers so students can recognize in which exception they are trapped */
void HardFault_Handler(void) {
 80003fc:	e7fe      	b.n	80003fc <HardFault_Handler>

080003fe <BusFault_Handler>:
  while(1);
}

void BusFault_Handler(void) {
 80003fe:	e7fe      	b.n	80003fe <BusFault_Handler>

08000400 <UsageFault_Handler>:
  while(1);
}

void UsageFault_Handler(void) {
 8000400:	e7fe      	b.n	8000400 <UsageFault_Handler>
	...

08000404 <USB0_0_IRQHandler>:
/*******************************************************************************
**                     Public Function Definitions                            **
*******************************************************************************/

void USB0_0_IRQHandler(void)
{
 8000404:	b508      	push	{r3, lr}
  XMC_USBD_IRQHandler(&USB_runtime);
 8000406:	4802      	ldr	r0, [pc, #8]	; (8000410 <USB0_0_IRQHandler+0xc>)
 8000408:	f001 fd00 	bl	8001e0c <XMC_USBD_IRQHandler>
}
 800040c:	bd08      	pop	{r3, pc}
 800040e:	bf00      	nop
 8000410:	20000000 	.word	0x20000000

08000414 <USB_Init>:

/*The function initializes the USB core layer and register call backs. */
void USB_Init(void)
{
 8000414:	b508      	push	{r3, lr}
  USBD_Initialize(&USB_runtime);
 8000416:	4817      	ldr	r0, [pc, #92]	; (8000474 <USB_Init+0x60>)
 8000418:	f000 fee6 	bl	80011e8 <USBD_Initialize>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <USB_Init+0x64>)
 800041e:	68da      	ldr	r2, [r3, #12]
 8000420:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000424:	f1c2 0107 	rsb	r1, r2, #7
 8000428:	2906      	cmp	r1, #6
 800042a:	bf28      	it	cs
 800042c:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800042e:	1d93      	adds	r3, r2, #6
 8000430:	2b06      	cmp	r3, #6
 8000432:	bf8c      	ite	hi
 8000434:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8000438:	2200      	movls	r2, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800043a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800043e:	408b      	lsls	r3, r1
 8000440:	43db      	mvns	r3, r3
 8000442:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000446:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	b2db      	uxtb	r3, r3
 800044c:	4a0b      	ldr	r2, [pc, #44]	; (800047c <USB_Init+0x68>)
 800044e:	f882 336b 	strb.w	r3, [r2, #875]	; 0x36b
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000452:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000456:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800045a:	60d3      	str	r3, [r2, #12]
  NVIC_SetPriority(USB0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63, 0));
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
  NVIC_EnableIRQ(USB0_0_IRQn);

  /* LUFA Class Line Encoding*/
  VirtualSerial_CDC_Interface.State.LineEncoding.BaudRateBPS = 9600;
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <USB_Init+0x60>)
 800045e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000462:	629a      	str	r2, [r3, #40]	; 0x28
  VirtualSerial_CDC_Interface.State.LineEncoding.DataBits = 8;
 8000464:	2208      	movs	r2, #8
 8000466:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				device.Driver->DeviceConnect();
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <USB_Init+0x6c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	4798      	blx	r3

  /* USB Connection*/
  USB_Attach();
	
}
 8000472:	bd08      	pop	{r3, pc}
 8000474:	20000000 	.word	0x20000000
 8000478:	e000ed00 	.word	0xe000ed00
 800047c:	e000e100 	.word	0xe000e100
 8000480:	2000123c 	.word	0x2000123c

08000484 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
}
 8000484:	4770      	bx	lr

08000486 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
}
 8000486:	4770      	bx	lr

08000488 <EVENT_USB_Device_Reset>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Reset(void)
{
 8000488:	b508      	push	{r3, lr}
  if(device.IsConfigured)
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <EVENT_USB_Device_Reset+0x24>)
 800048c:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000490:	f013 0f01 	tst.w	r3, #1
 8000494:	d100      	bne.n	8000498 <EVENT_USB_Device_Reset+0x10>
  {
    USB_Init();
    device.IsConfigured=0;
  }
}
 8000496:	bd08      	pop	{r3, pc}
    USB_Init();
 8000498:	f7ff ffbc 	bl	8000414 <USB_Init>
    device.IsConfigured=0;
 800049c:	4b03      	ldr	r3, [pc, #12]	; (80004ac <EVENT_USB_Device_Reset+0x24>)
 800049e:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 80004a2:	f36f 0200 	bfc	r2, #0, #1
 80004a6:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
}
 80004aa:	e7f4      	b.n	8000496 <EVENT_USB_Device_Reset+0xe>
 80004ac:	2000123c 	.word	0x2000123c

080004b0 <EVENT_USB_Device_ConfigurationChanged>:

/* Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 80004b0:	b508      	push	{r3, lr}
  USBD_SetEndpointBuffer(CDC_NOTIFICATION_EPADDR, ep2_buf, 64);
 80004b2:	2240      	movs	r2, #64	; 0x40
 80004b4:	490c      	ldr	r1, [pc, #48]	; (80004e8 <EVENT_USB_Device_ConfigurationChanged+0x38>)
 80004b6:	2081      	movs	r0, #129	; 0x81
 80004b8:	f000 fedc 	bl	8001274 <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer(CDC_TX_EPADDR, ep3_buf, 64);
 80004bc:	2240      	movs	r2, #64	; 0x40
 80004be:	490b      	ldr	r1, [pc, #44]	; (80004ec <EVENT_USB_Device_ConfigurationChanged+0x3c>)
 80004c0:	2082      	movs	r0, #130	; 0x82
 80004c2:	f000 fed7 	bl	8001274 <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer(CDC_RX_EPADDR, ep4_buf, 64);
 80004c6:	2240      	movs	r2, #64	; 0x40
 80004c8:	4909      	ldr	r1, [pc, #36]	; (80004f0 <EVENT_USB_Device_ConfigurationChanged+0x40>)
 80004ca:	2003      	movs	r0, #3
 80004cc:	f000 fed2 	bl	8001274 <USBD_SetEndpointBuffer>
  CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 80004d0:	4808      	ldr	r0, [pc, #32]	; (80004f4 <EVENT_USB_Device_ConfigurationChanged+0x44>)
 80004d2:	f001 ff2b 	bl	800232c <CDC_Device_ConfigureEndpoints>

  device.IsConfigured = 1;
 80004d6:	4a08      	ldr	r2, [pc, #32]	; (80004f8 <EVENT_USB_Device_ConfigurationChanged+0x48>)
 80004d8:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
}
 80004e4:	bd08      	pop	{r3, pc}
 80004e6:	bf00      	nop
 80004e8:	20000fbc 	.word	0x20000fbc
 80004ec:	20000ffc 	.word	0x20000ffc
 80004f0:	20000f7c 	.word	0x20000f7c
 80004f4:	20000010 	.word	0x20000010
 80004f8:	2000123c 	.word	0x2000123c

080004fc <EVENT_USB_Device_ControlRequest>:

/* Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest()
{
 80004fc:	b508      	push	{r3, lr}
  CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 80004fe:	4802      	ldr	r0, [pc, #8]	; (8000508 <EVENT_USB_Device_ControlRequest+0xc>)
 8000500:	f002 f8de 	bl	80026c0 <CDC_Device_ProcessControlRequest>
}
 8000504:	bd08      	pop	{r3, pc}
 8000506:	bf00      	nop
 8000508:	20000010 	.word	0x20000010

0800050c <EVENT_USB_Device_StartOfFrame>:

void EVENT_USB_Device_StartOfFrame(void)
{
}
 800050c:	4770      	bx	lr

0800050e <EVENT_USB_Device_WakeUp>:

void EVENT_USB_Device_WakeUp(void)
{
}
 800050e:	4770      	bx	lr

08000510 <EVENT_USB_Device_Suspend>:

void EVENT_USB_Device_Suspend(void)
{
}
 8000510:	4770      	bx	lr
	...

08000514 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 8000514:	0a03      	lsrs	r3, r0, #8
 8000516:	2b02      	cmp	r3, #2
 8000518:	d00a      	beq.n	8000530 <CALLBACK_USB_GetDescriptor+0x1c>
 800051a:	2b03      	cmp	r3, #3
 800051c:	d00b      	beq.n	8000536 <CALLBACK_USB_GetDescriptor+0x22>
 800051e:	2b01      	cmp	r3, #1
 8000520:	d002      	beq.n	8000528 <CALLBACK_USB_GetDescriptor+0x14>
	uint16_t    Size    = NO_DESCRIPTOR;
 8000522:	2000      	movs	r0, #0
	const void* Address = NULL;
 8000524:	4603      	mov	r3, r0
 8000526:	e001      	b.n	800052c <CALLBACK_USB_GetDescriptor+0x18>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 8000528:	2012      	movs	r0, #18
			Address = &DeviceDescriptor;
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <CALLBACK_USB_GetDescriptor+0x48>)
					break;
			}
			break;
	}

	*DescriptorAddress = Address;
 800052c:	6013      	str	r3, [r2, #0]
	return Size;
}
 800052e:	4770      	bx	lr
			Size    = sizeof(USB_Descriptor_Configuration_t);
 8000530:	203e      	movs	r0, #62	; 0x3e
			Address = &ConfigurationDescriptor;
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <CALLBACK_USB_GetDescriptor+0x4c>)
			break;
 8000534:	e7fa      	b.n	800052c <CALLBACK_USB_GetDescriptor+0x18>
			switch (DescriptorNumber)
 8000536:	b2c0      	uxtb	r0, r0
 8000538:	2801      	cmp	r0, #1
 800053a:	d008      	beq.n	800054e <CALLBACK_USB_GetDescriptor+0x3a>
 800053c:	b120      	cbz	r0, 8000548 <CALLBACK_USB_GetDescriptor+0x34>
 800053e:	2802      	cmp	r0, #2
 8000540:	d008      	beq.n	8000554 <CALLBACK_USB_GetDescriptor+0x40>
	uint16_t    Size    = NO_DESCRIPTOR;
 8000542:	2000      	movs	r0, #0
	const void* Address = NULL;
 8000544:	4603      	mov	r3, r0
 8000546:	e7f1      	b.n	800052c <CALLBACK_USB_GetDescriptor+0x18>
					Size    = LanguageString.Header.Size;
 8000548:	2004      	movs	r0, #4
					Address = &LanguageString;
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <CALLBACK_USB_GetDescriptor+0x50>)
 800054c:	e7ee      	b.n	800052c <CALLBACK_USB_GetDescriptor+0x18>
					Size    = ManufacturerString.Header.Size;
 800054e:	2058      	movs	r0, #88	; 0x58
					Address = &ManufacturerString;
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <CALLBACK_USB_GetDescriptor+0x54>)
					break;
 8000552:	e7eb      	b.n	800052c <CALLBACK_USB_GetDescriptor+0x18>
					Size    = ProductString.Header.Size;
 8000554:	2020      	movs	r0, #32
					Address = &ProductString;
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <CALLBACK_USB_GetDescriptor+0x58>)
					break;
 8000558:	e7e8      	b.n	800052c <CALLBACK_USB_GetDescriptor+0x18>
 800055a:	bf00      	nop
 800055c:	0800dc40 	.word	0x0800dc40
 8000560:	0800dc54 	.word	0x0800dc54
 8000564:	0800dc94 	.word	0x0800dc94
 8000568:	0800dcc0 	.word	0x0800dcc0
 800056c:	0800dc9c 	.word	0x0800dc9c

08000570 <packetizerReceiveByteBlocking>:

#include "VirtualSerial.h"
#include "base64url.h"
#include "packetizer.h"

int16_t packetizerReceiveByteBlocking(void) {
 8000570:	b510      	push	{r4, lr}
  /* Wait until at least one byte is received and if so return it */
  while(CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface) <= 0) {
 8000572:	4c07      	ldr	r4, [pc, #28]	; (8000590 <packetizerReceiveByteBlocking+0x20>)
 8000574:	e002      	b.n	800057c <packetizerReceiveByteBlocking+0xc>
    CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 8000576:	4620      	mov	r0, r4
 8000578:	f001 ffac 	bl	80024d4 <CDC_Device_USBTask>
  while(CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface) <= 0) {
 800057c:	4620      	mov	r0, r4
 800057e:	f001 ffd3 	bl	8002528 <CDC_Device_BytesReceived>
 8000582:	2800      	cmp	r0, #0
 8000584:	d0f7      	beq.n	8000576 <packetizerReceiveByteBlocking+0x6>
  }
  return CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 8000586:	4802      	ldr	r0, [pc, #8]	; (8000590 <packetizerReceiveByteBlocking+0x20>)
 8000588:	f002 f808 	bl	800259c <CDC_Device_ReceiveByte>
}
 800058c:	bd10      	pop	{r4, pc}
 800058e:	bf00      	nop
 8000590:	20000010 	.word	0x20000010

08000594 <packetizerReadHeader>:

enum packetizerErrors packetizerReadHeader(pt_s *job) {
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	b093      	sub	sp, #76	; 0x4c
 8000598:	4607      	mov	r7, r0
 800059a:	4b35      	ldr	r3, [pc, #212]	; (8000670 <packetizerReadHeader+0xdc>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	9311      	str	r3, [sp, #68]	; 0x44
  /* We received a start of header (SoH, 0x01) and now gather all the bytes that belong to the
     header up to and including the start of text (SoT, 0x02) to see if the header is too long */
  char headerB64[PACKETIZER_HEADER_B64_LEN] = { 0 };
 80005a0:	2224      	movs	r2, #36	; 0x24
 80005a2:	2100      	movs	r1, #0
 80005a4:	a808      	add	r0, sp, #32
 80005a6:	f00a fb1f 	bl	800abe8 <memset>
  char header[PACKETIZER_HEADER_LEN] = { 0 };
 80005aa:	2500      	movs	r5, #0
 80005ac:	9501      	str	r5, [sp, #4]
 80005ae:	9502      	str	r5, [sp, #8]
 80005b0:	9503      	str	r5, [sp, #12]
 80005b2:	9504      	str	r5, [sp, #16]
 80005b4:	9505      	str	r5, [sp, #20]
 80005b6:	9506      	str	r5, [sp, #24]
 80005b8:	f8cd 501b 	str.w	r5, [sp, #27]
  size_t header_len = sizeof(header);
 80005bc:	231b      	movs	r3, #27
 80005be:	9300      	str	r3, [sp, #0]
  int16_t rbuf = 0;
 
  for(size_t headerB64idx = 0; headerB64idx < PACKETIZER_HEADER_B64_LEN; ) {
    rbuf = packetizerReceiveByteBlocking();
 80005c0:	f7ff ffd6 	bl	8000570 <packetizerReceiveByteBlocking>
 80005c4:	4604      	mov	r4, r0

    if(rbuf > 0xFF) {
 80005c6:	28ff      	cmp	r0, #255	; 0xff
 80005c8:	dd0d      	ble.n	80005e6 <packetizerReadHeader+0x52>
  for(size_t headerB64idx = 0; headerB64idx < PACKETIZER_HEADER_B64_LEN; ) {
 80005ca:	2d23      	cmp	r5, #35	; 0x23
 80005cc:	d9f8      	bls.n	80005c0 <packetizerReadHeader+0x2c>
         Because isbase64() considers padding to be not part of the alphabet, allow it also. */
      return packetizer_IllegalCharacter;
    }
  }
  /* Here we wait for the SoT to check that the header is not too long */
  if(packetizerReceiveByteBlocking() != 0x02) {
 80005ce:	f7ff ffcf 	bl	8000570 <packetizerReceiveByteBlocking>
 80005d2:	2802      	cmp	r0, #2
 80005d4:	d019      	beq.n	800060a <packetizerReadHeader+0x76>
    return packetizer_HeaderIncorrectSize;
 80005d6:	2002      	movs	r0, #2
  } else {
    /* Decoding failed, e.g. because padding was incorrect */
    return packetizer_HeaderDecodingFailed;
  }
  return packetizer_Successful;
}
 80005d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80005da:	4b25      	ldr	r3, [pc, #148]	; (8000670 <packetizerReadHeader+0xdc>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d144      	bne.n	800066c <packetizerReadHeader+0xd8>
 80005e2:	b013      	add	sp, #76	; 0x4c
 80005e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if(rbuf == 0x02) {
 80005e6:	2802      	cmp	r0, #2
 80005e8:	d038      	beq.n	800065c <packetizerReadHeader+0xc8>
    } else if(isbase64(rbuf) || rbuf == '=') {
 80005ea:	b2c6      	uxtb	r6, r0
 80005ec:	4630      	mov	r0, r6
 80005ee:	f000 f97b 	bl	80008e8 <isbase64>
 80005f2:	b908      	cbnz	r0, 80005f8 <packetizerReadHeader+0x64>
 80005f4:	2c3d      	cmp	r4, #61	; 0x3d
 80005f6:	d133      	bne.n	8000660 <packetizerReadHeader+0xcc>
      headerB64[headerB64idx++] = rbuf;
 80005f8:	1c6b      	adds	r3, r5, #1
 80005fa:	aa12      	add	r2, sp, #72	; 0x48
 80005fc:	4415      	add	r5, r2
 80005fe:	f805 6c28 	strb.w	r6, [r5, #-40]
  for(size_t headerB64idx = 0; headerB64idx < PACKETIZER_HEADER_B64_LEN; ) {
 8000602:	2b23      	cmp	r3, #35	; 0x23
 8000604:	d8e3      	bhi.n	80005ce <packetizerReadHeader+0x3a>
      headerB64[headerB64idx++] = rbuf;
 8000606:	461d      	mov	r5, r3
 8000608:	e7da      	b.n	80005c0 <packetizerReadHeader+0x2c>
  if(base64_decode(headerB64, PACKETIZER_HEADER_B64_LEN, header, &header_len)) {
 800060a:	466b      	mov	r3, sp
 800060c:	aa01      	add	r2, sp, #4
 800060e:	2124      	movs	r1, #36	; 0x24
 8000610:	a808      	add	r0, sp, #32
 8000612:	f000 f973 	bl	80008fc <base64_decode>
 8000616:	b328      	cbz	r0, 8000664 <packetizerReadHeader+0xd0>
    if(header_len == sizeof(header)) {
 8000618:	9b00      	ldr	r3, [sp, #0]
 800061a:	2b1b      	cmp	r3, #27
 800061c:	d001      	beq.n	8000622 <packetizerReadHeader+0x8e>
      return packetizer_HeaderIncorrectSize;
 800061e:	2002      	movs	r0, #2
 8000620:	e7da      	b.n	80005d8 <packetizerReadHeader+0x44>
      job->textLen = header[2] << 16 | header[1] << 8 | header[0];
 8000622:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000626:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800062a:	021b      	lsls	r3, r3, #8
 800062c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000630:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000634:	4313      	orrs	r3, r2
 8000636:	607b      	str	r3, [r7, #4]
      job->nonce = malloc(CRYPTO_NONCE_BYTES);
 8000638:	2018      	movs	r0, #24
 800063a:	f009 ff23 	bl	800a484 <malloc>
 800063e:	60b8      	str	r0, [r7, #8]
      if(job->nonce != NULL) {
 8000640:	b190      	cbz	r0, 8000668 <packetizerReadHeader+0xd4>
        memcpy(job->nonce, header + 3, CRYPTO_NONCE_BYTES);
 8000642:	ad12      	add	r5, sp, #72	; 0x48
 8000644:	4604      	mov	r4, r0
 8000646:	f855 0d41 	ldr.w	r0, [r5, #-65]!
 800064a:	6869      	ldr	r1, [r5, #4]
 800064c:	68aa      	ldr	r2, [r5, #8]
 800064e:	68eb      	ldr	r3, [r5, #12]
 8000650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000652:	6928      	ldr	r0, [r5, #16]
 8000654:	6969      	ldr	r1, [r5, #20]
 8000656:	c403      	stmia	r4!, {r0, r1}
  return packetizer_Successful;
 8000658:	2000      	movs	r0, #0
 800065a:	e7bd      	b.n	80005d8 <packetizerReadHeader+0x44>
      return packetizer_HeaderIncorrectSize;
 800065c:	2002      	movs	r0, #2
 800065e:	e7bb      	b.n	80005d8 <packetizerReadHeader+0x44>
      return packetizer_IllegalCharacter;
 8000660:	2001      	movs	r0, #1
 8000662:	e7b9      	b.n	80005d8 <packetizerReadHeader+0x44>
    return packetizer_HeaderDecodingFailed;
 8000664:	2003      	movs	r0, #3
 8000666:	e7b7      	b.n	80005d8 <packetizerReadHeader+0x44>
        return packetizer_NonceAllocationFailed;
 8000668:	2004      	movs	r0, #4
 800066a:	e7b5      	b.n	80005d8 <packetizerReadHeader+0x44>
}
 800066c:	f000 fa52 	bl	8000b14 <__stack_chk_fail>
 8000670:	0800de5c 	.word	0x0800de5c

08000674 <packetizerReadText>:

enum packetizerErrors packetizerReadText(pt_s *job) {
 8000674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	4606      	mov	r6, r0
  /* We received a correct header, now allocate space for the text and receive it up to and
     including the end of text (EoT, 0x03) to see if the text is too long. Then remove base64url
     encoding */
  enum packetizerErrors ret = packetizer_Successful;
  int16_t rbuf = 0;
  size_t textB64_len = job->textLen * sizeof(char), text_len = 0;
 800067c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8000680:	2400      	movs	r4, #0
 8000682:	9400      	str	r4, [sp, #0]
  char *textB64 = calloc(job->textLen, sizeof(char)), *text = NULL;
 8000684:	2101      	movs	r1, #1
 8000686:	4640      	mov	r0, r8
 8000688:	f009 fe72 	bl	800a370 <calloc>
 800068c:	9401      	str	r4, [sp, #4]
  if(textB64 == NULL) {
 800068e:	b358      	cbz	r0, 80006e8 <packetizerReadText+0x74>
 8000690:	4607      	mov	r7, r0
 8000692:	f100 39ff 	add.w	r9, r0, #4294967295	; 0xffffffff
    return packetizer_TextAllocationFailed;
  }
 
  /* Allocate memory for text (in base64 yet) and receive it */
  for(size_t textB64idx = 0; textB64idx < job->textLen; ) {
 8000696:	4625      	mov	r5, r4
 8000698:	6873      	ldr	r3, [r6, #4]
 800069a:	42ab      	cmp	r3, r5
 800069c:	d926      	bls.n	80006ec <packetizerReadText+0x78>
    rbuf = packetizerReceiveByteBlocking();
 800069e:	f7ff ff67 	bl	8000570 <packetizerReceiveByteBlocking>
 80006a2:	4604      	mov	r4, r0

    if(rbuf > 0xFF) {
 80006a4:	28ff      	cmp	r0, #255	; 0xff
 80006a6:	dcf7      	bgt.n	8000698 <packetizerReadText+0x24>
      /* Error in CDC_Device_ReceiveByte(), ignore it */
    } else if(rbuf == 0x03) {
 80006a8:	2803      	cmp	r0, #3
 80006aa:	d02b      	beq.n	8000704 <packetizerReadText+0x90>
      /* A premature EoT means the text is too short */
      ret = packetizer_TextIncorrectSize;
      break;
    } else if(isbase64(rbuf) || rbuf == '=') {
 80006ac:	fa5f fa80 	uxtb.w	sl, r0
 80006b0:	4650      	mov	r0, sl
 80006b2:	f000 f919 	bl	80008e8 <isbase64>
 80006b6:	b908      	cbnz	r0, 80006bc <packetizerReadText+0x48>
 80006b8:	2c3d      	cmp	r4, #61	; 0x3d
 80006ba:	d125      	bne.n	8000708 <packetizerReadText+0x94>
      textB64[textB64idx++] = rbuf;
 80006bc:	3501      	adds	r5, #1
 80006be:	f809 af01 	strb.w	sl, [r9, #1]!
 80006c2:	e7e9      	b.n	8000698 <packetizerReadText+0x24>
      ret = packetizer_TextIncorrectSize;
    }
  }
  if(ret == packetizer_Successful) {
    /* We received a text of correct size, so remove base64url encoding and put link into job */
    if(base64_decode_alloc(textB64, textB64_len, &text, &text_len)) {
 80006c4:	466b      	mov	r3, sp
 80006c6:	aa01      	add	r2, sp, #4
 80006c8:	4641      	mov	r1, r8
 80006ca:	4638      	mov	r0, r7
 80006cc:	f000 f988 	bl	80009e0 <base64_decode_alloc>
 80006d0:	b130      	cbz	r0, 80006e0 <packetizerReadText+0x6c>
      job->textLen = text_len;
 80006d2:	9b00      	ldr	r3, [sp, #0]
 80006d4:	6073      	str	r3, [r6, #4]
      if(text != NULL) {
 80006d6:	9b01      	ldr	r3, [sp, #4]
 80006d8:	b123      	cbz	r3, 80006e4 <packetizerReadText+0x70>
        job->text = (uint8_t *) text;
 80006da:	6033      	str	r3, [r6, #0]
 80006dc:	2400      	movs	r4, #0
 80006de:	e00a      	b.n	80006f6 <packetizerReadText+0x82>
        /* If text pointer is NULL, malloc failed */
        ret = packetizer_TextAllocationFailed;
      }
    } else {
      /* Decoding failed, e.g. because padding was incorrect */
      ret = packetizer_TextDecodingFailed;
 80006e0:	2407      	movs	r4, #7
 80006e2:	e008      	b.n	80006f6 <packetizerReadText+0x82>
        ret = packetizer_TextAllocationFailed;
 80006e4:	2405      	movs	r4, #5
 80006e6:	e006      	b.n	80006f6 <packetizerReadText+0x82>
    return packetizer_TextAllocationFailed;
 80006e8:	2405      	movs	r4, #5
 80006ea:	e007      	b.n	80006fc <packetizerReadText+0x88>
    if(packetizerReceiveByteBlocking() != 0x03) {
 80006ec:	f7ff ff40 	bl	8000570 <packetizerReceiveByteBlocking>
 80006f0:	2803      	cmp	r0, #3
 80006f2:	d0e7      	beq.n	80006c4 <packetizerReadText+0x50>
      ret = packetizer_TextIncorrectSize;
 80006f4:	2406      	movs	r4, #6
    }
  }

  /* Regardless of our outcome, we have to free the textB64, because we loose the pointer to it on
     return */
  free(textB64);
 80006f6:	4638      	mov	r0, r7
 80006f8:	f009 fecc 	bl	800a494 <free>
  return ret;
}
 80006fc:	4620      	mov	r0, r4
 80006fe:	b002      	add	sp, #8
 8000700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ret = packetizer_TextIncorrectSize;
 8000704:	2406      	movs	r4, #6
 8000706:	e7f6      	b.n	80006f6 <packetizerReadText+0x82>
      ret = packetizer_IllegalCharacter;
 8000708:	2401      	movs	r4, #1
 800070a:	e7f4      	b.n	80006f6 <packetizerReadText+0x82>

0800070c <packetizerReceive>:
  
enum packetizerErrors packetizerReceive(pt_s *job) {
 800070c:	b510      	push	{r4, lr}
 800070e:	4604      	mov	r4, r0
  enum packetizerErrors ret;

  /* Discard bytes until we find a start of header (SoH, 0x01) */
  while(packetizerReceiveByteBlocking() != 0x01);
 8000710:	f7ff ff2e 	bl	8000570 <packetizerReceiveByteBlocking>
 8000714:	2801      	cmp	r0, #1
 8000716:	d1fb      	bne.n	8000710 <packetizerReceive+0x4>
  /* Read header and fill in job or forward error */
  ret = packetizerReadHeader(job);
 8000718:	4620      	mov	r0, r4
 800071a:	f7ff ff3b 	bl	8000594 <packetizerReadHeader>
  if(ret != packetizer_Successful) {
 800071e:	4603      	mov	r3, r0
 8000720:	b108      	cbz	r0, 8000726 <packetizerReceive+0x1a>
  ret = packetizerReadText(job);
  if(ret != packetizer_Successful) {
    return ret;
  }
  return packetizer_Successful;
}
 8000722:	4618      	mov	r0, r3
 8000724:	bd10      	pop	{r4, pc}
  ret = packetizerReadText(job);
 8000726:	4620      	mov	r0, r4
 8000728:	f7ff ffa4 	bl	8000674 <packetizerReadText>
 800072c:	4603      	mov	r3, r0
 800072e:	e7f8      	b.n	8000722 <packetizerReceive+0x16>

08000730 <packetizerSend>:

enum packetizerErrors packetizerSend(ct_s *output) {
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	b083      	sub	sp, #12
 8000734:	4604      	mov	r4, r0
  enum packetizerErrors ret = packetizer_Successful;
  char *textB64 = NULL;
 8000736:	aa02      	add	r2, sp, #8
 8000738:	2300      	movs	r3, #0
 800073a:	f842 3d04 	str.w	r3, [r2, #-4]!
  size_t textB64_len = 0;

  /* Encode ciphertext into base64url, return fail if not successful */
  textB64_len = base64_encode_alloc((char *) output->text, output->textLen, &textB64);
 800073e:	6841      	ldr	r1, [r0, #4]
 8000740:	6800      	ldr	r0, [r0, #0]
 8000742:	f000 f8ad 	bl	80008a0 <base64_encode_alloc>
 8000746:	4605      	mov	r5, r0
  if(textB64 == NULL) {
 8000748:	9b01      	ldr	r3, [sp, #4]
 800074a:	b183      	cbz	r3, 800076e <packetizerSend+0x3e>
      ret = packetizer_CiphertextTooLarge;
    } else {
      ret = packetizer_CiphertextAllocationFailed;
    }
  } else {
    CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 0x02);
 800074c:	4c0c      	ldr	r4, [pc, #48]	; (8000780 <packetizerSend+0x50>)
 800074e:	2102      	movs	r1, #2
 8000750:	4620      	mov	r0, r4
 8000752:	f001 fe53 	bl	80023fc <CDC_Device_SendByte>
    CDC_Device_SendData(&VirtualSerial_CDC_Interface, textB64, textB64_len);
 8000756:	b2aa      	uxth	r2, r5
 8000758:	9901      	ldr	r1, [sp, #4]
 800075a:	4620      	mov	r0, r4
 800075c:	f001 fe2c 	bl	80023b8 <CDC_Device_SendData>
    CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 0x03);
 8000760:	2103      	movs	r1, #3
 8000762:	4620      	mov	r0, r4
 8000764:	f001 fe4a 	bl	80023fc <CDC_Device_SendByte>
  enum packetizerErrors ret = packetizer_Successful;
 8000768:	2000      	movs	r0, #0
  }

  return ret;
}
 800076a:	b003      	add	sp, #12
 800076c:	bd30      	pop	{r4, r5, pc}
    if(output->textLen > 0 && textB64_len <= 0) {
 800076e:	6863      	ldr	r3, [r4, #4]
 8000770:	b123      	cbz	r3, 800077c <packetizerSend+0x4c>
      ret = packetizer_CiphertextTooLarge;
 8000772:	2800      	cmp	r0, #0
 8000774:	bf14      	ite	ne
 8000776:	2008      	movne	r0, #8
 8000778:	2009      	moveq	r0, #9
 800077a:	e7f6      	b.n	800076a <packetizerSend+0x3a>
      ret = packetizer_CiphertextAllocationFailed;
 800077c:	2008      	movs	r0, #8
 800077e:	e7f4      	b.n	800076a <packetizerSend+0x3a>
 8000780:	20000010 	.word	0x20000010

08000784 <encrypt>:
#include <malloc.h>
#include "crypto.h"

uint8_t encrypt(uint8_t *ciphertext[],
                const uint8_t *plaintext, const size_t plaintext_len,
                const uint8_t *nonce, const uint8_t *key ) {
 8000784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000786:	b0a3      	sub	sp, #140	; 0x8c
 8000788:	4605      	mov	r5, r0
 800078a:	4614      	mov	r4, r2
 800078c:	461f      	mov	r7, r3
 800078e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <encrypt+0x58>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	9321      	str	r3, [sp, #132]	; 0x84
  /* Encrypt like the most popular app with over 30 million users worldwide did
     cf. https://www.ssl.com/article/nq-vault-app-not-as-secure-as-advertised/  */
  uint8_t buf[128];
  memcpy(buf, plaintext, plaintext_len);
 8000796:	a801      	add	r0, sp, #4
 8000798:	f00a f928 	bl	800a9ec <memcpy>
  for(uint8_t i=0; i<128; i++) buf[i] ^= key[nonce[0] % 8];
 800079c:	783b      	ldrb	r3, [r7, #0]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	5cf0      	ldrb	r0, [r6, r3]
 80007a4:	f10d 0303 	add.w	r3, sp, #3
 80007a8:	f10d 0183 	add.w	r1, sp, #131	; 0x83
 80007ac:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80007b0:	4042      	eors	r2, r0
 80007b2:	701a      	strb	r2, [r3, #0]
 80007b4:	428b      	cmp	r3, r1
 80007b6:	d1f9      	bne.n	80007ac <encrypt+0x28>
  *ciphertext = malloc(plaintext_len);
 80007b8:	4620      	mov	r0, r4
 80007ba:	f009 fe63 	bl	800a484 <malloc>
 80007be:	6028      	str	r0, [r5, #0]
  memcpy(*ciphertext, buf, plaintext_len);
 80007c0:	4622      	mov	r2, r4
 80007c2:	a901      	add	r1, sp, #4
 80007c4:	f00a f912 	bl	800a9ec <memcpy>
  return 0;
}
 80007c8:	2000      	movs	r0, #0
 80007ca:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <encrypt+0x58>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d101      	bne.n	80007d8 <encrypt+0x54>
 80007d4:	b023      	add	sp, #140	; 0x8c
 80007d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d8:	f000 f99c 	bl	8000b14 <__stack_chk_fail>
 80007dc:	0800de5c 	.word	0x0800de5c

080007e0 <getCiphertextLength>:

size_t getCiphertextLength(const size_t plaintext_len) {
  return plaintext_len;
}
 80007e0:	4770      	bx	lr
	...

080007e4 <base64_encode>:
	       char *restrict out, size_t outlen)
{
  static const char b64str[64] =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";

  while (inlen && outlen)
 80007e4:	2900      	cmp	r1, #0
 80007e6:	d054      	beq.n	8000892 <base64_encode+0xae>
{
 80007e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ea:	460f      	mov	r7, r1
  while (inlen && outlen)
 80007ec:	b1eb      	cbz	r3, 800082a <base64_encode+0x46>
    {
      *out++ = b64str[(to_uchar (in[0]) >> 2) & 0x3f];
 80007ee:	7801      	ldrb	r1, [r0, #0]
 80007f0:	088c      	lsrs	r4, r1, #2
 80007f2:	4d2a      	ldr	r5, [pc, #168]	; (800089c <base64_encode+0xb8>)
 80007f4:	5d2c      	ldrb	r4, [r5, r4]
 80007f6:	7014      	strb	r4, [r2, #0]
      if (!--outlen)
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d016      	beq.n	800082a <base64_encode+0x46>
		   + (--inlen ? to_uchar (in[2]) >> 6 : 0))
		  & 0x3f]
	 : '=');
      if (!--outlen)
	break;
      *out++ = inlen ? b64str[to_uchar (in[2]) & 0x3f] : '=';
 80007fc:	253d      	movs	r5, #61	; 0x3d
      *out++ =
 80007fe:	4c27      	ldr	r4, [pc, #156]	; (800089c <base64_encode+0xb8>)
		   + (--inlen ? to_uchar (in[2]) >> 6 : 0))
 8000800:	f04f 0e00 	mov.w	lr, #0
 8000804:	e01e      	b.n	8000844 <base64_encode+0x60>
		      & 0x3f];
 8000806:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      *out++ = b64str[((to_uchar (in[0]) << 4)
 800080a:	5c61      	ldrb	r1, [r4, r1]
 800080c:	7051      	strb	r1, [r2, #1]
      if (!--outlen)
 800080e:	2b02      	cmp	r3, #2
 8000810:	d00b      	beq.n	800082a <base64_encode+0x46>
      *out++ =
 8000812:	bb26      	cbnz	r6, 800085e <base64_encode+0x7a>
 8000814:	7095      	strb	r5, [r2, #2]
      if (!--outlen)
 8000816:	2b03      	cmp	r3, #3
 8000818:	d007      	beq.n	800082a <base64_encode+0x46>
 800081a:	3204      	adds	r2, #4
      *out++ = inlen ? b64str[to_uchar (in[2]) & 0x3f] : '=';
 800081c:	f802 5c01 	strb.w	r5, [r2, #-1]
      if (!--outlen)
 8000820:	3b04      	subs	r3, #4
 8000822:	d002      	beq.n	800082a <base64_encode+0x46>
	break;
      if (inlen)
 8000824:	b916      	cbnz	r6, 800082c <base64_encode+0x48>
      if (inlen)
	in += 3;
    }

  if (outlen)
    *out = '\0';
 8000826:	2300      	movs	r3, #0
 8000828:	7013      	strb	r3, [r2, #0]
}
 800082a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (inlen)
 800082c:	1e77      	subs	r7, r6, #1
 800082e:	d0fa      	beq.n	8000826 <base64_encode+0x42>
      *out++ = b64str[(to_uchar (in[0]) >> 2) & 0x3f];
 8000830:	f810 1f03 	ldrb.w	r1, [r0, #3]!
 8000834:	ea4f 0c91 	mov.w	ip, r1, lsr #2
 8000838:	f814 c00c 	ldrb.w	ip, [r4, ip]
 800083c:	f882 c000 	strb.w	ip, [r2]
      if (!--outlen)
 8000840:	2b01      	cmp	r3, #1
 8000842:	d0f2      	beq.n	800082a <base64_encode+0x46>
      *out++ = b64str[((to_uchar (in[0]) << 4)
 8000844:	0109      	lsls	r1, r1, #4
		       + (--inlen ? to_uchar (in[1]) >> 4 : 0))
 8000846:	1e7e      	subs	r6, r7, #1
 8000848:	d0dd      	beq.n	8000806 <base64_encode+0x22>
 800084a:	f890 c001 	ldrb.w	ip, [r0, #1]
 800084e:	eb01 111c 	add.w	r1, r1, ip, lsr #4
		      & 0x3f];
 8000852:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      *out++ = b64str[((to_uchar (in[0]) << 4)
 8000856:	5c61      	ldrb	r1, [r4, r1]
 8000858:	7051      	strb	r1, [r2, #1]
      if (!--outlen)
 800085a:	2b02      	cmp	r3, #2
 800085c:	d0e5      	beq.n	800082a <base64_encode+0x46>
	 ? b64str[((to_uchar (in[1]) << 2)
 800085e:	7841      	ldrb	r1, [r0, #1]
 8000860:	0089      	lsls	r1, r1, #2
		   + (--inlen ? to_uchar (in[2]) >> 6 : 0))
 8000862:	1ebe      	subs	r6, r7, #2
 8000864:	bf1a      	itte	ne
 8000866:	7887      	ldrbne	r7, [r0, #2]
 8000868:	09bf      	lsrne	r7, r7, #6
 800086a:	4677      	moveq	r7, lr
 800086c:	4439      	add	r1, r7
		  & 0x3f]
 800086e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      *out++ =
 8000872:	5c61      	ldrb	r1, [r4, r1]
 8000874:	7091      	strb	r1, [r2, #2]
      if (!--outlen)
 8000876:	2b03      	cmp	r3, #3
 8000878:	d0d7      	beq.n	800082a <base64_encode+0x46>
      *out++ = inlen ? b64str[to_uchar (in[2]) & 0x3f] : '=';
 800087a:	2e00      	cmp	r6, #0
 800087c:	d0cd      	beq.n	800081a <base64_encode+0x36>
 800087e:	3204      	adds	r2, #4
 8000880:	7881      	ldrb	r1, [r0, #2]
 8000882:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8000886:	5c61      	ldrb	r1, [r4, r1]
 8000888:	f802 1c01 	strb.w	r1, [r2, #-1]
      if (!--outlen)
 800088c:	3b04      	subs	r3, #4
 800088e:	d1cd      	bne.n	800082c <base64_encode+0x48>
 8000890:	e7cb      	b.n	800082a <base64_encode+0x46>
  if (outlen)
 8000892:	b10b      	cbz	r3, 8000898 <base64_encode+0xb4>
    *out = '\0';
 8000894:	2300      	movs	r3, #0
 8000896:	7013      	strb	r3, [r2, #0]
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	0800dd1c 	.word	0x0800dd1c

080008a0 <base64_encode_alloc>:
   memory allocation failed, OUT is set to NULL, and the return value
   indicates length of the requested memory block, i.e.,
   BASE64_LENGTH(inlen) + 1. */
size_t
base64_encode_alloc (const char *in, size_t inlen, char **out)
{
 80008a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  size_t outlen = 1 + BASE64_LENGTH (inlen);
 80008a4:	1c8c      	adds	r4, r1, #2
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <base64_encode_alloc+0x44>)
 80008a8:	fba3 3404 	umull	r3, r4, r3, r4
 80008ac:	0864      	lsrs	r4, r4, #1
 80008ae:	00a4      	lsls	r4, r4, #2
 80008b0:	1c65      	adds	r5, r4, #1
   * If the multiplication overflows, we lose at least half of the
   * correct value, so the result is < ((inlen + 2) / 3) * 2, which is
   * less than (inlen + 2) * 0.66667, which is less than inlen as soon as
   * (inlen > 4).
   */
  if (inlen > outlen)
 80008b2:	42a9      	cmp	r1, r5
 80008b4:	d904      	bls.n	80008c0 <base64_encode_alloc+0x20>
    {
      *out = NULL;
 80008b6:	2500      	movs	r5, #0
 80008b8:	6015      	str	r5, [r2, #0]
    return outlen;

  base64_encode (in, inlen, *out, outlen);

  return outlen - 1;
}
 80008ba:	4628      	mov	r0, r5
 80008bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008c0:	4617      	mov	r7, r2
 80008c2:	460e      	mov	r6, r1
 80008c4:	4680      	mov	r8, r0
  *out = malloc (outlen);
 80008c6:	4628      	mov	r0, r5
 80008c8:	f009 fddc 	bl	800a484 <malloc>
 80008cc:	6038      	str	r0, [r7, #0]
  if (!*out)
 80008ce:	2800      	cmp	r0, #0
 80008d0:	d0f3      	beq.n	80008ba <base64_encode_alloc+0x1a>
  base64_encode (in, inlen, *out, outlen);
 80008d2:	462b      	mov	r3, r5
 80008d4:	4602      	mov	r2, r0
 80008d6:	4631      	mov	r1, r6
 80008d8:	4640      	mov	r0, r8
 80008da:	f7ff ff83 	bl	80007e4 <base64_encode>
  return outlen - 1;
 80008de:	4625      	mov	r5, r4
 80008e0:	e7eb      	b.n	80008ba <base64_encode_alloc+0x1a>
 80008e2:	bf00      	nop
 80008e4:	aaaaaaab 	.word	0xaaaaaaab

080008e8 <isbase64>:
   false otherwise.  Note that '=' is padding and not considered to be
   part of the alphabet.  */
bool
isbase64 (char ch)
{
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <isbase64+0x10>)
 80008ea:	4418      	add	r0, r3
 80008ec:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80008f0:	43c0      	mvns	r0, r0
}
 80008f2:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80008f6:	4770      	bx	lr
 80008f8:	0800dd1c 	.word	0x0800dd1c

080008fc <base64_decode>:
   that, when applicable, you must remove any line terminators that is
   part of the data stream before calling this function.  */
bool
base64_decode (const char *restrict in, size_t inlen,
	       char *restrict out, size_t *outlen)
{
 80008fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  size_t outleft = *outlen;
 8000900:	f8d3 c000 	ldr.w	ip, [r3]

  while (inlen >= 2)
 8000904:	2901      	cmp	r1, #1
 8000906:	d963      	bls.n	80009d0 <base64_decode+0xd4>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 8000908:	7805      	ldrb	r5, [r0, #0]
 800090a:	4c34      	ldr	r4, [pc, #208]	; (80009dc <base64_decode+0xe0>)
 800090c:	442c      	add	r4, r5
 800090e:	f994 6040 	ldrsb.w	r6, [r4, #64]	; 0x40
    {
      if (!isbase64 (in[0]) || !isbase64 (in[1]))
 8000912:	2e00      	cmp	r6, #0
 8000914:	db5e      	blt.n	80009d4 <base64_decode+0xd8>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 8000916:	7845      	ldrb	r5, [r0, #1]
 8000918:	4c30      	ldr	r4, [pc, #192]	; (80009dc <base64_decode+0xe0>)
 800091a:	442c      	add	r4, r5
 800091c:	f994 e040 	ldrsb.w	lr, [r4, #64]	; 0x40
      if (!isbase64 (in[0]) || !isbase64 (in[1]))
 8000920:	f1be 0f00 	cmp.w	lr, #0
 8000924:	db58      	blt.n	80009d8 <base64_decode+0xdc>
  size_t outleft = *outlen;
 8000926:	4665      	mov	r5, ip
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 8000928:	4f2c      	ldr	r7, [pc, #176]	; (80009dc <base64_decode+0xe0>)
 800092a:	e021      	b.n	8000970 <base64_decode+0x74>
      if (inlen == 2)
	break;

      if (in[2] == '=')
	{
	  if (inlen != 4)
 800092c:	2904      	cmp	r1, #4
 800092e:	d103      	bne.n	8000938 <base64_decode+0x3c>
	    break;

	  if (in[3] != '=')
 8000930:	78e2      	ldrb	r2, [r4, #3]
 8000932:	2a3d      	cmp	r2, #61	; 0x3d
 8000934:	d100      	bne.n	8000938 <base64_decode+0x3c>
		}
	    }
	}

      in += 4;
      inlen -= 4;
 8000936:	3904      	subs	r1, #4
    }

  *outlen -= outleft;
 8000938:	ebac 0505 	sub.w	r5, ip, r5
 800093c:	601d      	str	r5, [r3, #0]
 800093e:	fab1 f081 	clz	r0, r1
 8000942:	0940      	lsrs	r0, r0, #5

  if (inlen != 0)
    return false;

  return true;
}
 8000944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	      if (inlen != 4)
 8000948:	2904      	cmp	r1, #4
 800094a:	d0f4      	beq.n	8000936 <base64_decode+0x3a>
 800094c:	e7f4      	b.n	8000938 <base64_decode+0x3c>
      inlen -= 4;
 800094e:	3904      	subs	r1, #4
  while (inlen >= 2)
 8000950:	2901      	cmp	r1, #1
 8000952:	d9f1      	bls.n	8000938 <base64_decode+0x3c>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 8000954:	7926      	ldrb	r6, [r4, #4]
 8000956:	443e      	add	r6, r7
 8000958:	f996 6040 	ldrsb.w	r6, [r6, #64]	; 0x40
      if (!isbase64 (in[0]) || !isbase64 (in[1]))
 800095c:	2e00      	cmp	r6, #0
 800095e:	dbeb      	blt.n	8000938 <base64_decode+0x3c>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 8000960:	7964      	ldrb	r4, [r4, #5]
 8000962:	443c      	add	r4, r7
 8000964:	f994 e040 	ldrsb.w	lr, [r4, #64]	; 0x40
 8000968:	3004      	adds	r0, #4
      if (!isbase64 (in[0]) || !isbase64 (in[1]))
 800096a:	f1be 0f00 	cmp.w	lr, #0
 800096e:	dbe3      	blt.n	8000938 <base64_decode+0x3c>
 8000970:	4604      	mov	r4, r0
      if (outleft)
 8000972:	b135      	cbz	r5, 8000982 <base64_decode+0x86>
		    | (b64[to_uchar (in[1])] >> 4));
 8000974:	ea4f 182e 	mov.w	r8, lr, asr #4
 8000978:	ea48 0686 	orr.w	r6, r8, r6, lsl #2
	  *out++ = ((b64[to_uchar (in[0])] << 2)
 800097c:	7016      	strb	r6, [r2, #0]
	  outleft--;
 800097e:	3d01      	subs	r5, #1
	  *out++ = ((b64[to_uchar (in[0])] << 2)
 8000980:	3201      	adds	r2, #1
      if (inlen == 2)
 8000982:	2902      	cmp	r1, #2
 8000984:	d0d8      	beq.n	8000938 <base64_decode+0x3c>
      if (in[2] == '=')
 8000986:	78a6      	ldrb	r6, [r4, #2]
 8000988:	2e3d      	cmp	r6, #61	; 0x3d
 800098a:	d0cf      	beq.n	800092c <base64_decode+0x30>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 800098c:	443e      	add	r6, r7
 800098e:	f996 8040 	ldrsb.w	r8, [r6, #64]	; 0x40
	  if (!isbase64 (in[2]))
 8000992:	f1b8 0f00 	cmp.w	r8, #0
 8000996:	dbcf      	blt.n	8000938 <base64_decode+0x3c>
	  if (outleft)
 8000998:	b13d      	cbz	r5, 80009aa <base64_decode+0xae>
			| (b64[to_uchar (in[2])] >> 2));
 800099a:	ea4f 06a8 	mov.w	r6, r8, asr #2
 800099e:	ea46 1e0e 	orr.w	lr, r6, lr, lsl #4
	      *out++ = (((b64[to_uchar (in[1])] << 4) & 0xf0)
 80009a2:	f882 e000 	strb.w	lr, [r2]
	      outleft--;
 80009a6:	3d01      	subs	r5, #1
	      *out++ = (((b64[to_uchar (in[1])] << 4) & 0xf0)
 80009a8:	3201      	adds	r2, #1
	  if (inlen == 3)
 80009aa:	2903      	cmp	r1, #3
 80009ac:	d0c4      	beq.n	8000938 <base64_decode+0x3c>
	  if (in[3] == '=')
 80009ae:	78e6      	ldrb	r6, [r4, #3]
 80009b0:	2e3d      	cmp	r6, #61	; 0x3d
 80009b2:	d0c9      	beq.n	8000948 <base64_decode+0x4c>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 80009b4:	443e      	add	r6, r7
 80009b6:	f996 6040 	ldrsb.w	r6, [r6, #64]	; 0x40
	      if (!isbase64 (in[3]))
 80009ba:	2e00      	cmp	r6, #0
 80009bc:	dbbc      	blt.n	8000938 <base64_decode+0x3c>
	      if (outleft)
 80009be:	2d00      	cmp	r5, #0
 80009c0:	d0c5      	beq.n	800094e <base64_decode+0x52>
			    | b64[to_uchar (in[3])]);
 80009c2:	ea46 1888 	orr.w	r8, r6, r8, lsl #6
		  *out++ = (((b64[to_uchar (in[2])] << 6) & 0xc0)
 80009c6:	f882 8000 	strb.w	r8, [r2]
		  outleft--;
 80009ca:	3d01      	subs	r5, #1
		  *out++ = (((b64[to_uchar (in[2])] << 6) & 0xc0)
 80009cc:	3201      	adds	r2, #1
 80009ce:	e7be      	b.n	800094e <base64_decode+0x52>
  size_t outleft = *outlen;
 80009d0:	4665      	mov	r5, ip
 80009d2:	e7b1      	b.n	8000938 <base64_decode+0x3c>
 80009d4:	4665      	mov	r5, ip
 80009d6:	e7af      	b.n	8000938 <base64_decode+0x3c>
 80009d8:	4665      	mov	r5, ip
 80009da:	e7ad      	b.n	8000938 <base64_decode+0x3c>
 80009dc:	0800dd1c 	.word	0x0800dd1c

080009e0 <base64_decode_alloc>:
   input was invalid, in which case *OUT is NULL and *OUTLEN is
   undefined. */
bool
base64_decode_alloc (const char *in, size_t inlen, char **out,
		     size_t *outlen)
{
 80009e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009e2:	b083      	sub	sp, #12
 80009e4:	4607      	mov	r7, r0
 80009e6:	460c      	mov	r4, r1
 80009e8:	4615      	mov	r5, r2
 80009ea:	461e      	mov	r6, r3
  /* This may allocate a few bytes too much, depending on input,
     but it's not worth the extra CPU time to compute the exact amount.
     The exact amount is 3 * inlen / 4, minus 1 if the input ends
     with "=" and minus another 1 if the input ends with "==".
     Dividing before multiplying avoids the possibility of overflow.  */
  size_t needlen = 3 * (inlen / 4) + 2;
 80009ec:	0888      	lsrs	r0, r1, #2
 80009ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80009f2:	3002      	adds	r0, #2
 80009f4:	9001      	str	r0, [sp, #4]

  *out = malloc (needlen);
 80009f6:	f009 fd45 	bl	800a484 <malloc>
 80009fa:	6028      	str	r0, [r5, #0]
  if (!*out)
 80009fc:	b188      	cbz	r0, 8000a22 <base64_decode_alloc+0x42>
    return true;

  if (!base64_decode (in, inlen, *out, &needlen))
 80009fe:	ab01      	add	r3, sp, #4
 8000a00:	4602      	mov	r2, r0
 8000a02:	4621      	mov	r1, r4
 8000a04:	4638      	mov	r0, r7
 8000a06:	f7ff ff79 	bl	80008fc <base64_decode>
 8000a0a:	4604      	mov	r4, r0
 8000a0c:	b118      	cbz	r0, 8000a16 <base64_decode_alloc+0x36>
      free (*out);
      *out = NULL;
      return false;
    }

  if (outlen)
 8000a0e:	b14e      	cbz	r6, 8000a24 <base64_decode_alloc+0x44>
    *outlen = needlen;
 8000a10:	9b01      	ldr	r3, [sp, #4]
 8000a12:	6033      	str	r3, [r6, #0]
 8000a14:	e006      	b.n	8000a24 <base64_decode_alloc+0x44>
      free (*out);
 8000a16:	6828      	ldr	r0, [r5, #0]
 8000a18:	f009 fd3c 	bl	800a494 <free>
      *out = NULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	602b      	str	r3, [r5, #0]
      return false;
 8000a20:	e000      	b.n	8000a24 <base64_decode_alloc+0x44>
    return true;
 8000a22:	2401      	movs	r4, #1

  return true;
}
 8000a24:	4620      	mov	r0, r4
 8000a26:	b003      	add	sp, #12
 8000a28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a2a <enableMPU>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a2e:	f3bf 8f6f 	isb	sy
#include "MPUeasy.h"

void enableMPU(int enableBackgroundRegion) {
	__DSB();
	__ISB();
	PPB->MPU_CTRL |= (enableBackgroundRegion ? 0x4 : 0x0) | 0x1;
 8000a32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a36:	f8d3 3d94 	ldr.w	r3, [r3, #3476]	; 0xd94
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	bf14      	ite	ne
 8000a3e:	2205      	movne	r2, #5
 8000a40:	2201      	moveq	r2, #1
 8000a42:	4313      	orrs	r3, r2
 8000a44:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000a48:	f8c2 3d94 	str.w	r3, [r2, #3476]	; 0xd94
  __ASM volatile ("dsb 0xF":::"memory");
 8000a4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a50:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
 8000a54:	4770      	bx	lr

08000a56 <disableMPU>:
  __ASM volatile ("dsb 0xF":::"memory");
 8000a56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a5a:	f3bf 8f6f 	isb	sy

void disableMPU(void) {
	__DSB();
	__ISB();
	PPB->MPU_CTRL = 0;
 8000a5e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a62:	2200      	movs	r2, #0
 8000a64:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
  __ASM volatile ("dsb 0xF":::"memory");
 8000a68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a6c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
 8000a70:	4770      	bx	lr

08000a72 <configMPU>:

void configMPU(MPUconfig_t config) {
 8000a72:	b470      	push	{r4, r5, r6}
 8000a74:	b085      	sub	sp, #20
 8000a76:	ab04      	add	r3, sp, #16
 8000a78:	e903 0007 	stmdb	r3, {r0, r1, r2}
 8000a7c:	9a01      	ldr	r2, [sp, #4]
 8000a7e:	9b02      	ldr	r3, [sp, #8]
 8000a80:	f89d 100c 	ldrb.w	r1, [sp, #12]
	/* to align baseAddress, we shift right and then left again,
	 * with at least the position of the ADDR bitfield
	 * so other bitfields don't get changed */
	uint8_t addrShift = config.size > PPB_MPU_RBAR_ADDR_Pos ? \
 8000a84:	460e      	mov	r6, r1
 8000a86:	2909      	cmp	r1, #9
 8000a88:	bf38      	it	cc
 8000a8a:	2609      	movcc	r6, #9
	                    config.size : PPB_MPU_RBAR_ADDR_Pos;
	/* TEX, S, C, and B field will be set according to recommendation
	 * in table 2-17 of manual */
	uint8_t autoSet = config.baseAddress < (void *)0x10000000 ? 0x2 : \
 8000a8c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8000a90:	d308      	bcc.n	8000aa4 <configMPU+0x32>
 8000a92:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8000a96:	d32a      	bcc.n	8000aee <configMPU+0x7c>
 8000a98:	f1b2 4fc0 	cmp.w	r2, #1610612736	; 0x60000000
 8000a9c:	bf34      	ite	cc
 8000a9e:	2405      	movcc	r4, #5
 8000aa0:	2407      	movcs	r4, #7
 8000aa2:	e000      	b.n	8000aa6 <configMPU+0x34>
 8000aa4:	2402      	movs	r4, #2
	                  config.baseAddress < (void *)0x40000000 ? 0x6 : \
	                  config.baseAddress < (void *)0x60000000 ? 0x5 : \
	                                                            0x7;
	/* switch to correct priority slot */
	PPB->MPU_RNR = config.priority & 0x7;
 8000aa6:	f89d 500d 	ldrb.w	r5, [sp, #13]
 8000aaa:	f005 0507 	and.w	r5, r5, #7
 8000aae:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8000ab2:	f8c0 5d98 	str.w	r5, [r0, #3480]	; 0xd98
	/* disable region before changing parameters to avoid glitches */
	PPB->MPU_RASR &= ~PPB_MPU_RASR_ENABLE_Msk;
 8000ab6:	f8d0 5da0 	ldr.w	r5, [r0, #3488]	; 0xda0
 8000aba:	f025 0501 	bic.w	r5, r5, #1
 8000abe:	f8c0 5da0 	str.w	r5, [r0, #3488]	; 0xda0

	PPB->MPU_RBAR = ((uint32_t) config.baseAddress >> addrShift) \
 8000ac2:	40f2      	lsrs	r2, r6
	                                               << addrShift;
 8000ac4:	40b2      	lsls	r2, r6
	PPB->MPU_RBAR = ((uint32_t) config.baseAddress >> addrShift) \
 8000ac6:	f8c0 2d9c 	str.w	r2, [r0, #3484]	; 0xd9c
	PPB->MPU_RASR = (config.permissions << PPB_MPU_RASR_AP_Pos \
 8000aca:	0618      	lsls	r0, r3, #24
                & (PPB_MPU_RASR_XN_Msk | PPB_MPU_RASR_AP_Msk))  | \
 8000acc:	f000 50b8 	and.w	r0, r0, #385875968	; 0x17000000
	                (autoSet            << PPB_MPU_RASR_B_Pos  )  | \
 8000ad0:	0422      	lsls	r2, r4, #16
            ((config.size > 0 ? config.size - 1 : config.size)\
	                                    << PPB_MPU_RASR_SIZE_Pos\
	                                     & PPB_MPU_RASR_SIZE_Msk) | \
 8000ad2:	b971      	cbnz	r1, 8000af2 <configMPU+0x80>
 8000ad4:	2100      	movs	r1, #0
	                (config.permissions >> 7 \
	                                     & PPB_MPU_RASR_ENABLE_Msk);
 8000ad6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	                                     & PPB_MPU_RASR_SIZE_Msk) | \
 8000ada:	4303      	orrs	r3, r0
 8000adc:	4313      	orrs	r3, r2
 8000ade:	430b      	orrs	r3, r1
	PPB->MPU_RASR = (config.permissions << PPB_MPU_RASR_AP_Pos \
 8000ae0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000ae4:	f8c2 3da0 	str.w	r3, [r2, #3488]	; 0xda0
}
 8000ae8:	b005      	add	sp, #20
 8000aea:	bc70      	pop	{r4, r5, r6}
 8000aec:	4770      	bx	lr
	uint8_t autoSet = config.baseAddress < (void *)0x10000000 ? 0x2 : \
 8000aee:	2406      	movs	r4, #6
 8000af0:	e7d9      	b.n	8000aa6 <configMPU+0x34>
            ((config.size > 0 ? config.size - 1 : config.size)\
 8000af2:	3901      	subs	r1, #1
	                                    << PPB_MPU_RASR_SIZE_Pos\
 8000af4:	0049      	lsls	r1, r1, #1
	                                     & PPB_MPU_RASR_SIZE_Msk) | \
 8000af6:	f001 013e 	and.w	r1, r1, #62	; 0x3e
 8000afa:	e7ec      	b.n	8000ad6 <configMPU+0x64>

08000afc <MemManage_Handler>:

void MemManage_Handler(void) {
  uint8_t MMFSR = PPB->CFSR;
 8000afc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000b00:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
  void *MMFAR = (MMFSR & PPB_CFSR_MMARVALID_Msk) ? (void *) PPB->MMFAR : NULL;
 8000b04:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000b08:	bf1c      	itt	ne
 8000b0a:	f04f 23e0 	movne.w	r3, #3758153728	; 0xe000e000
 8000b0e:	f8d3 3d34 	ldrne.w	r3, [r3, #3380]	; 0xd34
 8000b12:	e7fe      	b.n	8000b12 <MemManage_Handler+0x16>

08000b14 <__stack_chk_fail>:
  __ASM volatile ("dsb 0xF":::"memory");
 8000b14:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000b18:	4905      	ldr	r1, [pc, #20]	; (8000b30 <__stack_chk_fail+0x1c>)
 8000b1a:	68ca      	ldr	r2, [r1, #12]
 8000b1c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <__stack_chk_fail+0x20>)
 8000b22:	4313      	orrs	r3, r2
 8000b24:	60cb      	str	r3, [r1, #12]
 8000b26:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000b2a:	bf00      	nop
 8000b2c:	e7fd      	b.n	8000b2a <__stack_chk_fail+0x16>
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00
 8000b34:	05fa0004 	.word	0x05fa0004

08000b38 <USBD_HandleEP0_Stall>:
/**
 * \brief Handle protocol stall on EP0
 *
 * Stalls EP0 and then restarts a new transfer including setting state to \ref IDLE.
 */
void USBD_HandleEP0_Stall() {
 8000b38:	b510      	push	{r4, lr}
	/* When we stall ep0 as protocol stall, we go back into idle state and start a new read */
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 8000b3a:	4c07      	ldr	r4, [pc, #28]	; (8000b58 <USBD_HandleEP0_Stall+0x20>)
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b40:	2101      	movs	r1, #1
 8000b42:	2080      	movs	r0, #128	; 0x80
 8000b44:	4798      	blx	r3
	device.EP0_State = IDLE;
 8000b46:	2301      	movs	r3, #1
 8000b48:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	device.Driver->EndpointReadStart(0,24);
 8000b4c:	6823      	ldr	r3, [r4, #0]
 8000b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b50:	2118      	movs	r1, #24
 8000b52:	2000      	movs	r0, #0
 8000b54:	4798      	blx	r3
}
 8000b56:	bd10      	pop	{r4, pc}
 8000b58:	2000123c 	.word	0x2000123c

08000b5c <USB_Device_ProcessControlRequest>:
 * \ref EVENT_USB_Device_ControlRequest function. There the user has the chance to complete
 * some custom request or override the handling of this function. If the user has handled the
 * request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
void USB_Device_ProcessControlRequest() {
 8000b5c:	b530      	push	{r4, r5, lr}
 8000b5e:	b083      	sub	sp, #12
	uint32_t length = 0,ret;
	uint16_t status = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8ad 3002 	strh.w	r3, [sp, #2]
	void *buffer;
	uint8_t Value;
	uint16_t Index;

	Value = USB_ControlRequest.wValue & 0x00FF;
 8000b66:	4ba1      	ldr	r3, [pc, #644]	; (8000dec <USB_Device_ProcessControlRequest+0x290>)
 8000b68:	885c      	ldrh	r4, [r3, #2]

	/* Handling of descriptors */
	EVENT_USB_Device_ControlRequest();
 8000b6a:	f7ff fcc7 	bl	80004fc <EVENT_USB_Device_ControlRequest>
	if (!device.IsSetupRecieved)
 8000b6e:	4ba0      	ldr	r3, [pc, #640]	; (8000df0 <USB_Device_ProcessControlRequest+0x294>)
 8000b70:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000b74:	f013 0f02 	tst.w	r3, #2
 8000b78:	d058      	beq.n	8000c2c <USB_Device_ProcessControlRequest+0xd0>
	Value = USB_ControlRequest.wValue & 0x00FF;
 8000b7a:	b2e4      	uxtb	r4, r4
		return;

	/* default request handling */
	switch (USB_ControlRequest.bRequest) {
 8000b7c:	4b9b      	ldr	r3, [pc, #620]	; (8000dec <USB_Device_ProcessControlRequest+0x290>)
 8000b7e:	785b      	ldrb	r3, [r3, #1]
 8000b80:	2b0c      	cmp	r3, #12
 8000b82:	f200 8174 	bhi.w	8000e6e <USB_Device_ProcessControlRequest+0x312>
 8000b86:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000b8a:	0089      	.short	0x0089
 8000b8c:	0172000d 	.word	0x0172000d
 8000b90:	01720117 	.word	0x01720117
 8000b94:	005300d8 	.word	0x005300d8
 8000b98:	004200fe 	.word	0x004200fe
 8000b9c:	007000e7 	.word	0x007000e7
 8000ba0:	016f0101 	.word	0x016f0101
	case REQ_ClearFeature:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 8000ba4:	4b91      	ldr	r3, [pc, #580]	; (8000dec <USB_Device_ProcessControlRequest+0x290>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d008      	beq.n	8000bc2 <USB_Device_ProcessControlRequest+0x66>
			} else {
				USBD_HandleEP0_Stall();
			}
			break;
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 8000bb0:	bb53      	cbnz	r3, 8000c08 <USB_Device_ProcessControlRequest+0xac>
			 device.RemoteWakeUp = 0;
 8000bb2:	4b8f      	ldr	r3, [pc, #572]	; (8000df0 <USB_Device_ProcessControlRequest+0x294>)
 8000bb4:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8000bb8:	f36f 0282 	bfc	r2, #2, #1
 8000bbc:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
			 break;
 8000bc0:	e02d      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
			Index = USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK;
 8000bc2:	4b8a      	ldr	r3, [pc, #552]	; (8000dec <USB_Device_ProcessControlRequest+0x290>)
 8000bc4:	8898      	ldrh	r0, [r3, #4]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 8000bc6:	4b8b      	ldr	r3, [pc, #556]	; (8000df4 <USB_Device_ProcessControlRequest+0x298>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	2b04      	cmp	r3, #4
 8000bce:	d000      	beq.n	8000bd2 <USB_Device_ProcessControlRequest+0x76>
 8000bd0:	b9b8      	cbnz	r0, 8000c02 <USB_Device_ProcessControlRequest+0xa6>
					device.Endpoints[Index].IsConfigured==1) {
 8000bd2:	f000 030f 	and.w	r3, r0, #15
 8000bd6:	4986      	ldr	r1, [pc, #536]	; (8000df0 <USB_Device_ProcessControlRequest+0x294>)
 8000bd8:	222c      	movs	r2, #44	; 0x2c
 8000bda:	fb02 1203 	mla	r2, r2, r3, r1
 8000bde:	7a12      	ldrb	r2, [r2, #8]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 8000be0:	f012 0f01 	tst.w	r2, #1
 8000be4:	d00d      	beq.n	8000c02 <USB_Device_ProcessControlRequest+0xa6>
				device.Endpoints[Index].IsHalted = 0;
 8000be6:	460a      	mov	r2, r1
 8000be8:	212c      	movs	r1, #44	; 0x2c
 8000bea:	fb01 2303 	mla	r3, r1, r3, r2
 8000bee:	7a19      	ldrb	r1, [r3, #8]
 8000bf0:	f36f 0182 	bfc	r1, #2, #1
 8000bf4:	7219      	strb	r1, [r3, #8]
				device.Driver->EndpointStall(USB_ControlRequest.wIndex,0);
 8000bf6:	6813      	ldr	r3, [r2, #0]
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	b2c0      	uxtb	r0, r0
 8000bfe:	4798      	blx	r3
 8000c00:	e00d      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
				USBD_HandleEP0_Stall();
 8000c02:	f7ff ff99 	bl	8000b38 <USBD_HandleEP0_Stall>
 8000c06:	e00a      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
		}
		USBD_HandleEP0_Stall();
 8000c08:	f7ff ff96 	bl	8000b38 <USBD_HandleEP0_Stall>
		break;
 8000c0c:	e007      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>

	case REQ_GetConfiguration:
		device.Driver->EndpointWrite(0,&device.Configuration,1);
 8000c0e:	497a      	ldr	r1, [pc, #488]	; (8000df8 <USB_Device_ProcessControlRequest+0x29c>)
 8000c10:	f2a1 1339 	subw	r3, r1, #313	; 0x139
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	4798      	blx	r3
		break;

	default:
		USBD_HandleEP0_Stall();
	}
	device.IsSetupRecieved = 0;
 8000c1e:	4a74      	ldr	r2, [pc, #464]	; (8000df0 <USB_Device_ProcessControlRequest+0x294>)
 8000c20:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000c24:	f36f 0341 	bfc	r3, #1, #1
 8000c28:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
}
 8000c2c:	b003      	add	sp, #12
 8000c2e:	bd30      	pop	{r4, r5, pc}
		length = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue,USB_ControlRequest.wIndex,(void*)&buffer);
 8000c30:	4b6e      	ldr	r3, [pc, #440]	; (8000dec <USB_Device_ProcessControlRequest+0x290>)
 8000c32:	8899      	ldrh	r1, [r3, #4]
 8000c34:	aa01      	add	r2, sp, #4
 8000c36:	b2c9      	uxtb	r1, r1
 8000c38:	8858      	ldrh	r0, [r3, #2]
 8000c3a:	f7ff fc6b 	bl	8000514 <CALLBACK_USB_GetDescriptor>
		if (length==0)
 8000c3e:	b188      	cbz	r0, 8000c64 <USB_Device_ProcessControlRequest+0x108>
			length = length < USB_ControlRequest.wLength ?
 8000c40:	4a6a      	ldr	r2, [pc, #424]	; (8000dec <USB_Device_ProcessControlRequest+0x290>)
 8000c42:	88d4      	ldrh	r4, [r2, #6]
 8000c44:	4284      	cmp	r4, r0
 8000c46:	bf28      	it	cs
 8000c48:	4604      	movcs	r4, r0
			ret = device.Driver->EndpointWrite(0,buffer,length);
 8000c4a:	4d69      	ldr	r5, [pc, #420]	; (8000df0 <USB_Device_ProcessControlRequest+0x294>)
 8000c4c:	682b      	ldr	r3, [r5, #0]
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	4622      	mov	r2, r4
 8000c52:	9901      	ldr	r1, [sp, #4]
 8000c54:	2000      	movs	r0, #0
 8000c56:	4798      	blx	r3
			device.Endpoints[0].InDataLeft = length - ret;
 8000c58:	1a24      	subs	r4, r4, r0
 8000c5a:	62ac      	str	r4, [r5, #40]	; 0x28
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
 8000c5c:	9b01      	ldr	r3, [sp, #4]
 8000c5e:	4403      	add	r3, r0
 8000c60:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000c62:	e7dc      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
			USBD_HandleEP0_Stall();
 8000c64:	f7ff ff68 	bl	8000b38 <USBD_HandleEP0_Stall>
 8000c68:	e7d9      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8000c6a:	4b62      	ldr	r3, [pc, #392]	; (8000df4 <USB_Device_ProcessControlRequest+0x298>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b04      	cmp	r3, #4
 8000c72:	d10b      	bne.n	8000c8c <USB_Device_ProcessControlRequest+0x130>
			device.Driver->EndpointWrite(0,&device.InterfaceSettings[USB_ControlRequest.wIndex],1);
 8000c74:	4b5d      	ldr	r3, [pc, #372]	; (8000dec <USB_Device_ProcessControlRequest+0x290>)
 8000c76:	889b      	ldrh	r3, [r3, #4]
 8000c78:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000c7c:	495c      	ldr	r1, [pc, #368]	; (8000df0 <USB_Device_ProcessControlRequest+0x294>)
 8000c7e:	680a      	ldr	r2, [r1, #0]
 8000c80:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8000c82:	2201      	movs	r2, #1
 8000c84:	4419      	add	r1, r3
 8000c86:	2000      	movs	r0, #0
 8000c88:	47a0      	blx	r4
			break;
 8000c8a:	e7c8      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8000c8c:	4b59      	ldr	r3, [pc, #356]	; (8000df4 <USB_Device_ProcessControlRequest+0x298>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d1c3      	bne.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
			USBD_HandleEP0_Stall();
 8000c96:	f7ff ff4f 	bl	8000b38 <USBD_HandleEP0_Stall>
			break;
 8000c9a:	e7c0      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 8000c9c:	4b53      	ldr	r3, [pc, #332]	; (8000dec <USB_Device_ProcessControlRequest+0x290>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	f013 0303 	ands.w	r3, r3, #3
 8000ca4:	d111      	bne.n	8000cca <USB_Device_ProcessControlRequest+0x16e>
			status = device.RemoteWakeUp << 1 | device.SelfPowered;
 8000ca6:	4a52      	ldr	r2, [pc, #328]	; (8000df0 <USB_Device_ProcessControlRequest+0x294>)
 8000ca8:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000cac:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8000cb0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000cb4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8000cb8:	a902      	add	r1, sp, #8
 8000cba:	f821 3d06 	strh.w	r3, [r1, #-6]!
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000cbe:	6813      	ldr	r3, [r2, #0]
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	4798      	blx	r3
			break;
 8000cc8:	e7a9      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_INTERFACE && USB_DeviceState == DEVICE_STATE_Configured) {
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d023      	beq.n	8000d16 <USB_Device_ProcessControlRequest+0x1ba>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d130      	bne.n	8000d34 <USB_Device_ProcessControlRequest+0x1d8>
			Index = USB_ControlRequest.wIndex & 0xFF & ENDPOINT_EPNUM_MASK;
 8000cd2:	4b46      	ldr	r3, [pc, #280]	; (8000dec <USB_Device_ProcessControlRequest+0x290>)
 8000cd4:	889b      	ldrh	r3, [r3, #4]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8000cd6:	4a47      	ldr	r2, [pc, #284]	; (8000df4 <USB_Device_ProcessControlRequest+0x298>)
 8000cd8:	7812      	ldrb	r2, [r2, #0]
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	2a04      	cmp	r2, #4
 8000cde:	d000      	beq.n	8000ce2 <USB_Device_ProcessControlRequest+0x186>
 8000ce0:	bb43      	cbnz	r3, 8000d34 <USB_Device_ProcessControlRequest+0x1d8>
					device.Endpoints[Index].IsConfigured==1) {
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	4942      	ldr	r1, [pc, #264]	; (8000df0 <USB_Device_ProcessControlRequest+0x294>)
 8000ce8:	222c      	movs	r2, #44	; 0x2c
 8000cea:	fb02 1203 	mla	r2, r2, r3, r1
 8000cee:	7a12      	ldrb	r2, [r2, #8]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8000cf0:	f012 0f01 	tst.w	r2, #1
 8000cf4:	d01e      	beq.n	8000d34 <USB_Device_ProcessControlRequest+0x1d8>
				status = device.Endpoints[Index].IsHalted;
 8000cf6:	460a      	mov	r2, r1
 8000cf8:	212c      	movs	r1, #44	; 0x2c
 8000cfa:	fb01 2303 	mla	r3, r1, r3, r2
 8000cfe:	7a1b      	ldrb	r3, [r3, #8]
 8000d00:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000d04:	a902      	add	r1, sp, #8
 8000d06:	f821 3d06 	strh.w	r3, [r1, #-6]!
				device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000d0a:	6813      	ldr	r3, [r2, #0]
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	2202      	movs	r2, #2
 8000d10:	2000      	movs	r0, #0
 8000d12:	4798      	blx	r3
				break;
 8000d14:	e783      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_INTERFACE && USB_DeviceState == DEVICE_STATE_Configured) {
 8000d16:	4b37      	ldr	r3, [pc, #220]	; (8000df4 <USB_Device_ProcessControlRequest+0x298>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d109      	bne.n	8000d34 <USB_Device_ProcessControlRequest+0x1d8>
			status = 0;
 8000d20:	2000      	movs	r0, #0
 8000d22:	a902      	add	r1, sp, #8
 8000d24:	f821 0d06 	strh.w	r0, [r1, #-6]!
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000d28:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <USB_Device_ProcessControlRequest+0x294>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	2202      	movs	r2, #2
 8000d30:	4798      	blx	r3
			break;
 8000d32:	e774      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
		USBD_HandleEP0_Stall();
 8000d34:	f7ff ff00 	bl	8000b38 <USBD_HandleEP0_Stall>
		break;
 8000d38:	e771      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
		if (Value == 0)
 8000d3a:	b94c      	cbnz	r4, 8000d50 <USB_Device_ProcessControlRequest+0x1f4>
			USB_DeviceState = DEVICE_STATE_Default;
 8000d3c:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <USB_Device_ProcessControlRequest+0x298>)
 8000d3e:	2202      	movs	r2, #2
 8000d40:	701a      	strb	r2, [r3, #0]
		device.Driver->DeviceSetAddress(Value,XMC_USBD_SET_ADDRESS_STAGE_SETUP);
 8000d42:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <USB_Device_ProcessControlRequest+0x294>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	4798      	blx	r3
		break;
 8000d4e:	e766      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
			USB_DeviceState = DEVICE_STATE_Addressed;
 8000d50:	4b28      	ldr	r3, [pc, #160]	; (8000df4 <USB_Device_ProcessControlRequest+0x298>)
 8000d52:	2203      	movs	r2, #3
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	e7f4      	b.n	8000d42 <USB_Device_ProcessControlRequest+0x1e6>
		device.Configuration = Value;
 8000d58:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <USB_Device_ProcessControlRequest+0x294>)
 8000d5a:	f883 4139 	strb.w	r4, [r3, #313]	; 0x139
		EVENT_USB_Device_ConfigurationChanged();
 8000d5e:	f7ff fba7 	bl	80004b0 <EVENT_USB_Device_ConfigurationChanged>
		if (Value == 0) {
 8000d62:	b91c      	cbnz	r4, 8000d6c <USB_Device_ProcessControlRequest+0x210>
			USB_DeviceState = DEVICE_STATE_Addressed;
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <USB_Device_ProcessControlRequest+0x298>)
 8000d66:	2203      	movs	r2, #3
 8000d68:	701a      	strb	r2, [r3, #0]
			break;
 8000d6a:	e758      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
		if (device.IsConfigured == 1)
 8000d6c:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <USB_Device_ProcessControlRequest+0x294>)
 8000d6e:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000d72:	f013 0f01 	tst.w	r3, #1
 8000d76:	d003      	beq.n	8000d80 <USB_Device_ProcessControlRequest+0x224>
			USB_DeviceState = DEVICE_STATE_Configured;
 8000d78:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <USB_Device_ProcessControlRequest+0x298>)
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	e74e      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
			USBD_HandleEP0_Stall();
 8000d80:	f7ff feda 	bl	8000b38 <USBD_HandleEP0_Stall>
 8000d84:	e74b      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
		USBD_HandleEP0_Stall();
 8000d86:	f7ff fed7 	bl	8000b38 <USBD_HandleEP0_Stall>
		break;
 8000d8a:	e748      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8000d8c:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <USB_Device_ProcessControlRequest+0x298>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d008      	beq.n	8000da8 <USB_Device_ProcessControlRequest+0x24c>
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <USB_Device_ProcessControlRequest+0x298>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	f47f af3e 	bne.w	8000c1e <USB_Device_ProcessControlRequest+0xc2>
			USBD_HandleEP0_Stall();
 8000da2:	f7ff fec9 	bl	8000b38 <USBD_HandleEP0_Stall>
			break;
 8000da6:	e73a      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
			device.InterfaceSettings[USB_ControlRequest.wIndex] = USB_ControlRequest.wValue;
 8000da8:	4a10      	ldr	r2, [pc, #64]	; (8000dec <USB_Device_ProcessControlRequest+0x290>)
 8000daa:	8891      	ldrh	r1, [r2, #4]
 8000dac:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <USB_Device_ProcessControlRequest+0x294>)
 8000dae:	440b      	add	r3, r1
 8000db0:	8852      	ldrh	r2, [r2, #2]
 8000db2:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
			break;
 8000db6:	e732      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
		if (Value == FEATURE_SEL_TestMode) {
 8000db8:	2c02      	cmp	r4, #2
 8000dba:	d013      	beq.n	8000de4 <USB_Device_ProcessControlRequest+0x288>
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <USB_Device_ProcessControlRequest+0x298>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	d01a      	beq.n	8000dfc <USB_Device_ProcessControlRequest+0x2a0>
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <USB_Device_ProcessControlRequest+0x298>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d106      	bne.n	8000dde <USB_Device_ProcessControlRequest+0x282>
			if (Value == FEATURE_SEL_EndpointHalt &&
 8000dd0:	b92c      	cbnz	r4, 8000dde <USB_Device_ProcessControlRequest+0x282>
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <USB_Device_ProcessControlRequest+0x290>)
			if (Value == FEATURE_SEL_EndpointHalt &&
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d037      	beq.n	8000e4e <USB_Device_ProcessControlRequest+0x2f2>
		USBD_HandleEP0_Stall();
 8000dde:	f7ff feab 	bl	8000b38 <USBD_HandleEP0_Stall>
		break;
 8000de2:	e71c      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
			USBD_HandleEP0_Stall();
 8000de4:	f7ff fea8 	bl	8000b38 <USBD_HandleEP0_Stall>
			break;
 8000de8:	e719      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
 8000dea:	bf00      	nop
 8000dec:	2000158c 	.word	0x2000158c
 8000df0:	2000123c 	.word	0x2000123c
 8000df4:	20001589 	.word	0x20001589
 8000df8:	20001375 	.word	0x20001375
			switch (Value) {
 8000dfc:	b154      	cbz	r4, 8000e14 <USB_Device_ProcessControlRequest+0x2b8>
 8000dfe:	2c01      	cmp	r4, #1
 8000e00:	f47f af0d 	bne.w	8000c1e <USB_Device_ProcessControlRequest+0xc2>
				device.RemoteWakeUp = 1;
 8000e04:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <USB_Device_ProcessControlRequest+0x318>)
 8000e06:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				break;
 8000e12:	e704      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
				Index = USB_ControlRequest.wIndex & 0xFF & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <USB_Device_ProcessControlRequest+0x31c>)
 8000e16:	8898      	ldrh	r0, [r3, #4]
				if (device.Endpoints[Index].IsConfigured == 0)
 8000e18:	f000 030f 	and.w	r3, r0, #15
 8000e1c:	4915      	ldr	r1, [pc, #84]	; (8000e74 <USB_Device_ProcessControlRequest+0x318>)
 8000e1e:	222c      	movs	r2, #44	; 0x2c
 8000e20:	fb02 1203 	mla	r2, r2, r3, r1
 8000e24:	7a12      	ldrb	r2, [r2, #8]
 8000e26:	f012 0f01 	tst.w	r2, #1
 8000e2a:	d00d      	beq.n	8000e48 <USB_Device_ProcessControlRequest+0x2ec>
					device.Endpoints[Index].IsHalted = 1;
 8000e2c:	4911      	ldr	r1, [pc, #68]	; (8000e74 <USB_Device_ProcessControlRequest+0x318>)
 8000e2e:	222c      	movs	r2, #44	; 0x2c
 8000e30:	fb02 1303 	mla	r3, r2, r3, r1
 8000e34:	7a1a      	ldrb	r2, [r3, #8]
 8000e36:	f042 0204 	orr.w	r2, r2, #4
 8000e3a:	721a      	strb	r2, [r3, #8]
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
 8000e3c:	680b      	ldr	r3, [r1, #0]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	2101      	movs	r1, #1
 8000e42:	b2c0      	uxtb	r0, r0
 8000e44:	4798      	blx	r3
 8000e46:	e6ea      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
					USBD_HandleEP0_Stall();
 8000e48:	f7ff fe76 	bl	8000b38 <USBD_HandleEP0_Stall>
 8000e4c:	e6e7      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
					(USB_ControlRequest.wIndex & 0x00FF) == 0x0) {
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <USB_Device_ProcessControlRequest+0x31c>)
 8000e50:	889b      	ldrh	r3, [r3, #4]
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1c2      	bne.n	8000dde <USB_Device_ProcessControlRequest+0x282>
				device.Endpoints[0].IsHalted = 1;
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <USB_Device_ProcessControlRequest+0x318>)
 8000e5a:	7a13      	ldrb	r3, [r2, #8]
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	7213      	strb	r3, [r2, #8]
				USBD_HandleEP0_Stall();
 8000e62:	f7ff fe69 	bl	8000b38 <USBD_HandleEP0_Stall>
				break;
 8000e66:	e6da      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
		USBD_HandleEP0_Stall();
 8000e68:	f7ff fe66 	bl	8000b38 <USBD_HandleEP0_Stall>
		break;
 8000e6c:	e6d7      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
		USBD_HandleEP0_Stall();
 8000e6e:	f7ff fe63 	bl	8000b38 <USBD_HandleEP0_Stall>
 8000e72:	e6d4      	b.n	8000c1e <USB_Device_ProcessControlRequest+0xc2>
 8000e74:	2000123c 	.word	0x2000123c
 8000e78:	2000158c 	.word	0x2000158c

08000e7c <USBD_HandleEP0_IN>:
 * \brief Handle complete IN transfer on EP0
 *
 * In \ref IN_DATA state it starts a receive and switches to \ref OUT_STATUS state.
 * In \ref IN_STATUS state its starts a new read of setup packets and switches to \ref IDLE.
 */
void USBD_HandleEP0_IN() {
 8000e7c:	b510      	push	{r4, lr}
	if (device.EP0_State == IN_DATA) {
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <USBD_HandleEP0_IN+0x38>)
 8000e80:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d109      	bne.n	8000e9c <USBD_HandleEP0_IN+0x20>
		/* Read zero length out data packet */
		device.Driver->EndpointReadStart(0,0);
 8000e88:	4c0a      	ldr	r4, [pc, #40]	; (8000eb4 <USBD_HandleEP0_IN+0x38>)
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4608      	mov	r0, r1
 8000e92:	4798      	blx	r3
		device.EP0_State = OUT_STATUS;
 8000e94:	2305      	movs	r3, #5
 8000e96:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
 8000e9a:	e00a      	b.n	8000eb2 <USBD_HandleEP0_IN+0x36>
	}
	if (device.EP0_State == IN_STATUS) {
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d108      	bne.n	8000eb2 <USBD_HandleEP0_IN+0x36>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8000ea0:	4c04      	ldr	r4, [pc, #16]	; (8000eb4 <USBD_HandleEP0_IN+0x38>)
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea6:	2118      	movs	r1, #24
 8000ea8:	7920      	ldrb	r0, [r4, #4]
 8000eaa:	4798      	blx	r3
		device.EP0_State = IDLE;
 8000eac:	2301      	movs	r3, #1
 8000eae:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	}
}
 8000eb2:	bd10      	pop	{r4, pc}
 8000eb4:	2000123c 	.word	0x2000123c

08000eb8 <USBD_HandleEP0_OUT>:
 * \brief Handle complete OUT transfer on EP0
 *
 * Handles the OUT packet based on the state of endpoint 0. Starts a new read for new SETUP packets, when in \ref OUT_STATUS.
 * When endpoint 0 is in \ref OUT_DATA state, it handles the received data and starts a write transaction for \ref IN_STATUS.
 */
void USBD_HandleEP0_OUT() {
 8000eb8:	b510      	push	{r4, lr}
	if (device.EP0_State == OUT_DATA) {
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <USBD_HandleEP0_OUT+0x40>)
 8000ebc:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d00b      	beq.n	8000edc <USBD_HandleEP0_OUT+0x24>
		USB_Device_ProcessControlRequest();
		/* Zero length packet for status stage */
		device.Driver->EndpointWrite(ENDPOINT_DIR_MASK & 0,0,0);
		device.EP0_State = IN_STATUS;
	}
	if (device.EP0_State == OUT_STATUS) {
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	d108      	bne.n	8000eda <USBD_HandleEP0_OUT+0x22>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8000ec8:	4c0b      	ldr	r4, [pc, #44]	; (8000ef8 <USBD_HandleEP0_OUT+0x40>)
 8000eca:	6823      	ldr	r3, [r4, #0]
 8000ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ece:	2118      	movs	r1, #24
 8000ed0:	7920      	ldrb	r0, [r4, #4]
 8000ed2:	4798      	blx	r3
		device.EP0_State = IDLE;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	}
}
 8000eda:	bd10      	pop	{r4, pc}
		USB_Device_ProcessControlRequest();
 8000edc:	f7ff fe3e 	bl	8000b5c <USB_Device_ProcessControlRequest>
		device.Driver->EndpointWrite(ENDPOINT_DIR_MASK & 0,0,0);
 8000ee0:	4c05      	ldr	r4, [pc, #20]	; (8000ef8 <USBD_HandleEP0_OUT+0x40>)
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4610      	mov	r0, r2
 8000eec:	4798      	blx	r3
		device.EP0_State = IN_STATUS;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
 8000ef4:	e7f1      	b.n	8000eda <USBD_HandleEP0_OUT+0x22>
 8000ef6:	bf00      	nop
 8000ef8:	2000123c 	.word	0x2000123c

08000efc <USBD_HandleEP0_SETUP>:
 * Handles the setup package an switches to correct state. If data is send from host to device it switches into \ref OUT_DATA state.
 * When the hosts sends all data within the setup package and \ref wLength equals zero, starts processing the request and sends a
 * in status reponse including the switch to \ref IN_STATUS.
 * When the host expects data from the device, the function processes the control request and switches to \ref IN_DATA state.
 */
void USBD_HandleEP0_SETUP() {
 8000efc:	b510      	push	{r4, lr}
	/* read setup package from ep0 */
	int32_t ret_val = device.Driver->EndpointRead(0,(void*)&USB_ControlRequest,8);
 8000efe:	4c1a      	ldr	r4, [pc, #104]	; (8000f68 <USBD_HandleEP0_SETUP+0x6c>)
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	2208      	movs	r2, #8
 8000f06:	4919      	ldr	r1, [pc, #100]	; (8000f6c <USBD_HandleEP0_SETUP+0x70>)
 8000f08:	2000      	movs	r0, #0
 8000f0a:	4798      	blx	r3
#if NO_COPY_DRIVER
	MEMCPY(&USB_ControlRequest,device.Endpoints[0].OutBuffer,sizeof(USB_ControlRequest));
#endif
	device.IsSetupRecieved = true;
 8000f0c:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
	if (ret_val != 8 )
 8000f18:	2808      	cmp	r0, #8
 8000f1a:	d000      	beq.n	8000f1e <USBD_HandleEP0_SETUP+0x22>
			device.EP0_State = OUT_DATA;
			/* Do not process request here, first read data */
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
		}
	}
}
 8000f1c:	bd10      	pop	{r4, pc}
	if (USB_ControlRequest.wLength==0) {
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <USBD_HandleEP0_SETUP+0x70>)
 8000f20:	88d9      	ldrh	r1, [r3, #6]
 8000f22:	b169      	cbz	r1, 8000f40 <USBD_HandleEP0_SETUP+0x44>
		if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) {
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <USBD_HandleEP0_SETUP+0x70>)
 8000f26:	f993 3000 	ldrsb.w	r3, [r3]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db14      	blt.n	8000f58 <USBD_HandleEP0_SETUP+0x5c>
			device.EP0_State = OUT_DATA;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <USBD_HandleEP0_SETUP+0x6c>)
 8000f30:	2204      	movs	r2, #4
 8000f32:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	4798      	blx	r3
 8000f3e:	e7ed      	b.n	8000f1c <USBD_HandleEP0_SETUP+0x20>
		device.EP0_State = IN_STATUS;
 8000f40:	2303      	movs	r3, #3
 8000f42:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
		USB_Device_ProcessControlRequest();
 8000f46:	f7ff fe09 	bl	8000b5c <USB_Device_ProcessControlRequest>
		device.Driver->EndpointWrite(0,0,0);
 8000f4a:	6823      	ldr	r3, [r4, #0]
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4611      	mov	r1, r2
 8000f52:	4610      	mov	r0, r2
 8000f54:	4798      	blx	r3
 8000f56:	e7e1      	b.n	8000f1c <USBD_HandleEP0_SETUP+0x20>
			device.EP0_State = IN_DATA;
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <USBD_HandleEP0_SETUP+0x6c>)
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			USB_Device_ProcessControlRequest();
 8000f60:	f7ff fdfc 	bl	8000b5c <USB_Device_ProcessControlRequest>
 8000f64:	e7da      	b.n	8000f1c <USBD_HandleEP0_SETUP+0x20>
 8000f66:	bf00      	nop
 8000f68:	2000123c 	.word	0x2000123c
 8000f6c:	2000158c 	.word	0x2000158c

08000f70 <USBD_SignalDeviceEventHandler>:
 * The device can have several events, where it notifies the application about.
 *
 * \note Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 * \see USB_USBD_EVENT
 */
void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event) {
 8000f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;
	switch (event) {
 8000f74:	2809      	cmp	r0, #9
 8000f76:	d847      	bhi.n	8001008 <USBD_SignalDeviceEventHandler+0x98>
 8000f78:	e8df f000 	tbb	[pc, r0]
 8000f7c:	4e4b545c 	.word	0x4e4b545c
 8000f80:	7e864605 	.word	0x7e864605
 8000f84:	4846      	.short	0x4846
	case XMC_USBD_EVENT_RESET:
		USB_DeviceState = DEVICE_STATE_Default;
 8000f86:	4b45      	ldr	r3, [pc, #276]	; (800109c <USBD_SignalDeviceEventHandler+0x12c>)
 8000f88:	2202      	movs	r2, #2
 8000f8a:	701a      	strb	r2, [r3, #0]
		device.EP0_State = IDLE;
 8000f8c:	4b44      	ldr	r3, [pc, #272]	; (80010a0 <USBD_SignalDeviceEventHandler+0x130>)
 8000f8e:	2701      	movs	r7, #1
 8000f90:	f883 713b 	strb.w	r7, [r3, #315]	; 0x13b
		device.RemoteWakeUp = 0;
 8000f94:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8000f98:	f36f 0282 	bfc	r2, #2, #1
 8000f9c:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
 8000fa0:	2400      	movs	r4, #0
		/* Reset endpoints and configuration */
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
			device.Endpoints[i].InInUse = 0;
 8000fa2:	461e      	mov	r6, r3
 8000fa4:	f04f 082c 	mov.w	r8, #44	; 0x2c
 8000fa8:	e001      	b.n	8000fae <USBD_SignalDeviceEventHandler+0x3e>
 8000faa:	3401      	adds	r4, #1
 8000fac:	3701      	adds	r7, #1
 8000fae:	fb08 6304 	mla	r3, r8, r4, r6
 8000fb2:	891a      	ldrh	r2, [r3, #8]
 8000fb4:	f36f 1204 	bfc	r2, #4, #1
 8000fb8:	811a      	strh	r2, [r3, #8]
			device.Endpoints[i].OutInUse = 0;
 8000fba:	891a      	ldrh	r2, [r3, #8]
 8000fbc:	f36f 02c3 	bfc	r2, #3, #1
 8000fc0:	811a      	strh	r2, [r3, #8]
			device.Endpoints[i].IsHalted = 0;
 8000fc2:	7a1a      	ldrb	r2, [r3, #8]
 8000fc4:	f36f 0282 	bfc	r2, #2, #1
 8000fc8:	721a      	strb	r2, [r3, #8]
			if (i!=0 && device.Endpoints[i].IsConfigured) {
 8000fca:	2c00      	cmp	r4, #0
 8000fcc:	d0ed      	beq.n	8000faa <USBD_SignalDeviceEventHandler+0x3a>
 8000fce:	b2d3      	uxtb	r3, r2
 8000fd0:	f013 0f01 	tst.w	r3, #1
 8000fd4:	d00b      	beq.n	8000fee <USBD_SignalDeviceEventHandler+0x7e>
				device.Driver->EndpointUnconfigure(device.Endpoints[i].Address);
 8000fd6:	fb08 6504 	mla	r5, r8, r4, r6
 8000fda:	6833      	ldr	r3, [r6, #0]
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	7928      	ldrb	r0, [r5, #4]
 8000fe0:	4798      	blx	r3
				device.Endpoints[i].IsConfigured = 0;
 8000fe2:	7a2b      	ldrb	r3, [r5, #8]
				device.Endpoints[i].IsEnabled = 0;
 8000fe4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8000fe8:	f36f 0341 	bfc	r3, #1, #1
 8000fec:	722b      	strb	r3, [r5, #8]
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 8000fee:	2f06      	cmp	r7, #6
 8000ff0:	dddb      	ble.n	8000faa <USBD_SignalDeviceEventHandler+0x3a>
			}
		}
		device.Configuration = 0;
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <USBD_SignalDeviceEventHandler+0x130>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
		for (i=0;i<NUM_INTERFACES;i++) {
			device.InterfaceSettings[i] = 0;
 8000ffa:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
		}
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001002:	2118      	movs	r1, #24
 8001004:	7918      	ldrb	r0, [r3, #4]
 8001006:	4790      	blx	r2
		EVENT_USB_Device_Suspend();
		break;
	default:
		return;
	}
}
 8001008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		EVENT_USB_Device_StartOfFrame();
 800100c:	f7ff fa7e 	bl	800050c <EVENT_USB_Device_StartOfFrame>
		break;
 8001010:	e7fa      	b.n	8001008 <USBD_SignalDeviceEventHandler+0x98>
		EVENT_USB_Device_Connect();
 8001012:	f7ff fa37 	bl	8000484 <EVENT_USB_Device_Connect>
		break;
 8001016:	e7f7      	b.n	8001008 <USBD_SignalDeviceEventHandler+0x98>
		USB_DeviceState = DEVICE_STATE_Powered;
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <USBD_SignalDeviceEventHandler+0x12c>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Disconnect();
 800101e:	f7ff fa32 	bl	8000486 <EVENT_USB_Device_Disconnect>
		break;
 8001022:	e7f1      	b.n	8001008 <USBD_SignalDeviceEventHandler+0x98>
		 USB_DeviceState = DEVICE_STATE_Unattached;
 8001024:	2000      	movs	r0, #0
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <USBD_SignalDeviceEventHandler+0x12c>)
 8001028:	7018      	strb	r0, [r3, #0]
		 device.Driver->EndpointUnconfigure(0);
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <USBD_SignalDeviceEventHandler+0x130>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	4798      	blx	r3
		 break;
 8001032:	e7e9      	b.n	8001008 <USBD_SignalDeviceEventHandler+0x98>
		 USB_DeviceState = DEVICE_STATE_Powered;
 8001034:	2501      	movs	r5, #1
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <USBD_SignalDeviceEventHandler+0x12c>)
 8001038:	701d      	strb	r5, [r3, #0]
		 memset(&device,0x0,sizeof(USB_Device_t));
 800103a:	4c19      	ldr	r4, [pc, #100]	; (80010a0 <USBD_SignalDeviceEventHandler+0x130>)
 800103c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001040:	2100      	movs	r1, #0
 8001042:	4620      	mov	r0, r4
 8001044:	f009 fdd0 	bl	800abe8 <memset>
		 device.Driver = &Driver_USBD0;
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <USBD_SignalDeviceEventHandler+0x134>)
 800104a:	6023      	str	r3, [r4, #0]
		 device.EP0_State = IDLE;
 800104c:	f884 513b 	strb.w	r5, [r4, #315]	; 0x13b
		 device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8001050:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <USBD_SignalDeviceEventHandler+0x138>)
 8001052:	6222      	str	r2, [r4, #32]
		 device.Endpoints[0].InBufferLength = 256;
 8001054:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001058:	6262      	str	r2, [r4, #36]	; 0x24
		 device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 800105a:	4914      	ldr	r1, [pc, #80]	; (80010ac <USBD_SignalDeviceEventHandler+0x13c>)
 800105c:	6161      	str	r1, [r4, #20]
		 device.Endpoints[0].OutBufferLength = 256;
 800105e:	61a2      	str	r2, [r4, #24]
		 device.Endpoints[0].IsEnabled = 1;
 8001060:	2203      	movs	r2, #3
 8001062:	7222      	strb	r2, [r4, #8]
		 device.Endpoints[0].MaxPacketSize = 64;
 8001064:	8921      	ldrh	r1, [r4, #8]
 8001066:	2240      	movs	r2, #64	; 0x40
 8001068:	f362 118c 	bfi	r1, r2, #6, #7
 800106c:	8121      	strh	r1, [r4, #8]
		 device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	2100      	movs	r1, #0
 8001072:	4608      	mov	r0, r1
 8001074:	4798      	blx	r3
		break;
 8001076:	e7c7      	b.n	8001008 <USBD_SignalDeviceEventHandler+0x98>
		USB_DeviceState = device.PreSuspendDeviceState;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <USBD_SignalDeviceEventHandler+0x130>)
 800107a:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <USBD_SignalDeviceEventHandler+0x12c>)
 8001080:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_WakeUp();
 8001082:	f7ff fa44 	bl	800050e <EVENT_USB_Device_WakeUp>
		break;
 8001086:	e7bf      	b.n	8001008 <USBD_SignalDeviceEventHandler+0x98>
		device.PreSuspendDeviceState = USB_DeviceState;
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <USBD_SignalDeviceEventHandler+0x12c>)
 800108a:	7819      	ldrb	r1, [r3, #0]
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <USBD_SignalDeviceEventHandler+0x130>)
 800108e:	f882 113a 	strb.w	r1, [r2, #314]	; 0x13a
		USB_DeviceState = DEVICE_STATE_Suspended;
 8001092:	2205      	movs	r2, #5
 8001094:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Suspend();
 8001096:	f7ff fa3b 	bl	8000510 <EVENT_USB_Device_Suspend>
		break;
 800109a:	e7b5      	b.n	8001008 <USBD_SignalDeviceEventHandler+0x98>
 800109c:	20001589 	.word	0x20001589
 80010a0:	2000123c 	.word	0x2000123c
 80010a4:	0800de60 	.word	0x0800de60
 80010a8:	2000103c 	.word	0x2000103c
 80010ac:	2000113c 	.word	0x2000113c

080010b0 <USBD_SignalEndpointEvent_Handler>:
 *
 * \param[in] ep_addr Endpoint address
 * \param[in] ep_event Endpoint event type
 *
 */
void USBD_SignalEndpointEvent_Handler (uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event) {
 80010b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b2:	f000 040f 	and.w	r4, r0, #15
	USBD_Endpoint_t *ep =  &device.Endpoints[ep_addr & ENDPOINT_EPNUM_MASK];
	uint8_t temp_num,temp_dir;
	int32_t data_count;
	/* store CurrentEndpoint and direction for restore after handling */
	temp_num = device.CurrentEndpoint;
 80010b6:	4b4a      	ldr	r3, [pc, #296]	; (80011e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 80010b8:	f893 613c 	ldrb.w	r6, [r3, #316]	; 0x13c
	temp_dir = device.CurrentDirection;
 80010bc:	f893 513d 	ldrb.w	r5, [r3, #317]	; 0x13d
	/* select the given endpoint */
	device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 80010c0:	f883 413c 	strb.w	r4, [r3, #316]	; 0x13c
	device.CurrentDirection = ep_addr & ENDPOINT_DIR_MASK;
 80010c4:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 80010c8:	f883 013d 	strb.w	r0, [r3, #317]	; 0x13d
	/* choose what to do based on the event */
	switch (ep_event) {
 80010cc:	2901      	cmp	r1, #1
 80010ce:	d015      	beq.n	80010fc <USBD_SignalEndpointEvent_Handler+0x4c>
 80010d0:	b139      	cbz	r1, 80010e2 <USBD_SignalEndpointEvent_Handler+0x32>
 80010d2:	2902      	cmp	r1, #2
 80010d4:	d038      	beq.n	8001148 <USBD_SignalEndpointEvent_Handler+0x98>
		default:
			break;
		}
		break;
	}
	device.CurrentEndpoint = temp_num;
 80010d6:	4b42      	ldr	r3, [pc, #264]	; (80011e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 80010d8:	f883 613c 	strb.w	r6, [r3, #316]	; 0x13c
	device.CurrentDirection = temp_dir;
 80010dc:	f883 513d 	strb.w	r5, [r3, #317]	; 0x13d
}
 80010e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ep->OutInUse = 0;
 80010e2:	4a3f      	ldr	r2, [pc, #252]	; (80011e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 80010e4:	232c      	movs	r3, #44	; 0x2c
 80010e6:	fb03 2304 	mla	r3, r3, r4, r2
 80010ea:	891a      	ldrh	r2, [r3, #8]
 80010ec:	f36f 02c3 	bfc	r2, #3, #1
 80010f0:	811a      	strh	r2, [r3, #8]
		switch(device.CurrentEndpoint) {
 80010f2:	2c00      	cmp	r4, #0
 80010f4:	d1ef      	bne.n	80010d6 <USBD_SignalEndpointEvent_Handler+0x26>
			USBD_HandleEP0_SETUP();
 80010f6:	f7ff ff01 	bl	8000efc <USBD_HandleEP0_SETUP>
			break;
 80010fa:	e7ec      	b.n	80010d6 <USBD_SignalEndpointEvent_Handler+0x26>
		ep->IsOutRecieved = 1;
 80010fc:	4a38      	ldr	r2, [pc, #224]	; (80011e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 80010fe:	232c      	movs	r3, #44	; 0x2c
 8001100:	fb03 2304 	mla	r3, r3, r4, r2
 8001104:	891a      	ldrh	r2, [r3, #8]
 8001106:	f042 0220 	orr.w	r2, r2, #32
 800110a:	811a      	strh	r2, [r3, #8]
		if (ep->OutBytesAvailable == 0) {
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	b963      	cbnz	r3, 800112a <USBD_SignalEndpointEvent_Handler+0x7a>
			ep->OutOffset = 0; /* clear offset, new data is there */
 8001110:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 8001112:	272c      	movs	r7, #44	; 0x2c
 8001114:	fb07 3704 	mla	r7, r7, r4, r3
 8001118:	2200      	movs	r2, #0
 800111a:	613a      	str	r2, [r7, #16]
			ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	6979      	ldr	r1, [r7, #20]
 8001124:	7938      	ldrb	r0, [r7, #4]
 8001126:	4798      	blx	r3
 8001128:	60f8      	str	r0, [r7, #12]
		ep->OutInUse = 0;
 800112a:	4a2d      	ldr	r2, [pc, #180]	; (80011e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 800112c:	232c      	movs	r3, #44	; 0x2c
 800112e:	fb03 2404 	mla	r4, r3, r4, r2
 8001132:	8923      	ldrh	r3, [r4, #8]
 8001134:	f36f 03c3 	bfc	r3, #3, #1
 8001138:	8123      	strh	r3, [r4, #8]
		switch(device.CurrentEndpoint) {
 800113a:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1c9      	bne.n	80010d6 <USBD_SignalEndpointEvent_Handler+0x26>
			USBD_HandleEP0_OUT();
 8001142:	f7ff feb9 	bl	8000eb8 <USBD_HandleEP0_OUT>
			break;
 8001146:	e7c6      	b.n	80010d6 <USBD_SignalEndpointEvent_Handler+0x26>
		if (ep->InDataLeft> 0) {
 8001148:	4a25      	ldr	r2, [pc, #148]	; (80011e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 800114a:	232c      	movs	r3, #44	; 0x2c
 800114c:	fb03 2304 	mla	r3, r3, r4, r2
 8001150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001152:	b17a      	cbz	r2, 8001174 <USBD_SignalEndpointEvent_Handler+0xc4>
			data_count = device.Driver->EndpointWrite(ep->Address,ep->InDataBuffer,ep->InDataLeft);
 8001154:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 8001156:	212c      	movs	r1, #44	; 0x2c
 8001158:	fb01 3404 	mla	r4, r1, r4, r3
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001162:	7920      	ldrb	r0, [r4, #4]
 8001164:	4798      	blx	r3
			ep->InDataLeft -= data_count;
 8001166:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001168:	1a12      	subs	r2, r2, r0
 800116a:	62a2      	str	r2, [r4, #40]	; 0x28
			ep->InDataBuffer+= data_count;
 800116c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800116e:	4403      	add	r3, r0
 8001170:	62e3      	str	r3, [r4, #44]	; 0x2c
			return;
 8001172:	e7b5      	b.n	80010e0 <USBD_SignalEndpointEvent_Handler+0x30>
		} else if (ep->Number == 0 && ep->InBytesAvailable > 0 && ep->InBytesAvailable!=USB_ControlRequest.wLength && ep->InBytesAvailable % ep->MaxPacketSize == 0) {
 8001174:	4a1a      	ldr	r2, [pc, #104]	; (80011e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 8001176:	232c      	movs	r3, #44	; 0x2c
 8001178:	fb03 2304 	mla	r3, r3, r4, r2
 800117c:	7918      	ldrb	r0, [r3, #4]
 800117e:	f010 0f0f 	tst.w	r0, #15
 8001182:	d11a      	bne.n	80011ba <USBD_SignalEndpointEvent_Handler+0x10a>
 8001184:	232c      	movs	r3, #44	; 0x2c
 8001186:	fb03 2304 	mla	r3, r3, r4, r2
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	b1ab      	cbz	r3, 80011ba <USBD_SignalEndpointEvent_Handler+0x10a>
 800118e:	4a15      	ldr	r2, [pc, #84]	; (80011e4 <USBD_SignalEndpointEvent_Handler+0x134>)
 8001190:	88d2      	ldrh	r2, [r2, #6]
 8001192:	4293      	cmp	r3, r2
 8001194:	d011      	beq.n	80011ba <USBD_SignalEndpointEvent_Handler+0x10a>
 8001196:	4912      	ldr	r1, [pc, #72]	; (80011e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 8001198:	222c      	movs	r2, #44	; 0x2c
 800119a:	fb02 1204 	mla	r2, r2, r4, r1
 800119e:	8912      	ldrh	r2, [r2, #8]
 80011a0:	f3c2 1286 	ubfx	r2, r2, #6, #7
 80011a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80011a8:	fb02 3311 	mls	r3, r2, r1, r3
 80011ac:	b92b      	cbnz	r3, 80011ba <USBD_SignalEndpointEvent_Handler+0x10a>
			device.Driver->EndpointWrite(ep->Address,0,0);
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	2200      	movs	r2, #0
 80011b6:	4611      	mov	r1, r2
 80011b8:	4798      	blx	r3
		ep->InBytesAvailable = 0;
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <USBD_SignalEndpointEvent_Handler+0x130>)
 80011bc:	222c      	movs	r2, #44	; 0x2c
 80011be:	fb02 3404 	mla	r4, r2, r4, r3
 80011c2:	2100      	movs	r1, #0
 80011c4:	61e1      	str	r1, [r4, #28]
		ep->InInUse = 0;
 80011c6:	8922      	ldrh	r2, [r4, #8]
 80011c8:	f361 1204 	bfi	r2, r1, #4, #1
 80011cc:	8122      	strh	r2, [r4, #8]
		switch(device.CurrentEndpoint) {
 80011ce:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f47f af7f 	bne.w	80010d6 <USBD_SignalEndpointEvent_Handler+0x26>
			USBD_HandleEP0_IN();
 80011d8:	f7ff fe50 	bl	8000e7c <USBD_HandleEP0_IN>
			break;
 80011dc:	e77b      	b.n	80010d6 <USBD_SignalEndpointEvent_Handler+0x26>
 80011de:	bf00      	nop
 80011e0:	2000123c 	.word	0x2000123c
 80011e4:	2000158c 	.word	0x2000158c

080011e8 <USBD_Initialize>:
 * \brief Initialize driver core and driver
 *
 * Intializes the USB driver core data structures and sets it into default state. Afterwards
 * it initializes the USB device controller driver and prepare it for connection via \ref USBD_Connect.
 */
int USBD_Initialize(XMC_USBD_t *usb_init) {
 80011e8:	b538      	push	{r3, r4, r5, lr}
 80011ea:	4605      	mov	r5, r0
	int32_t status = 0;
	memset(&device,0x0,sizeof(USB_Device_t));
 80011ec:	4c16      	ldr	r4, [pc, #88]	; (8001248 <USBD_Initialize+0x60>)
 80011ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011f2:	2100      	movs	r1, #0
 80011f4:	4620      	mov	r0, r4
 80011f6:	f009 fcf7 	bl	800abe8 <memset>
	USB_DeviceState = DEVICE_STATE_Unattached;
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <USBD_Initialize+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
	device.Driver = &Driver_USBD0;
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <USBD_Initialize+0x68>)
 8001202:	6023      	str	r3, [r4, #0]
	device.EP0_State = IDLE;
 8001204:	2201      	movs	r2, #1
 8001206:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <USBD_Initialize+0x6c>)
 800120c:	6222      	str	r2, [r4, #32]
	device.Endpoints[0].InBufferLength = 256;
 800120e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001212:	6262      	str	r2, [r4, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8001214:	4910      	ldr	r1, [pc, #64]	; (8001258 <USBD_Initialize+0x70>)
 8001216:	6161      	str	r1, [r4, #20]
	device.Endpoints[0].OutBufferLength = 256;
 8001218:	61a2      	str	r2, [r4, #24]
	device.Endpoints[0].Direction = 0;
	device.Endpoints[0].IsConfigured = 1;
	device.Endpoints[0].IsEnabled = 1;
 800121a:	2203      	movs	r2, #3
 800121c:	7222      	strb	r2, [r4, #8]
	device.Endpoints[0].MaxPacketSize = 64;
 800121e:	8922      	ldrh	r2, [r4, #8]
 8001220:	2140      	movs	r1, #64	; 0x40
 8001222:	f361 128c 	bfi	r2, r1, #6, #7
 8001226:	8122      	strh	r2, [r4, #8]

	/* First initalize the device */
	status = device.Driver->Initialize(usb_init);
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	4628      	mov	r0, r5
 800122c:	4798      	blx	r3
	if (status != XMC_USBD_STATUS_OK)
 800122e:	b938      	cbnz	r0, 8001240 <USBD_Initialize+0x58>
		return -1;

	/* then configure endpoint 0 */
	device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8001230:	6823      	ldr	r3, [r4, #0]
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	2240      	movs	r2, #64	; 0x40
 8001236:	2100      	movs	r1, #0
 8001238:	4608      	mov	r0, r1
 800123a:	4798      	blx	r3
	if (status != XMC_USBD_STATUS_OK) {
		device.Driver->Uninitialize();
		return -1;
	}

	return 0;
 800123c:	2000      	movs	r0, #0
}
 800123e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 8001240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001244:	e7fb      	b.n	800123e <USBD_Initialize+0x56>
 8001246:	bf00      	nop
 8001248:	2000123c 	.word	0x2000123c
 800124c:	20001589 	.word	0x20001589
 8001250:	0800de60 	.word	0x0800de60
 8001254:	2000103c 	.word	0x2000103c
 8001258:	2000113c 	.word	0x2000113c

0800125c <USB_IsEnumDone>:
/**
 * \brief Is the enumeration finished?
 *
 * Tell the USB device controller driver if the enumeration interrupt have been reached
 */
int USB_IsEnumDone(void){
 800125c:	b508      	push	{r3, lr}
	if (device.Driver->IsEnumDone())
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <USB_IsEnumDone+0x14>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001264:	4798      	blx	r3
		return 1;
	else
		return 0;
 }
 8001266:	3000      	adds	r0, #0
 8001268:	bf18      	it	ne
 800126a:	2001      	movne	r0, #1
 800126c:	bd08      	pop	{r3, pc}
 800126e:	bf00      	nop
 8001270:	2000123c 	.word	0x2000123c

08001274 <USBD_SetEndpointBuffer>:
 *
 * \param[in] addr Endpoint address
 * \param[in] buf Buffer pointer
 * \param[in] len Buffer length
 */
void USBD_SetEndpointBuffer(uint8_t addr,uint8_t *buf,uint16_t len) {
 8001274:	b410      	push	{r4}
	uint8_t number  = addr & ENDPOINT_EPNUM_MASK;
 8001276:	f000 030f 	and.w	r3, r0, #15
	if (addr & ENDPOINT_DIR_MASK) {
 800127a:	f010 0f80 	tst.w	r0, #128	; 0x80
		device.Endpoints[number].InBuffer = buf;
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <USBD_SetEndpointBuffer+0x24>)
 8001280:	f04f 042c 	mov.w	r4, #44	; 0x2c
 8001284:	fb04 0303 	mla	r3, r4, r3, r0
 8001288:	bf19      	ittee	ne
 800128a:	6219      	strne	r1, [r3, #32]
		device.Endpoints[number].InBufferLength = len;
 800128c:	625a      	strne	r2, [r3, #36]	; 0x24
	} else {
		device.Endpoints[number].OutBuffer = buf;
 800128e:	6159      	streq	r1, [r3, #20]
		device.Endpoints[number].OutBufferLength = len;
 8001290:	619a      	streq	r2, [r3, #24]
	}
}
 8001292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	2000123c 	.word	0x2000123c

0800129c <XMC_USBD_lReadFifo>:
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 800129c:	4b24      	ldr	r3, [pc, #144]	; (8001330 <XMC_USBD_lReadFifo+0x94>)
 800129e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80012a2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80012a6:	681b      	ldr	r3, [r3, #0]
  word_count = (byte_count >> 2U );
  temp_word_count = (word_count << 2U);
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 80012a8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80012ac:	d100      	bne.n	80012b0 <XMC_USBD_lReadFifo+0x14>
 80012ae:	4770      	bx	lr
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 80012b0:	4a1f      	ldr	r2, [pc, #124]	; (8001330 <XMC_USBD_lReadFifo+0x94>)
 80012b2:	2334      	movs	r3, #52	; 0x34
 80012b4:	fb03 2300 	mla	r3, r3, r0, r2
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f7      	beq.n	80012ae <XMC_USBD_lReadFifo+0x12>
{
 80012be:	b5f0      	push	{r4, r5, r6, r7, lr}
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 80012c0:	f8d2 71e0 	ldr.w	r7, [r2, #480]	; 0x1e0
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 80012c4:	ea5f 0c91 	movs.w	ip, r1, lsr #2
 80012c8:	d00a      	beq.n	80012e0 <XMC_USBD_lReadFifo+0x44>
 80012ca:	2300      	movs	r3, #0
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 80012cc:	2534      	movs	r5, #52	; 0x34
 80012ce:	fb05 2500 	mla	r5, r5, r0, r2
 80012d2:	683c      	ldr	r4, [r7, #0]
 80012d4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80012d6:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    for (i = 0U;i < word_count; i++)
 80012da:	3301      	adds	r3, #1
 80012dc:	459c      	cmp	ip, r3
 80012de:	d1f8      	bne.n	80012d2 <XMC_USBD_lReadFifo+0x36>
  temp_word_count = (word_count << 2U);
 80012e0:	f021 0603 	bic.w	r6, r1, #3
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 80012e4:	42b1      	cmp	r1, r6
 80012e6:	d017      	beq.n	8001318 <XMC_USBD_lReadFifo+0x7c>
    {
      temp_data = *fifo;
 80012e8:	683d      	ldr	r5, [r7, #0]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 80012ea:	d915      	bls.n	8001318 <XMC_USBD_lReadFifo+0x7c>
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 80012ec:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80012f0:	1b9e      	subs	r6, r3, r6
 80012f2:	eb06 0e01 	add.w	lr, r6, r1
 80012f6:	2400      	movs	r4, #0
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <XMC_USBD_lReadFifo+0x94>)
 80012fa:	2734      	movs	r7, #52	; 0x34
 80012fc:	fb07 2700 	mla	r7, r7, r0, r2
 8001300:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001304:	fa0c f204 	lsl.w	r2, ip, r4
 8001308:	402a      	ands	r2, r5
 800130a:	40e2      	lsrs	r2, r4
 800130c:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800130e:	54f2      	strb	r2, [r6, r3]
 8001310:	3408      	adds	r4, #8
 8001312:	3301      	adds	r3, #1
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8001314:	4573      	cmp	r3, lr
 8001316:	d1f5      	bne.n	8001304 <XMC_USBD_lReadFifo+0x68>
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <XMC_USBD_lReadFifo+0x94>)
 800131a:	2234      	movs	r2, #52	; 0x34
 800131c:	fb02 3000 	mla	r0, r2, r0, r3
 8001320:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001322:	440b      	add	r3, r1
 8001324:	62c3      	str	r3, [r0, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8001326:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001328:	4419      	add	r1, r3
 800132a:	6241      	str	r1, [r0, #36]	; 0x24
  }
}
 800132c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132e:	bf00      	nop
 8001330:	20001380 	.word	0x20001380

08001334 <XMC_USBD_lFlushTXFifo>:
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
 8001334:	b082      	sub	sp, #8
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 8001336:	2300      	movs	r3, #0
 8001338:	9301      	str	r3, [sp, #4]
  /*flush fifo */
  data.b.txfflsh = 1U;
 800133a:	9b01      	ldr	r3, [sp, #4]
 800133c:	f043 0320 	orr.w	r3, r3, #32
 8001340:	9301      	str	r3, [sp, #4]
  data.b.txfnum = fifo_num;
 8001342:	9b01      	ldr	r3, [sp, #4]
 8001344:	f360 138a 	bfi	r3, r0, #6, #5
 8001348:	9301      	str	r3, [sp, #4]
  xmc_device.global_register->grstctl = data.d32;
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <XMC_USBD_lFlushTXFifo+0x48>)
 800134c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001350:	9a01      	ldr	r2, [sp, #4]
 8001352:	611a      	str	r2, [r3, #16]
 8001354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  for (count = 0U;count < 1000U; count++){}
 8001358:	3b01      	subs	r3, #1
 800135a:	d1fd      	bne.n	8001358 <XMC_USBD_lFlushTXFifo+0x24>
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <XMC_USBD_lFlushTXFifo+0x48>)
 800135e:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 8001362:	6913      	ldr	r3, [r2, #16]
 8001364:	9301      	str	r3, [sp, #4]
  } while (data.b.txfflsh);
 8001366:	9b01      	ldr	r3, [sp, #4]
 8001368:	f013 0f20 	tst.w	r3, #32
 800136c:	d1f9      	bne.n	8001362 <XMC_USBD_lFlushTXFifo+0x2e>
 800136e:	f240 33e9 	movw	r3, #1001	; 0x3e9
    count = 0U;
  while (count++ < 1000U)
 8001372:	3b01      	subs	r3, #1
 8001374:	d1fd      	bne.n	8001372 <XMC_USBD_lFlushTXFifo+0x3e>
  {
    /* wait 3 phy clocks */
  }
}
 8001376:	b002      	add	sp, #8
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20001380 	.word	0x20001380

08001380 <XMC_USBD_lFlushRXFifo>:

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void) 
{
 8001380:	b082      	sub	sp, #8
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	9301      	str	r3, [sp, #4]
  data.b.rxfflsh = 1U;
 8001386:	9b01      	ldr	r3, [sp, #4]
 8001388:	f043 0310 	orr.w	r3, r3, #16
 800138c:	9301      	str	r3, [sp, #4]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <XMC_USBD_lFlushRXFifo+0x3c>)
 8001390:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 8001394:	9901      	ldr	r1, [sp, #4]
 8001396:	6111      	str	r1, [r2, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
    data.d32 = xmc_device.global_register->grstctl;
 8001398:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
{
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    for (count = 0U; count < 1000U; count++){}
 80013a0:	3b01      	subs	r3, #1
 80013a2:	d1fd      	bne.n	80013a0 <XMC_USBD_lFlushRXFifo+0x20>
    data.d32 = xmc_device.global_register->grstctl;
 80013a4:	6913      	ldr	r3, [r2, #16]
 80013a6:	9301      	str	r3, [sp, #4]
  } while (data.b.rxfflsh);
 80013a8:	9b01      	ldr	r3, [sp, #4]
 80013aa:	f013 0f10 	tst.w	r3, #16
 80013ae:	d1f5      	bne.n	800139c <XMC_USBD_lFlushRXFifo+0x1c>
 80013b0:	f240 33e9 	movw	r3, #1001	; 0x3e9
  count = 0U;
  while (count++ < 1000U)
 80013b4:	3b01      	subs	r3, #1
 80013b6:	d1fd      	bne.n	80013b4 <XMC_USBD_lFlushRXFifo+0x34>
  {
    /* wait 3 phy clocks */
  }
}
 80013b8:	b002      	add	sp, #8
 80013ba:	4770      	bx	lr
 80013bc:	20001380 	.word	0x20001380

080013c0 <XMC_USBD_lStartReadXfer>:
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
 80013c0:	b430      	push	{r4, r5}
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 80013c2:	2100      	movs	r1, #0
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 80013c4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80013c6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80013c8:	6883      	ldr	r3, [r0, #8]
 80013ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ce:	1aa5      	subs	r5, r4, r2
 80013d0:	429d      	cmp	r5, r3
  {
    ep->xferLength += ep->maxTransferSize;
 80013d2:	bf86      	itte	hi
 80013d4:	189b      	addhi	r3, r3, r2
 80013d6:	6283      	strhi	r3, [r0, #40]	; 0x28
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 80013d8:	6284      	strls	r4, [r0, #40]	; 0x28
  }
  if (ep->address_u.address_st.number == 0U)
 80013da:	7803      	ldrb	r3, [r0, #0]
 80013dc:	f013 0f0f 	tst.w	r3, #15
 80013e0:	d12a      	bne.n	8001438 <XMC_USBD_lStartReadXfer+0x78>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
    ep0_data->b.pktcnt = 0x1U;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f363 41d4 	bfi	r1, r3, #19, #2
    ep0_data->b.supcnt = 0x3U;
 80013e8:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 80013ec:	f364 0106 	bfi	r1, r4, #0, #7
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <XMC_USBD_lStartReadXfer+0xa4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	7b5b      	ldrb	r3, [r3, #13]
 80013f6:	b94b      	cbnz	r3, 800140c <XMC_USBD_lStartReadXfer+0x4c>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 80013f8:	7803      	ldrb	r3, [r0, #0]
 80013fa:	f003 020f 	and.w	r2, r3, #15
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <XMC_USBD_lStartReadXfer+0xa8>)
 8001400:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001404:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8001408:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800140a:	615a      	str	r2, [r3, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 800140c:	4a16      	ldr	r2, [pc, #88]	; (8001468 <XMC_USBD_lStartReadXfer+0xa8>)
 800140e:	7803      	ldrb	r3, [r0, #0]
 8001410:	f003 030f 	and.w	r3, r3, #15
 8001414:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001418:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800141c:	6119      	str	r1, [r3, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800141e:	7803      	ldrb	r3, [r0, #0]
 8001420:	f003 030f 	and.w	r3, r3, #15
 8001424:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001428:	f8d2 21c4 	ldr.w	r2, [r2, #452]	; 0x1c4
 800142c:	6813      	ldr	r3, [r2, #0]
  epctl.b.cnak = 1U;
  epctl.b.epena = 1U;
 800142e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bc30      	pop	{r4, r5}
 8001436:	4770      	bx	lr
    if (ep->xferLength == 0U)
 8001438:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800143a:	b92b      	cbnz	r3, 8001448 <XMC_USBD_lStartReadXfer+0x88>
      data.b.xfersize = 0U;
 800143c:	f36f 0112 	bfc	r1, #0, #19
      data.b.pktcnt = 1U;
 8001440:	2301      	movs	r3, #1
 8001442:	f363 41dc 	bfi	r1, r3, #19, #10
 8001446:	e7d3      	b.n	80013f0 <XMC_USBD_lStartReadXfer+0x30>
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8001448:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800144a:	1a9b      	subs	r3, r3, r2
 800144c:	6842      	ldr	r2, [r0, #4]
 800144e:	f3c2 24c6 	ubfx	r4, r2, #11, #7
 8001452:	191a      	adds	r2, r3, r4
 8001454:	3a01      	subs	r2, #1
 8001456:	fbb2 f2f4 	udiv	r2, r2, r4
 800145a:	f362 41dc 	bfi	r1, r2, #19, #10
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 800145e:	f363 0112 	bfi	r1, r3, #0, #19
 8001462:	e7c5      	b.n	80013f0 <XMC_USBD_lStartReadXfer+0x30>
 8001464:	2000137c 	.word	0x2000137c
 8001468:	20001380 	.word	0x20001380

0800146c <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 800146c:	b470      	push	{r4, r5, r6}
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 800146e:	2100      	movs	r1, #0
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001470:	7803      	ldrb	r3, [r0, #0]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	336a      	adds	r3, #106	; 0x6a
 8001478:	4a30      	ldr	r2, [pc, #192]	; (800153c <XMC_USBD_lStartWriteXfer+0xd0>)
 800147a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147e:	681a      	ldr	r2, [r3, #0]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8001480:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8001482:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001484:	6883      	ldr	r3, [r0, #8]
 8001486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800148a:	1b2e      	subs	r6, r5, r4
 800148c:	429e      	cmp	r6, r3
  {
    ep->xferLength = ep->xferTotal;
 800148e:	bf32      	itee	cc
 8001490:	6285      	strcc	r5, [r0, #40]	; 0x28
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 8001492:	191b      	addcs	r3, r3, r4
 8001494:	6283      	strcs	r3, [r0, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 8001496:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001498:	b333      	cbz	r3, 80014e8 <XMC_USBD_lStartWriteXfer+0x7c>
    size.b.xfersize = 0U;
    size.b.pktcnt = 1U;
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 800149a:	7804      	ldrb	r4, [r0, #0]
 800149c:	f014 0f0f 	tst.w	r4, #15
 80014a0:	d13a      	bne.n	8001518 <XMC_USBD_lStartWriteXfer+0xac>
    {
      size.b.pktcnt = 1U;
 80014a2:	2401      	movs	r4, #1
 80014a4:	f364 41dc 	bfi	r1, r4, #19, #10
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 80014a8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80014aa:	1b1b      	subs	r3, r3, r4
 80014ac:	f363 0112 	bfi	r1, r3, #0, #19
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
    		 ep->maxPacketSize);
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80014b0:	4b23      	ldr	r3, [pc, #140]	; (8001540 <XMC_USBD_lStartWriteXfer+0xd4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	7b5c      	ldrb	r4, [r3, #13]
 80014b6:	b944      	cbnz	r4, 80014ca <XMC_USBD_lStartWriteXfer+0x5e>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 80014b8:	7804      	ldrb	r4, [r0, #0]
 80014ba:	f004 040f 	and.w	r4, r4, #15
 80014be:	346a      	adds	r4, #106	; 0x6a
 80014c0:	4d1e      	ldr	r5, [pc, #120]	; (800153c <XMC_USBD_lStartWriteXfer+0xd0>)
 80014c2:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 80014c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80014c8:	6165      	str	r5, [r4, #20]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80014ca:	7b5b      	ldrb	r3, [r3, #13]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d110      	bne.n	80014f2 <XMC_USBD_lStartWriteXfer+0x86>
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <XMC_USBD_lStartWriteXfer+0xd0>)
 80014d2:	f8d3 51a4 	ldr.w	r5, [r3, #420]	; 0x1a4
 80014d6:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80014d8:	7803      	ldrb	r3, [r0, #0]
 80014da:	f003 040f 	and.w	r4, r3, #15
 80014de:	2301      	movs	r3, #1
 80014e0:	40a3      	lsls	r3, r4
 80014e2:	4333      	orrs	r3, r6
 80014e4:	636b      	str	r3, [r5, #52]	; 0x34
 80014e6:	e004      	b.n	80014f2 <XMC_USBD_lStartWriteXfer+0x86>
    size.b.xfersize = 0U;
 80014e8:	f36f 0112 	bfc	r1, #0, #19
    size.b.pktcnt = 1U;
 80014ec:	2301      	movs	r3, #1
 80014ee:	f363 41dc 	bfi	r1, r3, #19, #10
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 80014f2:	4c12      	ldr	r4, [pc, #72]	; (800153c <XMC_USBD_lStartWriteXfer+0xd0>)
 80014f4:	7803      	ldrb	r3, [r0, #0]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	336a      	adds	r3, #106	; 0x6a
 80014fc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001500:	6119      	str	r1, [r3, #16]
  ctl.b.epena = 1U;
  ctl.b.cnak = 1U;
 8001502:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 8001506:	7803      	ldrb	r3, [r0, #0]
 8001508:	f003 030f 	and.w	r3, r3, #15
 800150c:	336a      	adds	r3, #106	; 0x6a
 800150e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001512:	601a      	str	r2, [r3, #0]
}
 8001514:	bc70      	pop	{r4, r5, r6}
 8001516:	4770      	bx	lr
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001518:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 800151a:	1b5c      	subs	r4, r3, r5
 800151c:	f364 0112 	bfi	r1, r4, #0, #19
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8001520:	6844      	ldr	r4, [r0, #4]
 8001522:	f3c4 24c6 	ubfx	r4, r4, #11, #7
 8001526:	1b5b      	subs	r3, r3, r5
 8001528:	1e65      	subs	r5, r4, #1
 800152a:	b2ad      	uxth	r5, r5
 800152c:	fa15 f383 	uxtah	r3, r5, r3
 8001530:	fb93 f3f4 	sdiv	r3, r3, r4
 8001534:	f363 41dc 	bfi	r1, r3, #19, #10
 8001538:	e7ba      	b.n	80014b0 <XMC_USBD_lStartWriteXfer+0x44>
 800153a:	bf00      	nop
 800153c:	20001380 	.word	0x20001380
 8001540:	2000137c 	.word	0x2000137c

08001544 <XMC_USBD_GetCapabilities>:
  cap.event_remote_wakeup = 1U;
  cap.event_reset = 1U;
  cap.event_resume = 1U;
  cap.event_suspend = 1U;
  cap.reserved = 0U;
  return cap;
 8001544:	201f      	movs	r0, #31
 8001546:	f36f 1045 	bfc	r0, #5, #1
 800154a:	f440 70e0 	orr.w	r0, r0, #448	; 0x1c0
}
 800154e:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8001552:	4770      	bx	lr

08001554 <XMC_USBD_DeviceConnect>:
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <XMC_USBD_DeviceConnect+0x14>)
 8001556:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 800155a:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 0U;
 800155c:	f36f 0341 	bfc	r3, #1, #1
  xmc_device.device_register->dctl = dctl.d32;
 8001560:	6053      	str	r3, [r2, #4]
  return XMC_USBD_STATUS_OK;
}
 8001562:	2000      	movs	r0, #0
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20001380 	.word	0x20001380

0800156c <XMC_USBD_DeviceDisconnect>:
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <XMC_USBD_DeviceDisconnect+0x14>)
 800156e:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001572:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 1U;
 8001574:	f043 0302 	orr.w	r3, r3, #2
  xmc_device.device_register->dctl = dctl.d32;
 8001578:	6053      	str	r3, [r2, #4]
  return XMC_USBD_STATUS_OK;
}
 800157a:	2000      	movs	r0, #0
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20001380 	.word	0x20001380

08001584 <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 8001584:	f000 000f 	and.w	r0, r0, #15
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 8001588:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <XMC_USBD_EndpointReadStart+0x54>)
 800158a:	2334      	movs	r3, #52	; 0x34
 800158c:	fb03 2300 	mla	r3, r3, r0, r2
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f013 0f10 	tst.w	r3, #16
 8001596:	d11a      	bne.n	80015ce <XMC_USBD_EndpointReadStart+0x4a>
 8001598:	2334      	movs	r3, #52	; 0x34
 800159a:	fb03 2300 	mla	r3, r3, r0, r2
 800159e:	791b      	ldrb	r3, [r3, #4]
 80015a0:	f013 0f04 	tst.w	r3, #4
 80015a4:	d015      	beq.n	80015d2 <XMC_USBD_EndpointReadStart+0x4e>
{
 80015a6:	b570      	push	{r4, r5, r6, lr}
    if (size > ep->outBufferSize)
    {
      size = ep->outBufferSize;
    }
    /* set ep values */
    ep->xferTotal = size;
 80015a8:	2634      	movs	r6, #52	; 0x34
 80015aa:	fb06 2300 	mla	r3, r6, r0, r2
 80015ae:	695a      	ldr	r2, [r3, #20]
 80015b0:	4291      	cmp	r1, r2
 80015b2:	bf28      	it	cs
 80015b4:	4611      	movcs	r1, r2
 80015b6:	6319      	str	r1, [r3, #48]	; 0x30
    ep->xferCount = 0U;
 80015b8:	2400      	movs	r4, #0
 80015ba:	62dc      	str	r4, [r3, #44]	; 0x2c
    ep->xferLength = 0U;
 80015bc:	629c      	str	r4, [r3, #40]	; 0x28
    ep->xferBuffer = ep->outBuffer;
 80015be:	68da      	ldr	r2, [r3, #12]
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
    ep->outBytesAvailable = 0U;
 80015c2:	611c      	str	r4, [r3, #16]
    XMC_USBD_lStartReadXfer(ep);
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fefb 	bl	80013c0 <XMC_USBD_lStartReadXfer>
    result= XMC_USBD_STATUS_OK;
 80015ca:	4620      	mov	r0, r4
  }
  return result;
}
 80015cc:	bd70      	pop	{r4, r5, r6, pc}
    result = XMC_USBD_STATUS_ERROR;
 80015ce:	2001      	movs	r0, #1
 80015d0:	4770      	bx	lr
 80015d2:	2001      	movs	r0, #1
}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20001380 	.word	0x20001380

080015dc <XMC_USBD_DeviceSetAddress>:
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <XMC_USBD_DeviceSetAddress+0x14>)
 80015de:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80015e2:	681a      	ldr	r2, [r3, #0]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 80015e4:	b911      	cbnz	r1, 80015ec <XMC_USBD_DeviceSetAddress+0x10>
  {
    data.b.devaddr = address;
 80015e6:	f360 120a 	bfi	r2, r0, #4, #7
    xmc_device.device_register->dcfg = data.d32;
 80015ea:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
}
 80015ec:	2000      	movs	r0, #0
 80015ee:	4770      	bx	lr
 80015f0:	20001380 	.word	0x20001380

080015f4 <XMC_USBD_EndpointStall>:
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 80015f4:	f000 020f 	and.w	r2, r0, #15
  if (stall)
 80015f8:	b351      	cbz	r1, 8001650 <XMC_USBD_EndpointStall+0x5c>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 80015fa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80015fe:	d118      	bne.n	8001632 <XMC_USBD_EndpointStall+0x3e>
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001600:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <XMC_USBD_EndpointStall+0xb8>)
 8001602:	2134      	movs	r1, #52	; 0x34
 8001604:	fb01 f102 	mul.w	r1, r1, r2
 8001608:	5c59      	ldrb	r1, [r3, r1]
 800160a:	f001 010f 	and.w	r1, r1, #15
 800160e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001612:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
 8001616:	680b      	ldr	r3, [r1, #0]
      data.b.stall = 1U;
 8001618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 800161c:	600b      	str	r3, [r1, #0]
    }
    ep->isStalled = 1U;
 800161e:	4923      	ldr	r1, [pc, #140]	; (80016ac <XMC_USBD_EndpointStall+0xb8>)
 8001620:	2334      	movs	r3, #52	; 0x34
 8001622:	fb03 1202 	mla	r2, r3, r2, r1
 8001626:	7913      	ldrb	r3, [r2, #4]
 8001628:	f043 0320 	orr.w	r3, r3, #32
 800162c:	7113      	strb	r3, [r2, #4]
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
		}
		ep->isStalled = 0U;
	}
	return XMC_USBD_STATUS_OK;
}
 800162e:	2000      	movs	r0, #0
 8001630:	4770      	bx	lr
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001632:	491e      	ldr	r1, [pc, #120]	; (80016ac <XMC_USBD_EndpointStall+0xb8>)
 8001634:	2334      	movs	r3, #52	; 0x34
 8001636:	fb03 f302 	mul.w	r3, r3, r2
 800163a:	5ccb      	ldrb	r3, [r1, r3]
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	336a      	adds	r3, #106	; 0x6a
 8001642:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001646:	680b      	ldr	r3, [r1, #0]
      data.b.stall = 1U;
 8001648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 800164c:	600b      	str	r3, [r1, #0]
 800164e:	e7e6      	b.n	800161e <XMC_USBD_EndpointStall+0x2a>
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8001650:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001654:	d119      	bne.n	800168a <XMC_USBD_EndpointStall+0x96>
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <XMC_USBD_EndpointStall+0xb8>)
 8001658:	2134      	movs	r1, #52	; 0x34
 800165a:	fb01 f102 	mul.w	r1, r1, r2
 800165e:	5c59      	ldrb	r1, [r3, r1]
 8001660:	f001 010f 	and.w	r1, r1, #15
 8001664:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001668:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
 800166c:	680b      	ldr	r3, [r1, #0]
			data.b.stall = 0U;
 800166e:	f023 5381 	bic.w	r3, r3, #270532608	; 0x10200000
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8001672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8001676:	600b      	str	r3, [r1, #0]
		ep->isStalled = 0U;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <XMC_USBD_EndpointStall+0xb8>)
 800167a:	2134      	movs	r1, #52	; 0x34
 800167c:	fb01 3202 	mla	r2, r1, r2, r3
 8001680:	7913      	ldrb	r3, [r2, #4]
 8001682:	f36f 1345 	bfc	r3, #5, #1
 8001686:	7113      	strb	r3, [r2, #4]
 8001688:	e7d1      	b.n	800162e <XMC_USBD_EndpointStall+0x3a>
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800168a:	4908      	ldr	r1, [pc, #32]	; (80016ac <XMC_USBD_EndpointStall+0xb8>)
 800168c:	2334      	movs	r3, #52	; 0x34
 800168e:	fb03 f302 	mul.w	r3, r3, r2
 8001692:	5ccb      	ldrb	r3, [r1, r3]
 8001694:	f003 030f 	and.w	r3, r3, #15
 8001698:	336a      	adds	r3, #106	; 0x6a
 800169a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800169e:	680b      	ldr	r3, [r1, #0]
			data.b.stall = 0U;
 80016a0:	f023 5381 	bic.w	r3, r3, #270532608	; 0x10200000
			data.b.setd0pid = 1U; /* reset pid to 0 */
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 80016a8:	600b      	str	r3, [r1, #0]
 80016aa:	e7e5      	b.n	8001678 <XMC_USBD_EndpointStall+0x84>
 80016ac:	20001380 	.word	0x20001380

080016b0 <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 80016b0:	f000 000f 	and.w	r0, r0, #15
  if (ep->address_u.address_st.direction)
 80016b4:	2334      	movs	r3, #52	; 0x34
 80016b6:	fb03 f300 	mul.w	r3, r3, r0
 80016ba:	4a11      	ldr	r2, [pc, #68]	; (8001700 <XMC_USBD_EndpointAbort+0x50>)
 80016bc:	56d3      	ldrsb	r3, [r2, r3]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db16      	blt.n	80016f0 <XMC_USBD_EndpointAbort+0x40>
  {
    ep->inInUse = 0U;
  }
  if (!ep->address_u.address_st.direction)
  {
    ep->outInUse = 0U;
 80016c2:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <XMC_USBD_EndpointAbort+0x50>)
 80016c4:	2334      	movs	r3, #52	; 0x34
 80016c6:	fb03 2300 	mla	r3, r3, r0, r2
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	f36f 1204 	bfc	r2, #4, #1
 80016d0:	605a      	str	r2, [r3, #4]
  }
  ep->isStalled = 0U;
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <XMC_USBD_EndpointAbort+0x50>)
 80016d4:	2334      	movs	r3, #52	; 0x34
 80016d6:	fb03 2300 	mla	r3, r3, r0, r2
 80016da:	791a      	ldrb	r2, [r3, #4]
 80016dc:	f36f 1245 	bfc	r2, #5, #1
 80016e0:	711a      	strb	r2, [r3, #4]
  ep->outBytesAvailable = 0U;
 80016e2:	2000      	movs	r0, #0
 80016e4:	6118      	str	r0, [r3, #16]
  ep->outOffset = 0U;
 80016e6:	6198      	str	r0, [r3, #24]
  ep->xferLength = 0U;
 80016e8:	6298      	str	r0, [r3, #40]	; 0x28
  ep->xferCount = 0U;
 80016ea:	62d8      	str	r0, [r3, #44]	; 0x2c
  ep->xferTotal = 0U;
 80016ec:	6318      	str	r0, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
}
 80016ee:	4770      	bx	lr
    ep->inInUse = 0U;
 80016f0:	2334      	movs	r3, #52	; 0x34
 80016f2:	fb03 2300 	mla	r3, r3, r0, r2
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	f36f 02c3 	bfc	r2, #3, #1
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	e7e8      	b.n	80016d2 <XMC_USBD_EndpointAbort+0x22>
 8001700:	20001380 	.word	0x20001380

08001704 <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 8001704:	b5f0      	push	{r4, r5, r6, r7, lr}
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8001706:	f000 000f 	and.w	r0, r0, #15
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 800170a:	4c42      	ldr	r4, [pc, #264]	; (8001814 <XMC_USBD_EndpointUnconfigure+0x110>)
 800170c:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8001710:	69db      	ldr	r3, [r3, #28]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
  /* if not configured return an error */
  if (!ep->isConfigured)
 8001712:	2234      	movs	r2, #52	; 0x34
 8001714:	fb02 4200 	mla	r2, r2, r0, r4
 8001718:	7912      	ldrb	r2, [r2, #4]
 800171a:	f012 0f04 	tst.w	r2, #4
 800171e:	d076      	beq.n	800180e <XMC_USBD_EndpointUnconfigure+0x10a>
 8001720:	2100      	movs	r1, #0
 8001722:	461f      	mov	r7, r3
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8001724:	46a6      	mov	lr, r4
 8001726:	2534      	movs	r5, #52	; 0x34
 8001728:	fb05 f500 	mul.w	r5, r5, r0
 800172c:	1962      	adds	r2, r4, r5
 800172e:	5d64      	ldrb	r4, [r4, r5]
 8001730:	f004 040f 	and.w	r4, r4, #15
 8001734:	f04f 0c01 	mov.w	ip, #1
 8001738:	fa0c fc04 	lsl.w	ip, ip, r4
     result = XMC_USBD_STATUS_ERROR;
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 800173c:	f36f 31cf 	bfc	r1, #15, #1
    data.b.epdis =  1U;
    data.b.snak =  1U;
 8001740:	f041 4190 	orr.w	r1, r1, #1207959552	; 0x48000000
    data.b.stall =  0U;
 8001744:	f36f 5155 	bfc	r1, #21, #1
    ep->isConfigured =  0U;
 8001748:	7916      	ldrb	r6, [r2, #4]
    ep->isStalled =  0U;
 800174a:	f006 06fb 	and.w	r6, r6, #251	; 0xfb
 800174e:	f36f 1645 	bfc	r6, #5, #1
 8001752:	7116      	strb	r6, [r2, #4]
    ep->outInUse =  0U;
 8001754:	6856      	ldr	r6, [r2, #4]
 8001756:	f36f 1604 	bfc	r6, #4, #1
 800175a:	6056      	str	r6, [r2, #4]
    ep->inInUse =  0U;
 800175c:	6856      	ldr	r6, [r2, #4]
 800175e:	f36f 06c3 	bfc	r6, #3, #1
 8001762:	6056      	str	r6, [r2, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001764:	f91e 2005 	ldrsb.w	r2, [lr, r5]
 8001768:	2a00      	cmp	r2, #0
 800176a:	db06      	blt.n	800177a <XMC_USBD_EndpointUnconfigure+0x76>
 800176c:	2234      	movs	r2, #52	; 0x34
 800176e:	fb02 e200 	mla	r2, r2, r0, lr
 8001772:	7912      	ldrb	r2, [r2, #4]
 8001774:	f012 0f03 	tst.w	r2, #3
 8001778:	d115      	bne.n	80017a6 <XMC_USBD_EndpointUnconfigure+0xa2>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 800177a:	4d26      	ldr	r5, [pc, #152]	; (8001814 <XMC_USBD_EndpointUnconfigure+0x110>)
 800177c:	346a      	adds	r4, #106	; 0x6a
 800177e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8001782:	6011      	str	r1, [r2, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8001784:	ea23 020c 	bic.w	r2, r3, ip
 8001788:	f362 070f 	bfi	r7, r2, #0, #16
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800178c:	2234      	movs	r2, #52	; 0x34
 800178e:	fb02 f200 	mul.w	r2, r2, r0
 8001792:	56aa      	ldrsb	r2, [r5, r2]
 8001794:	2a00      	cmp	r2, #0
 8001796:	da06      	bge.n	80017a6 <XMC_USBD_EndpointUnconfigure+0xa2>
 8001798:	2234      	movs	r2, #52	; 0x34
 800179a:	fb02 5200 	mla	r2, r2, r0, r5
 800179e:	7912      	ldrb	r2, [r2, #4]
 80017a0:	f012 0f03 	tst.w	r2, #3
 80017a4:	d116      	bne.n	80017d4 <XMC_USBD_EndpointUnconfigure+0xd0>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80017a6:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <XMC_USBD_EndpointUnconfigure+0x110>)
 80017a8:	2434      	movs	r4, #52	; 0x34
 80017aa:	fb04 f400 	mul.w	r4, r4, r0
 80017ae:	5d14      	ldrb	r4, [r2, r4]
 80017b0:	f004 040f 	and.w	r4, r4, #15
 80017b4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80017b8:	f8d2 21c4 	ldr.w	r2, [r2, #452]	; 0x1c4
 80017bc:	6011      	str	r1, [r2, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 80017be:	f3c3 430f 	ubfx	r3, r3, #16, #16
 80017c2:	ea23 030c 	bic.w	r3, r3, ip
 80017c6:	f363 471f 	bfi	r7, r3, #16, #16
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <XMC_USBD_EndpointUnconfigure+0x114>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	7b5b      	ldrb	r3, [r3, #13]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d014      	beq.n	80017fe <XMC_USBD_EndpointUnconfigure+0xfa>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <XMC_USBD_EndpointUnconfigure+0x110>)
 80017d6:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 80017da:	61d7      	str	r7, [r2, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 80017dc:	2234      	movs	r2, #52	; 0x34
 80017de:	fb02 3000 	mla	r0, r2, r0, r3
 80017e2:	8881      	ldrh	r1, [r0, #4]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 80017e4:	f3c1 1183 	ubfx	r1, r1, #6, #4
 80017e8:	2201      	movs	r2, #1
 80017ea:	fa02 f101 	lsl.w	r1, r2, r1
 80017ee:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80017f2:	ea22 0201 	bic.w	r2, r2, r1
 80017f6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result = XMC_USBD_STATUS_OK;
 80017fa:	2000      	movs	r0, #0
  }
  return result;
}
 80017fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <XMC_USBD_EndpointUnconfigure+0x110>)
 8001800:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001804:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001806:	ea23 030c 	bic.w	r3, r3, ip
 800180a:	6353      	str	r3, [r2, #52]	; 0x34
 800180c:	e7e2      	b.n	80017d4 <XMC_USBD_EndpointUnconfigure+0xd0>
     result = XMC_USBD_STATUS_ERROR;
 800180e:	2001      	movs	r0, #1
 8001810:	e7f4      	b.n	80017fc <XMC_USBD_EndpointUnconfigure+0xf8>
 8001812:	bf00      	nop
 8001814:	20001380 	.word	0x20001380
 8001818:	2000137c 	.word	0x2000137c

0800181c <XMC_USBD_GetFrameNumber>:
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <XMC_USBD_GetFrameNumber+0x10>)
 800181e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001822:	6898      	ldr	r0, [r3, #8]
  result = (uint16_t)dsts.b.soffn;
  return result;
}
 8001824:	f3c0 200d 	ubfx	r0, r0, #8, #14
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20001380 	.word	0x20001380

08001830 <XMC_USBD_IsEnumDone>:
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <XMC_USBD_IsEnumDone+0x14>)
 8001832:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
 8001836:	f000 0005 	and.w	r0, r0, #5
}
 800183a:	2805      	cmp	r0, #5
 800183c:	bf14      	ite	ne
 800183e:	2000      	movne	r0, #0
 8001840:	2001      	moveq	r0, #1
 8001842:	4770      	bx	lr
 8001844:	20001380 	.word	0x20001380

08001848 <XMC_USBD_Uninitialize>:
{
 8001848:	b508      	push	{r3, lr}
	dctl.d32 = xmc_device.device_register->dctl;
 800184a:	4807      	ldr	r0, [pc, #28]	; (8001868 <XMC_USBD_Uninitialize+0x20>)
 800184c:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
 8001850:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 1U;
 8001852:	f043 0302 	orr.w	r3, r3, #2
  xmc_device.device_register->dctl = dctl.d32;
 8001856:	6053      	str	r3, [r2, #4]
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 8001858:	f44f 7202 	mov.w	r2, #520	; 0x208
 800185c:	2100      	movs	r1, #0
 800185e:	f009 f9c3 	bl	800abe8 <memset>
}
 8001862:	2000      	movs	r0, #0
 8001864:	bd08      	pop	{r3, pc}
 8001866:	bf00      	nop
 8001868:	20001380 	.word	0x20001380

0800186c <XMC_USBD_EndpointConfigure>:
{
 800186c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001870:	b083      	sub	sp, #12
 8001872:	4607      	mov	r7, r0
 8001874:	4689      	mov	r9, r1
 8001876:	4616      	mov	r6, r2
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8001878:	f8df 8270 	ldr.w	r8, [pc, #624]	; 8001aec <XMC_USBD_EndpointConfigure+0x280>
 800187c:	f8d8 31a4 	ldr.w	r3, [r8, #420]	; 0x1a4
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	469a      	mov	sl, r3
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8001886:	f000 050f 	and.w	r5, r0, #15
 800188a:	2234      	movs	r2, #52	; 0x34
 800188c:	fb02 fb05 	mul.w	fp, r2, r5
 8001890:	eb0b 0408 	add.w	r4, fp, r8
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 8001894:	2100      	movs	r1, #0
 8001896:	4620      	mov	r0, r4
 8001898:	f009 f9a6 	bl	800abe8 <memset>
  ep->address_u.address = ep_addr;
 800189c:	f80b 7008 	strb.w	r7, [fp, r8]
  ep->isConfigured = 1U;
 80018a0:	7923      	ldrb	r3, [r4, #4]
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	7123      	strb	r3, [r4, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 80018a8:	6863      	ldr	r3, [r4, #4]
 80018aa:	f366 23d1 	bfi	r3, r6, #11, #7
 80018ae:	6063      	str	r3, [r4, #4]
  if (ep->address_u.address != 0U)
 80018b0:	2f00      	cmp	r7, #0
 80018b2:	d044      	beq.n	800193e <XMC_USBD_EndpointConfigure+0xd2>
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 80018b4:	4621      	mov	r1, r4
 80018b6:	68a4      	ldr	r4, [r4, #8]
 80018b8:	f64f 7cc0 	movw	ip, #65472	; 0xffc0
 80018bc:	f36c 0412 	bfi	r4, ip, #0, #19
 80018c0:	608c      	str	r4, [r1, #8]
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 80018c2:	f818 300b 	ldrb.w	r3, [r8, fp]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	0218      	lsls	r0, r3, #8
 80018cc:	4a85      	ldr	r2, [pc, #532]	; (8001ae4 <XMC_USBD_EndpointConfigure+0x278>)
 80018ce:	1814      	adds	r4, r2, r0
 80018d0:	61cc      	str	r4, [r1, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 80018d2:	f502 62e0 	add.w	r2, r2, #1792	; 0x700
 80018d6:	4402      	add	r2, r0
 80018d8:	60ca      	str	r2, [r1, #12]
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 80018da:	4a83      	ldr	r2, [pc, #524]	; (8001ae8 <XMC_USBD_EndpointConfigure+0x27c>)
 80018dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018e0:	6208      	str	r0, [r1, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 80018e2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80018e6:	69d2      	ldr	r2, [r2, #28]
 80018e8:	614a      	str	r2, [r1, #20]
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80018ea:	f017 0f80 	tst.w	r7, #128	; 0x80
 80018ee:	d043      	beq.n	8001978 <XMC_USBD_EndpointConfigure+0x10c>
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80018f0:	336a      	adds	r3, #106	; 0x6a
 80018f2:	4a7e      	ldr	r2, [pc, #504]	; (8001aec <XMC_USBD_EndpointConfigure+0x280>)
 80018f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80018f8:	6820      	ldr	r0, [r4, #0]
		data.b.usbactep = 1U;
 80018fa:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 80018fe:	f369 4093 	bfi	r0, r9, #18, #2
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8001902:	f1b9 0f00 	cmp.w	r9, #0
 8001906:	f000 80e2 	beq.w	8001ace <XMC_USBD_EndpointConfigure+0x262>
			data.b.mps = ep_max_packet_size;
 800190a:	f366 000a 	bfi	r0, r6, #0, #11
		data.b.setd0pid = 1U;
 800190e:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
		data.b.stall = 0U;
 8001912:	f36f 5055 	bfc	r0, #21, #1
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8001916:	4b75      	ldr	r3, [pc, #468]	; (8001aec <XMC_USBD_EndpointConfigure+0x280>)
 8001918:	f8b3 11fc 	ldrh.w	r1, [r3, #508]	; 0x1fc
 800191c:	f011 0f01 	tst.w	r1, #1
 8001920:	d071      	beq.n	8001a06 <XMC_USBD_EndpointConfigure+0x19a>
    i++;
 8001922:	2301      	movs	r3, #1
    mask = (uint16_t)(mask << 1U);
 8001924:	2202      	movs	r2, #2
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8001926:	4211      	tst	r1, r2
 8001928:	d06f      	beq.n	8001a0a <XMC_USBD_EndpointConfigure+0x19e>
    mask = (uint16_t)(mask << 1U);
 800192a:	0052      	lsls	r2, r2, #1
 800192c:	b292      	uxth	r2, r2
    i++;
 800192e:	3301      	adds	r3, #1
 8001930:	b2db      	uxtb	r3, r3
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8001932:	2b07      	cmp	r3, #7
 8001934:	d1f7      	bne.n	8001926 <XMC_USBD_EndpointConfigure+0xba>
  if ((xmc_device.txfifomsk & mask) == 0U)
 8001936:	4211      	tst	r1, r2
 8001938:	d067      	beq.n	8001a0a <XMC_USBD_EndpointConfigure+0x19e>
  uint8_t result = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	e069      	b.n	8001a12 <XMC_USBD_EndpointConfigure+0x1a6>
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 800193e:	4a6b      	ldr	r2, [pc, #428]	; (8001aec <XMC_USBD_EndpointConfigure+0x280>)
 8001940:	2334      	movs	r3, #52	; 0x34
 8001942:	fb03 f305 	mul.w	r3, r3, r5
 8001946:	18d1      	adds	r1, r2, r3
 8001948:	688c      	ldr	r4, [r1, #8]
 800194a:	2740      	movs	r7, #64	; 0x40
 800194c:	f367 0412 	bfi	r4, r7, #0, #19
 8001950:	608c      	str	r4, [r1, #8]
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8001952:	5cd3      	ldrb	r3, [r2, r3]
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	0218      	lsls	r0, r3, #8
 800195a:	4a62      	ldr	r2, [pc, #392]	; (8001ae4 <XMC_USBD_EndpointConfigure+0x278>)
 800195c:	1814      	adds	r4, r2, r0
 800195e:	61cc      	str	r4, [r1, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8001960:	f502 62e0 	add.w	r2, r2, #1792	; 0x700
 8001964:	4402      	add	r2, r0
 8001966:	60ca      	str	r2, [r1, #12]
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8001968:	4a5f      	ldr	r2, [pc, #380]	; (8001ae8 <XMC_USBD_EndpointConfigure+0x27c>)
 800196a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800196e:	6208      	str	r0, [r1, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8001970:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001974:	69d2      	ldr	r2, [r2, #28]
 8001976:	614a      	str	r2, [r1, #20]
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001978:	f1b9 0f00 	cmp.w	r9, #0
 800197c:	f000 809e 	beq.w	8001abc <XMC_USBD_EndpointConfigure+0x250>
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001980:	2334      	movs	r3, #52	; 0x34
 8001982:	fb03 f305 	mul.w	r3, r3, r5
 8001986:	4a59      	ldr	r2, [pc, #356]	; (8001aec <XMC_USBD_EndpointConfigure+0x280>)
 8001988:	56d3      	ldrsb	r3, [r2, r3]
 800198a:	2b00      	cmp	r3, #0
 800198c:	db24      	blt.n	80019d8 <XMC_USBD_EndpointConfigure+0x16c>
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800198e:	4b57      	ldr	r3, [pc, #348]	; (8001aec <XMC_USBD_EndpointConfigure+0x280>)
 8001990:	2234      	movs	r2, #52	; 0x34
 8001992:	fb02 f205 	mul.w	r2, r2, r5
 8001996:	5c9a      	ldrb	r2, [r3, r2]
 8001998:	f002 020f 	and.w	r2, r2, #15
 800199c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80019a0:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 80019a4:	6813      	ldr	r3, [r2, #0]
		data.b.usbactep = 1U;
 80019a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 80019aa:	f369 4393 	bfi	r3, r9, #18, #2
			data.b.mps = ep_max_packet_size;
 80019ae:	f366 030a 	bfi	r3, r6, #0, #11
		data.b.setd0pid = 1U;
 80019b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		data.b.stall =(uint8_t) 0U;
 80019b6:	f36f 5355 	bfc	r3, #21, #1
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 80019ba:	6013      	str	r3, [r2, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 80019bc:	2334      	movs	r3, #52	; 0x34
 80019be:	fb03 f505 	mul.w	r5, r3, r5
 80019c2:	4b4a      	ldr	r3, [pc, #296]	; (8001aec <XMC_USBD_EndpointConfigure+0x280>)
 80019c4:	5d5b      	ldrb	r3, [r3, r5]
 80019c6:	f003 020f 	and.w	r2, r3, #15
 80019ca:	2301      	movs	r3, #1
 80019cc:	4093      	lsls	r3, r2
 80019ce:	9a01      	ldr	r2, [sp, #4]
 80019d0:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 80019d4:	f363 4a1f 	bfi	sl, r3, #16, #16
  xmc_device.device_register->daintmsk = daintmsk.d32;
 80019d8:	4b44      	ldr	r3, [pc, #272]	; (8001aec <XMC_USBD_EndpointConfigure+0x280>)
 80019da:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80019de:	f8c3 a01c 	str.w	sl, [r3, #28]
}
 80019e2:	2000      	movs	r0, #0
 80019e4:	b003      	add	sp, #12
 80019e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch(ep_max_packet_size)
 80019ea:	2e08      	cmp	r6, #8
 80019ec:	d18f      	bne.n	800190e <XMC_USBD_EndpointConfigure+0xa2>
				data.b.mps = 0x3U;
 80019ee:	2303      	movs	r3, #3
 80019f0:	f363 000a 	bfi	r0, r3, #0, #11
				break;
 80019f4:	e78b      	b.n	800190e <XMC_USBD_EndpointConfigure+0xa2>
				data.b.mps = 0x1U;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f363 000a 	bfi	r0, r3, #0, #11
				break;
 80019fc:	e787      	b.n	800190e <XMC_USBD_EndpointConfigure+0xa2>
				data.b.mps = 0x2U;
 80019fe:	2302      	movs	r3, #2
 8001a00:	f363 000a 	bfi	r0, r3, #0, #11
				break;
 8001a04:	e783      	b.n	800190e <XMC_USBD_EndpointConfigure+0xa2>
  uint8_t i = 0U;
 8001a06:	2300      	movs	r3, #0
  uint16_t mask = 1U;
 8001a08:	2201      	movs	r2, #1
    xmc_device.txfifomsk |= mask;
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	4937      	ldr	r1, [pc, #220]	; (8001aec <XMC_USBD_EndpointConfigure+0x280>)
 8001a0e:	f8a1 21fc 	strh.w	r2, [r1, #508]	; 0x1fc
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	4f35      	ldr	r7, [pc, #212]	; (8001aec <XMC_USBD_EndpointConfigure+0x280>)
 8001a18:	2234      	movs	r2, #52	; 0x34
 8001a1a:	fb02 f205 	mul.w	r2, r2, r5
 8001a1e:	18b9      	adds	r1, r7, r2
 8001a20:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 8001a24:	f363 1c89 	bfi	ip, r3, #6, #4
 8001a28:	f8a1 c004 	strh.w	ip, [r1, #4]
		data.b.txfnum = ep->txFifoNum;
 8001a2c:	f363 5099 	bfi	r0, r3, #22, #4
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 8001a30:	6020      	str	r0, [r4, #0]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8001a32:	5cb9      	ldrb	r1, [r7, r2]
 8001a34:	f001 010f 	and.w	r1, r1, #15
 8001a38:	2301      	movs	r3, #1
 8001a3a:	408b      	lsls	r3, r1
 8001a3c:	9801      	ldr	r0, [sp, #4]
 8001a3e:	4303      	orrs	r3, r0
 8001a40:	f363 0a0f 	bfi	sl, r3, #0, #16
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001a44:	56bb      	ldrsb	r3, [r7, r2]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	db16      	blt.n	8001a78 <XMC_USBD_EndpointConfigure+0x20c>
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001a4a:	4b28      	ldr	r3, [pc, #160]	; (8001aec <XMC_USBD_EndpointConfigure+0x280>)
 8001a4c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001a50:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 8001a54:	6813      	ldr	r3, [r2, #0]
		data.b.usbactep = 1U;
 8001a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 8001a5a:	f369 4393 	bfi	r3, r9, #18, #2
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8001a5e:	f1b9 0f00 	cmp.w	r9, #0
 8001a62:	d1a4      	bne.n	80019ae <XMC_USBD_EndpointConfigure+0x142>
			switch(ep_max_packet_size)
 8001a64:	2e10      	cmp	r6, #16
 8001a66:	d025      	beq.n	8001ab4 <XMC_USBD_EndpointConfigure+0x248>
 8001a68:	d91a      	bls.n	8001aa0 <XMC_USBD_EndpointConfigure+0x234>
 8001a6a:	2e20      	cmp	r6, #32
 8001a6c:	d01e      	beq.n	8001aac <XMC_USBD_EndpointConfigure+0x240>
 8001a6e:	2e40      	cmp	r6, #64	; 0x40
 8001a70:	d19f      	bne.n	80019b2 <XMC_USBD_EndpointConfigure+0x146>
					data.b.mps = 0x0U;
 8001a72:	f36f 030a 	bfc	r3, #0, #11
					break;
 8001a76:	e79c      	b.n	80019b2 <XMC_USBD_EndpointConfigure+0x146>
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001a78:	f1b9 0f00 	cmp.w	r9, #0
 8001a7c:	d1ac      	bne.n	80019d8 <XMC_USBD_EndpointConfigure+0x16c>
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <XMC_USBD_EndpointConfigure+0x280>)
 8001a80:	2234      	movs	r2, #52	; 0x34
 8001a82:	fb02 f205 	mul.w	r2, r2, r5
 8001a86:	5c9a      	ldrb	r2, [r3, r2]
 8001a88:	f002 020f 	and.w	r2, r2, #15
 8001a8c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001a90:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8001a94:	6813      	ldr	r3, [r2, #0]
		data.b.usbactep = 1U;
 8001a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 8001a9a:	f36f 4393 	bfc	r3, #18, #2
 8001a9e:	e7e1      	b.n	8001a64 <XMC_USBD_EndpointConfigure+0x1f8>
			switch(ep_max_packet_size)
 8001aa0:	2e08      	cmp	r6, #8
 8001aa2:	d186      	bne.n	80019b2 <XMC_USBD_EndpointConfigure+0x146>
					data.b.mps = 0x3U;
 8001aa4:	2103      	movs	r1, #3
 8001aa6:	f361 030a 	bfi	r3, r1, #0, #11
					break;
 8001aaa:	e782      	b.n	80019b2 <XMC_USBD_EndpointConfigure+0x146>
					data.b.mps = 0x1U;
 8001aac:	2101      	movs	r1, #1
 8001aae:	f361 030a 	bfi	r3, r1, #0, #11
					break;
 8001ab2:	e77e      	b.n	80019b2 <XMC_USBD_EndpointConfigure+0x146>
					data.b.mps = 0x2U;
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	f361 030a 	bfi	r3, r1, #0, #11
					break;
 8001aba:	e77a      	b.n	80019b2 <XMC_USBD_EndpointConfigure+0x146>
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001abc:	336a      	adds	r3, #106	; 0x6a
 8001abe:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <XMC_USBD_EndpointConfigure+0x280>)
 8001ac0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001ac4:	6820      	ldr	r0, [r4, #0]
		data.b.usbactep = 1U;
 8001ac6:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 8001aca:	f36f 4093 	bfc	r0, #18, #2
			switch(ep_max_packet_size)
 8001ace:	2e10      	cmp	r6, #16
 8001ad0:	d095      	beq.n	80019fe <XMC_USBD_EndpointConfigure+0x192>
 8001ad2:	d98a      	bls.n	80019ea <XMC_USBD_EndpointConfigure+0x17e>
 8001ad4:	2e20      	cmp	r6, #32
 8001ad6:	d08e      	beq.n	80019f6 <XMC_USBD_EndpointConfigure+0x18a>
 8001ad8:	2e40      	cmp	r6, #64	; 0x40
 8001ada:	f47f af18 	bne.w	800190e <XMC_USBD_EndpointConfigure+0xa2>
				data.b.mps = 0x0U;
 8001ade:	f36f 000a 	bfc	r0, #0, #11
				break;
 8001ae2:	e714      	b.n	800190e <XMC_USBD_EndpointConfigure+0xa2>
 8001ae4:	30000000 	.word	0x30000000
 8001ae8:	20000eb4 	.word	0x20000eb4
 8001aec:	20001380 	.word	0x20001380

08001af0 <XMC_USBD_EndpointRead>:
{
 8001af0:	b570      	push	{r4, r5, r6, lr}
 8001af2:	4606      	mov	r6, r0
 8001af4:	4608      	mov	r0, r1
  if (length > ep->outBytesAvailable)
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <XMC_USBD_EndpointRead+0x44>)
 8001af8:	2434      	movs	r4, #52	; 0x34
 8001afa:	fb04 3406 	mla	r4, r4, r6, r3
 8001afe:	6925      	ldr	r5, [r4, #16]
 8001b00:	4295      	cmp	r5, r2
 8001b02:	bf28      	it	cs
 8001b04:	4615      	movcs	r5, r2
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 8001b06:	68e1      	ldr	r1, [r4, #12]
 8001b08:	69a3      	ldr	r3, [r4, #24]
 8001b0a:	462a      	mov	r2, r5
 8001b0c:	4419      	add	r1, r3
 8001b0e:	f008 ff6d 	bl	800a9ec <memcpy>
  ep->outBytesAvailable -= length;
 8001b12:	6923      	ldr	r3, [r4, #16]
 8001b14:	1b5b      	subs	r3, r3, r5
 8001b16:	6123      	str	r3, [r4, #16]
  if (ep->outBytesAvailable)
 8001b18:	b93b      	cbnz	r3, 8001b2a <XMC_USBD_EndpointRead+0x3a>
    ep->outOffset = 0U;
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <XMC_USBD_EndpointRead+0x44>)
 8001b1c:	2234      	movs	r2, #52	; 0x34
 8001b1e:	fb02 3606 	mla	r6, r2, r6, r3
 8001b22:	2300      	movs	r3, #0
 8001b24:	61b3      	str	r3, [r6, #24]
}
 8001b26:	4628      	mov	r0, r5
 8001b28:	bd70      	pop	{r4, r5, r6, pc}
    ep->outOffset += length;
 8001b2a:	69a3      	ldr	r3, [r4, #24]
 8001b2c:	442b      	add	r3, r5
 8001b2e:	61a3      	str	r3, [r4, #24]
 8001b30:	e7f9      	b.n	8001b26 <XMC_USBD_EndpointRead+0x36>
 8001b32:	bf00      	nop
 8001b34:	20001380 	.word	0x20001380

08001b38 <XMC_USBD_EndpointWrite>:
{
 8001b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b3c:	f000 050f 	and.w	r5, r0, #15
  if (!ep->isConfigured)
 8001b40:	4817      	ldr	r0, [pc, #92]	; (8001ba0 <XMC_USBD_EndpointWrite+0x68>)
 8001b42:	2334      	movs	r3, #52	; 0x34
 8001b44:	fb03 0305 	mla	r3, r3, r5, r0
 8001b48:	791b      	ldrb	r3, [r3, #4]
 8001b4a:	f013 0f04 	tst.w	r3, #4
 8001b4e:	d021      	beq.n	8001b94 <XMC_USBD_EndpointWrite+0x5c>
  else if (ep->inInUse == 1U)
 8001b50:	2334      	movs	r3, #52	; 0x34
 8001b52:	fb03 0305 	mla	r3, r3, r5, r0
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f013 0f08 	tst.w	r3, #8
 8001b5c:	d11d      	bne.n	8001b9a <XMC_USBD_EndpointWrite+0x62>
    if (length > ep->inBufferSize)
 8001b5e:	f04f 0834 	mov.w	r8, #52	; 0x34
 8001b62:	fb08 0405 	mla	r4, r8, r5, r0
 8001b66:	6a26      	ldr	r6, [r4, #32]
 8001b68:	4296      	cmp	r6, r2
 8001b6a:	bf28      	it	cs
 8001b6c:	4616      	movcs	r6, r2
		memcpy(ep->inBuffer,(const void *)buffer,length);
 8001b6e:	4632      	mov	r2, r6
 8001b70:	69e0      	ldr	r0, [r4, #28]
 8001b72:	f008 ff3b 	bl	800a9ec <memcpy>
		ep->xferBuffer = ep->inBuffer;
 8001b76:	69e3      	ldr	r3, [r4, #28]
 8001b78:	6263      	str	r3, [r4, #36]	; 0x24
    ep->xferTotal = length;
 8001b7a:	6326      	str	r6, [r4, #48]	; 0x30
    ep->xferLength = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62a3      	str	r3, [r4, #40]	; 0x28
    ep->xferCount = 0U;
 8001b80:	62e3      	str	r3, [r4, #44]	; 0x2c
    ep->inInUse = 1U;
 8001b82:	6863      	ldr	r3, [r4, #4]
 8001b84:	f043 0308 	orr.w	r3, r3, #8
 8001b88:	6063      	str	r3, [r4, #4]
    XMC_USBD_lStartWriteXfer(ep);
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff fc6e 	bl	800146c <XMC_USBD_lStartWriteXfer>
    result=(int32_t)ep->xferTotal;
 8001b90:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001b92:	e000      	b.n	8001b96 <XMC_USBD_EndpointWrite+0x5e>
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 8001b94:	2001      	movs	r0, #1
}
 8001b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result=(int32_t)0;
 8001b9a:	2000      	movs	r0, #0
  return result;
 8001b9c:	e7fb      	b.n	8001b96 <XMC_USBD_EndpointWrite+0x5e>
 8001b9e:	bf00      	nop
 8001ba0:	20001380 	.word	0x20001380

08001ba4 <XMC_USBD_lDeviceActive>:
{
 8001ba4:	b430      	push	{r4, r5}
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001ba6:	7b05      	ldrb	r5, [r0, #12]
 8001ba8:	b1c5      	cbz	r5, 8001bdc <XMC_USBD_lDeviceActive+0x38>
 8001baa:	2300      	movs	r3, #0
  uint8_t result = 0U;
 8001bac:	4618      	mov	r0, r3
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8001bae:	4c0d      	ldr	r4, [pc, #52]	; (8001be4 <XMC_USBD_lDeviceActive+0x40>)
 8001bb0:	2134      	movs	r1, #52	; 0x34
 8001bb2:	e004      	b.n	8001bbe <XMC_USBD_lDeviceActive+0x1a>
      result = 1U;
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	3301      	adds	r3, #1
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	42aa      	cmp	r2, r5
 8001bbc:	d20f      	bcs.n	8001bde <XMC_USBD_lDeviceActive+0x3a>
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8001bbe:	fb01 4203 	mla	r2, r1, r3, r4
 8001bc2:	6852      	ldr	r2, [r2, #4]
 8001bc4:	f012 0f08 	tst.w	r2, #8
 8001bc8:	d1f4      	bne.n	8001bb4 <XMC_USBD_lDeviceActive+0x10>
 8001bca:	fb01 4203 	mla	r2, r1, r3, r4
 8001bce:	6852      	ldr	r2, [r2, #4]
 8001bd0:	f3c2 1200 	ubfx	r2, r2, #4, #1
      result = 1U;
 8001bd4:	2a00      	cmp	r2, #0
 8001bd6:	bf18      	it	ne
 8001bd8:	2001      	movne	r0, #1
 8001bda:	e7ec      	b.n	8001bb6 <XMC_USBD_lDeviceActive+0x12>
  uint8_t result = 0U;
 8001bdc:	4628      	mov	r0, r5
}
 8001bde:	bc30      	pop	{r4, r5}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20001380 	.word	0x20001380

08001be8 <XMC_USBD_DeviceGetState>:
{
 8001be8:	b570      	push	{r4, r5, r6, lr}
  XMC_USBD_STATE_t state={0U};
 8001bea:	2400      	movs	r4, #0
  state.connected = xmc_device.IsConnected;
 8001bec:	4e0a      	ldr	r6, [pc, #40]	; (8001c18 <XMC_USBD_DeviceGetState+0x30>)
 8001bee:	f896 51fe 	ldrb.w	r5, [r6, #510]	; 0x1fe
 8001bf2:	f005 0501 	and.w	r5, r5, #1
  state.active = XMC_USBD_lDeviceActive(obj);
 8001bf6:	f7ff ffd5 	bl	8001ba4 <XMC_USBD_lDeviceActive>
  state.powered = xmc_device.IsPowered;
 8001bfa:	f896 31fe 	ldrb.w	r3, [r6, #510]	; 0x1fe
 8001bfe:	f3c3 0380 	ubfx	r3, r3, #2, #1
  return state;
 8001c02:	f363 0400 	bfi	r4, r3, #0, #1
 8001c06:	f365 0441 	bfi	r4, r5, #1, #1
 8001c0a:	f360 0482 	bfi	r4, r0, #2, #1
 8001c0e:	2301      	movs	r3, #1
 8001c10:	f363 04c4 	bfi	r4, r3, #3, #2
}
 8001c14:	4620      	mov	r0, r4
 8001c16:	bd70      	pop	{r4, r5, r6, pc}
 8001c18:	20001380 	.word	0x20001380

08001c1c <XMC_USBD_Enable>:
{
 8001c1c:	b508      	push	{r3, lr}
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8001c1e:	4803      	ldr	r0, [pc, #12]	; (8001c2c <XMC_USBD_Enable+0x10>)
 8001c20:	f001 f90a 	bl	8002e38 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 8001c24:	f001 fb48 	bl	80032b8 <XMC_SCU_POWER_EnableUsb>
}
 8001c28:	bd08      	pop	{r3, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000080 	.word	0x20000080

08001c30 <XMC_USBD_Init>:
{
 8001c30:	b538      	push	{r3, r4, r5, lr}
 8001c32:	4604      	mov	r4, r0
  XMC_USBD_Enable();
 8001c34:	f7ff fff2 	bl	8001c1c <XMC_USBD_Enable>
  usbd_init = obj;
 8001c38:	4b40      	ldr	r3, [pc, #256]	; (8001d3c <XMC_USBD_Init+0x10c>)
 8001c3a:	601c      	str	r4, [r3, #0]
 8001c3c:	4840      	ldr	r0, [pc, #256]	; (8001d40 <XMC_USBD_Init+0x110>)
 8001c3e:	f100 0318 	add.w	r3, r0, #24
 8001c42:	1f01      	subs	r1, r0, #4
 8001c44:	3034      	adds	r0, #52	; 0x34
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 8001c46:	2240      	movs	r2, #64	; 0x40
 8001c48:	f843 2f04 	str.w	r2, [r3, #4]!
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 8001c4c:	f841 2f04 	str.w	r2, [r1, #4]!
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8001c50:	4283      	cmp	r3, r0
 8001c52:	d1f9      	bne.n	8001c48 <XMC_USBD_Init+0x18>
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 8001c54:	4d3b      	ldr	r5, [pc, #236]	; (8001d44 <XMC_USBD_Init+0x114>)
 8001c56:	f44f 7202 	mov.w	r2, #520	; 0x208
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4628      	mov	r0, r5
 8001c5e:	f008 ffc3 	bl	800abe8 <memset>
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 8001c62:	6863      	ldr	r3, [r4, #4]
 8001c64:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 8001c68:	68a3      	ldr	r3, [r4, #8]
 8001c6a:	f8c5 3204 	str.w	r3, [r5, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 8001c6e:	6820      	ldr	r0, [r4, #0]
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 8001c70:	f8c5 01a0 	str.w	r0, [r5, #416]	; 0x1a0
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 8001c74:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8001c78:	f8c5 31a4 	str.w	r3, [r5, #420]	; 0x1a4
 8001c7c:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 8001c80:	f505 73d4 	add.w	r3, r5, #424	; 0x1a8
 8001c84:	f505 71e2 	add.w	r1, r5, #452	; 0x1c4
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 8001c88:	f843 2b04 	str.w	r2, [r3], #4
 8001c8c:	3220      	adds	r2, #32
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8001c8e:	428b      	cmp	r3, r1
 8001c90:	d1fa      	bne.n	8001c88 <XMC_USBD_Init+0x58>
 8001c92:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8001c96:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <XMC_USBD_Init+0x118>)
 8001c98:	f505 71f0 	add.w	r1, r5, #480	; 0x1e0
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 8001c9c:	f843 2b04 	str.w	r2, [r3], #4
 8001ca0:	3220      	adds	r2, #32
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8001ca2:	428b      	cmp	r3, r1
 8001ca4:	d1fa      	bne.n	8001c9c <XMC_USBD_Init+0x6c>
 8001ca6:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 8001caa:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <XMC_USBD_Init+0x11c>)
 8001cac:	f505 75fe 	add.w	r5, r5, #508	; 0x1fc
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 8001cb0:	f843 2b04 	str.w	r2, [r3], #4
 8001cb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8001cb8:	42ab      	cmp	r3, r5
 8001cba:	d1f9      	bne.n	8001cb0 <XMC_USBD_Init+0x80>
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 8001cbc:	6883      	ldr	r3, [r0, #8]
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 8001cbe:	f043 0381 	orr.w	r3, r3, #129	; 0x81
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001cc2:	7b62      	ldrb	r2, [r4, #13]
 8001cc4:	2a00      	cmp	r2, #0
 8001cc6:	d135      	bne.n	8001d34 <XMC_USBD_Init+0x104>
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 8001cc8:	f043 0320 	orr.w	r3, r3, #32
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 8001ccc:	6083      	str	r3, [r0, #8]
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 8001cce:	4d1d      	ldr	r5, [pc, #116]	; (8001d44 <XMC_USBD_Init+0x114>)
 8001cd0:	f8d5 21a0 	ldr.w	r2, [r5, #416]	; 0x1a0
 8001cd4:	68d3      	ldr	r3, [r2, #12]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 8001cd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8001cde:	60d3      	str	r3, [r2, #12]
  dcfg.d32 = xmc_device.device_register->dcfg;
 8001ce0:	f8d5 21a4 	ldr.w	r2, [r5, #420]	; 0x1a4
 8001ce4:	6813      	ldr	r3, [r2, #0]
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 8001ce6:	f043 0303 	orr.w	r3, r3, #3
  dcfg.b.descdma = 0U;
 8001cea:	f36f 53d7 	bfc	r3, #23, #1
  xmc_device.device_register->dcfg = dcfg.d32;
 8001cee:	6013      	str	r3, [r2, #0]
  dctl.d32 = xmc_device.device_register->dctl;
 8001cf0:	f8d5 21a4 	ldr.w	r2, [r5, #420]	; 0x1a4
 8001cf4:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 8001cf6:	f043 0302 	orr.w	r3, r3, #2
  xmc_device.device_register->dctl = dctl.d32;
 8001cfa:	6053      	str	r3, [r2, #4]
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 8001cfc:	2010      	movs	r0, #16
 8001cfe:	f7ff fb19 	bl	8001334 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8001d02:	f7ff fb3d 	bl	8001380 <XMC_USBD_lFlushRXFifo>
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 8001d06:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	619a      	str	r2, [r3, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 8001d0e:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001d12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d16:	615a      	str	r2, [r3, #20]
  gintmsk.b.sofintr = 1U;
 8001d18:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <XMC_USBD_Init+0x120>)
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001d1a:	7b62      	ldrb	r2, [r4, #13]
 8001d1c:	2a01      	cmp	r2, #1
    gintmsk.b.rxstsqlvl = 1U;
 8001d1e:	bf08      	it	eq
 8001d20:	f043 0310 	orreq.w	r3, r3, #16
  gintmsk.b.inepintr = 1U;
 8001d24:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
  xmc_device.global_register->gintmsk = gintmsk.d32;
 8001d28:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <XMC_USBD_Init+0x114>)
 8001d2a:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 8001d2e:	6193      	str	r3, [r2, #24]
}
 8001d30:	2000      	movs	r0, #0
 8001d32:	bd38      	pop	{r3, r4, r5, pc}
    gahbcfg.b.dmaenable = 0U;
 8001d34:	f36f 1345 	bfc	r3, #5, #1
 8001d38:	e7c8      	b.n	8001ccc <XMC_USBD_Init+0x9c>
 8001d3a:	bf00      	nop
 8001d3c:	2000137c 	.word	0x2000137c
 8001d40:	20000eb4 	.word	0x20000eb4
 8001d44:	20001380 	.word	0x20001380
 8001d48:	20001544 	.word	0x20001544
 8001d4c:	20001560 	.word	0x20001560
 8001d50:	c0003c0e 	.word	0xc0003c0e

08001d54 <XMC_USBD_Disable>:
{
 8001d54:	b508      	push	{r3, lr}
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8001d56:	4803      	ldr	r0, [pc, #12]	; (8001d64 <XMC_USBD_Disable+0x10>)
 8001d58:	f001 f862 	bl	8002e20 <XMC_SCU_RESET_AssertPeripheralReset>
  XMC_SCU_POWER_DisableUsb();
 8001d5c:	f001 fab4 	bl	80032c8 <XMC_SCU_POWER_DisableUsb>
}
 8001d60:	bd08      	pop	{r3, pc}
 8001d62:	bf00      	nop
 8001d64:	20000080 	.word	0x20000080

08001d68 <XMC_USBD_ClearEvent>:
  clear.d32 = 0U;
 8001d68:	2300      	movs	r3, #0
  switch(event)
 8001d6a:	280d      	cmp	r0, #13
 8001d6c:	d80a      	bhi.n	8001d84 <XMC_USBD_ClearEvent+0x1c>
 8001d6e:	e8df f000 	tbb	[pc, r0]
 8001d72:	0907      	.short	0x0907
 8001d74:	090e0909 	.word	0x090e0909
 8001d78:	1a171411 	.word	0x1a171411
 8001d7c:	22091f1c 	.word	0x22091f1c
	  clear.b.sessreqintr = 1U;
 8001d80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	xmc_device.global_register->gintsts = clear.d32;
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <XMC_USBD_ClearEvent+0x54>)
 8001d86:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 8001d8a:	6153      	str	r3, [r2, #20]
}
 8001d8c:	4770      	bx	lr
	  clear.b.usbreset = 1U;
 8001d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  break;
 8001d92:	e7f7      	b.n	8001d84 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.usbsuspend = 1U;
 8001d94:	f44f 6300 	mov.w	r3, #2048	; 0x800
	  break;
 8001d98:	e7f4      	b.n	8001d84 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.wkupintr = 1U;
 8001d9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	  break;
 8001d9e:	e7f1      	b.n	8001d84 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.wkupintr = 1U;
 8001da0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	  break;
 8001da4:	e7ee      	b.n	8001d84 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.sofintr = 1U;
 8001da6:	2308      	movs	r3, #8
	  break;
 8001da8:	e7ec      	b.n	8001d84 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.erlysuspend = 1U;
 8001daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
	  break;
 8001dae:	e7e9      	b.n	8001d84 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.enumdone = 1U;
 8001db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	  break;
 8001db4:	e7e6      	b.n	8001d84 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.outepintr = 1U;
 8001db6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	  break;
 8001dba:	e7e3      	b.n	8001d84 <XMC_USBD_ClearEvent+0x1c>
 8001dbc:	20001380 	.word	0x20001380

08001dc0 <XMC_USBD_ClearEventINEP>:
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8001dc0:	316a      	adds	r1, #106	; 0x6a
 8001dc2:	4b02      	ldr	r3, [pc, #8]	; (8001dcc <XMC_USBD_ClearEventINEP+0xc>)
 8001dc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001dc8:	6098      	str	r0, [r3, #8]
}
 8001dca:	4770      	bx	lr
 8001dcc:	20001380 	.word	0x20001380

08001dd0 <XMC_USBD_ClearEventOUTEP>:
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <XMC_USBD_ClearEventOUTEP+0x10>)
 8001dd2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001dd6:	f8d1 31c4 	ldr.w	r3, [r1, #452]	; 0x1c4
 8001dda:	6098      	str	r0, [r3, #8]
}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20001380 	.word	0x20001380

08001de4 <XMC_USBD_EnableEventOUTEP>:
	xmc_device.device_register->doepmsk |= doepint.d32;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <XMC_USBD_EnableEventOUTEP+0x10>)
 8001de6:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001dea:	6953      	ldr	r3, [r2, #20]
 8001dec:	4318      	orrs	r0, r3
 8001dee:	6150      	str	r0, [r2, #20]
}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20001380 	.word	0x20001380

08001df8 <XMC_USBD_EnableEventINEP>:
	xmc_device.device_register->diepmsk |= diepint.d32;
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <XMC_USBD_EnableEventINEP+0x10>)
 8001dfa:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001dfe:	6913      	ldr	r3, [r2, #16]
 8001e00:	4318      	orrs	r0, r3
 8001e02:	6110      	str	r0, [r2, #16]
}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20001380 	.word	0x20001380

08001e0c <XMC_USBD_IRQHandler>:
{
 8001e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e10:	b085      	sub	sp, #20
 8001e12:	4683      	mov	fp, r0
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 8001e14:	4bc3      	ldr	r3, [pc, #780]	; (8002124 <XMC_USBD_IRQHandler+0x318>)
 8001e16:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001e1a:	699c      	ldr	r4, [r3, #24]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8001e1c:	695e      	ldr	r6, [r3, #20]
 8001e1e:	4026      	ands	r6, r4
 8001e20:	b2f3      	uxtb	r3, r6
 8001e22:	9301      	str	r3, [sp, #4]
  if (data.b.sofintr)
 8001e24:	f013 0f08 	tst.w	r3, #8
 8001e28:	d007      	beq.n	8001e3a <XMC_USBD_IRQHandler+0x2e>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 8001e2a:	4bbe      	ldr	r3, [pc, #760]	; (8002124 <XMC_USBD_IRQHandler+0x318>)
 8001e2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e30:	2009      	movs	r0, #9
 8001e32:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 8001e34:	2009      	movs	r0, #9
 8001e36:	f7ff ff97 	bl	8001d68 <XMC_USBD_ClearEvent>
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001e3a:	f89b 300d 	ldrb.w	r3, [fp, #13]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d047      	beq.n	8001ed2 <XMC_USBD_IRQHandler+0xc6>
 8001e42:	f3c6 2407 	ubfx	r4, r6, #8, #8
  if (data.b.erlysuspend)
 8001e46:	f014 0f04 	tst.w	r4, #4
 8001e4a:	d16a      	bne.n	8001f22 <XMC_USBD_IRQHandler+0x116>
  if (data.b.usbsuspend)
 8001e4c:	f014 0f08 	tst.w	r4, #8
 8001e50:	d007      	beq.n	8001e62 <XMC_USBD_IRQHandler+0x56>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 8001e52:	4bb4      	ldr	r3, [pc, #720]	; (8002124 <XMC_USBD_IRQHandler+0x318>)
 8001e54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e58:	2006      	movs	r0, #6
 8001e5a:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 8001e5c:	2006      	movs	r0, #6
 8001e5e:	f7ff ff83 	bl	8001d68 <XMC_USBD_ClearEvent>
 8001e62:	f3c6 6307 	ubfx	r3, r6, #24, #8
 8001e66:	b2dd      	uxtb	r5, r3
  if (data.b.wkupintr)
 8001e68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001e6c:	d007      	beq.n	8001e7e <XMC_USBD_IRQHandler+0x72>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8001e6e:	4bad      	ldr	r3, [pc, #692]	; (8002124 <XMC_USBD_IRQHandler+0x318>)
 8001e70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e74:	2008      	movs	r0, #8
 8001e76:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8001e78:	2008      	movs	r0, #8
 8001e7a:	f7ff ff75 	bl	8001d68 <XMC_USBD_ClearEvent>
  if (data.b.sessreqintr)
 8001e7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001e82:	d00d      	beq.n	8001ea0 <XMC_USBD_IRQHandler+0x94>
    xmc_device.IsPowered = 1U;
 8001e84:	4ba7      	ldr	r3, [pc, #668]	; (8002124 <XMC_USBD_IRQHandler+0x318>)
 8001e86:	f893 21fe 	ldrb.w	r2, [r3, #510]	; 0x1fe
 8001e8a:	f042 0204 	orr.w	r2, r2, #4
 8001e8e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 8001e92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e96:	2000      	movs	r0, #0
 8001e98:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7ff ff64 	bl	8001d68 <XMC_USBD_ClearEvent>
  if (data.b.usbreset)
 8001ea0:	f014 0f10 	tst.w	r4, #16
 8001ea4:	d141      	bne.n	8001f2a <XMC_USBD_IRQHandler+0x11e>
  if (data.b.enumdone)
 8001ea6:	f014 0f20 	tst.w	r4, #32
 8001eaa:	f040 80b1 	bne.w	8002010 <XMC_USBD_IRQHandler+0x204>
 8001eae:	f3c6 4607 	ubfx	r6, r6, #16, #8
  if (data.b.inepint)
 8001eb2:	f016 0f04 	tst.w	r6, #4
 8001eb6:	f040 80c7 	bne.w	8002048 <XMC_USBD_IRQHandler+0x23c>
  if (data.b.outepintr)
 8001eba:	f016 0f08 	tst.w	r6, #8
 8001ebe:	f040 817f 	bne.w	80021c0 <XMC_USBD_IRQHandler+0x3b4>
	if (data.b.otgintr)
 8001ec2:	9b01      	ldr	r3, [sp, #4]
 8001ec4:	f013 0f04 	tst.w	r3, #4
 8001ec8:	f040 8211 	bne.w	80022ee <XMC_USBD_IRQHandler+0x4e2>
}
 8001ecc:	b005      	add	sp, #20
 8001ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (data.b.rxstsqlvl)
 8001ed2:	9b01      	ldr	r3, [sp, #4]
 8001ed4:	f013 0f10 	tst.w	r3, #16
 8001ed8:	d0b3      	beq.n	8001e42 <XMC_USBD_IRQHandler+0x36>
      gintmsk.b.rxstsqlvl = 0U;
 8001eda:	f36f 1404 	bfc	r4, #4, #1
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8001ede:	4b91      	ldr	r3, [pc, #580]	; (8002124 <XMC_USBD_IRQHandler+0x318>)
 8001ee0:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 8001ee4:	6194      	str	r4, [r2, #24]
  data.d32 = xmc_device.global_register->grxstsp;
 8001ee6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001eea:	6a18      	ldr	r0, [r3, #32]
  switch (data.b.pktsts)
 8001eec:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d008      	beq.n	8001f06 <XMC_USBD_IRQHandler+0xfa>
 8001ef4:	2b06      	cmp	r3, #6
 8001ef6:	d00d      	beq.n	8001f14 <XMC_USBD_IRQHandler+0x108>
      gintmsk.b.rxstsqlvl = 1U;
 8001ef8:	f044 0410 	orr.w	r4, r4, #16
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8001efc:	4b89      	ldr	r3, [pc, #548]	; (8002124 <XMC_USBD_IRQHandler+0x318>)
 8001efe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001f02:	619c      	str	r4, [r3, #24]
 8001f04:	e79d      	b.n	8001e42 <XMC_USBD_IRQHandler+0x36>
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8001f06:	f3c0 110a 	ubfx	r1, r0, #4, #11
 8001f0a:	f000 000f 	and.w	r0, r0, #15
 8001f0e:	f7ff f9c5 	bl	800129c <XMC_USBD_lReadFifo>
 8001f12:	e7f1      	b.n	8001ef8 <XMC_USBD_IRQHandler+0xec>
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8001f14:	f3c0 110a 	ubfx	r1, r0, #4, #11
 8001f18:	f000 000f 	and.w	r0, r0, #15
 8001f1c:	f7ff f9be 	bl	800129c <XMC_USBD_lReadFifo>
 8001f20:	e7ea      	b.n	8001ef8 <XMC_USBD_IRQHandler+0xec>
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 8001f22:	200a      	movs	r0, #10
 8001f24:	f7ff ff20 	bl	8001d68 <XMC_USBD_ClearEvent>
 8001f28:	e790      	b.n	8001e4c <XMC_USBD_IRQHandler+0x40>
  dctl.d32 = xmc_device.device_register->dctl;
 8001f2a:	487e      	ldr	r0, [pc, #504]	; (8002124 <XMC_USBD_IRQHandler+0x318>)
 8001f2c:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
 8001f30:	6853      	ldr	r3, [r2, #4]
  dctl.b.rmtwkupsig = 1U;
 8001f32:	f043 0301 	orr.w	r3, r3, #1
  xmc_device.device_register->dctl = dctl.d32;
 8001f36:	6053      	str	r3, [r2, #4]
 8001f38:	f500 72e2 	add.w	r2, r0, #452	; 0x1c4
 8001f3c:	f500 70f0 	add.w	r0, r0, #480	; 0x1e0
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001f40:	f852 1b04 	ldr.w	r1, [r2], #4
 8001f44:	680b      	ldr	r3, [r1, #0]
		epctl.b.snak = 1U;
 8001f46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 8001f4a:	f36f 5355 	bfc	r3, #21, #1
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001f4e:	600b      	str	r3, [r1, #0]
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8001f50:	4282      	cmp	r2, r0
 8001f52:	d1f5      	bne.n	8001f40 <XMC_USBD_IRQHandler+0x134>
  xmc_device.global_register->grxfsiz = 64U;
 8001f54:	4d73      	ldr	r5, [pc, #460]	; (8002124 <XMC_USBD_IRQHandler+0x318>)
 8001f56:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001f5a:	2240      	movs	r2, #64	; 0x40
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24
  gnptxfsiz.b.depth = 16U;
 8001f5e:	2010      	movs	r0, #16
 8001f60:	2300      	movs	r3, #0
 8001f62:	f360 431f 	bfi	r3, r0, #16, #16
  gnptxfsiz.b.startaddr = 64U;
 8001f66:	f362 030f 	bfi	r3, r2, #0, #16
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 8001f6a:	f8d5 21a0 	ldr.w	r2, [r5, #416]	; 0x1a0
 8001f6e:	6293      	str	r3, [r2, #40]	; 0x28
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001f70:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001f74:	4a6c      	ldr	r2, [pc, #432]	; (8002128 <XMC_USBD_IRQHandler+0x31c>)
 8001f76:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8001f7a:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001f7e:	3210      	adds	r2, #16
 8001f80:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8001f84:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001f88:	3210      	adds	r2, #16
 8001f8a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8001f8e:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001f92:	3210      	adds	r2, #16
 8001f94:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8001f98:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001f9c:	3210      	adds	r2, #16
 8001f9e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001fa2:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001fa6:	3210      	adds	r2, #16
 8001fa8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 8001fac:	f7ff f9c2 	bl	8001334 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushTXFifo(0x0U);
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f7ff f9bf 	bl	8001334 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8001fb6:	f7ff f9e3 	bl	8001380 <XMC_USBD_lFlushRXFifo>
  xmc_device.device_register->daintmsk = daint.d32;
 8001fba:	f8d5 31a4 	ldr.w	r3, [r5, #420]	; 0x1a4
 8001fbe:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001fc2:	61da      	str	r2, [r3, #28]
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 8001fc4:	200f      	movs	r0, #15
 8001fc6:	f7ff ff0d 	bl	8001de4 <XMC_USBD_EnableEventOUTEP>
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 8001fca:	200f      	movs	r0, #15
 8001fcc:	f7ff ff14 	bl	8001df8 <XMC_USBD_EnableEventINEP>
  dcfg.d32 = xmc_device.device_register->dcfg;
 8001fd0:	f8d5 21a4 	ldr.w	r2, [r5, #420]	; 0x1a4
 8001fd4:	6813      	ldr	r3, [r2, #0]
  dcfg.b.devaddr = 0U;
 8001fd6:	f36f 130a 	bfc	r3, #4, #7
  xmc_device.device_register->dcfg = dcfg.d32;
 8001fda:	6013      	str	r3, [r2, #0]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001fdc:	f89b 300d 	ldrb.w	r3, [fp, #13]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d010      	beq.n	8002006 <XMC_USBD_IRQHandler+0x1fa>
  xmc_device.ep[0U].outInUse = 0U;
 8001fe4:	4b4f      	ldr	r3, [pc, #316]	; (8002124 <XMC_USBD_IRQHandler+0x318>)
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	f36f 1204 	bfc	r2, #4, #1
 8001fec:	605a      	str	r2, [r3, #4]
  xmc_device.ep[0U].inInUse = 0U;
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	f36f 02c3 	bfc	r2, #3, #1
 8001ff4:	605a      	str	r2, [r3, #4]
  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 8001ff6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ffa:	2004      	movs	r0, #4
 8001ffc:	4798      	blx	r3
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 8001ffe:	2004      	movs	r0, #4
 8002000:	f7ff feb2 	bl	8001d68 <XMC_USBD_ClearEvent>
 8002004:	e74f      	b.n	8001ea6 <XMC_USBD_IRQHandler+0x9a>
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 8002006:	f8d5 31a4 	ldr.w	r3, [r5, #420]	; 0x1a4
 800200a:	2200      	movs	r2, #0
 800200c:	635a      	str	r2, [r3, #52]	; 0x34
 800200e:	e7e9      	b.n	8001fe4 <XMC_USBD_IRQHandler+0x1d8>
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 8002010:	4c44      	ldr	r4, [pc, #272]	; (8002124 <XMC_USBD_IRQHandler+0x318>)
 8002012:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
 8002016:	6813      	ldr	r3, [r2, #0]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8002018:	f36f 030a 	bfc	r3, #0, #11
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 800201c:	6013      	str	r3, [r2, #0]
  xmc_device.IsConnected = 1U;
 800201e:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 8002022:	f043 0305 	orr.w	r3, r3, #5
 8002026:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 800202a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800202e:	2002      	movs	r0, #2
 8002030:	4798      	blx	r3
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 8002032:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 8002036:	68d3      	ldr	r3, [r2, #12]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 8002038:	2109      	movs	r1, #9
 800203a:	f361 238d 	bfi	r3, r1, #10, #4
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 800203e:	60d3      	str	r3, [r2, #12]
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 8002040:	200b      	movs	r0, #11
 8002042:	f7ff fe91 	bl	8001d68 <XMC_USBD_ClearEvent>
 8002046:	e732      	b.n	8001eae <XMC_USBD_IRQHandler+0xa2>
  daint.d32 = xmc_device.device_register->daint;
 8002048:	4b36      	ldr	r3, [pc, #216]	; (8002124 <XMC_USBD_IRQHandler+0x318>)
 800204a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800204e:	699a      	ldr	r2, [r3, #24]
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 8002050:	6919      	ldr	r1, [r3, #16]
  while ((uint16_t)mask >> ep_num)
 8002052:	fa1f f982 	uxth.w	r9, r2
 8002056:	f1b9 0f00 	cmp.w	r9, #0
 800205a:	f000 80ad 	beq.w	80021b8 <XMC_USBD_IRQHandler+0x3ac>
 800205e:	464b      	mov	r3, r9
  dieptsiz.d32 = 0U;
 8002060:	2200      	movs	r2, #0
 8002062:	9202      	str	r2, [sp, #8]
  ep_num = 0U;
 8002064:	4615      	mov	r5, r2
  while ((uint16_t)mask >> ep_num)
 8002066:	4617      	mov	r7, r2
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8002068:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8002124 <XMC_USBD_IRQHandler+0x318>
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 800206c:	f04f 0a34 	mov.w	sl, #52	; 0x34
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 8002070:	9603      	str	r6, [sp, #12]
 8002072:	460e      	mov	r6, r1
 8002074:	e029      	b.n	80020ca <XMC_USBD_IRQHandler+0x2be>
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8002076:	2901      	cmp	r1, #1
 8002078:	f040 8150 	bne.w	800231c <XMC_USBD_IRQHandler+0x510>
        if (diepint.b.emptyintr)
 800207c:	f014 0f80 	tst.w	r4, #128	; 0x80
 8002080:	d154      	bne.n	800212c <XMC_USBD_IRQHandler+0x320>
      if (diepint.b.xfercompl)
 8002082:	f014 0f01 	tst.w	r4, #1
 8002086:	d016      	beq.n	80020b6 <XMC_USBD_IRQHandler+0x2aa>
        if (ep->xferTotal==ep->xferLength)
 8002088:	fb0a 8307 	mla	r3, sl, r7, r8
 800208c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	429a      	cmp	r2, r3
 8002092:	f040 808b 	bne.w	80021ac <XMC_USBD_IRQHandler+0x3a0>
          ep->inInUse = 0U;
 8002096:	fb0a 8307 	mla	r3, sl, r7, r8
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	f36f 02c3 	bfc	r2, #3, #1
 80020a0:	605a      	str	r2, [r3, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80020a2:	f89b 300d 	ldrb.w	r3, [fp, #13]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d077      	beq.n	800219a <XMC_USBD_IRQHandler+0x38e>
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 80020aa:	f8d8 3204 	ldr.w	r3, [r8, #516]	; 0x204
 80020ae:	2102      	movs	r1, #2
 80020b0:	f045 0080 	orr.w	r0, r5, #128	; 0x80
 80020b4:	4798      	blx	r3
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 80020b6:	376a      	adds	r7, #106	; 0x6a
 80020b8:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
 80020bc:	609c      	str	r4, [r3, #8]
    ep_num++;
 80020be:	3501      	adds	r5, #1
 80020c0:	b2ed      	uxtb	r5, r5
  while ((uint16_t)mask >> ep_num)
 80020c2:	462f      	mov	r7, r5
 80020c4:	fa59 f305 	asrs.w	r3, r9, r5
 80020c8:	d075      	beq.n	80021b6 <XMC_USBD_IRQHandler+0x3aa>
    if ((uint16_t)temp)
 80020ca:	f013 0f01 	tst.w	r3, #1
 80020ce:	d0f6      	beq.n	80020be <XMC_USBD_IRQHandler+0x2b2>
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 80020d0:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 80020d4:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
 80020d8:	6891      	ldr	r1, [r2, #8]
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 80020da:	f8d8 31a4 	ldr.w	r3, [r8, #420]	; 0x1a4
 80020de:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80020e0:	fb0a f307 	mul.w	r3, sl, r7
 80020e4:	f818 3003 	ldrb.w	r3, [r8, r3]
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	40dc      	lsrs	r4, r3
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 80020ee:	01e4      	lsls	r4, r4, #7
 80020f0:	b2e4      	uxtb	r4, r4
 80020f2:	4334      	orrs	r4, r6
      diepint.d32 = inepint &
 80020f4:	400c      	ands	r4, r1
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80020f6:	f89b 100d 	ldrb.w	r1, [fp, #13]
 80020fa:	2900      	cmp	r1, #0
 80020fc:	d1bb      	bne.n	8002076 <XMC_USBD_IRQHandler+0x26a>
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 80020fe:	6913      	ldr	r3, [r2, #16]
 8002100:	9302      	str	r3, [sp, #8]
      if (diepint.b.xfercompl)
 8002102:	f014 0f01 	tst.w	r4, #1
 8002106:	d0d6      	beq.n	80020b6 <XMC_USBD_IRQHandler+0x2aa>
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 8002108:	9b02      	ldr	r3, [sp, #8]
 800210a:	f033 4360 	bics.w	r3, r3, #3758096384	; 0xe0000000
 800210e:	d1bb      	bne.n	8002088 <XMC_USBD_IRQHandler+0x27c>
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 8002110:	fb0a 8307 	mla	r3, sl, r7, r8
 8002114:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002118:	1a81      	subs	r1, r0, r2
            ep->xferCount += Bytes;
 800211a:	62d8      	str	r0, [r3, #44]	; 0x2c
            ep->xferBuffer += Bytes;
 800211c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800211e:	440a      	add	r2, r1
 8002120:	625a      	str	r2, [r3, #36]	; 0x24
 8002122:	e7b1      	b.n	8002088 <XMC_USBD_IRQHandler+0x27c>
 8002124:	20001380 	.word	0x20001380
 8002128:	00100050 	.word	0x00100050
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 800212c:	f103 026a 	add.w	r2, r3, #106	; 0x6a
 8002130:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8002134:	6992      	ldr	r2, [r2, #24]
  byte_count = ep->xferLength - ep->xferCount;
 8002136:	fb0a 8107 	mla	r1, sl, r7, r8
 800213a:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800213c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  if (!byte_count)
 800213e:	ebb0 0e01 	subs.w	lr, r0, r1
 8002142:	d019      	beq.n	8002178 <XMC_USBD_IRQHandler+0x36c>
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 8002144:	f10e 0003 	add.w	r0, lr, #3
 8002148:	0880      	lsrs	r0, r0, #2
 800214a:	b292      	uxth	r2, r2
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 800214c:	4282      	cmp	r2, r0
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 800214e:	bf3c      	itt	cc
 8002150:	ea4f 0e82 	movcc.w	lr, r2, lsl #2
      word_count = (uint32_t)freeSpace.b.txfspcavail;
 8002154:	4610      	movcc	r0, r2
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8002156:	b178      	cbz	r0, 8002178 <XMC_USBD_IRQHandler+0x36c>
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8002158:	3378      	adds	r3, #120	; 0x78
 800215a:	f858 c023 	ldr.w	ip, [r8, r3, lsl #2]
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 800215e:	2100      	movs	r1, #0
      *fifo = *(uint32_t*)ep->xferBuffer;
 8002160:	fb0a 8207 	mla	r2, sl, r7, r8
 8002164:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8cc 3000 	str.w	r3, [ip]
      i++;
 800216c:	3101      	adds	r1, #1
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 800216e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002170:	3304      	adds	r3, #4
 8002172:	6253      	str	r3, [r2, #36]	; 0x24
 8002174:	4281      	cmp	r1, r0
 8002176:	d1f5      	bne.n	8002164 <XMC_USBD_IRQHandler+0x358>
          ep->xferCount += bytes;
 8002178:	fb0a 8307 	mla	r3, sl, r7, r8
 800217c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800217e:	4472      	add	r2, lr
 8002180:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8002182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002184:	4472      	add	r2, lr
 8002186:	625a      	str	r2, [r3, #36]	; 0x24
      if (diepint.b.xfercompl)
 8002188:	f014 0f01 	tst.w	r4, #1
 800218c:	d093      	beq.n	80020b6 <XMC_USBD_IRQHandler+0x2aa>
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800218e:	f89b 300d 	ldrb.w	r3, [fp, #13]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f47f af78 	bne.w	8002088 <XMC_USBD_IRQHandler+0x27c>
 8002198:	e7b6      	b.n	8002108 <XMC_USBD_IRQHandler+0x2fc>
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 800219a:	f8d8 11a4 	ldr.w	r1, [r8, #420]	; 0x1a4
 800219e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80021a0:	2201      	movs	r2, #1
 80021a2:	40ba      	lsls	r2, r7
 80021a4:	ea23 0302 	bic.w	r3, r3, r2
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 80021a8:	634b      	str	r3, [r1, #52]	; 0x34
 80021aa:	e77e      	b.n	80020aa <XMC_USBD_IRQHandler+0x29e>
          XMC_USBD_lStartWriteXfer(ep);
 80021ac:	fb0a 8007 	mla	r0, sl, r7, r8
 80021b0:	f7ff f95c 	bl	800146c <XMC_USBD_lStartWriteXfer>
 80021b4:	e77f      	b.n	80020b6 <XMC_USBD_IRQHandler+0x2aa>
 80021b6:	9e03      	ldr	r6, [sp, #12]
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 80021b8:	200e      	movs	r0, #14
 80021ba:	f7ff fdd5 	bl	8001d68 <XMC_USBD_ClearEvent>
 80021be:	e67c      	b.n	8001eba <XMC_USBD_IRQHandler+0xae>
  daint.d32 = xmc_device.device_register->daint;
 80021c0:	4b59      	ldr	r3, [pc, #356]	; (8002328 <XMC_USBD_IRQHandler+0x51c>)
 80021c2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80021c6:	699a      	ldr	r2, [r3, #24]
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 80021c8:	69de      	ldr	r6, [r3, #28]
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	9302      	str	r3, [sp, #8]
  doeptsiz.d32 = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	9303      	str	r3, [sp, #12]
  mask = daint.ep.out & daintmsk.ep.out;
 80021d2:	f3c6 460f 	ubfx	r6, r6, #16, #16
  while ((uint16_t)mask >> ep_num)
 80021d6:	ea16 4612 	ands.w	r6, r6, r2, lsr #16
 80021da:	f000 8084 	beq.w	80022e6 <XMC_USBD_IRQHandler+0x4da>
 80021de:	4633      	mov	r3, r6
  ep_num = 0U;
 80021e0:	2400      	movs	r4, #0
  while ((uint16_t)mask >> ep_num)
 80021e2:	4625      	mov	r5, r4
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 80021e4:	4f50      	ldr	r7, [pc, #320]	; (8002328 <XMC_USBD_IRQHandler+0x51c>)
        if (ep->xferTotal == ep->xferLength)
 80021e6:	f04f 0a34 	mov.w	sl, #52	; 0x34
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 80021ea:	46b0      	mov	r8, r6
 80021ec:	e024      	b.n	8002238 <XMC_USBD_IRQHandler+0x42c>
			ep->outBytesAvailable += ep->xferCount;
 80021ee:	fb0a 7305 	mla	r3, sl, r5, r7
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021f6:	440a      	add	r2, r1
 80021f8:	611a      	str	r2, [r3, #16]
 80021fa:	e048      	b.n	800228e <XMC_USBD_IRQHandler+0x482>
        if (ep->xferTotal == ep->xferLength)
 80021fc:	fb0a 7305 	mla	r3, sl, r5, r7
 8002200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	429a      	cmp	r2, r3
 8002206:	d169      	bne.n	80022dc <XMC_USBD_IRQHandler+0x4d0>
          ep->outBytesAvailable = ep->xferCount;
 8002208:	fb0a 7305 	mla	r3, sl, r5, r7
 800220c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220e:	611a      	str	r2, [r3, #16]
          ep->outInUse = 0U;
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	f36f 1204 	bfc	r2, #4, #1
 8002216:	605a      	str	r2, [r3, #4]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 8002218:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800221c:	2101      	movs	r1, #1
 800221e:	4620      	mov	r0, r4
 8002220:	4798      	blx	r3
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8002222:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8002226:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800222a:	609e      	str	r6, [r3, #8]
    ep_num++;
 800222c:	3401      	adds	r4, #1
 800222e:	b2e4      	uxtb	r4, r4
  while ((uint16_t)mask >> ep_num)
 8002230:	4625      	mov	r5, r4
 8002232:	fa58 f304 	asrs.w	r3, r8, r4
 8002236:	d056      	beq.n	80022e6 <XMC_USBD_IRQHandler+0x4da>
    if (temp)
 8002238:	f013 0f01 	tst.w	r3, #1
 800223c:	d0f6      	beq.n	800222c <XMC_USBD_IRQHandler+0x420>
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 800223e:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8002242:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8002246:	689e      	ldr	r6, [r3, #8]
 8002248:	9a02      	ldr	r2, [sp, #8]
 800224a:	4016      	ands	r6, r2
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800224c:	f89b 200d 	ldrb.w	r2, [fp, #13]
 8002250:	b90a      	cbnz	r2, 8002256 <XMC_USBD_IRQHandler+0x44a>
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	9303      	str	r3, [sp, #12]
 8002256:	fa5f f986 	uxtb.w	r9, r6
      if (doepint.b.setup)
 800225a:	f019 0f08 	tst.w	r9, #8
 800225e:	d027      	beq.n	80022b0 <XMC_USBD_IRQHandler+0x4a4>
        ep->isStalled = 0U;
 8002260:	fb0a 7305 	mla	r3, sl, r5, r7
 8002264:	791a      	ldrb	r2, [r3, #4]
 8002266:	f36f 1245 	bfc	r2, #5, #1
 800226a:	711a      	strb	r2, [r3, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800226c:	f89b 300d 	ldrb.w	r3, [fp, #13]
 8002270:	b94b      	cbnz	r3, 8002286 <XMC_USBD_IRQHandler+0x47a>
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 8002272:	fb0a 7205 	mla	r2, sl, r5, r7
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 8002276:	9b03      	ldr	r3, [sp, #12]
 8002278:	f3c3 7341 	ubfx	r3, r3, #29, #2
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 800227c:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	3318      	adds	r3, #24
 8002284:	6113      	str	r3, [r2, #16]
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8002286:	f89b 300d 	ldrb.w	r3, [fp, #13]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d0af      	beq.n	80021ee <XMC_USBD_IRQHandler+0x3e2>
		ep->outInUse = 0U;
 800228e:	fb0a 7305 	mla	r3, sl, r5, r7
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	f36f 1204 	bfc	r2, #4, #1
 8002298:	605a      	str	r2, [r3, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 800229a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800229e:	2100      	movs	r1, #0
 80022a0:	4608      	mov	r0, r1
 80022a2:	4798      	blx	r3
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 80022a4:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 80022a8:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80022ac:	2208      	movs	r2, #8
 80022ae:	609a      	str	r2, [r3, #8]
      if (doepint.b.xfercompl)
 80022b0:	f019 0f01 	tst.w	r9, #1
 80022b4:	d0b5      	beq.n	8002222 <XMC_USBD_IRQHandler+0x416>
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80022b6:	f89b 300d 	ldrb.w	r3, [fp, #13]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d19e      	bne.n	80021fc <XMC_USBD_IRQHandler+0x3f0>
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 80022be:	fb0a 7205 	mla	r2, sl, r5, r7
 80022c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80022c6:	1a5b      	subs	r3, r3, r1
 80022c8:	9803      	ldr	r0, [sp, #12]
 80022ca:	f3c0 0012 	ubfx	r0, r0, #0, #19
 80022ce:	1a1b      	subs	r3, r3, r0
          ep->xferCount += bytes;
 80022d0:	4419      	add	r1, r3
 80022d2:	62d1      	str	r1, [r2, #44]	; 0x2c
          ep->xferBuffer += bytes;
 80022d4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80022d6:	440b      	add	r3, r1
 80022d8:	6253      	str	r3, [r2, #36]	; 0x24
 80022da:	e78f      	b.n	80021fc <XMC_USBD_IRQHandler+0x3f0>
          XMC_USBD_lStartReadXfer(ep);
 80022dc:	fb0a 7005 	mla	r0, sl, r5, r7
 80022e0:	f7ff f86e 	bl	80013c0 <XMC_USBD_lStartReadXfer>
 80022e4:	e79d      	b.n	8002222 <XMC_USBD_IRQHandler+0x416>
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 80022e6:	200d      	movs	r0, #13
 80022e8:	f7ff fd3e 	bl	8001d68 <XMC_USBD_ClearEvent>
 80022ec:	e5e9      	b.n	8001ec2 <XMC_USBD_IRQHandler+0xb6>
  data.d32 = xmc_device.global_register->gotgint;
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <XMC_USBD_IRQHandler+0x51c>)
 80022f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80022f4:	685c      	ldr	r4, [r3, #4]
  if (data.b.sesenddet)
 80022f6:	f014 0f04 	tst.w	r4, #4
 80022fa:	d00a      	beq.n	8002312 <XMC_USBD_IRQHandler+0x506>
		xmc_device.IsPowered = 0U;
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <XMC_USBD_IRQHandler+0x51c>)
 80022fe:	f893 21fe 	ldrb.w	r2, [r3, #510]	; 0x1fe
 8002302:	f36f 0282 	bfc	r2, #2, #1
 8002306:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 800230a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800230e:	2001      	movs	r0, #1
 8002310:	4798      	blx	r3
  xmc_device.global_register->gotgint = clear.d32;
 8002312:	4b05      	ldr	r3, [pc, #20]	; (8002328 <XMC_USBD_IRQHandler+0x51c>)
 8002314:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002318:	605c      	str	r4, [r3, #4]
}
 800231a:	e5d7      	b.n	8001ecc <XMC_USBD_IRQHandler+0xc0>
      if (diepint.b.xfercompl)
 800231c:	f014 0f01 	tst.w	r4, #1
 8002320:	f47f aeb2 	bne.w	8002088 <XMC_USBD_IRQHandler+0x27c>
 8002324:	e6c7      	b.n	80020b6 <XMC_USBD_IRQHandler+0x2aa>
 8002326:	bf00      	nop
 8002328:	20001380 	.word	0x20001380

0800232c <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 800232c:	b510      	push	{r4, lr}
 800232e:	4604      	mov	r4, r0
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8002330:	2300      	movs	r3, #0
 8002332:	6143      	str	r3, [r0, #20]
 8002334:	6183      	str	r3, [r0, #24]
 8002336:	61c3      	str	r3, [r0, #28]

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 8002338:	2302      	movs	r3, #2
 800233a:	7183      	strb	r3, [r0, #6]
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 800233c:	7303      	strb	r3, [r0, #12]
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 800233e:	2303      	movs	r3, #3
 8002340:	7483      	strb	r3, [r0, #18]

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 8002342:	2101      	movs	r1, #1
 8002344:	3002      	adds	r0, #2
 8002346:	f000 fbd7 	bl	8002af8 <Endpoint_ConfigureEndpointTable>
 800234a:	4603      	mov	r3, r0
 800234c:	b908      	cbnz	r0, 8002352 <CDC_Device_ConfigureEndpoints+0x26>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
 800234e:	4618      	mov	r0, r3
 8002350:	bd10      	pop	{r4, pc}
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 8002352:	2101      	movs	r1, #1
 8002354:	f104 0008 	add.w	r0, r4, #8
 8002358:	f000 fbce 	bl	8002af8 <Endpoint_ConfigureEndpointTable>
 800235c:	4603      	mov	r3, r0
 800235e:	2800      	cmp	r0, #0
 8002360:	d0f5      	beq.n	800234e <CDC_Device_ConfigureEndpoints+0x22>
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 8002362:	2101      	movs	r1, #1
 8002364:	f104 000e 	add.w	r0, r4, #14
 8002368:	f000 fbc6 	bl	8002af8 <Endpoint_ConfigureEndpointTable>
 800236c:	4603      	mov	r3, r0
 800236e:	e7ee      	b.n	800234e <CDC_Device_ConfigureEndpoints+0x22>

08002370 <CDC_Device_SendString>:
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <CDC_Device_SendString+0x40>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b04      	cmp	r3, #4
 8002378:	d116      	bne.n	80023a8 <CDC_Device_SendString+0x38>
 800237a:	6983      	ldr	r3, [r0, #24]
 800237c:	b1b3      	cbz	r3, 80023ac <CDC_Device_SendString+0x3c>
{
 800237e:	b510      	push	{r4, lr}
 8002380:	460c      	mov	r4, r1
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8002382:	7883      	ldrb	r3, [r0, #2]
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002384:	4a0b      	ldr	r2, [pc, #44]	; (80023b4 <CDC_Device_SendString+0x44>)
 8002386:	f003 010f 	and.w	r1, r3, #15
 800238a:	f882 113c 	strb.w	r1, [r2, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800238e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002392:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 8002396:	4620      	mov	r0, r4
 8002398:	f008 fd72 	bl	800ae80 <strlen>
 800239c:	2200      	movs	r2, #0
 800239e:	b281      	uxth	r1, r0
 80023a0:	4620      	mov	r0, r4
 80023a2:	f001 fac7 	bl	8003934 <Endpoint_Write_Stream_LE>
}
 80023a6:	bd10      	pop	{r4, pc}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 80023a8:	2002      	movs	r0, #2
 80023aa:	4770      	bx	lr
 80023ac:	2002      	movs	r0, #2
}
 80023ae:	4770      	bx	lr
 80023b0:	20001589 	.word	0x20001589
 80023b4:	2000123c 	.word	0x2000123c

080023b8 <CDC_Device_SendData>:

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
 80023b8:	b538      	push	{r3, r4, r5, lr}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <CDC_Device_SendData+0x3c>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d113      	bne.n	80023ec <CDC_Device_SendData+0x34>
 80023c4:	6983      	ldr	r3, [r0, #24]
 80023c6:	b19b      	cbz	r3, 80023f0 <CDC_Device_SendData+0x38>
 80023c8:	4615      	mov	r5, r2
 80023ca:	460c      	mov	r4, r1
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80023cc:	7883      	ldrb	r3, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80023ce:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <CDC_Device_SendData+0x40>)
 80023d0:	f003 010f 	and.w	r1, r3, #15
 80023d4:	f882 113c 	strb.w	r1, [r2, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80023d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80023dc:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 80023e0:	2200      	movs	r2, #0
 80023e2:	4629      	mov	r1, r5
 80023e4:	4620      	mov	r0, r4
 80023e6:	f001 faa5 	bl	8003934 <Endpoint_Write_Stream_LE>
 80023ea:	e000      	b.n	80023ee <CDC_Device_SendData+0x36>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 80023ec:	2002      	movs	r0, #2
}
 80023ee:	bd38      	pop	{r3, r4, r5, pc}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 80023f0:	2002      	movs	r0, #2
 80023f2:	e7fc      	b.n	80023ee <CDC_Device_SendData+0x36>
 80023f4:	20001589 	.word	0x20001589
 80023f8:	2000123c 	.word	0x2000123c

080023fc <CDC_Device_SendByte>:

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 80023fc:	4b13      	ldr	r3, [pc, #76]	; (800244c <CDC_Device_SendByte+0x50>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b04      	cmp	r3, #4
 8002404:	d11c      	bne.n	8002440 <CDC_Device_SendByte+0x44>
 8002406:	6983      	ldr	r3, [r0, #24]
 8002408:	b1eb      	cbz	r3, 8002446 <CDC_Device_SendByte+0x4a>
{
 800240a:	b510      	push	{r4, lr}
 800240c:	460c      	mov	r4, r1
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 800240e:	7883      	ldrb	r3, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002410:	4a0f      	ldr	r2, [pc, #60]	; (8002450 <CDC_Device_SendByte+0x54>)
 8002412:	f003 010f 	and.w	r1, r3, #15
 8002416:	f882 113c 	strb.w	r1, [r2, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800241a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800241e:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d

	if (!(Endpoint_IsReadWriteAllowed()))
 8002422:	f000 fae5 	bl	80029f0 <Endpoint_IsReadWriteAllowed>
 8002426:	b928      	cbnz	r0, 8002434 <CDC_Device_SendByte+0x38>
	{
		Endpoint_ClearIN();
 8002428:	f000 fa86 	bl	8002938 <Endpoint_ClearIN>

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 800242c:	f000 fa06 	bl	800283c <Endpoint_WaitUntilReady>
 8002430:	4603      	mov	r3, r0
 8002432:	b918      	cbnz	r0, 800243c <CDC_Device_SendByte+0x40>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
 8002434:	4620      	mov	r0, r4
 8002436:	f000 fafb 	bl	8002a30 <Endpoint_Write_8>
	return ENDPOINT_READYWAIT_NoError;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	bd10      	pop	{r4, pc}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 8002440:	2302      	movs	r3, #2
}
 8002442:	4618      	mov	r0, r3
 8002444:	4770      	bx	lr
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 8002446:	2302      	movs	r3, #2
 8002448:	e7fb      	b.n	8002442 <CDC_Device_SendByte+0x46>
 800244a:	bf00      	nop
 800244c:	20001589 	.word	0x20001589
 8002450:	2000123c 	.word	0x2000123c

08002454 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002454:	b510      	push	{r4, lr}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8002456:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <CDC_Device_Flush+0x78>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b04      	cmp	r3, #4
 800245e:	d12f      	bne.n	80024c0 <CDC_Device_Flush+0x6c>
 8002460:	6983      	ldr	r3, [r0, #24]
 8002462:	b383      	cbz	r3, 80024c6 <CDC_Device_Flush+0x72>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8002464:	7882      	ldrb	r2, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002466:	f002 030f 	and.w	r3, r2, #15
 800246a:	4919      	ldr	r1, [pc, #100]	; (80024d0 <CDC_Device_Flush+0x7c>)
 800246c:	f881 313c 	strb.w	r3, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002470:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002474:	f881 213d 	strb.w	r2, [r1, #317]	; 0x13d
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		if (ep->Direction)
 8002478:	222c      	movs	r2, #44	; 0x2c
 800247a:	fb02 1203 	mla	r2, r2, r3, r1
 800247e:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8002482:	2a00      	cmp	r2, #0
 8002484:	db07      	blt.n	8002496 <CDC_Device_Flush+0x42>
			return ep->InBytesAvailable;
		else
			return ep->OutBytesAvailable;
 8002486:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <CDC_Device_Flush+0x7c>)
 8002488:	212c      	movs	r1, #44	; 0x2c
 800248a:	fb01 2303 	mla	r3, r1, r3, r2
 800248e:	899b      	ldrh	r3, [r3, #12]

	if (!(Endpoint_BytesInEndpoint()))
 8002490:	b93b      	cbnz	r3, 80024a2 <CDC_Device_Flush+0x4e>
	  return ENDPOINT_READYWAIT_NoError;
 8002492:	2400      	movs	r4, #0
 8002494:	e015      	b.n	80024c2 <CDC_Device_Flush+0x6e>
			return ep->InBytesAvailable;
 8002496:	460a      	mov	r2, r1
 8002498:	212c      	movs	r1, #44	; 0x2c
 800249a:	fb01 2303 	mla	r3, r1, r3, r2
 800249e:	8b9b      	ldrh	r3, [r3, #28]
 80024a0:	e7f6      	b.n	8002490 <CDC_Device_Flush+0x3c>

	bool BankFull = !(Endpoint_IsReadWriteAllowed());
 80024a2:	f000 faa5 	bl	80029f0 <Endpoint_IsReadWriteAllowed>
 80024a6:	4604      	mov	r4, r0

	Endpoint_ClearIN();
 80024a8:	f000 fa46 	bl	8002938 <Endpoint_ClearIN>

	if (BankFull)
 80024ac:	b10c      	cbz	r4, 80024b2 <CDC_Device_Flush+0x5e>
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
 80024ae:	2400      	movs	r4, #0
 80024b0:	e007      	b.n	80024c2 <CDC_Device_Flush+0x6e>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 80024b2:	f000 f9c3 	bl	800283c <Endpoint_WaitUntilReady>
 80024b6:	4604      	mov	r4, r0
 80024b8:	b918      	cbnz	r0, 80024c2 <CDC_Device_Flush+0x6e>
		Endpoint_ClearIN();
 80024ba:	f000 fa3d 	bl	8002938 <Endpoint_ClearIN>
 80024be:	e000      	b.n	80024c2 <CDC_Device_Flush+0x6e>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 80024c0:	2402      	movs	r4, #2
}
 80024c2:	4620      	mov	r0, r4
 80024c4:	bd10      	pop	{r4, pc}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 80024c6:	2402      	movs	r4, #2
 80024c8:	e7fb      	b.n	80024c2 <CDC_Device_Flush+0x6e>
 80024ca:	bf00      	nop
 80024cc:	20001589 	.word	0x20001589
 80024d0:	2000123c 	.word	0x2000123c

080024d4 <CDC_Device_USBTask>:
{
 80024d4:	b508      	push	{r3, lr}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <CDC_Device_USBTask+0x4c>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d000      	beq.n	80024e2 <CDC_Device_USBTask+0xe>
}
 80024e0:	bd08      	pop	{r3, pc}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 80024e2:	6983      	ldr	r3, [r0, #24]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0fb      	beq.n	80024e0 <CDC_Device_USBTask+0xc>
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80024e8:	7883      	ldrb	r3, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80024ea:	f003 020f 	and.w	r2, r3, #15
 80024ee:	490d      	ldr	r1, [pc, #52]	; (8002524 <CDC_Device_USBTask+0x50>)
 80024f0:	f881 213c 	strb.w	r2, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80024f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80024f8:	f881 313d 	strb.w	r3, [r1, #317]	; 0x13d
		return ep->InInUse == 0 && ep->IsEnabled;
 80024fc:	232c      	movs	r3, #44	; 0x2c
 80024fe:	fb03 1302 	mla	r3, r3, r2, r1
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f013 0f10 	tst.w	r3, #16
 8002508:	d1ea      	bne.n	80024e0 <CDC_Device_USBTask+0xc>
 800250a:	460b      	mov	r3, r1
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 3202 	mla	r2, r1, r2, r3
 8002512:	7a13      	ldrb	r3, [r2, #8]
 8002514:	f013 0f02 	tst.w	r3, #2
 8002518:	d0e2      	beq.n	80024e0 <CDC_Device_USBTask+0xc>
	  CDC_Device_Flush(CDCInterfaceInfo);
 800251a:	f7ff ff9b 	bl	8002454 <CDC_Device_Flush>
 800251e:	e7df      	b.n	80024e0 <CDC_Device_USBTask+0xc>
 8002520:	20001589 	.word	0x20001589
 8002524:	2000123c 	.word	0x2000123c

08002528 <CDC_Device_BytesReceived>:

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002528:	b510      	push	{r4, lr}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 800252a:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <CDC_Device_BytesReceived+0x6c>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b04      	cmp	r3, #4
 8002532:	d002      	beq.n	800253a <CDC_Device_BytesReceived+0x12>
	  return 0;
 8002534:	2400      	movs	r4, #0
	}
	else
	{
		return 0;
	}
}
 8002536:	4620      	mov	r0, r4
 8002538:	bd10      	pop	{r4, pc}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 800253a:	6983      	ldr	r3, [r0, #24]
 800253c:	b333      	cbz	r3, 800258c <CDC_Device_BytesReceived+0x64>
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 800253e:	7a03      	ldrb	r3, [r0, #8]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002540:	f003 020f 	and.w	r2, r3, #15
 8002544:	4914      	ldr	r1, [pc, #80]	; (8002598 <CDC_Device_BytesReceived+0x70>)
 8002546:	f881 213c 	strb.w	r2, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800254a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800254e:	f881 313d 	strb.w	r3, [r1, #317]	; 0x13d
		return ep->IsOutRecieved;
 8002552:	232c      	movs	r3, #44	; 0x2c
 8002554:	fb03 1302 	mla	r3, r3, r2, r1
 8002558:	689b      	ldr	r3, [r3, #8]
	if (Endpoint_IsOUTReceived())
 800255a:	f013 0f20 	tst.w	r3, #32
 800255e:	d017      	beq.n	8002590 <CDC_Device_BytesReceived+0x68>
		if (ep->Direction)
 8002560:	232c      	movs	r3, #44	; 0x2c
 8002562:	fb03 1302 	mla	r3, r3, r2, r1
 8002566:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	db09      	blt.n	8002582 <CDC_Device_BytesReceived+0x5a>
			return ep->OutBytesAvailable;
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <CDC_Device_BytesReceived+0x70>)
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 3202 	mla	r2, r1, r2, r3
 8002576:	8994      	ldrh	r4, [r2, #12]
		if (!(Endpoint_BytesInEndpoint()))
 8002578:	2c00      	cmp	r4, #0
 800257a:	d1dc      	bne.n	8002536 <CDC_Device_BytesReceived+0xe>
			Endpoint_ClearOUT();
 800257c:	f000 f9ae 	bl	80028dc <Endpoint_ClearOUT>
			return 0;
 8002580:	e7d9      	b.n	8002536 <CDC_Device_BytesReceived+0xe>
			return ep->InBytesAvailable;
 8002582:	232c      	movs	r3, #44	; 0x2c
 8002584:	fb03 1202 	mla	r2, r3, r2, r1
 8002588:	8b94      	ldrh	r4, [r2, #28]
 800258a:	e7f5      	b.n	8002578 <CDC_Device_BytesReceived+0x50>
	  return 0;
 800258c:	2400      	movs	r4, #0
 800258e:	e7d2      	b.n	8002536 <CDC_Device_BytesReceived+0xe>
		return 0;
 8002590:	2400      	movs	r4, #0
 8002592:	e7d0      	b.n	8002536 <CDC_Device_BytesReceived+0xe>
 8002594:	20001589 	.word	0x20001589
 8002598:	2000123c 	.word	0x2000123c

0800259c <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 800259c:	b510      	push	{r4, lr}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 800259e:	4b2b      	ldr	r3, [pc, #172]	; (800264c <CDC_Device_ReceiveByte+0xb0>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d148      	bne.n	800263a <CDC_Device_ReceiveByte+0x9e>
 80025a8:	6983      	ldr	r3, [r0, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d048      	beq.n	8002640 <CDC_Device_ReceiveByte+0xa4>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 80025ae:	7a02      	ldrb	r2, [r0, #8]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80025b0:	f002 030f 	and.w	r3, r2, #15
 80025b4:	4926      	ldr	r1, [pc, #152]	; (8002650 <CDC_Device_ReceiveByte+0xb4>)
 80025b6:	f881 313c 	strb.w	r3, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80025ba:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80025be:	f881 213d 	strb.w	r2, [r1, #317]	; 0x13d
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80025c2:	4618      	mov	r0, r3
		return ep->IsOutRecieved;
 80025c4:	222c      	movs	r2, #44	; 0x2c
 80025c6:	fb02 1203 	mla	r2, r2, r3, r1
 80025ca:	6892      	ldr	r2, [r2, #8]

	if (Endpoint_IsOUTReceived())
 80025cc:	f012 0f20 	tst.w	r2, #32
 80025d0:	d039      	beq.n	8002646 <CDC_Device_ReceiveByte+0xaa>
		if (ep->Direction)
 80025d2:	222c      	movs	r2, #44	; 0x2c
 80025d4:	fb02 1203 	mla	r2, r2, r3, r1
 80025d8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80025dc:	2a00      	cmp	r2, #0
 80025de:	db0f      	blt.n	8002600 <CDC_Device_ReceiveByte+0x64>
			return ep->OutBytesAvailable;
 80025e0:	4a1b      	ldr	r2, [pc, #108]	; (8002650 <CDC_Device_ReceiveByte+0xb4>)
 80025e2:	212c      	movs	r1, #44	; 0x2c
 80025e4:	fb01 2303 	mla	r3, r1, r3, r2
	{
		if (Endpoint_BytesInEndpoint())
 80025e8:	899b      	ldrh	r3, [r3, #12]
	int16_t ReceivedByte = -1;
 80025ea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		if (Endpoint_BytesInEndpoint())
 80025ee:	b973      	cbnz	r3, 800260e <CDC_Device_ReceiveByte+0x72>
 80025f0:	4b17      	ldr	r3, [pc, #92]	; (8002650 <CDC_Device_ReceiveByte+0xb4>)
 80025f2:	222c      	movs	r2, #44	; 0x2c
 80025f4:	fb02 3000 	mla	r0, r2, r0, r3
 80025f8:	8983      	ldrh	r3, [r0, #12]
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
 80025fa:	b1db      	cbz	r3, 8002634 <CDC_Device_ReceiveByte+0x98>
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 80025fc:	4620      	mov	r0, r4
 80025fe:	bd10      	pop	{r4, pc}
			return ep->InBytesAvailable;
 8002600:	222c      	movs	r2, #44	; 0x2c
 8002602:	fb02 1303 	mla	r3, r2, r3, r1
		if (Endpoint_BytesInEndpoint())
 8002606:	8b9b      	ldrh	r3, [r3, #28]
	int16_t ReceivedByte = -1;
 8002608:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		if (Endpoint_BytesInEndpoint())
 800260c:	b163      	cbz	r3, 8002628 <CDC_Device_ReceiveByte+0x8c>
		  ReceivedByte = Endpoint_Read_8();
 800260e:	f000 fa29 	bl	8002a64 <Endpoint_Read_8>
 8002612:	b204      	sxth	r4, r0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002614:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <CDC_Device_ReceiveByte+0xb4>)
 8002616:	f892 013c 	ldrb.w	r0, [r2, #316]	; 0x13c
		if (ep->Direction)
 800261a:	232c      	movs	r3, #44	; 0x2c
 800261c:	fb03 2300 	mla	r3, r3, r0, r2
 8002620:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	dae3      	bge.n	80025f0 <CDC_Device_ReceiveByte+0x54>
			return ep->InBytesAvailable;
 8002628:	4a09      	ldr	r2, [pc, #36]	; (8002650 <CDC_Device_ReceiveByte+0xb4>)
 800262a:	232c      	movs	r3, #44	; 0x2c
 800262c:	fb03 2000 	mla	r0, r3, r0, r2
 8002630:	8b83      	ldrh	r3, [r0, #28]
 8002632:	e7e2      	b.n	80025fa <CDC_Device_ReceiveByte+0x5e>
		  Endpoint_ClearOUT();
 8002634:	f000 f952 	bl	80028dc <Endpoint_ClearOUT>
 8002638:	e7e0      	b.n	80025fc <CDC_Device_ReceiveByte+0x60>
	  return -1;
 800263a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800263e:	e7dd      	b.n	80025fc <CDC_Device_ReceiveByte+0x60>
 8002640:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002644:	e7da      	b.n	80025fc <CDC_Device_ReceiveByte+0x60>
	int16_t ReceivedByte = -1;
 8002646:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800264a:	e7d7      	b.n	80025fc <CDC_Device_ReceiveByte+0x60>
 800264c:	20001589 	.word	0x20001589
 8002650:	2000123c 	.word	0x2000123c

08002654 <CDC_Device_SendControlLineStateChange>:

void CDC_Device_SendControlLineStateChange(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8002654:	4b15      	ldr	r3, [pc, #84]	; (80026ac <CDC_Device_SendControlLineStateChange+0x58>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b04      	cmp	r3, #4
 800265c:	d000      	beq.n	8002660 <CDC_Device_SendControlLineStateChange+0xc>
 800265e:	4770      	bx	lr
 8002660:	6983      	ldr	r3, [r0, #24]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0fb      	beq.n	800265e <CDC_Device_SendControlLineStateChange+0xa>
{
 8002666:	b510      	push	{r4, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	4604      	mov	r4, r0
	  return;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.NotificationEndpoint.Address);
 800266c:	7b83      	ldrb	r3, [r0, #14]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800266e:	4a10      	ldr	r2, [pc, #64]	; (80026b0 <CDC_Device_SendControlLineStateChange+0x5c>)
 8002670:	f003 010f 	and.w	r1, r3, #15
 8002674:	f882 113c 	strb.w	r1, [r2, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002678:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800267c:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d

	USB_Request_Header_t Notification = (USB_Request_Header_t)
 8002680:	4a0c      	ldr	r2, [pc, #48]	; (80026b4 <CDC_Device_SendControlLineStateChange+0x60>)
 8002682:	466b      	mov	r3, sp
 8002684:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002688:	e883 0003 	stmia.w	r3, {r0, r1}
			.wValue        = CPU_TO_LE16(0),
			.wIndex        = CPU_TO_LE16(0),
			.wLength       = CPU_TO_LE16(sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost)),
		};

	Endpoint_Write_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
 800268c:	2200      	movs	r2, #0
 800268e:	2108      	movs	r1, #8
 8002690:	4618      	mov	r0, r3
 8002692:	f001 f94f 	bl	8003934 <Endpoint_Write_Stream_LE>
	Endpoint_Write_Stream_LE(&CDCInterfaceInfo->State.ControlLineStates.DeviceToHost,
 8002696:	2200      	movs	r2, #0
 8002698:	2102      	movs	r1, #2
 800269a:	f104 0016 	add.w	r0, r4, #22
 800269e:	f001 f949 	bl	8003934 <Endpoint_Write_Stream_LE>
	                         sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost),
	                         NULL);
	Endpoint_ClearIN();
 80026a2:	f000 f949 	bl	8002938 <Endpoint_ClearIN>
}
 80026a6:	b002      	add	sp, #8
 80026a8:	bd10      	pop	{r4, pc}
 80026aa:	bf00      	nop
 80026ac:	20001589 	.word	0x20001589
 80026b0:	2000123c 	.word	0x2000123c
 80026b4:	0800dea0 	.word	0x0800dea0

080026b8 <EVENT_CDC_Device_LineEncodingChanged>:
}
#endif

__WEAK void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
}
 80026b8:	4770      	bx	lr

080026ba <EVENT_CDC_Device_ControLineStateChanged>:

__WEAK void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
}
 80026ba:	4770      	bx	lr

080026bc <EVENT_CDC_Device_BreakSent>:

__WEAK void EVENT_CDC_Device_BreakSent(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
				                               const uint8_t Duration)
{
}
 80026bc:	4770      	bx	lr
	...

080026c0 <CDC_Device_ProcessControlRequest>:
		return device.IsSetupRecieved;
 80026c0:	4b48      	ldr	r3, [pc, #288]	; (80027e4 <CDC_Device_ProcessControlRequest+0x124>)
 80026c2:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
	if (!(Endpoint_IsSETUPReceived()))
 80026c6:	f013 0f02 	tst.w	r3, #2
 80026ca:	d004      	beq.n	80026d6 <CDC_Device_ProcessControlRequest+0x16>
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 80026cc:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <CDC_Device_ProcessControlRequest+0x128>)
 80026ce:	889a      	ldrh	r2, [r3, #4]
 80026d0:	7803      	ldrb	r3, [r0, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d000      	beq.n	80026d8 <CDC_Device_ProcessControlRequest+0x18>
 80026d6:	4770      	bx	lr
{
 80026d8:	b510      	push	{r4, lr}
 80026da:	4604      	mov	r4, r0
	switch (USB_ControlRequest.bRequest)
 80026dc:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <CDC_Device_ProcessControlRequest+0x128>)
 80026de:	785b      	ldrb	r3, [r3, #1]
 80026e0:	3b20      	subs	r3, #32
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d85b      	bhi.n	800279e <CDC_Device_ProcessControlRequest+0xde>
 80026e6:	e8df f003 	tbb	[pc, r3]
 80026ea:	022a      	.short	0x022a
 80026ec:	6b56      	.short	0x6b56
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 80026ee:	4b3e      	ldr	r3, [pc, #248]	; (80027e8 <CDC_Device_ProcessControlRequest+0x128>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2ba1      	cmp	r3, #161	; 0xa1
 80026f4:	d153      	bne.n	800279e <CDC_Device_ProcessControlRequest+0xde>
		device.IsSetupRecieved = 0;
 80026f6:	4a3b      	ldr	r2, [pc, #236]	; (80027e4 <CDC_Device_ProcessControlRequest+0x124>)
 80026f8:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80026fc:	f36f 0341 	bfc	r3, #1, #1
 8002700:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002704:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
		return ep->InInUse == 0 && ep->IsEnabled;
 8002708:	4b36      	ldr	r3, [pc, #216]	; (80027e4 <CDC_Device_ProcessControlRequest+0x124>)
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 3202 	mla	r2, r1, r2, r3
 8002710:	6893      	ldr	r3, [r2, #8]
 8002712:	f013 0f10 	tst.w	r3, #16
 8002716:	d1fb      	bne.n	8002710 <CDC_Device_ProcessControlRequest+0x50>
 8002718:	7a13      	ldrb	r3, [r2, #8]
 800271a:	f013 0f02 	tst.w	r3, #2
 800271e:	d0f7      	beq.n	8002710 <CDC_Device_ProcessControlRequest+0x50>
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 8002720:	69a0      	ldr	r0, [r4, #24]
 8002722:	f000 f9b7 	bl	8002a94 <Endpoint_Write_32_LE>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 8002726:	7f20      	ldrb	r0, [r4, #28]
 8002728:	f000 f982 	bl	8002a30 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 800272c:	7f60      	ldrb	r0, [r4, #29]
 800272e:	f000 f97f 	bl	8002a30 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 8002732:	7fa0      	ldrb	r0, [r4, #30]
 8002734:	f000 f97c 	bl	8002a30 <Endpoint_Write_8>
				Endpoint_ClearIN();
 8002738:	f000 f8fe 	bl	8002938 <Endpoint_ClearIN>
 800273c:	e02f      	b.n	800279e <CDC_Device_ProcessControlRequest+0xde>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 800273e:	4b2a      	ldr	r3, [pc, #168]	; (80027e8 <CDC_Device_ProcessControlRequest+0x128>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b21      	cmp	r3, #33	; 0x21
 8002744:	d12b      	bne.n	800279e <CDC_Device_ProcessControlRequest+0xde>
		device.IsSetupRecieved = 0;
 8002746:	4a27      	ldr	r2, [pc, #156]	; (80027e4 <CDC_Device_ProcessControlRequest+0x124>)
 8002748:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800274c:	f36f 0341 	bfc	r3, #1, #1
 8002750:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002754:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
		return ep->IsOutRecieved;
 8002758:	4b22      	ldr	r3, [pc, #136]	; (80027e4 <CDC_Device_ProcessControlRequest+0x124>)
 800275a:	212c      	movs	r1, #44	; 0x2c
 800275c:	fb01 3202 	mla	r2, r1, r2, r3
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 8002760:	4922      	ldr	r1, [pc, #136]	; (80027ec <CDC_Device_ProcessControlRequest+0x12c>)
 8002762:	6893      	ldr	r3, [r2, #8]
				while (!(Endpoint_IsOUTReceived()))
 8002764:	f013 0f20 	tst.w	r3, #32
 8002768:	d103      	bne.n	8002772 <CDC_Device_ProcessControlRequest+0xb2>
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 800276a:	780b      	ldrb	r3, [r1, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f8      	bne.n	8002762 <CDC_Device_ProcessControlRequest+0xa2>
 8002770:	e015      	b.n	800279e <CDC_Device_ProcessControlRequest+0xde>
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 8002772:	f000 f9a9 	bl	8002ac8 <Endpoint_Read_32_LE>
 8002776:	61a0      	str	r0, [r4, #24]
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 8002778:	f000 f974 	bl	8002a64 <Endpoint_Read_8>
 800277c:	7720      	strb	r0, [r4, #28]
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 800277e:	f000 f971 	bl	8002a64 <Endpoint_Read_8>
 8002782:	7760      	strb	r0, [r4, #29]
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 8002784:	f000 f96e 	bl	8002a64 <Endpoint_Read_8>
 8002788:	77a0      	strb	r0, [r4, #30]
				Endpoint_ClearOUT();
 800278a:	f000 f8a7 	bl	80028dc <Endpoint_ClearOUT>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 800278e:	4620      	mov	r0, r4
 8002790:	f7ff ff92 	bl	80026b8 <EVENT_CDC_Device_LineEncodingChanged>
 8002794:	e003      	b.n	800279e <CDC_Device_ProcessControlRequest+0xde>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8002796:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <CDC_Device_ProcessControlRequest+0x128>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b21      	cmp	r3, #33	; 0x21
 800279c:	d000      	beq.n	80027a0 <CDC_Device_ProcessControlRequest+0xe0>
}
 800279e:	bd10      	pop	{r4, pc}
		device.IsSetupRecieved = 0;
 80027a0:	4a10      	ldr	r2, [pc, #64]	; (80027e4 <CDC_Device_ProcessControlRequest+0x124>)
 80027a2:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80027a6:	f36f 0341 	bfc	r3, #1, #1
 80027aa:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 80027ae:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <CDC_Device_ProcessControlRequest+0x128>)
 80027b0:	7893      	ldrb	r3, [r2, #2]
 80027b2:	78d2      	ldrb	r2, [r2, #3]
 80027b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80027b8:	8283      	strh	r3, [r0, #20]
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 80027ba:	f7ff ff7e 	bl	80026ba <EVENT_CDC_Device_ControLineStateChanged>
 80027be:	e7ee      	b.n	800279e <CDC_Device_ProcessControlRequest+0xde>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <CDC_Device_ProcessControlRequest+0x128>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b21      	cmp	r3, #33	; 0x21
 80027c6:	d1ea      	bne.n	800279e <CDC_Device_ProcessControlRequest+0xde>
 80027c8:	4a06      	ldr	r2, [pc, #24]	; (80027e4 <CDC_Device_ProcessControlRequest+0x124>)
 80027ca:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80027ce:	f36f 0341 	bfc	r3, #1, #1
 80027d2:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 80027d6:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <CDC_Device_ProcessControlRequest+0x128>)
 80027d8:	8859      	ldrh	r1, [r3, #2]
 80027da:	b2c9      	uxtb	r1, r1
 80027dc:	f7ff ff6e 	bl	80026bc <EVENT_CDC_Device_BreakSent>
 80027e0:	e7dd      	b.n	800279e <CDC_Device_ProcessControlRequest+0xde>
 80027e2:	bf00      	nop
 80027e4:	2000123c 	.word	0x2000123c
 80027e8:	2000158c 	.word	0x2000158c
 80027ec:	20001589 	.word	0x20001589

080027f0 <USB_USBTask>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 80027f0:	4b10      	ldr	r3, [pc, #64]	; (8002834 <USB_USBTask+0x44>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	b1eb      	cbz	r3, 8002832 <USB_USBTask+0x42>
{
 80027f6:	b510      	push	{r4, lr}
	 *  \return Index of the currently selected endpoint.
	 */
	static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetCurrentEndpoint(void)
	{
		return device.CurrentDirection | device.CurrentEndpoint;
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <USB_USBTask+0x48>)
 80027fa:	f893 413d 	ldrb.w	r4, [r3, #317]	; 0x13d
 80027fe:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
 8002802:	4314      	orrs	r4, r2
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002804:	2200      	movs	r2, #0
 8002806:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800280a:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 800280e:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 8002812:	f013 0f02 	tst.w	r3, #2
 8002816:	d109      	bne.n	800282c <USB_USBTask+0x3c>
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002818:	4b07      	ldr	r3, [pc, #28]	; (8002838 <USB_USBTask+0x48>)
 800281a:	f004 020f 	and.w	r2, r4, #15
 800281e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002822:	f024 047f 	bic.w	r4, r4, #127	; 0x7f
 8002826:	f883 413d 	strb.w	r4, [r3, #317]	; 0x13d
}
 800282a:	bd10      	pop	{r4, pc}
	  USB_Device_ProcessControlRequest();
 800282c:	f7fe f996 	bl	8000b5c <USB_Device_ProcessControlRequest>
 8002830:	e7f2      	b.n	8002818 <USB_USBTask+0x28>
 8002832:	4770      	bx	lr
 8002834:	20001589 	.word	0x20001589
 8002838:	2000123c 	.word	0x2000123c

0800283c <Endpoint_WaitUntilReady>:
#define USB_STREAM_TIMEOUT_MS 100

extern volatile uint8_t zlp_flag;

uint8_t Endpoint_WaitUntilReady(void)
{
 800283c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			 *  \return Current USB frame number from the USB controller.
			 */
    
            static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE;
            static inline uint16_t USB_Device_GetFrameNumber(void) {
                return device.Driver->GetFrameNumber();
 8002840:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <Endpoint_WaitUntilReady+0x98>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	4798      	blx	r3
 8002848:	4606      	mov	r6, r0
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 800284a:	2764      	movs	r7, #100	; 0x64
	 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800284c:	4c21      	ldr	r4, [pc, #132]	; (80028d4 <Endpoint_WaitUntilReady+0x98>)
		return ep->Address & ENDPOINT_DIR_MASK;
 800284e:	252c      	movs	r5, #44	; 0x2c
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8002850:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80028d8 <Endpoint_WaitUntilReady+0x9c>
 8002854:	e001      	b.n	800285a <Endpoint_WaitUntilReady+0x1e>

		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 8002856:	461f      	mov	r7, r3
 8002858:	4606      	mov	r6, r0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800285a:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
		return ep->Address & ENDPOINT_DIR_MASK;
 800285e:	fb05 4203 	mla	r2, r5, r3, r4
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 8002862:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8002866:	2a00      	cmp	r2, #0
 8002868:	db1d      	blt.n	80028a6 <Endpoint_WaitUntilReady+0x6a>
		return ep->IsOutRecieved;
 800286a:	fb05 4203 	mla	r2, r5, r3, r4
 800286e:	6892      	ldr	r2, [r2, #8]
			if (Endpoint_IsOUTReceived())
 8002870:	f012 0f20 	tst.w	r2, #32
 8002874:	d126      	bne.n	80028c4 <Endpoint_WaitUntilReady+0x88>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8002876:	f898 2000 	ldrb.w	r2, [r8]
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 800287a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800287e:	b31a      	cbz	r2, 80028c8 <Endpoint_WaitUntilReady+0x8c>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8002880:	2905      	cmp	r1, #5
 8002882:	d023      	beq.n	80028cc <Endpoint_WaitUntilReady+0x90>
	 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
	 */
	static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsStalled(void)
	{
		return device.Endpoints[device.CurrentEndpoint].IsHalted == 1 ? true : false;
 8002884:	fb05 4303 	mla	r3, r5, r3, r4
 8002888:	7a1b      	ldrb	r3, [r3, #8]
		else if (Endpoint_IsStalled())
 800288a:	f013 0f04 	tst.w	r3, #4
 800288e:	d11f      	bne.n	80028d0 <Endpoint_WaitUntilReady+0x94>
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	4798      	blx	r3
		if (CurrentFrameNumber != PreviousFrameNumber)
 8002896:	4286      	cmp	r6, r0
 8002898:	d0de      	beq.n	8002858 <Endpoint_WaitUntilReady+0x1c>
			if (!(TimeoutMSRem--))
 800289a:	1e7b      	subs	r3, r7, #1
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2f00      	cmp	r7, #0
 80028a0:	d1d9      	bne.n	8002856 <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_Timeout;
 80028a2:	2004      	movs	r0, #4
 80028a4:	e00c      	b.n	80028c0 <Endpoint_WaitUntilReady+0x84>
		return ep->InInUse == 0 && ep->IsEnabled;
 80028a6:	fb05 4203 	mla	r2, r5, r3, r4
 80028aa:	6892      	ldr	r2, [r2, #8]
 80028ac:	f012 0f10 	tst.w	r2, #16
 80028b0:	d1e1      	bne.n	8002876 <Endpoint_WaitUntilReady+0x3a>
 80028b2:	fb05 4203 	mla	r2, r5, r3, r4
 80028b6:	7a12      	ldrb	r2, [r2, #8]
 80028b8:	f012 0f02 	tst.w	r2, #2
 80028bc:	d0db      	beq.n	8002876 <Endpoint_WaitUntilReady+0x3a>
			  return ENDPOINT_READYWAIT_NoError;
 80028be:	2000      	movs	r0, #0
		}
	}
}
 80028c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  return ENDPOINT_READYWAIT_NoError;
 80028c4:	2000      	movs	r0, #0
 80028c6:	e7fb      	b.n	80028c0 <Endpoint_WaitUntilReady+0x84>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 80028c8:	2002      	movs	r0, #2
 80028ca:	e7f9      	b.n	80028c0 <Endpoint_WaitUntilReady+0x84>
		  return ENDPOINT_READYWAIT_BusSuspended;
 80028cc:	2003      	movs	r0, #3
 80028ce:	e7f7      	b.n	80028c0 <Endpoint_WaitUntilReady+0x84>
		  return ENDPOINT_READYWAIT_EndpointStalled;
 80028d0:	2001      	movs	r0, #1
 80028d2:	e7f5      	b.n	80028c0 <Endpoint_WaitUntilReady+0x84>
 80028d4:	2000123c 	.word	0x2000123c
 80028d8:	20001589 	.word	0x20001589

080028dc <Endpoint_ClearOUT>:

void Endpoint_ClearOUT(void) {
 80028dc:	b538      	push	{r3, r4, r5, lr}
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80028de:	4a15      	ldr	r2, [pc, #84]	; (8002934 <Endpoint_ClearOUT+0x58>)
 80028e0:	f892 513c 	ldrb.w	r5, [r2, #316]	; 0x13c
	/* if we have data left which isn't read yet, we leave this routine to not override it */
	if (ep->IsEnabled == 0)
 80028e4:	232c      	movs	r3, #44	; 0x2c
 80028e6:	fb03 2305 	mla	r3, r3, r5, r2
 80028ea:	7a1b      	ldrb	r3, [r3, #8]
 80028ec:	f013 0f02 	tst.w	r3, #2
 80028f0:	d01e      	beq.n	8002930 <Endpoint_ClearOUT+0x54>
		return;
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 80028f2:	242c      	movs	r4, #44	; 0x2c
 80028f4:	fb04 2405 	mla	r4, r4, r5, r2
 80028f8:	6813      	ldr	r3, [r2, #0]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	69a2      	ldr	r2, [r4, #24]
 80028fe:	6961      	ldr	r1, [r4, #20]
 8002900:	7920      	ldrb	r0, [r4, #4]
 8002902:	4798      	blx	r3
 8002904:	60e0      	str	r0, [r4, #12]
	ep->OutOffset = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	6123      	str	r3, [r4, #16]
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) {
 800290a:	68a3      	ldr	r3, [r4, #8]
 800290c:	f013 0f08 	tst.w	r3, #8
 8002910:	d10e      	bne.n	8002930 <Endpoint_ClearOUT+0x54>
 8002912:	b968      	cbnz	r0, 8002930 <Endpoint_ClearOUT+0x54>
		ep->OutInUse = true;
 8002914:	4a07      	ldr	r2, [pc, #28]	; (8002934 <Endpoint_ClearOUT+0x58>)
 8002916:	8923      	ldrh	r3, [r4, #8]
 8002918:	f043 0308 	orr.w	r3, r3, #8
 800291c:	8123      	strh	r3, [r4, #8]
		ep->IsOutRecieved = 0;
 800291e:	8923      	ldrh	r3, [r4, #8]
 8002920:	f36f 1345 	bfc	r3, #5, #1
 8002924:	8123      	strh	r3, [r4, #8]
		device.Driver->EndpointReadStart(ep->Address,
 8002926:	6813      	ldr	r3, [r2, #0]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	69a1      	ldr	r1, [r4, #24]
 800292c:	7920      	ldrb	r0, [r4, #4]
 800292e:	4798      	blx	r3
				ep->OutBufferLength);
	}
}
 8002930:	bd38      	pop	{r3, r4, r5, pc}
 8002932:	bf00      	nop
 8002934:	2000123c 	.word	0x2000123c

08002938 <Endpoint_ClearIN>:

void Endpoint_ClearIN(void)
{
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800293a:	4a2a      	ldr	r2, [pc, #168]	; (80029e4 <Endpoint_ClearIN+0xac>)
 800293c:	f892 513c 	ldrb.w	r5, [r2, #316]	; 0x13c
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 8002940:	232c      	movs	r3, #44	; 0x2c
 8002942:	fb03 2305 	mla	r3, r3, r5, r2
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f013 0f10 	tst.w	r3, #16
 800294c:	d12e      	bne.n	80029ac <Endpoint_ClearIN+0x74>
 800294e:	232c      	movs	r3, #44	; 0x2c
 8002950:	fb03 2305 	mla	r3, r3, r5, r2
 8002954:	7a1b      	ldrb	r3, [r3, #8]
 8002956:	f013 0f02 	tst.w	r3, #2
 800295a:	d027      	beq.n	80029ac <Endpoint_ClearIN+0x74>
		return;
	ep->InInUse = true;
 800295c:	242c      	movs	r4, #44	; 0x2c
 800295e:	fb04 2405 	mla	r4, r4, r5, r2
 8002962:	8923      	ldrh	r3, [r4, #8]
 8002964:	f043 0310 	orr.w	r3, r3, #16
 8002968:	8123      	strh	r3, [r4, #8]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 800296a:	6a23      	ldr	r3, [r4, #32]
 800296c:	62e3      	str	r3, [r4, #44]	; 0x2c
	ep->InDataLeft = ep->InBytesAvailable;
 800296e:	69e3      	ldr	r3, [r4, #28]
 8002970:	62a3      	str	r3, [r4, #40]	; 0x28
	ep->InBytesAvailable = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	61e3      	str	r3, [r4, #28]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002976:	4e1c      	ldr	r6, [pc, #112]	; (80029e8 <Endpoint_ClearIN+0xb0>)
 8002978:	f44f 6700 	mov.w	r7, #2048	; 0x800
 800297c:	f8c6 708c 	str.w	r7, [r6, #140]	; 0x8c
 8002980:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002984:	f3bf 8f6f 	isb	sy
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
 8002988:	6813      	ldr	r3, [r2, #0]
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800298e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002990:	7920      	ldrb	r0, [r4, #4]
 8002992:	4798      	blx	r3
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
 8002994:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002996:	4402      	add	r2, r0
 8002998:	62e2      	str	r2, [r4, #44]	; 0x2c
	ep->InDataLeft -= data_count;
 800299a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800299c:	1a1b      	subs	r3, r3, r0
 800299e:	62a3      	str	r3, [r4, #40]	; 0x28
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80029a0:	60f7      	str	r7, [r6, #12]
	NVIC_EnableIRQ(USB0_0_IRQn);
	if((zlp_flag == true) && (ep->Number != 0))
 80029a2:	4b12      	ldr	r3, [pc, #72]	; (80029ec <Endpoint_ClearIN+0xb4>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d000      	beq.n	80029ae <Endpoint_ClearIN+0x76>
	  ep->InInUse = true;
	  device.Driver->EndpointWrite(ep->Address,
	  			ep->InDataBuffer,0);
	  zlp_flag = false;
	}
}
 80029ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if((zlp_flag == true) && (ep->Number != 0))
 80029ae:	7920      	ldrb	r0, [r4, #4]
 80029b0:	f010 0f0f 	tst.w	r0, #15
 80029b4:	d0fa      	beq.n	80029ac <Endpoint_ClearIN+0x74>
	  while(ep->InInUse)
 80029b6:	4622      	mov	r2, r4
 80029b8:	6893      	ldr	r3, [r2, #8]
 80029ba:	f013 0f10 	tst.w	r3, #16
 80029be:	d1fb      	bne.n	80029b8 <Endpoint_ClearIN+0x80>
	  ep->InInUse = true;
 80029c0:	4a08      	ldr	r2, [pc, #32]	; (80029e4 <Endpoint_ClearIN+0xac>)
 80029c2:	232c      	movs	r3, #44	; 0x2c
 80029c4:	fb03 2505 	mla	r5, r3, r5, r2
 80029c8:	892b      	ldrh	r3, [r5, #8]
 80029ca:	f043 0310 	orr.w	r3, r3, #16
 80029ce:	812b      	strh	r3, [r5, #8]
	  device.Driver->EndpointWrite(ep->Address,
 80029d0:	6813      	ldr	r3, [r2, #0]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	2200      	movs	r2, #0
 80029d6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80029d8:	4798      	blx	r3
	  zlp_flag = false;
 80029da:	4b04      	ldr	r3, [pc, #16]	; (80029ec <Endpoint_ClearIN+0xb4>)
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	e7e4      	b.n	80029ac <Endpoint_ClearIN+0x74>
 80029e2:	bf00      	nop
 80029e4:	2000123c 	.word	0x2000123c
 80029e8:	e000e100 	.word	0xe000e100
 80029ec:	20000eec 	.word	0x20000eec

080029f0 <Endpoint_IsReadWriteAllowed>:

bool Endpoint_IsReadWriteAllowed(void) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80029f0:	490e      	ldr	r1, [pc, #56]	; (8002a2c <Endpoint_IsReadWriteAllowed+0x3c>)
 80029f2:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
	bool Retval = false;

	if(EndPoint->Direction)
 80029f6:	222c      	movs	r2, #44	; 0x2c
 80029f8:	fb02 1203 	mla	r2, r2, r3, r1
 80029fc:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8002a00:	2a00      	cmp	r2, #0
 8002a02:	db08      	blt.n	8002a16 <Endpoint_IsReadWriteAllowed+0x26>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength) ? true : false;
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 8002a04:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <Endpoint_IsReadWriteAllowed+0x3c>)
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	fb01 2303 	mla	r3, r1, r3, r2
 8002a0c:	68d8      	ldr	r0, [r3, #12]
 8002a0e:	3000      	adds	r0, #0
 8002a10:	bf18      	it	ne
 8002a12:	2001      	movne	r0, #1
	}
	return Retval;
}
 8002a14:	4770      	bx	lr
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength) ? true : false;
 8002a16:	460a      	mov	r2, r1
 8002a18:	212c      	movs	r1, #44	; 0x2c
 8002a1a:	fb01 2303 	mla	r3, r1, r3, r2
 8002a1e:	69d8      	ldr	r0, [r3, #28]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	4298      	cmp	r0, r3
 8002a24:	bf2c      	ite	cs
 8002a26:	2000      	movcs	r0, #0
 8002a28:	2001      	movcc	r0, #1
 8002a2a:	4770      	bx	lr
 8002a2c:	2000123c 	.word	0x2000123c

08002a30 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
 8002a30:	b410      	push	{r4}
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <Endpoint_Write_8+0x30>)
 8002a34:	f893 113c 	ldrb.w	r1, [r3, #316]	; 0x13c
	bool Success = false;

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8002a38:	222c      	movs	r2, #44	; 0x2c
 8002a3a:	fb02 3201 	mla	r2, r2, r1, r3
 8002a3e:	69d3      	ldr	r3, [r2, #28]
 8002a40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d2fd      	bcs.n	8002a42 <Endpoint_Write_8+0x12>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 8002a46:	4a06      	ldr	r2, [pc, #24]	; (8002a60 <Endpoint_Write_8+0x30>)
 8002a48:	242c      	movs	r4, #44	; 0x2c
 8002a4a:	fb04 2201 	mla	r2, r4, r1, r2
 8002a4e:	6a11      	ldr	r1, [r2, #32]
 8002a50:	54c8      	strb	r0, [r1, r3]
	      EndPoint->InBytesAvailable++;
 8002a52:	69d3      	ldr	r3, [r2, #28]
 8002a54:	3301      	adds	r3, #1
 8002a56:	61d3      	str	r3, [r2, #28]

	      Success = true;
	    }
	  }while(!Success);
}
 8002a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	2000123c 	.word	0x2000123c

08002a64 <Endpoint_Read_8>:

uint8_t Endpoint_Read_8(void) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002a64:	490a      	ldr	r1, [pc, #40]	; (8002a90 <Endpoint_Read_8+0x2c>)
 8002a66:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
	bool Success = false;
	uint8_t data = 0;
	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 8002a6a:	222c      	movs	r2, #44	; 0x2c
 8002a6c:	fb02 1203 	mla	r2, r2, r3, r1
 8002a70:	68d2      	ldr	r2, [r2, #12]
 8002a72:	2a00      	cmp	r2, #0
 8002a74:	d0fd      	beq.n	8002a72 <Endpoint_Read_8+0xe>
		{
          data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8002a76:	4906      	ldr	r1, [pc, #24]	; (8002a90 <Endpoint_Read_8+0x2c>)
 8002a78:	202c      	movs	r0, #44	; 0x2c
 8002a7a:	fb00 1303 	mla	r3, r0, r3, r1
 8002a7e:	6919      	ldr	r1, [r3, #16]
 8002a80:	6958      	ldr	r0, [r3, #20]
 8002a82:	5c40      	ldrb	r0, [r0, r1]
          EndPoint->OutOffset++;
 8002a84:	3101      	adds	r1, #1
 8002a86:	6119      	str	r1, [r3, #16]
          EndPoint->OutBytesAvailable--;
 8002a88:	3a01      	subs	r2, #1
 8002a8a:	60da      	str	r2, [r3, #12]
		  Success = true;
		}
	  }while(!Success);
	 return data;
}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	2000123c 	.word	0x2000123c

08002a94 <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 8002a94:	b410      	push	{r4}
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002a96:	4a0b      	ldr	r2, [pc, #44]	; (8002ac4 <Endpoint_Write_32_LE+0x30>)
 8002a98:	f892 113c 	ldrb.w	r1, [r2, #316]	; 0x13c
	bool Success = false;

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 8002a9c:	232c      	movs	r3, #44	; 0x2c
 8002a9e:	fb03 2301 	mla	r3, r3, r1, r2
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	3b03      	subs	r3, #3
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d2fd      	bcs.n	8002aa8 <Endpoint_Write_32_LE+0x14>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) = Data;
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <Endpoint_Write_32_LE+0x30>)
 8002aae:	242c      	movs	r4, #44	; 0x2c
 8002ab0:	fb04 3301 	mla	r3, r4, r1, r3
 8002ab4:	6a19      	ldr	r1, [r3, #32]
 8002ab6:	5088      	str	r0, [r1, r2]
			EndPoint->InBytesAvailable+=4;
 8002ab8:	69da      	ldr	r2, [r3, #28]
 8002aba:	3204      	adds	r2, #4
 8002abc:	61da      	str	r2, [r3, #28]

			Success = true;
		}
	}while(!Success);
}
 8002abe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	2000123c 	.word	0x2000123c

08002ac8 <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE(void) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002ac8:	490a      	ldr	r1, [pc, #40]	; (8002af4 <Endpoint_Read_32_LE+0x2c>)
 8002aca:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
	bool Success = false;
	uint32_t data = 0;

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 8002ace:	222c      	movs	r2, #44	; 0x2c
 8002ad0:	fb02 1203 	mla	r2, r2, r3, r1
 8002ad4:	68d2      	ldr	r2, [r2, #12]
 8002ad6:	2a03      	cmp	r2, #3
 8002ad8:	d9fd      	bls.n	8002ad6 <Endpoint_Read_32_LE+0xe>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 8002ada:	4906      	ldr	r1, [pc, #24]	; (8002af4 <Endpoint_Read_32_LE+0x2c>)
 8002adc:	202c      	movs	r0, #44	; 0x2c
 8002ade:	fb00 1303 	mla	r3, r0, r3, r1
 8002ae2:	6919      	ldr	r1, [r3, #16]
 8002ae4:	6958      	ldr	r0, [r3, #20]
 8002ae6:	5840      	ldr	r0, [r0, r1]
			EndPoint->OutOffset+=4;
 8002ae8:	3104      	adds	r1, #4
 8002aea:	6119      	str	r1, [r3, #16]
			EndPoint->OutBytesAvailable-=4;
 8002aec:	3a04      	subs	r2, #4
 8002aee:	60da      	str	r2, [r3, #12]

			Success = true;
		}
	} while(!Success);
	return data;
}
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	2000123c 	.word	0x2000123c

08002af8 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8002af8:	2900      	cmp	r1, #0
 8002afa:	d030      	beq.n	8002b5e <Endpoint_ConfigureEndpointTable+0x66>
			                                     const uint8_t Entries) {
 8002afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b00:	4604      	mov	r4, r0
 8002b02:	1e4f      	subs	r7, r1, #1
 8002b04:	b2ff      	uxtb	r7, r7
 8002b06:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8002b0a:	3006      	adds	r0, #6
 8002b0c:	eb00 0747 	add.w	r7, r0, r7, lsl #1
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 8002b10:	4e15      	ldr	r6, [pc, #84]	; (8002b68 <Endpoint_ConfigureEndpointTable+0x70>)
			return false;
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 8002b12:	f04f 082c 	mov.w	r8, #44	; 0x2c
 8002b16:	e002      	b.n	8002b1e <Endpoint_ConfigureEndpointTable+0x26>
 8002b18:	3406      	adds	r4, #6
	for (i=0;i<Entries;i++) {
 8002b1a:	42bc      	cmp	r4, r7
 8002b1c:	d01d      	beq.n	8002b5a <Endpoint_ConfigureEndpointTable+0x62>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 8002b1e:	7820      	ldrb	r0, [r4, #0]
 8002b20:	f000 050f 	and.w	r5, r0, #15
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 8002b24:	6833      	ldr	r3, [r6, #0]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	8862      	ldrh	r2, [r4, #2]
 8002b2a:	7921      	ldrb	r1, [r4, #4]
 8002b2c:	4798      	blx	r3
 8002b2e:	b9c0      	cbnz	r0, 8002b62 <Endpoint_ConfigureEndpointTable+0x6a>
		device.Endpoints[Number].Address = Table[i].Address;
 8002b30:	7823      	ldrb	r3, [r4, #0]
 8002b32:	fb08 6205 	mla	r2, r8, r5, r6
 8002b36:	7113      	strb	r3, [r2, #4]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 8002b38:	8913      	ldrh	r3, [r2, #8]
 8002b3a:	8861      	ldrh	r1, [r4, #2]
 8002b3c:	f361 138c 	bfi	r3, r1, #6, #7
 8002b40:	8113      	strh	r3, [r2, #8]
		device.Endpoints[Number].IsConfigured = 1;
		device.Endpoints[Number].IsEnabled = 1;
 8002b42:	f043 0303 	orr.w	r3, r3, #3
 8002b46:	7213      	strb	r3, [r2, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 8002b48:	7820      	ldrb	r0, [r4, #0]
 8002b4a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002b4e:	d1e3      	bne.n	8002b18 <Endpoint_ConfigureEndpointTable+0x20>
			device.Driver->EndpointReadStart(Table[i].Address,
 8002b50:	6833      	ldr	r3, [r6, #0]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	6991      	ldr	r1, [r2, #24]
 8002b56:	4798      	blx	r3
 8002b58:	e7de      	b.n	8002b18 <Endpoint_ConfigureEndpointTable+0x20>
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	e002      	b.n	8002b64 <Endpoint_ConfigureEndpointTable+0x6c>
 8002b5e:	2001      	movs	r0, #1
}
 8002b60:	4770      	bx	lr
			return false;
 8002b62:	2000      	movs	r0, #0
}
 8002b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b68:	2000123c 	.word	0x2000123c

08002b6c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8002b6c:	b510      	push	{r4, lr}
 8002b6e:	4604      	mov	r4, r0
  uint32_t i;

  SystemCoreClockUpdate();
 8002b70:	f001 fcc0 	bl	80044f4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8002b74:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <XMC_SCU_lDelay+0x28>)
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <XMC_SCU_lDelay+0x2c>)
 8002b7a:	fba3 3000 	umull	r3, r0, r3, r0
 8002b7e:	0c80      	lsrs	r0, r0, #18
 8002b80:	fb04 f000 	mul.w	r0, r4, r0

  for (i = 0U; i < delay; ++i)
 8002b84:	b120      	cbz	r0, 8002b90 <XMC_SCU_lDelay+0x24>
 8002b86:	2300      	movs	r3, #0
  {
    __NOP();
 8002b88:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	4298      	cmp	r0, r3
 8002b8e:	d1fb      	bne.n	8002b88 <XMC_SCU_lDelay+0x1c>
  }
}
 8002b90:	bd10      	pop	{r4, pc}
 8002b92:	bf00      	nop
 8002b94:	2000ffc0 	.word	0x2000ffc0
 8002b98:	431bde83 	.word	0x431bde83

08002b9c <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8002b9c:	4a02      	ldr	r2, [pc, #8]	; (8002ba8 <XMC_SCU_INTERRUPT_EnableEvent+0xc>)
 8002b9e:	6893      	ldr	r3, [r2, #8]
 8002ba0:	4318      	orrs	r0, r3
 8002ba2:	6090      	str	r0, [r2, #8]
}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	50004074 	.word	0x50004074

08002bac <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 8002bac:	4a02      	ldr	r2, [pc, #8]	; (8002bb8 <XMC_SCU_INTERRUPT_DisableEvent+0xc>)
 8002bae:	6893      	ldr	r3, [r2, #8]
 8002bb0:	ea23 0000 	bic.w	r0, r3, r0
 8002bb4:	6090      	str	r0, [r2, #8]
}
 8002bb6:	4770      	bx	lr
 8002bb8:	50004074 	.word	0x50004074

08002bbc <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 8002bbc:	4a02      	ldr	r2, [pc, #8]	; (8002bc8 <XMC_SCU_INTERRUPT_TriggerEvent+0xc>)
 8002bbe:	6913      	ldr	r3, [r2, #16]
 8002bc0:	4318      	orrs	r0, r3
 8002bc2:	6110      	str	r0, [r2, #16]
}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	50004074 	.word	0x50004074

08002bcc <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 8002bcc:	4b01      	ldr	r3, [pc, #4]	; (8002bd4 <XMC_SCU_INTERUPT_GetEventStatus+0x8>)
 8002bce:	6858      	ldr	r0, [r3, #4]
}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	50004074 	.word	0x50004074

08002bd8 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8002bd8:	4b01      	ldr	r3, [pc, #4]	; (8002be0 <XMC_SCU_INTERRUPT_ClearEventStatus+0x8>)
 8002bda:	60d8      	str	r0, [r3, #12]
}
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	50004074 	.word	0x50004074

08002be4 <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 8002be4:	4b02      	ldr	r3, [pc, #8]	; (8002bf0 <XMC_SCU_GetBootMode+0xc>)
 8002be6:	6918      	ldr	r0, [r3, #16]
}
 8002be8:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	50004000 	.word	0x50004000

08002bf4 <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 8002bf4:	4b01      	ldr	r3, [pc, #4]	; (8002bfc <XMC_SCU_SetBootMode+0x8>)
 8002bf6:	6118      	str	r0, [r3, #16]
}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	50004000 	.word	0x50004000

08002c00 <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
  return (SCU_GENERAL->GPR[index]);
 8002c00:	0080      	lsls	r0, r0, #2
 8002c02:	4b01      	ldr	r3, [pc, #4]	; (8002c08 <XMC_SCU_ReadGPR+0x8>)
 8002c04:	5818      	ldr	r0, [r3, r0]
}
 8002c06:	4770      	bx	lr
 8002c08:	5000402c 	.word	0x5000402c

08002c0c <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
  SCU_GENERAL->GPR[index] = data;
 8002c0c:	0080      	lsls	r0, r0, #2
 8002c0e:	4b01      	ldr	r3, [pc, #4]	; (8002c14 <XMC_SCU_WriteGPR+0x8>)
 8002c10:	5019      	str	r1, [r3, r0]
}
 8002c12:	4770      	bx	lr
 8002c14:	5000402c 	.word	0x5000402c

08002c18 <XMC_SCU_EnableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8002c18:	0080      	lsls	r0, r0, #2
 8002c1a:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
 8002c1e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 8002c22:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 8002c26:	2301      	movs	r3, #1
 8002c28:	fa03 f101 	lsl.w	r1, r3, r1
 8002c2c:	4311      	orrs	r1, r2
 8002c2e:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
}
 8002c32:	4770      	bx	lr

08002c34 <XMC_SCU_DisableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8002c34:	0080      	lsls	r0, r0, #2
 8002c36:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
 8002c3a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 8002c3e:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8002c42:	2201      	movs	r2, #1
 8002c44:	fa02 f101 	lsl.w	r1, r2, r1
 8002c48:	ea23 0301 	bic.w	r3, r3, r1
 8002c4c:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
 8002c50:	4770      	bx	lr
	...

08002c54 <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 8002c54:	02c9      	lsls	r1, r1, #11
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 8002c56:	f441 0108 	orr.w	r1, r1, #8912896	; 0x880000
 8002c5a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8002c5e:	4b02      	ldr	r3, [pc, #8]	; (8002c68 <XMC_SCU_CalibrateTemperatureSensor+0x14>)
 8002c60:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	50004000 	.word	0x50004000

08002c6c <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 8002c6c:	4a03      	ldr	r2, [pc, #12]	; (8002c7c <XMC_SCU_EnableTemperatureSensor+0x10>)
 8002c6e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8002c7a:	4770      	bx	lr
 8002c7c:	50004000 	.word	0x50004000

08002c80 <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 8002c80:	4a03      	ldr	r2, [pc, #12]	; (8002c90 <XMC_SCU_DisableTemperatureSensor+0x10>)
 8002c82:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8002c8e:	4770      	bx	lr
 8002c90:	50004000 	.word	0x50004000

08002c94 <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <XMC_SCU_IsTemperatureSensorEnabled+0x10>)
 8002c96:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 8002c9a:	f080 0001 	eor.w	r0, r0, #1
}
 8002c9e:	f000 0001 	and.w	r0, r0, #1
 8002ca2:	4770      	bx	lr
 8002ca4:	50004000 	.word	0x50004000

08002ca8 <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 8002ca8:	4b02      	ldr	r3, [pc, #8]	; (8002cb4 <XMC_SCU_IsTemperatureSensorReady+0xc>)
 8002caa:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8002cae:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8002cb2:	4770      	bx	lr
 8002cb4:	50004000 	.word	0x50004000

08002cb8 <XMC_SCU_GetTemperatureMeasurement>:
  return (status);
}

/* API to retrieve the temperature measured */
uint32_t XMC_SCU_GetTemperatureMeasurement(void)
{
 8002cb8:	b508      	push	{r3, lr}
  uint32_t temperature;

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8002cba:	f7ff ffeb 	bl	8002c94 <XMC_SCU_IsTemperatureSensorEnabled>
 8002cbe:	b128      	cbz	r0, 8002ccc <XMC_SCU_GetTemperatureMeasurement+0x14>
  {
    temperature = 0x7FFFFFFFUL;
  }
  else
  {
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 8002cc0:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <XMC_SCU_GetTemperatureMeasurement+0x1c>)
 8002cc2:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8002cc6:	f3c0 0009 	ubfx	r0, r0, #0, #10
  }
  
  return ((uint32_t)temperature);
}
 8002cca:	bd08      	pop	{r3, pc}
    temperature = 0x7FFFFFFFUL;
 8002ccc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  return ((uint32_t)temperature);
 8002cd0:	e7fb      	b.n	8002cca <XMC_SCU_GetTemperatureMeasurement+0x12>
 8002cd2:	bf00      	nop
 8002cd4:	50004000 	.word	0x50004000

08002cd8 <XMC_SCU_IsTemperatureSensorBusy>:

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 8002cd8:	4b02      	ldr	r3, [pc, #8]	; (8002ce4 <XMC_SCU_IsTemperatureSensorBusy+0xc>)
 8002cda:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8002cde:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8002ce2:	4770      	bx	lr
 8002ce4:	50004000 	.word	0x50004000

08002ce8 <XMC_SCU_StartTemperatureMeasurement>:
{
 8002ce8:	b510      	push	{r4, lr}
  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8002cea:	f7ff ffd3 	bl	8002c94 <XMC_SCU_IsTemperatureSensorEnabled>
 8002cee:	4604      	mov	r4, r0
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 8002cf0:	f7ff fff2 	bl	8002cd8 <XMC_SCU_IsTemperatureSensorBusy>
 8002cf4:	b950      	cbnz	r0, 8002d0c <XMC_SCU_StartTemperatureMeasurement+0x24>
  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8002cf6:	f084 0001 	eor.w	r0, r4, #1
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 8002cfa:	b2c0      	uxtb	r0, r0
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 8002cfc:	4a04      	ldr	r2, [pc, #16]	; (8002d10 <XMC_SCU_StartTemperatureMeasurement+0x28>)
 8002cfe:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002d02:	f043 0302 	orr.w	r3, r3, #2
 8002d06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8002d0a:	bd10      	pop	{r4, pc}
    status = XMC_SCU_STATUS_BUSY;
 8002d0c:	2002      	movs	r0, #2
 8002d0e:	e7f5      	b.n	8002cfc <XMC_SCU_StartTemperatureMeasurement+0x14>
 8002d10:	50004000 	.word	0x50004000

08002d14 <XMC_SCU_WriteToRetentionMemory>:
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8002d14:	0400      	lsls	r0, r0, #16
 8002d16:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 8002d1a:	f040 0001 	orr.w	r0, r0, #1
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <XMC_SCU_WriteToRetentionMemory+0x24>)
 8002d20:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8002d24:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002d2e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002d32:	d1fa      	bne.n	8002d2a <XMC_SCU_WriteToRetentionMemory+0x16>
  {
  }
}
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	50004000 	.word	0x50004000

08002d3c <XMC_SCU_ReadFromRetentionMemory>:
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8002d3c:	0400      	lsls	r0, r0, #16
 8002d3e:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <XMC_SCU_ReadFromRetentionMemory+0x20>)
 8002d44:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002d4e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002d52:	d1fa      	bne.n	8002d4a <XMC_SCU_ReadFromRetentionMemory+0xe>
  {
  }

  return (SCU_GENERAL->RMDATA);
 8002d54:	4b01      	ldr	r3, [pc, #4]	; (8002d5c <XMC_SCU_ReadFromRetentionMemory+0x20>)
 8002d56:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
}
 8002d5a:	4770      	bx	lr
 8002d5c:	50004000 	.word	0x50004000

08002d60 <XMC_SCU_TRAP_Enable>:
}

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 8002d60:	4a02      	ldr	r2, [pc, #8]	; (8002d6c <XMC_SCU_TRAP_Enable+0xc>)
 8002d62:	6893      	ldr	r3, [r2, #8]
 8002d64:	ea23 0000 	bic.w	r0, r3, r0
 8002d68:	6090      	str	r0, [r2, #8]
}
 8002d6a:	4770      	bx	lr
 8002d6c:	50004160 	.word	0x50004160

08002d70 <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 8002d70:	4a02      	ldr	r2, [pc, #8]	; (8002d7c <XMC_SCU_TRAP_Disable+0xc>)
 8002d72:	6893      	ldr	r3, [r2, #8]
 8002d74:	4318      	orrs	r0, r3
 8002d76:	6090      	str	r0, [r2, #8]
}
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	50004160 	.word	0x50004160

08002d80 <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
  return (SCU_TRAP->TRAPRAW);
 8002d80:	4b01      	ldr	r3, [pc, #4]	; (8002d88 <XMC_SCU_TRAP_GetStatus+0x8>)
 8002d82:	6858      	ldr	r0, [r3, #4]
}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	50004160 	.word	0x50004160

08002d8c <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 8002d8c:	4b01      	ldr	r3, [pc, #4]	; (8002d94 <XMC_SCU_TRAP_Trigger+0x8>)
 8002d8e:	6118      	str	r0, [r3, #16]
}
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	50004160 	.word	0x50004160

08002d98 <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 8002d98:	4b01      	ldr	r3, [pc, #4]	; (8002da0 <XMC_SCU_TRAP_ClearStatus+0x8>)
 8002d9a:	60d8      	str	r0, [r3, #12]
}
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	50004160 	.word	0x50004160

08002da4 <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 8002da4:	4a02      	ldr	r2, [pc, #8]	; (8002db0 <XMC_SCU_PARITY_ClearStatus+0xc>)
 8002da6:	6953      	ldr	r3, [r2, #20]
 8002da8:	4318      	orrs	r0, r3
 8002daa:	6150      	str	r0, [r2, #20]
}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	5000413c 	.word	0x5000413c

08002db4 <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
  return (SCU_PARITY->PEFLAG);
 8002db4:	4b01      	ldr	r3, [pc, #4]	; (8002dbc <XMC_SCU_PARITY_GetStatus+0x8>)
 8002db6:	6958      	ldr	r0, [r3, #20]
} 
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	5000413c 	.word	0x5000413c

08002dc0 <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 8002dc0:	4a02      	ldr	r2, [pc, #8]	; (8002dcc <XMC_SCU_PARITY_Enable+0xc>)
 8002dc2:	6813      	ldr	r3, [r2, #0]
 8002dc4:	4318      	orrs	r0, r3
 8002dc6:	6010      	str	r0, [r2, #0]
}
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	5000413c 	.word	0x5000413c

08002dd0 <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 8002dd0:	4a02      	ldr	r2, [pc, #8]	; (8002ddc <XMC_SCU_PARITY_Disable+0xc>)
 8002dd2:	6813      	ldr	r3, [r2, #0]
 8002dd4:	ea23 0000 	bic.w	r0, r3, r0
 8002dd8:	6010      	str	r0, [r2, #0]
}
 8002dda:	4770      	bx	lr
 8002ddc:	5000413c 	.word	0x5000413c

08002de0 <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
  SCU_PARITY->PETE |= (uint32_t)memory; 
 8002de0:	4a02      	ldr	r2, [pc, #8]	; (8002dec <XMC_SCU_PARITY_EnableTrapGeneration+0xc>)
 8002de2:	6893      	ldr	r3, [r2, #8]
 8002de4:	4318      	orrs	r0, r3
 8002de6:	6090      	str	r0, [r2, #8]
}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	5000413c 	.word	0x5000413c

08002df0 <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 8002df0:	4a02      	ldr	r2, [pc, #8]	; (8002dfc <XMC_SCU_PARITY_DisableTrapGeneration+0xc>)
 8002df2:	6893      	ldr	r3, [r2, #8]
 8002df4:	ea23 0000 	bic.w	r0, r3, r0
 8002df8:	6090      	str	r0, [r2, #8]
}
 8002dfa:	4770      	bx	lr
 8002dfc:	5000413c 	.word	0x5000413c

08002e00 <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8002e00:	4a02      	ldr	r2, [pc, #8]	; (8002e0c <XMC_SCU_INTERRUPT_EnableNmiRequest+0xc>)
 8002e02:	6953      	ldr	r3, [r2, #20]
 8002e04:	4318      	orrs	r0, r3
 8002e06:	6150      	str	r0, [r2, #20]
}
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	50004074 	.word	0x50004074

08002e10 <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 8002e10:	4a02      	ldr	r2, [pc, #8]	; (8002e1c <XMC_SCU_INTERRUPT_DisableNmiRequest+0xc>)
 8002e12:	6953      	ldr	r3, [r2, #20]
 8002e14:	ea23 0000 	bic.w	r0, r3, r0
 8002e18:	6150      	str	r0, [r2, #20]
}
 8002e1a:	4770      	bx	lr
 8002e1c:	50004074 	.word	0x50004074

08002e20 <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8002e20:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8002e22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8002e26:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8002e2a:	4a02      	ldr	r2, [pc, #8]	; (8002e34 <XMC_SCU_RESET_AssertPeripheralReset+0x14>)
 8002e2c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	50004410 	.word	0x50004410

08002e38 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8002e38:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8002e3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8002e3e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8002e42:	4a02      	ldr	r2, [pc, #8]	; (8002e4c <XMC_SCU_RESET_DeassertPeripheralReset+0x14>)
 8002e44:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	50004414 	.word	0x50004414

08002e50 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8002e50:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8002e52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8002e56:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8002e5a:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <XMC_SCU_RESET_IsPeripheralResetAsserted+0x1c>)
 8002e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e60:	4218      	tst	r0, r3
}
 8002e62:	bf14      	ite	ne
 8002e64:	2001      	movne	r0, #1
 8002e66:	2000      	moveq	r0, #0
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	5000440c 	.word	0x5000440c

08002e70 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:

/**
 * API to retrieve frequency of System PLL VCO input clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
 8002e70:	b508      	push	{r3, lr}
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x18>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f013 0f01 	tst.w	r3, #1
 8002e7a:	d102      	bne.n	8002e82 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x12>
  {
    clock_frequency = OSCHP_GetFrequency();
 8002e7c:	f001 fb36 	bl	80044ec <OSCHP_GetFrequency>
  {
    clock_frequency = OFI_FREQUENCY;
  }
  
  return (clock_frequency);
}
 8002e80:	bd08      	pop	{r3, pc}
    clock_frequency = OFI_FREQUENCY;
 8002e82:	4802      	ldr	r0, [pc, #8]	; (8002e8c <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1c>)
  return (clock_frequency);
 8002e84:	e7fc      	b.n	8002e80 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x10>
 8002e86:	bf00      	nop
 8002e88:	50004710 	.word	0x50004710
 8002e8c:	016e3600 	.word	0x016e3600

08002e90 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:
{
 8002e90:	b508      	push	{r3, lr}
  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 8002e92:	f7ff ffed 	bl	8002e70 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 8002e96:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x44>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f013 0f01 	tst.w	r3, #1
 8002e9e:	d111      	bne.n	8002ec4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x34>
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x44>)
 8002ea2:	689a      	ldr	r2, [r3, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 8002ea4:	6899      	ldr	r1, [r3, #8]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 8002ea6:	689b      	ldr	r3, [r3, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 8002ea8:	f3c1 2106 	ubfx	r1, r1, #8, #7
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 8002eac:	fb01 0000 	mla	r0, r1, r0, r0
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 8002eb0:	f3c2 6203 	ubfx	r2, r2, #24, #4
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 8002eb4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002eb8:	3301      	adds	r3, #1
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 8002eba:	fb02 3303 	mla	r3, r2, r3, r3
 8002ebe:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002ec2:	bd08      	pop	{r3, pc}
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x44>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ecc:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 8002ece:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ed2:	e7f6      	b.n	8002ec2 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x32>
 8002ed4:	50004710 	.word	0x50004710

08002ed8 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 8002ed8:	b508      	push	{r3, lr}
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 8002eda:	f001 fb07 	bl	80044ec <OSCHP_GetFrequency>
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x2c>)
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f013 0f01 	tst.w	r3, #1
 8002ee6:	d10c      	bne.n	8002f02 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x2a>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x2c>)
 8002eea:	695a      	ldr	r2, [r3, #20]
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 8002eec:	695b      	ldr	r3, [r3, #20]
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 8002eee:	f3c2 2206 	ubfx	r2, r2, #8, #7
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 8002ef2:	fb02 0000 	mla	r0, r2, r0, r0
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 8002ef6:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002efa:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	fbb0 f0f3 	udiv	r0, r0, r3
  }
  return (clock_frequency);
}
 8002f02:	bd08      	pop	{r3, pc}
 8002f04:	50004710 	.word	0x50004710

08002f08 <XMC_SCU_CLOCK_GetCcuClockFrequency>:
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <XMC_SCU_CLOCK_GetCcuClockFrequency+0x18>)
 8002f0a:	691a      	ldr	r2, [r3, #16]
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
  uint32_t frequency = 0UL;
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	f002 0201 	and.w	r2, r2, #1
 8002f12:	4904      	ldr	r1, [pc, #16]	; (8002f24 <XMC_SCU_CLOCK_GetCcuClockFrequency+0x1c>)
 8002f14:	6808      	ldr	r0, [r1, #0]
 8002f16:	4090      	lsls	r0, r2
 8002f18:	f003 0301 	and.w	r3, r3, #1
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 8002f1c:	40d8      	lsrs	r0, r3
 8002f1e:	4770      	bx	lr
 8002f20:	50004600 	.word	0x50004600
 8002f24:	2000ffc0 	.word	0x2000ffc0

08002f28 <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 8002f28:	b508      	push	{r3, lr}
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x28>)
 8002f2c:	699b      	ldr	r3, [r3, #24]
  uint32_t frequency = 0UL;
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 8002f2e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002f32:	d109      	bne.n	8002f48 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
  }
  else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8002f34:	f7ff ffd0 	bl	8002ed8 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x28>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 8002f40:	3301      	adds	r3, #1
}
 8002f42:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f46:	bd08      	pop	{r3, pc}
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8002f48:	f7ff ffa2 	bl	8002e90 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8002f4c:	e7f4      	b.n	8002f38 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x10>
 8002f4e:	bf00      	nop
 8002f50:	50004600 	.word	0x50004600

08002f54 <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 8002f54:	b508      	push	{r3, lr}
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8002f56:	f7ff ff9b 	bl	8002e90 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8002f5a:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <XMC_SCU_CLOCK_GetEbuClockFrequency+0x18>)
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 8002f62:	3301      	adds	r3, #1
}
 8002f64:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f68:	bd08      	pop	{r3, pc}
 8002f6a:	bf00      	nop
 8002f6c:	50004600 	.word	0x50004600

08002f70 <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 8002f70:	b508      	push	{r3, lr}
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x38>)
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  uint32_t frequency = 0UL;
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 8002f7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f7e:	d00d      	beq.n	8002f9c <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 8002f80:	b17b      	cbz	r3, 8002fa2 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x32>
  {
    frequency = OFI_FREQUENCY;
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
  {
    frequency = OSI_FREQUENCY;
 8002f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f86:	bf14      	ite	ne
 8002f88:	2000      	movne	r0, #0
 8002f8a:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x38>)
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 8002f94:	3301      	adds	r3, #1
}
 8002f96:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f9a:	bd08      	pop	{r3, pc}
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8002f9c:	f7ff ff78 	bl	8002e90 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8002fa0:	e7f5      	b.n	8002f8e <XMC_SCU_CLOCK_GetWdtClockFrequency+0x1e>
    frequency = OFI_FREQUENCY;
 8002fa2:	4802      	ldr	r0, [pc, #8]	; (8002fac <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3c>)
 8002fa4:	e7f3      	b.n	8002f8e <XMC_SCU_CLOCK_GetWdtClockFrequency+0x1e>
 8002fa6:	bf00      	nop
 8002fa8:	50004600 	.word	0x50004600
 8002fac:	016e3600 	.word	0x016e3600

08002fb0 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 8002fb0:	b508      	push	{r3, lr}
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 8002fb2:	4b13      	ldr	r3, [pc, #76]	; (8003000 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x50>)
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	f003 0303 	and.w	r3, r3, #3
  uint32_t frequency = 0UL;
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d004      	beq.n	8002fc8 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x18>
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 8002fbe:	b16b      	cbz	r3, 8002fdc <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d013      	beq.n	8002fec <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x3c>
  uint32_t frequency = 0UL;
 8002fc4:	2000      	movs	r0, #0
  else
  {

  }

  return (frequency);
 8002fc6:	e010      	b.n	8002fea <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x3a>
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8002fc8:	f7ff ff62 	bl	8002e90 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x50>)
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	f3c3 4308 	ubfx	r3, r3, #16, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8002fd4:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8002fd6:	fbb0 f0f3 	udiv	r0, r0, r3
 8002fda:	e006      	b.n	8002fea <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x3a>
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8002fdc:	4b08      	ldr	r3, [pc, #32]	; (8003000 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x50>)
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	4a07      	ldr	r2, [pc, #28]	; (8003004 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x54>)
 8002fe6:	6810      	ldr	r0, [r2, #0]
 8002fe8:	4098      	lsls	r0, r3
}
 8002fea:	bd08      	pop	{r3, pc}
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8002fec:	f7ff ff74 	bl	8002ed8 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8002ff0:	4b03      	ldr	r3, [pc, #12]	; (8003000 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x50>)
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	f3c3 4308 	ubfx	r3, r3, #16, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8002ff8:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8002ffa:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ffe:	e7f4      	b.n	8002fea <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x3a>
 8003000:	50004600 	.word	0x50004600
 8003004:	2000ffc0 	.word	0x2000ffc0

08003008 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8003008:	4b03      	ldr	r3, [pc, #12]	; (8003018 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8003010:	4a02      	ldr	r2, [pc, #8]	; (800301c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x14>)
 8003012:	6810      	ldr	r0, [r2, #0]
}
 8003014:	40d8      	lsrs	r0, r3
 8003016:	4770      	bx	lr
 8003018:	50004600 	.word	0x50004600
 800301c:	2000ffc0 	.word	0x2000ffc0

08003020 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8003020:	4a03      	ldr	r2, [pc, #12]	; (8003030 <XMC_SCU_CLOCK_SetSystemClockSource+0x10>)
 8003022:	68d3      	ldr	r3, [r2, #12]
 8003024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003028:	4318      	orrs	r0, r3
 800302a:	60d0      	str	r0, [r2, #12]
                      ((uint32_t)source);
}
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	50004600 	.word	0x50004600

08003034 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8003034:	4a03      	ldr	r2, [pc, #12]	; (8003044 <XMC_SCU_CLOCK_SetUsbClockSource+0x10>)
 8003036:	6993      	ldr	r3, [r2, #24]
 8003038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303c:	4318      	orrs	r0, r3
 800303e:	6190      	str	r0, [r2, #24]
                      ((uint32_t)source);
}
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	50004600 	.word	0x50004600

08003048 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8003048:	4a03      	ldr	r2, [pc, #12]	; (8003058 <XMC_SCU_CLOCK_SetWdtClockSource+0x10>)
 800304a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800304c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003050:	4318      	orrs	r0, r3
 8003052:	6250      	str	r0, [r2, #36]	; 0x24
                      ((uint32_t)source);
}
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	50004600 	.word	0x50004600

0800305c <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 800305c:	4a03      	ldr	r2, [pc, #12]	; (800306c <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x10>)
 800305e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003060:	f023 0303 	bic.w	r3, r3, #3
 8003064:	4318      	orrs	r0, r3
 8003066:	6290      	str	r0, [r2, #40]	; 0x28
                      ((uint32_t)source);
}
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	50004600 	.word	0x50004600

08003070 <XMC_SCU_CLOCK_SetSystemPllClockSource>:

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8003070:	b138      	cbz	r0, 8003082 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x12>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8003072:	4a08      	ldr	r2, [pc, #32]	; (8003094 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x24>)
 8003074:	68d3      	ldr	r3, [r2, #12]
 8003076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	60d3      	str	r3, [r2, #12]
  }
}
 8003080:	4770      	bx	lr
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8003082:	4a04      	ldr	r2, [pc, #16]	; (8003094 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x24>)
 8003084:	68d3      	ldr	r3, [r2, #12]
 8003086:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	60d3      	str	r3, [r2, #12]
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	50004710 	.word	0x50004710

08003098 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003098:	4a06      	ldr	r2, [pc, #24]	; (80030b4 <XMC_SCU_HIB_SetRtcClockSource+0x1c>)
 800309a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800309e:	f013 0f08 	tst.w	r3, #8
 80030a2:	d1fa      	bne.n	800309a <XMC_SCU_HIB_SetRtcClockSource+0x2>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80030a4:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <XMC_SCU_HIB_SetRtcClockSource+0x20>)
 80030a6:	68d3      	ldr	r3, [r2, #12]
 80030a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ac:	4318      	orrs	r0, r3
 80030ae:	60d0      	str	r0, [r2, #12]
                        ((uint32_t)source);
}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	50004000 	.word	0x50004000
 80030b8:	50004300 	.word	0x50004300

080030bc <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80030bc:	4a06      	ldr	r2, [pc, #24]	; (80030d8 <XMC_SCU_HIB_SetStandbyClockSource+0x1c>)
 80030be:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80030c2:	f013 0f08 	tst.w	r3, #8
 80030c6:	d1fa      	bne.n	80030be <XMC_SCU_HIB_SetStandbyClockSource+0x2>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80030c8:	4a04      	ldr	r2, [pc, #16]	; (80030dc <XMC_SCU_HIB_SetStandbyClockSource+0x20>)
 80030ca:	68d3      	ldr	r3, [r2, #12]
 80030cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030d0:	4318      	orrs	r0, r3
 80030d2:	60d0      	str	r0, [r2, #12]
                        ((uint32_t)source);
}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	50004000 	.word	0x50004000
 80030dc:	50004300 	.word	0x50004300

080030e0 <XMC_SCU_CLOCK_SetSystemClockDivider>:
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80030e0:	4a03      	ldr	r2, [pc, #12]	; (80030f0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x10>)
 80030e2:	68d3      	ldr	r3, [r2, #12]
 80030e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80030e8:	3801      	subs	r0, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80030ea:	4303      	orrs	r3, r0
 80030ec:	60d3      	str	r3, [r2, #12]
}
 80030ee:	4770      	bx	lr
 80030f0:	50004600 	.word	0x50004600

080030f4 <XMC_SCU_CLOCK_SetCcuClockDivider>:
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80030f4:	4a03      	ldr	r2, [pc, #12]	; (8003104 <XMC_SCU_CLOCK_SetCcuClockDivider+0x10>)
 80030f6:	6a13      	ldr	r3, [r2, #32]
 80030f8:	f023 0301 	bic.w	r3, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80030fc:	3801      	subs	r0, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80030fe:	4303      	orrs	r3, r0
 8003100:	6213      	str	r3, [r2, #32]
}
 8003102:	4770      	bx	lr
 8003104:	50004600 	.word	0x50004600

08003108 <XMC_SCU_CLOCK_SetCpuClockDivider>:
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8003108:	4a03      	ldr	r2, [pc, #12]	; (8003118 <XMC_SCU_CLOCK_SetCpuClockDivider+0x10>)
 800310a:	6913      	ldr	r3, [r2, #16]
 800310c:	f023 0301 	bic.w	r3, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8003110:	3801      	subs	r0, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8003112:	4303      	orrs	r3, r0
 8003114:	6113      	str	r3, [r2, #16]
}
 8003116:	4770      	bx	lr
 8003118:	50004600 	.word	0x50004600

0800311c <XMC_SCU_CLOCK_SetPeripheralClockDivider>:
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800311c:	4a03      	ldr	r2, [pc, #12]	; (800312c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x10>)
 800311e:	6953      	ldr	r3, [r2, #20]
 8003120:	f023 0301 	bic.w	r3, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8003124:	3801      	subs	r0, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8003126:	4303      	orrs	r3, r0
 8003128:	6153      	str	r3, [r2, #20]
}
 800312a:	4770      	bx	lr
 800312c:	50004600 	.word	0x50004600

08003130 <XMC_SCU_CLOCK_SetUsbClockDivider>:
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8003130:	4a03      	ldr	r2, [pc, #12]	; (8003140 <XMC_SCU_CLOCK_SetUsbClockDivider+0x10>)
 8003132:	6993      	ldr	r3, [r2, #24]
 8003134:	f023 0307 	bic.w	r3, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8003138:	3801      	subs	r0, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800313a:	4303      	orrs	r3, r0
 800313c:	6193      	str	r3, [r2, #24]
}
 800313e:	4770      	bx	lr
 8003140:	50004600 	.word	0x50004600

08003144 <XMC_SCU_CLOCK_SetEbuClockDivider>:
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8003144:	4a03      	ldr	r2, [pc, #12]	; (8003154 <XMC_SCU_CLOCK_SetEbuClockDivider+0x10>)
 8003146:	69d3      	ldr	r3, [r2, #28]
 8003148:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 800314c:	3801      	subs	r0, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800314e:	4303      	orrs	r3, r0
 8003150:	61d3      	str	r3, [r2, #28]
}
 8003152:	4770      	bx	lr
 8003154:	50004600 	.word	0x50004600

08003158 <XMC_SCU_CLOCK_SetWdtClockDivider>:
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8003158:	4a03      	ldr	r2, [pc, #12]	; (8003168 <XMC_SCU_CLOCK_SetWdtClockDivider+0x10>)
 800315a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800315c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8003160:	3801      	subs	r0, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8003162:	4303      	orrs	r3, r0
 8003164:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003166:	4770      	bx	lr
 8003168:	50004600 	.word	0x50004600

0800316c <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 800316c:	4a05      	ldr	r2, [pc, #20]	; (8003184 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x18>)
 800316e:	6a93      	ldr	r3, [r2, #40]	; 0x28
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 8003170:	3801      	subs	r0, #1
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8003172:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800317e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	50004600 	.word	0x50004600

08003188 <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8003188:	4b01      	ldr	r3, [pc, #4]	; (8003190 <XMC_SCU_CLOCK_EnableClock+0x8>)
 800318a:	6058      	str	r0, [r3, #4]
}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	50004600 	.word	0x50004600

08003194 <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 8003194:	4b01      	ldr	r3, [pc, #4]	; (800319c <XMC_SCU_CLOCK_DisableClock+0x8>)
 8003196:	6098      	str	r0, [r3, #8]
}
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	50004600 	.word	0x50004600

080031a0 <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <XMC_SCU_CLOCK_IsClockEnabled+0x10>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4218      	tst	r0, r3
}
 80031a6:	bf14      	ite	ne
 80031a8:	2001      	movne	r0, #1
 80031aa:	2000      	moveq	r0, #0
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	50004600 	.word	0x50004600

080031b4 <XMC_SCU_POWER_GetEVR13Voltage>:
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <XMC_SCU_POWER_GetEVR13Voltage+0x1c>)
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80031c2:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80031d4 <XMC_SCU_POWER_GetEVR13Voltage+0x20>
 80031c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ca:	ee17 0a90 	vmov	r0, s15
 80031ce:	4770      	bx	lr
 80031d0:	50004200 	.word	0x50004200
 80031d4:	3bbe0ded 	.word	0x3bbe0ded

080031d8 <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 80031d8:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <XMC_SCU_POWER_GetEVR33Voltage+0x20>)
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80031e0:	ee07 3a90 	vmov	s15, r3
 80031e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80031e8:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80031fc <XMC_SCU_POWER_GetEVR33Voltage+0x24>
 80031ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031f0:	ee17 0a90 	vmov	r0, s15
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	50004200 	.word	0x50004200
 80031fc:	3cb851ec 	.word	0x3cb851ec

08003200 <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8003200:	4a03      	ldr	r2, [pc, #12]	; (8003210 <XMC_SCU_CLOCK_EnableUsbPll+0x10>)
 8003202:	6953      	ldr	r3, [r2, #20]
 8003204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003208:	f023 0302 	bic.w	r3, r3, #2
 800320c:	6153      	str	r3, [r2, #20]
}
 800320e:	4770      	bx	lr
 8003210:	50004710 	.word	0x50004710

08003214 <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8003214:	4a03      	ldr	r2, [pc, #12]	; (8003224 <XMC_SCU_CLOCK_DisableUsbPll+0x10>)
 8003216:	6953      	ldr	r3, [r2, #20]
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	f043 0302 	orr.w	r3, r3, #2
 8003220:	6153      	str	r3, [r2, #20]
}
 8003222:	4770      	bx	lr
 8003224:	50004710 	.word	0x50004710

08003228 <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8003228:	4b10      	ldr	r3, [pc, #64]	; (800326c <XMC_SCU_CLOCK_StartUsbPll+0x44>)
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	615a      	str	r2, [r3, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8003232:	695a      	ldr	r2, [r3, #20]
 8003234:	f042 0210 	orr.w	r2, r2, #16
 8003238:	615a      	str	r2, [r3, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800323a:	3901      	subs	r1, #1
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800323c:	3801      	subs	r0, #1
 800323e:	0600      	lsls	r0, r0, #24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8003240:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
 8003244:	6159      	str	r1, [r3, #20]

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800324c:	615a      	str	r2, [r3, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	f022 0210 	bic.w	r2, r2, #16
 8003254:	615a      	str	r2, [r3, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800325c:	615a      	str	r2, [r3, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 800325e:	461a      	mov	r2, r3
 8003260:	6913      	ldr	r3, [r2, #16]
 8003262:	f013 0f04 	tst.w	r3, #4
 8003266:	d0fb      	beq.n	8003260 <XMC_SCU_CLOCK_StartUsbPll+0x38>
  {
    /* wait for PLL Lock */
  }

}
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	50004710 	.word	0x50004710

08003270 <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 8003270:	4b01      	ldr	r3, [pc, #4]	; (8003278 <XMC_SCU_CLOCK_StopUsbPll+0x8>)
 8003272:	4a02      	ldr	r2, [pc, #8]	; (800327c <XMC_SCU_CLOCK_StopUsbPll+0xc>)
 8003274:	615a      	str	r2, [r3, #20]
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 8003276:	4770      	bx	lr
 8003278:	50004710 	.word	0x50004710
 800327c:	00010003 	.word	0x00010003

08003280 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8003280:	b510      	push	{r4, lr}
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8003282:	4a0c      	ldr	r2, [pc, #48]	; (80032b4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x34>)
 8003284:	6853      	ldr	r3, [r2, #4]
 8003286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800328a:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 800328c:	2801      	cmp	r0, #1
 800328e:	d003      	beq.n	8003298 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x18>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
  }

  XMC_SCU_lDelay(100UL);
 8003290:	2064      	movs	r0, #100	; 0x64
 8003292:	f7ff fc6b 	bl	8002b6c <XMC_SCU_lDelay>
}
 8003296:	bd10      	pop	{r4, pc}
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8003298:	4614      	mov	r4, r2
 800329a:	6853      	ldr	r3, [r2, #4]
 800329c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80032a0:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80032a2:	2064      	movs	r0, #100	; 0x64
 80032a4:	f7ff fc62 	bl	8002b6c <XMC_SCU_lDelay>
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80032a8:	6863      	ldr	r3, [r4, #4]
 80032aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80032ae:	6063      	str	r3, [r4, #4]
 80032b0:	e7ee      	b.n	8003290 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x10>
 80032b2:	bf00      	nop
 80032b4:	50004710 	.word	0x50004710

080032b8 <XMC_SCU_POWER_EnableUsb>:

/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 80032b8:	4b02      	ldr	r3, [pc, #8]	; (80032c4 <XMC_SCU_POWER_EnableUsb+0xc>)
 80032ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80032be:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	50004200 	.word	0x50004200

080032c8 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 80032c8:	4b02      	ldr	r3, [pc, #8]	; (80032d4 <XMC_SCU_POWER_DisableUsb+0xc>)
 80032ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80032ce:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	50004200 	.word	0x50004200

080032d8 <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 80032d8:	4b02      	ldr	r3, [pc, #8]	; (80032e4 <XMC_SCU_CLOCK_IsUsbPllLocked+0xc>)
 80032da:	6918      	ldr	r0, [r3, #16]
}
 80032dc:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	50004710 	.word	0x50004710

080032e8 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80032e8:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <XMC_SCU_HIB_EnableHibernateDomain+0x38>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f013 0f01 	tst.w	r3, #1
 80032f0:	d107      	bne.n	8003302 <XMC_SCU_HIB_EnableHibernateDomain+0x1a>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80032f2:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <XMC_SCU_HIB_EnableHibernateDomain+0x38>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80032f8:	461a      	mov	r2, r3
 80032fa:	6813      	ldr	r3, [r2, #0]
 80032fc:	f013 0f01 	tst.w	r3, #1
 8003300:	d0fb      	beq.n	80032fa <XMC_SCU_HIB_EnableHibernateDomain+0x12>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <XMC_SCU_HIB_EnableHibernateDomain+0x3c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f413 7f00 	tst.w	r3, #512	; 0x200
 800330a:	d008      	beq.n	800331e <XMC_SCU_HIB_EnableHibernateDomain+0x36>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <XMC_SCU_HIB_EnableHibernateDomain+0x3c>)
 800330e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003312:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8003314:	461a      	mov	r2, r3
 8003316:	6813      	ldr	r3, [r2, #0]
 8003318:	f413 7f00 	tst.w	r3, #512	; 0x200
 800331c:	d1fb      	bne.n	8003316 <XMC_SCU_HIB_EnableHibernateDomain+0x2e>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 800331e:	4770      	bx	lr
 8003320:	50004200 	.word	0x50004200
 8003324:	50004400 	.word	0x50004400

08003328 <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <XMC_SCU_HIB_DisableHibernateDomain+0x14>)
 800332a:	2201      	movs	r2, #1
 800332c:	609a      	str	r2, [r3, #8]
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 800332e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003332:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003336:	605a      	str	r2, [r3, #4]
}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	50004200 	.word	0x50004200

08003340 <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <XMC_SCU_HIB_IsHibernateDomainEnabled+0x1c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f013 0f01 	tst.w	r3, #1
 8003348:	d006      	beq.n	8003358 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x18>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>)
 800334c:	6818      	ldr	r0, [r3, #0]
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 800334e:	f480 7000 	eor.w	r0, r0, #512	; 0x200
 8003352:	f3c0 2040 	ubfx	r0, r0, #9, #1
 8003356:	4770      	bx	lr
 8003358:	2000      	movs	r0, #0
}
 800335a:	4770      	bx	lr
 800335c:	50004200 	.word	0x50004200
 8003360:	50004400 	.word	0x50004400

08003364 <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8003364:	4a05      	ldr	r2, [pc, #20]	; (800337c <XMC_SCU_HIB_EnableInternalSlowClock+0x18>)
 8003366:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800336a:	f013 0f20 	tst.w	r3, #32
 800336e:	d1fa      	bne.n	8003366 <XMC_SCU_HIB_EnableInternalSlowClock+0x2>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 8003370:	4a03      	ldr	r2, [pc, #12]	; (8003380 <XMC_SCU_HIB_EnableInternalSlowClock+0x1c>)
 8003372:	6953      	ldr	r3, [r2, #20]
 8003374:	f023 0301 	bic.w	r3, r3, #1
 8003378:	6153      	str	r3, [r2, #20]
}
 800337a:	4770      	bx	lr
 800337c:	50004000 	.word	0x50004000
 8003380:	50004300 	.word	0x50004300

08003384 <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8003384:	4a05      	ldr	r2, [pc, #20]	; (800339c <XMC_SCU_HIB_DisableInternalSlowClock+0x18>)
 8003386:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800338a:	f013 0f20 	tst.w	r3, #32
 800338e:	d1fa      	bne.n	8003386 <XMC_SCU_HIB_DisableInternalSlowClock+0x2>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 8003390:	4a03      	ldr	r2, [pc, #12]	; (80033a0 <XMC_SCU_HIB_DisableInternalSlowClock+0x1c>)
 8003392:	6953      	ldr	r3, [r2, #20]
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	6153      	str	r3, [r2, #20]
}
 800339a:	4770      	bx	lr
 800339c:	50004000 	.word	0x50004000
 80033a0:	50004300 	.word	0x50004300

080033a4 <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 80033a4:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <XMC_SCU_HIB_ClearEventStatus+0x14>)
 80033a6:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80033aa:	f013 0f02 	tst.w	r3, #2
 80033ae:	d1fa      	bne.n	80033a6 <XMC_SCU_HIB_ClearEventStatus+0x2>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 80033b0:	4b02      	ldr	r3, [pc, #8]	; (80033bc <XMC_SCU_HIB_ClearEventStatus+0x18>)
 80033b2:	6058      	str	r0, [r3, #4]
}
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	50004000 	.word	0x50004000
 80033bc:	50004300 	.word	0x50004300

080033c0 <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 80033c0:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <XMC_SCU_HIB_TriggerEvent+0x14>)
 80033c2:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80033c6:	f013 0f04 	tst.w	r3, #4
 80033ca:	d1fa      	bne.n	80033c2 <XMC_SCU_HIB_TriggerEvent+0x2>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 80033cc:	4b02      	ldr	r3, [pc, #8]	; (80033d8 <XMC_SCU_HIB_TriggerEvent+0x18>)
 80033ce:	6098      	str	r0, [r3, #8]
}
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	50004000 	.word	0x50004000
 80033d8:	50004300 	.word	0x50004300

080033dc <XMC_SCU_HIB_EnableEvent>:
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80033dc:	4a05      	ldr	r2, [pc, #20]	; (80033f4 <XMC_SCU_HIB_EnableEvent+0x18>)
 80033de:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80033e2:	f013 0f08 	tst.w	r3, #8
 80033e6:	d1fa      	bne.n	80033de <XMC_SCU_HIB_EnableEvent+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 80033e8:	4b03      	ldr	r3, [pc, #12]	; (80033f8 <XMC_SCU_HIB_EnableEvent+0x1c>)
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	4310      	orrs	r0, r2
 80033ee:	60d8      	str	r0, [r3, #12]
}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	50004000 	.word	0x50004000
 80033f8:	50004300 	.word	0x50004300

080033fc <XMC_SCU_HIB_DisableEvent>:
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80033fc:	4a05      	ldr	r2, [pc, #20]	; (8003414 <XMC_SCU_HIB_DisableEvent+0x18>)
 80033fe:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003402:	f013 0f08 	tst.w	r3, #8
 8003406:	d1fa      	bne.n	80033fe <XMC_SCU_HIB_DisableEvent+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 8003408:	4a03      	ldr	r2, [pc, #12]	; (8003418 <XMC_SCU_HIB_DisableEvent+0x1c>)
 800340a:	68d3      	ldr	r3, [r2, #12]
 800340c:	ea23 0000 	bic.w	r0, r3, r0
 8003410:	60d0      	str	r0, [r2, #12]
}
 8003412:	4770      	bx	lr
 8003414:	50004000 	.word	0x50004000
 8003418:	50004300 	.word	0x50004300

0800341c <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800341c:	4a05      	ldr	r2, [pc, #20]	; (8003434 <XMC_SCU_HIB_EnterHibernateState+0x18>)
 800341e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003422:	f013 0f08 	tst.w	r3, #8
 8003426:	d1fa      	bne.n	800341e <XMC_SCU_HIB_EnterHibernateState+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 8003428:	4a03      	ldr	r2, [pc, #12]	; (8003438 <XMC_SCU_HIB_EnterHibernateState+0x1c>)
 800342a:	68d3      	ldr	r3, [r2, #12]
 800342c:	f043 0310 	orr.w	r3, r3, #16
 8003430:	60d3      	str	r3, [r2, #12]
}
 8003432:	4770      	bx	lr
 8003434:	50004000 	.word	0x50004000
 8003438:	50004300 	.word	0x50004300

0800343c <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 800343c:	b100      	cbz	r0, 8003440 <XMC_SCU_HIB_EnterHibernateStateEx+0x4>
 800343e:	4770      	bx	lr
{
 8003440:	b508      	push	{r3, lr}
  {
    XMC_SCU_HIB_EnterHibernateState();
 8003442:	f7ff ffeb 	bl	800341c <XMC_SCU_HIB_EnterHibernateState>
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 8003446:	bd08      	pop	{r3, pc}

08003448 <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003448:	4a09      	ldr	r2, [pc, #36]	; (8003470 <XMC_SCU_HIB_SetWakeupTriggerInput+0x28>)
 800344a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800344e:	f013 0f08 	tst.w	r3, #8
 8003452:	d1fa      	bne.n	800344a <XMC_SCU_HIB_SetWakeupTriggerInput+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8003454:	b128      	cbz	r0, 8003462 <XMC_SCU_HIB_SetWakeupTriggerInput+0x1a>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 8003456:	4a07      	ldr	r2, [pc, #28]	; (8003474 <XMC_SCU_HIB_SetWakeupTriggerInput+0x2c>)
 8003458:	68d3      	ldr	r3, [r2, #12]
 800345a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800345e:	60d3      	str	r3, [r2, #12]
  }
}
 8003460:	4770      	bx	lr
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 8003462:	4a04      	ldr	r2, [pc, #16]	; (8003474 <XMC_SCU_HIB_SetWakeupTriggerInput+0x2c>)
 8003464:	68d3      	ldr	r3, [r2, #12]
 8003466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346a:	60d3      	str	r3, [r2, #12]
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	50004000 	.word	0x50004000
 8003474:	50004300 	.word	0x50004300

08003478 <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 8003478:	b410      	push	{r4}
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800347a:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <XMC_SCU_HIB_SetPinMode+0x2c>)
 800347c:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003480:	f013 0f08 	tst.w	r3, #8
 8003484:	d1fa      	bne.n	800347c <XMC_SCU_HIB_SetPinMode+0x4>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8003486:	4c08      	ldr	r4, [pc, #32]	; (80034a8 <XMC_SCU_HIB_SetPinMode+0x30>)
 8003488:	68e3      	ldr	r3, [r4, #12]
 800348a:	0080      	lsls	r0, r0, #2
 800348c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8003490:	4082      	lsls	r2, r0
 8003492:	ea23 0302 	bic.w	r3, r3, r2
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 8003496:	4081      	lsls	r1, r0
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8003498:	4319      	orrs	r1, r3
 800349a:	60e1      	str	r1, [r4, #12]
}
 800349c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	50004000 	.word	0x50004000
 80034a8:	50004300 	.word	0x50004300

080034ac <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 80034ac:	b410      	push	{r4}
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80034ae:	4a09      	ldr	r2, [pc, #36]	; (80034d4 <XMC_SCU_HIB_SetPinOutputLevel+0x28>)
 80034b0:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80034b4:	f013 0f08 	tst.w	r3, #8
 80034b8:	d1fa      	bne.n	80034b0 <XMC_SCU_HIB_SetPinOutputLevel+0x4>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 80034ba:	4c07      	ldr	r4, [pc, #28]	; (80034d8 <XMC_SCU_HIB_SetPinOutputLevel+0x2c>)
 80034bc:	68e3      	ldr	r3, [r4, #12]
 80034be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034c2:	4082      	lsls	r2, r0
 80034c4:	ea23 0302 	bic.w	r3, r3, r2
                        (level << pin);
 80034c8:	4081      	lsls	r1, r0
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 80034ca:	4319      	orrs	r1, r3
 80034cc:	60e1      	str	r1, [r4, #12]
}
 80034ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	50004000 	.word	0x50004000
 80034d8:	50004300 	.word	0x50004300

080034dc <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80034dc:	4a09      	ldr	r2, [pc, #36]	; (8003504 <XMC_SCU_HIB_SetInput0+0x28>)
 80034de:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80034e2:	f013 0f08 	tst.w	r3, #8
 80034e6:	d1fa      	bne.n	80034de <XMC_SCU_HIB_SetInput0+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 80034e8:	b128      	cbz	r0, 80034f6 <XMC_SCU_HIB_SetInput0+0x1a>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 80034ea:	4a07      	ldr	r2, [pc, #28]	; (8003508 <XMC_SCU_HIB_SetInput0+0x2c>)
 80034ec:	68d3      	ldr	r3, [r2, #12]
 80034ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034f2:	60d3      	str	r3, [r2, #12]
  }
}
 80034f4:	4770      	bx	lr
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 80034f6:	4a04      	ldr	r2, [pc, #16]	; (8003508 <XMC_SCU_HIB_SetInput0+0x2c>)
 80034f8:	68d3      	ldr	r3, [r2, #12]
 80034fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034fe:	60d3      	str	r3, [r2, #12]
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	50004000 	.word	0x50004000
 8003508:	50004300 	.word	0x50004300

0800350c <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800350c:	4a06      	ldr	r2, [pc, #24]	; (8003528 <XMC_SCU_HIB_SetSR0Input+0x1c>)
 800350e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003512:	f013 0f08 	tst.w	r3, #8
 8003516:	d1fa      	bne.n	800350e <XMC_SCU_HIB_SetSR0Input+0x2>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 8003518:	4a04      	ldr	r2, [pc, #16]	; (800352c <XMC_SCU_HIB_SetSR0Input+0x20>)
 800351a:	68d3      	ldr	r3, [r2, #12]
 800351c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003520:	4318      	orrs	r0, r3
 8003522:	60d0      	str	r0, [r2, #12]
#endif  
                        input;
}
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	50004000 	.word	0x50004000
 800352c:	50004300 	.word	0x50004300

08003530 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8003530:	4b03      	ldr	r3, [pc, #12]	; (8003540 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x10>)
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	f080 0008 	eor.w	r0, r0, #8
}
 8003538:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	50004300 	.word	0x50004300

08003544 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8003544:	4a13      	ldr	r2, [pc, #76]	; (8003594 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x50>)
 8003546:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800354a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800354e:	d1fa      	bne.n	8003546 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x2>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8003550:	4a11      	ldr	r2, [pc, #68]	; (8003598 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>)
 8003552:	69d3      	ldr	r3, [r2, #28]
 8003554:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003558:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800355a:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
 800355e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003562:	f013 0f08 	tst.w	r3, #8
 8003566:	d1fa      	bne.n	800355e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8003568:	4a0b      	ldr	r2, [pc, #44]	; (8003598 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>)
 800356a:	68d3      	ldr	r3, [r2, #12]
 800356c:	f043 0308 	orr.w	r3, r3, #8
 8003570:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8003572:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
 8003576:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800357a:	f013 0f04 	tst.w	r3, #4
 800357e:	d1fa      	bne.n	8003576 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x32>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>)
 8003582:	2208      	movs	r2, #8
 8003584:	609a      	str	r2, [r3, #8]
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
  return(SCU_GENERAL->MIRRSTS);
 8003586:	4a03      	ldr	r2, [pc, #12]	; (8003594 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x50>)
 8003588:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4

  while (XMC_SCU_GetMirrorStatus() != 0)
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1fb      	bne.n	8003588 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	50004000 	.word	0x50004000
 8003598:	50004300 	.word	0x50004300

0800359c <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 800359c:	4a05      	ldr	r2, [pc, #20]	; (80035b4 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x18>)
 800359e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80035a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80035a6:	d1fa      	bne.n	800359e <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80035a8:	4a03      	ldr	r2, [pc, #12]	; (80035b8 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x1c>)
 80035aa:	69d3      	ldr	r3, [r2, #28]
 80035ac:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80035b0:	61d3      	str	r3, [r2, #28]
}
 80035b2:	4770      	bx	lr
 80035b4:	50004000 	.word	0x50004000
 80035b8:	50004300 	.word	0x50004300

080035bc <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80035bc:	4a05      	ldr	r2, [pc, #20]	; (80035d4 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x18>)
 80035be:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80035c2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80035c6:	d1fa      	bne.n	80035be <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80035c8:	4a03      	ldr	r2, [pc, #12]	; (80035d8 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x1c>)
 80035ca:	69d3      	ldr	r3, [r2, #28]
 80035cc:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 80035d0:	61d3      	str	r3, [r2, #28]
}
 80035d2:	4770      	bx	lr
 80035d4:	50004000 	.word	0x50004000
 80035d8:	50004300 	.word	0x50004300

080035dc <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80035dc:	4a06      	ldr	r2, [pc, #24]	; (80035f8 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x1c>)
 80035de:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80035e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80035e6:	d1fa      	bne.n	80035de <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x2>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 80035e8:	4a04      	ldr	r2, [pc, #16]	; (80035fc <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x20>)
 80035ea:	69d3      	ldr	r3, [r2, #28]
 80035ec:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 80035f0:	f043 0320 	orr.w	r3, r3, #32
 80035f4:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 80035f6:	4770      	bx	lr
 80035f8:	50004000 	.word	0x50004000
 80035fc:	50004300 	.word	0x50004300

08003600 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 8003600:	4b02      	ldr	r3, [pc, #8]	; (800360c <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0xc>)
 8003602:	6998      	ldr	r0, [r3, #24]
}
 8003604:	f000 0001 	and.w	r0, r0, #1
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	50004300 	.word	0x50004300

08003610 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8003610:	b570      	push	{r4, r5, r6, lr}
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8003612:	4d0d      	ldr	r5, [pc, #52]	; (8003648 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x38>)
 8003614:	686b      	ldr	r3, [r5, #4]
 8003616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361a:	606b      	str	r3, [r5, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 800361c:	4e0b      	ldr	r6, [pc, #44]	; (800364c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x3c>)
 800361e:	6874      	ldr	r4, [r6, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8003620:	f000 ff64 	bl	80044ec <OSCHP_GetFrequency>
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x40>)
 8003626:	fba3 3000 	umull	r3, r0, r3, r0
 800362a:	0d03      	lsrs	r3, r0, #20
 800362c:	1e58      	subs	r0, r3, #1
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 800362e:	f424 2370 	bic.w	r3, r4, #983040	; 0xf0000
 8003632:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003636:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800363a:	6073      	str	r3, [r6, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 800363c:	686b      	ldr	r3, [r5, #4]
 800363e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003642:	606b      	str	r3, [r5, #4]
}
 8003644:	bd70      	pop	{r4, r5, r6, pc}
 8003646:	bf00      	nop
 8003648:	50004710 	.word	0x50004710
 800364c:	50004700 	.word	0x50004700
 8003650:	6b5fca6b 	.word	0x6b5fca6b

08003654 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x14>)
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	f400 7060 	and.w	r0, r0, #896	; 0x380
}
 800365c:	f5b0 7f60 	cmp.w	r0, #896	; 0x380
 8003660:	bf14      	ite	ne
 8003662:	2000      	movne	r0, #0
 8003664:	2001      	moveq	r0, #1
 8003666:	4770      	bx	lr
 8003668:	50004710 	.word	0x50004710

0800366c <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 800366c:	4a02      	ldr	r2, [pc, #8]	; (8003678 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0xc>)
 800366e:	6853      	ldr	r3, [r2, #4]
 8003670:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003674:	6053      	str	r3, [r2, #4]
}
 8003676:	4770      	bx	lr
 8003678:	50004700 	.word	0x50004700

0800367c <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 800367c:	4a02      	ldr	r2, [pc, #8]	; (8003688 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0xc>)
 800367e:	6853      	ldr	r3, [r2, #4]
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6053      	str	r3, [r2, #4]
}
 8003686:	4770      	bx	lr
 8003688:	50004700 	.word	0x50004700

0800368c <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 800368c:	4a02      	ldr	r2, [pc, #8]	; (8003698 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0xc>)
 800368e:	6853      	ldr	r3, [r2, #4]
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	6053      	str	r3, [r2, #4]
}
 8003696:	4770      	bx	lr
 8003698:	50004700 	.word	0x50004700

0800369c <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 800369c:	4b02      	ldr	r3, [pc, #8]	; (80036a8 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0xc>)
 800369e:	6818      	ldr	r0, [r3, #0]
}
 80036a0:	f000 0001 	and.w	r0, r0, #1
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	50004700 	.word	0x50004700

080036ac <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80036ac:	4a03      	ldr	r2, [pc, #12]	; (80036bc <XMC_SCU_CLOCK_EnableSystemPll+0x10>)
 80036ae:	6853      	ldr	r3, [r2, #4]
 80036b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b4:	f023 0302 	bic.w	r3, r3, #2
 80036b8:	6053      	str	r3, [r2, #4]
}
 80036ba:	4770      	bx	lr
 80036bc:	50004710 	.word	0x50004710

080036c0 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80036c0:	4a03      	ldr	r2, [pc, #12]	; (80036d0 <XMC_SCU_CLOCK_DisableSystemPll+0x10>)
 80036c2:	6853      	ldr	r3, [r2, #4]
 80036c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c8:	f043 0302 	orr.w	r3, r3, #2
 80036cc:	6053      	str	r3, [r2, #4]
}
 80036ce:	4770      	bx	lr
 80036d0:	50004710 	.word	0x50004710

080036d4 <XMC_SCU_CLOCK_StopSystemPll>:
}

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 80036d4:	4a02      	ldr	r2, [pc, #8]	; (80036e0 <XMC_SCU_CLOCK_StopSystemPll+0xc>)
 80036d6:	6853      	ldr	r3, [r2, #4]
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036dc:	6053      	str	r3, [r2, #4]
}
 80036de:	4770      	bx	lr
 80036e0:	50004710 	.word	0x50004710

080036e4 <XMC_SCU_CLOCK_StepSystemPllFrequency>:

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 80036e4:	b508      	push	{r3, lr}
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80036e6:	4a06      	ldr	r2, [pc, #24]	; (8003700 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1c>)
 80036e8:	6893      	ldr	r3, [r2, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 80036ea:	3801      	subs	r0, #1
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80036ec:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80036f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80036f4:	6093      	str	r3, [r2, #8]

  XMC_SCU_lDelay(50U);
 80036f6:	2032      	movs	r0, #50	; 0x32
 80036f8:	f7ff fa38 	bl	8002b6c <XMC_SCU_lDelay>
}
 80036fc:	bd08      	pop	{r3, pc}
 80036fe:	bf00      	nop
 8003700:	50004710 	.word	0x50004710

08003704 <XMC_SCU_CLOCK_StartSystemPll>:
{
 8003704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003708:	4680      	mov	r8, r0
 800370a:	460c      	mov	r4, r1
 800370c:	4617      	mov	r7, r2
 800370e:	461e      	mov	r6, r3
 8003710:	9d06      	ldr	r5, [sp, #24]
  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8003712:	f7ff fcad 	bl	8003070 <XMC_SCU_CLOCK_SetSystemPllClockSource>
  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8003716:	2c01      	cmp	r4, #1
 8003718:	d010      	beq.n	800373c <XMC_SCU_CLOCK_StartSystemPll+0x38>
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 800371a:	4a36      	ldr	r2, [pc, #216]	; (80037f4 <XMC_SCU_CLOCK_StartSystemPll+0xf0>)
 800371c:	6893      	ldr	r3, [r2, #8]
 800371e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8003722:	1e68      	subs	r0, r5, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8003724:	4318      	orrs	r0, r3
 8003726:	6090      	str	r0, [r2, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8003728:	6853      	ldr	r3, [r2, #4]
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8003730:	6813      	ldr	r3, [r2, #0]
 8003732:	f013 0f01 	tst.w	r3, #1
 8003736:	d0fb      	beq.n	8003730 <XMC_SCU_CLOCK_StartSystemPll+0x2c>
}
 8003738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 800373c:	f1b8 0f00 	cmp.w	r8, #0
 8003740:	d04a      	beq.n	80037d8 <XMC_SCU_CLOCK_StartSystemPll+0xd4>
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8003742:	f04f 64c0 	mov.w	r4, #100663296	; 0x6000000
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8003746:	fb06 f404 	mul.w	r4, r6, r4
 800374a:	fbb4 f4f7 	udiv	r4, r4, r7
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 800374e:	4929      	ldr	r1, [pc, #164]	; (80037f4 <XMC_SCU_CLOCK_StartSystemPll+0xf0>)
 8003750:	684b      	ldr	r3, [r1, #4]
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	604b      	str	r3, [r1, #4]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8003758:	684b      	ldr	r3, [r1, #4]
 800375a:	f043 0310 	orr.w	r3, r3, #16
 800375e:	604b      	str	r3, [r1, #4]
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8003760:	688a      	ldr	r2, [r1, #8]
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8003762:	3f01      	subs	r7, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8003764:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <XMC_SCU_CLOCK_StartSystemPll+0xf4>)
 8003766:	4013      	ands	r3, r2
 8003768:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 800376c:	3e01      	subs	r6, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 800376e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8003772:	4a22      	ldr	r2, [pc, #136]	; (80037fc <XMC_SCU_CLOCK_StartSystemPll+0xf8>)
 8003774:	fba2 0204 	umull	r0, r2, r2, r4
 8003778:	0e92      	lsrs	r2, r2, #26
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 800377a:	3a01      	subs	r2, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 800377c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003780:	608b      	str	r3, [r1, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8003782:	684b      	ldr	r3, [r1, #4]
 8003784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003788:	604b      	str	r3, [r1, #4]
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 800378a:	684b      	ldr	r3, [r1, #4]
 800378c:	f023 0310 	bic.w	r3, r3, #16
 8003790:	604b      	str	r3, [r1, #4]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8003792:	684b      	ldr	r3, [r1, #4]
 8003794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003798:	604b      	str	r3, [r1, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800379a:	460a      	mov	r2, r1
 800379c:	6813      	ldr	r3, [r2, #0]
 800379e:	f013 0f04 	tst.w	r3, #4
 80037a2:	d0fb      	beq.n	800379c <XMC_SCU_CLOCK_StartSystemPll+0x98>
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80037a4:	4a13      	ldr	r2, [pc, #76]	; (80037f4 <XMC_SCU_CLOCK_StartSystemPll+0xf0>)
 80037a6:	6853      	ldr	r3, [r2, #4]
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80037ae:	6813      	ldr	r3, [r2, #0]
 80037b0:	f013 0f01 	tst.w	r3, #1
 80037b4:	d1fb      	bne.n	80037ae <XMC_SCU_CLOCK_StartSystemPll+0xaa>
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 80037b6:	4812      	ldr	r0, [pc, #72]	; (8003800 <XMC_SCU_CLOCK_StartSystemPll+0xfc>)
 80037b8:	fba0 3004 	umull	r3, r0, r0, r4
 80037bc:	0ec0      	lsrs	r0, r0, #27
    if (kdiv < kdiv_temp)
 80037be:	4285      	cmp	r5, r0
 80037c0:	d312      	bcc.n	80037e8 <XMC_SCU_CLOCK_StartSystemPll+0xe4>
    kdiv_temp = (vco_frequency / 90UL) >> 22;
 80037c2:	0860      	lsrs	r0, r4, #1
 80037c4:	4c0f      	ldr	r4, [pc, #60]	; (8003804 <XMC_SCU_CLOCK_StartSystemPll+0x100>)
 80037c6:	fba4 3000 	umull	r3, r0, r4, r0
 80037ca:	0ec0      	lsrs	r0, r0, #27
    if (kdiv < kdiv_temp)
 80037cc:	4285      	cmp	r5, r0
 80037ce:	d30e      	bcc.n	80037ee <XMC_SCU_CLOCK_StartSystemPll+0xea>
    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 80037d0:	4628      	mov	r0, r5
 80037d2:	f7ff ff87 	bl	80036e4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 80037d6:	e7af      	b.n	8003738 <XMC_SCU_CLOCK_StartSystemPll+0x34>
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 80037d8:	f000 fe88 	bl	80044ec <OSCHP_GetFrequency>
 80037dc:	4c0a      	ldr	r4, [pc, #40]	; (8003808 <XMC_SCU_CLOCK_StartSystemPll+0x104>)
 80037de:	fba4 3400 	umull	r3, r4, r4, r0
 80037e2:	0ca4      	lsrs	r4, r4, #18
 80037e4:	05a4      	lsls	r4, r4, #22
 80037e6:	e7ae      	b.n	8003746 <XMC_SCU_CLOCK_StartSystemPll+0x42>
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80037e8:	f7ff ff7c 	bl	80036e4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 80037ec:	e7e9      	b.n	80037c2 <XMC_SCU_CLOCK_StartSystemPll+0xbe>
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80037ee:	f7ff ff79 	bl	80036e4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 80037f2:	e7ed      	b.n	80037d0 <XMC_SCU_CLOCK_StartSystemPll+0xcc>
 80037f4:	50004710 	.word	0x50004710
 80037f8:	f08080ff 	.word	0xf08080ff
 80037fc:	aaaaaaab 	.word	0xaaaaaaab
 8003800:	88888889 	.word	0x88888889
 8003804:	b60b60b7 	.word	0xb60b60b7
 8003808:	431bde83 	.word	0x431bde83

0800380c <XMC_SCU_CLOCK_Init>:
{
 800380c:	b530      	push	{r4, r5, lr}
 800380e:	b083      	sub	sp, #12
 8003810:	4604      	mov	r4, r0
  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8003812:	2000      	movs	r0, #0
 8003814:	f7ff fc04 	bl	8003020 <XMC_SCU_CLOCK_SetSystemClockSource>
  XMC_SCU_HIB_EnableHibernateDomain();
 8003818:	f7ff fd66 	bl	80032e8 <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 800381c:	79e3      	ldrb	r3, [r4, #7]
 800381e:	bb23      	cbnz	r3, 800386a <XMC_SCU_CLOCK_Init+0x5e>
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8003820:	7a60      	ldrb	r0, [r4, #9]
 8003822:	f7ff fc4b 	bl	80030bc <XMC_SCU_HIB_SetStandbyClockSource>
 8003826:	4a20      	ldr	r2, [pc, #128]	; (80038a8 <XMC_SCU_CLOCK_Init+0x9c>)
 8003828:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
  while (XMC_SCU_GetMirrorStatus() != 0)
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1fb      	bne.n	8003828 <XMC_SCU_CLOCK_Init+0x1c>
  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8003830:	7a20      	ldrb	r0, [r4, #8]
 8003832:	f7ff fd25 	bl	8003280 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>
  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8003836:	7c20      	ldrb	r0, [r4, #16]
 8003838:	f7ff fc52 	bl	80030e0 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800383c:	7c60      	ldrb	r0, [r4, #17]
 800383e:	f7ff fc63 	bl	8003108 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8003842:	7ca0      	ldrb	r0, [r4, #18]
 8003844:	f7ff fc56 	bl	80030f4 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8003848:	7ce0      	ldrb	r0, [r4, #19]
 800384a:	f7ff fc67 	bl	800311c <XMC_SCU_CLOCK_SetPeripheralClockDivider>
  if (config->enable_oschp == true)
 800384e:	79a3      	ldrb	r3, [r4, #6]
 8003850:	b993      	cbnz	r3, 8003878 <XMC_SCU_CLOCK_Init+0x6c>
  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8003852:	78e3      	ldrb	r3, [r4, #3]
 8003854:	b9bb      	cbnz	r3, 8003886 <XMC_SCU_CLOCK_Init+0x7a>
    XMC_SCU_CLOCK_DisableSystemPll();
 8003856:	f7ff ff33 	bl	80036c0 <XMC_SCU_CLOCK_DisableSystemPll>
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800385a:	68e3      	ldr	r3, [r4, #12]
 800385c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003860:	d01c      	beq.n	800389c <XMC_SCU_CLOCK_Init+0x90>
  SystemCoreClockUpdate();
 8003862:	f000 fe47 	bl	80044f4 <SystemCoreClockUpdate>
}
 8003866:	b003      	add	sp, #12
 8003868:	bd30      	pop	{r4, r5, pc}
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800386a:	f7ff fe6b 	bl	8003544 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800386e:	f7ff fe5f 	bl	8003530 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8003872:	2800      	cmp	r0, #0
 8003874:	d0fb      	beq.n	800386e <XMC_SCU_CLOCK_Init+0x62>
 8003876:	e7d3      	b.n	8003820 <XMC_SCU_CLOCK_Init+0x14>
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8003878:	f7ff feca 	bl	8003610 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 800387c:	f7ff feea 	bl	8003654 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8003880:	2800      	cmp	r0, #0
 8003882:	d0fb      	beq.n	800387c <XMC_SCU_CLOCK_Init+0x70>
 8003884:	e7e5      	b.n	8003852 <XMC_SCU_CLOCK_Init+0x46>
    XMC_SCU_CLOCK_EnableSystemPll();
 8003886:	f7ff ff11 	bl	80036ac <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800388a:	7823      	ldrb	r3, [r4, #0]
 800388c:	7862      	ldrb	r2, [r4, #1]
 800388e:	78e1      	ldrb	r1, [r4, #3]
 8003890:	88a0      	ldrh	r0, [r4, #4]
 8003892:	78a5      	ldrb	r5, [r4, #2]
 8003894:	9500      	str	r5, [sp, #0]
 8003896:	f7ff ff35 	bl	8003704 <XMC_SCU_CLOCK_StartSystemPll>
 800389a:	e7de      	b.n	800385a <XMC_SCU_CLOCK_Init+0x4e>
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 800389c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80038a0:	f7ff fbbe 	bl	8003020 <XMC_SCU_CLOCK_SetSystemClockSource>
 80038a4:	e7dd      	b.n	8003862 <XMC_SCU_CLOCK_Init+0x56>
 80038a6:	bf00      	nop
 80038a8:	50004000 	.word	0x50004000

080038ac <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 80038ac:	4b02      	ldr	r3, [pc, #8]	; (80038b8 <XMC_SCU_CLOCK_IsSystemPllLocked+0xc>)
 80038ae:	6818      	ldr	r0, [r3, #0]
}
 80038b0:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	50004710 	.word	0x50004710

080038bc <XMC_SCU_INTERRUPT_SetEventHandler>:
{
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 80038bc:	f010 0f01 	tst.w	r0, #1
 80038c0:	d111      	bne.n	80038e6 <XMC_SCU_INTERRUPT_SetEventHandler+0x2a>
  index = 0U;
 80038c2:	2300      	movs	r3, #0
  {
    index++;
 80038c4:	3301      	adds	r3, #1
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 80038c6:	fa20 f203 	lsr.w	r2, r0, r3
 80038ca:	f012 0f01 	tst.w	r2, #1
 80038ce:	d103      	bne.n	80038d8 <XMC_SCU_INTERRUPT_SetEventHandler+0x1c>
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d1f7      	bne.n	80038c4 <XMC_SCU_INTERRUPT_SetEventHandler+0x8>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
  {
    status = XMC_SCU_STATUS_ERROR;
 80038d4:	2001      	movs	r0, #1
 80038d6:	4770      	bx	lr
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d006      	beq.n	80038ea <XMC_SCU_INTERRUPT_SetEventHandler+0x2e>
  }
  else
  {
    event_handler_list[index] = handler;
 80038dc:	4a04      	ldr	r2, [pc, #16]	; (80038f0 <XMC_SCU_INTERRUPT_SetEventHandler+0x34>)
 80038de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 80038e2:	2000      	movs	r0, #0
 80038e4:	4770      	bx	lr
  index = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e7f8      	b.n	80038dc <XMC_SCU_INTERRUPT_SetEventHandler+0x20>
    status = XMC_SCU_STATUS_ERROR;
 80038ea:	2001      	movs	r0, #1
  }
  
  return (status);
}
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20001594 	.word	0x20001594

080038f4 <XMC_SCU_IRQHandler>:

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 80038f4:	b510      	push	{r4, lr}
  return (SCU_INTERRUPT->SRRAW);
 80038f6:	4b0d      	ldr	r3, [pc, #52]	; (800392c <XMC_SCU_IRQHandler+0x38>)
 80038f8:	685a      	ldr	r2, [r3, #4]
  
  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus();
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 80038fa:	f012 0f01 	tst.w	r2, #1
 80038fe:	d109      	bne.n	8003914 <XMC_SCU_IRQHandler+0x20>
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
      
      break;
    }   
    index++;    
 8003900:	2401      	movs	r4, #1
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 8003902:	fa22 f304 	lsr.w	r3, r2, r4
 8003906:	f013 0f01 	tst.w	r3, #1
 800390a:	d104      	bne.n	8003916 <XMC_SCU_IRQHandler+0x22>
    index++;    
 800390c:	3401      	adds	r4, #1
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 800390e:	2c20      	cmp	r4, #32
 8003910:	d1f7      	bne.n	8003902 <XMC_SCU_IRQHandler+0xe>
 8003912:	e00a      	b.n	800392a <XMC_SCU_IRQHandler+0x36>
  index = 0U;
 8003914:	2400      	movs	r4, #0
      event_handler = event_handler_list[index];
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <XMC_SCU_IRQHandler+0x3c>)
 8003918:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
      if (event_handler != NULL)
 800391c:	b103      	cbz	r3, 8003920 <XMC_SCU_IRQHandler+0x2c>
          (event_handler)();
 800391e:	4798      	blx	r3
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 8003920:	2301      	movs	r3, #1
 8003922:	fa03 f404 	lsl.w	r4, r3, r4
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8003926:	4b01      	ldr	r3, [pc, #4]	; (800392c <XMC_SCU_IRQHandler+0x38>)
 8003928:	60dc      	str	r4, [r3, #12]
  }
}
 800392a:	bd10      	pop	{r4, pc}
 800392c:	50004074 	.word	0x50004074
 8003930:	20001594 	.word	0x20001594

08003934 <Endpoint_Write_Stream_LE>:

#if defined(USB_CAN_BE_DEVICE)

#include "EndpointStream_XMC4000.h"

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed)  {
 8003934:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003938:	4681      	mov	r9, r0
 800393a:	460e      	mov	r6, r1
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 800393c:	4b2a      	ldr	r3, [pc, #168]	; (80039e8 <Endpoint_Write_Stream_LE+0xb4>)
 800393e:	f893 a13c 	ldrb.w	sl, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;
	uint16_t prev_length = 0;
	if (BytesProcessed!=NULL) {
 8003942:	4690      	mov	r8, r2
 8003944:	b14a      	cbz	r2, 800395a <Endpoint_Write_Stream_LE+0x26>
		Length -= *BytesProcessed;
 8003946:	8817      	ldrh	r7, [r2, #0]
 8003948:	1bce      	subs	r6, r1, r7
 800394a:	b2b6      	uxth	r6, r6
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
			ep->InBytesAvailable += Bytes;
			BytesTransfered += Bytes;
			prev_length = Length;
			Length -= Bytes;
 800394c:	f04f 0b00 	mov.w	fp, #0
		if (ep->InInUse)
 8003950:	4b25      	ldr	r3, [pc, #148]	; (80039e8 <Endpoint_Write_Stream_LE+0xb4>)
 8003952:	252c      	movs	r5, #44	; 0x2c
 8003954:	fb05 350a 	mla	r5, r5, sl, r3
 8003958:	e01a      	b.n	8003990 <Endpoint_Write_Stream_LE+0x5c>
	uint16_t BytesTransfered = 0;
 800395a:	2700      	movs	r7, #0
 800395c:	e7f6      	b.n	800394c <Endpoint_Write_Stream_LE+0x18>
		if (Endpoint_IsReadWriteAllowed()) {
 800395e:	f7ff f847 	bl	80029f0 <Endpoint_IsReadWriteAllowed>
 8003962:	b1f8      	cbz	r0, 80039a4 <Endpoint_Write_Stream_LE+0x70>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8003964:	69eb      	ldr	r3, [r5, #28]
 8003966:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8003968:	1ae4      	subs	r4, r4, r3
 800396a:	42b4      	cmp	r4, r6
 800396c:	bf28      	it	cs
 800396e:	4634      	movcs	r4, r6
 8003970:	b2a4      	uxth	r4, r4
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 8003972:	6a28      	ldr	r0, [r5, #32]
 8003974:	4622      	mov	r2, r4
 8003976:	eb09 0107 	add.w	r1, r9, r7
 800397a:	4418      	add	r0, r3
 800397c:	f000 f9ce 	bl	8003d1c <thumb2_memcpy>
			ep->InBytesAvailable += Bytes;
 8003980:	69eb      	ldr	r3, [r5, #28]
 8003982:	4423      	add	r3, r4
 8003984:	61eb      	str	r3, [r5, #28]
			BytesTransfered += Bytes;
 8003986:	4427      	add	r7, r4
 8003988:	b2bf      	uxth	r7, r7
			Length -= Bytes;
 800398a:	1b34      	subs	r4, r6, r4
 800398c:	46b3      	mov	fp, r6
 800398e:	b2a6      	uxth	r6, r4
	while (Length) {
 8003990:	b1be      	cbz	r6, 80039c2 <Endpoint_Write_Stream_LE+0x8e>
		if (ep->InInUse)
 8003992:	68ab      	ldr	r3, [r5, #8]
 8003994:	f013 0f10 	tst.w	r3, #16
 8003998:	d0e1      	beq.n	800395e <Endpoint_Write_Stream_LE+0x2a>
 800399a:	68ab      	ldr	r3, [r5, #8]
 800399c:	f013 0f10 	tst.w	r3, #16
 80039a0:	d1fb      	bne.n	800399a <Endpoint_Write_Stream_LE+0x66>
 80039a2:	e7dc      	b.n	800395e <Endpoint_Write_Stream_LE+0x2a>
		}
		else {
			Endpoint_ClearIN();
 80039a4:	f7fe ffc8 	bl	8002938 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 80039a8:	f1b8 0f00 	cmp.w	r8, #0
 80039ac:	d105      	bne.n	80039ba <Endpoint_Write_Stream_LE+0x86>
				*BytesProcessed = BytesTransfered;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 80039ae:	f7fe ff45 	bl	800283c <Endpoint_WaitUntilReady>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d0eb      	beq.n	8003990 <Endpoint_Write_Stream_LE+0x5c>
 80039b8:	e00e      	b.n	80039d8 <Endpoint_Write_Stream_LE+0xa4>
				*BytesProcessed = BytesTransfered;
 80039ba:	f8a8 7000 	strh.w	r7, [r8]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 80039be:	2305      	movs	r3, #5
 80039c0:	e00a      	b.n	80039d8 <Endpoint_Write_Stream_LE+0xa4>


		}
	}
	
	if((Length == 0) && (prev_length == ep->MaxPacketSize))
 80039c2:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <Endpoint_Write_Stream_LE+0xb4>)
 80039c4:	222c      	movs	r2, #44	; 0x2c
 80039c6:	fb02 3a0a 	mla	sl, r2, sl, r3
 80039ca:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 80039ce:	f3c3 1386 	ubfx	r3, r3, #6, #7
 80039d2:	455b      	cmp	r3, fp
 80039d4:	d003      	beq.n	80039de <Endpoint_Write_Stream_LE+0xaa>
	{
	   zlp_flag = true;
	}
	return ENDPOINT_RWSTREAM_NoError;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	   zlp_flag = true;
 80039de:	4b03      	ldr	r3, [pc, #12]	; (80039ec <Endpoint_Write_Stream_LE+0xb8>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	701a      	strb	r2, [r3, #0]
	return ENDPOINT_RWSTREAM_NoError;
 80039e4:	2300      	movs	r3, #0
 80039e6:	e7f7      	b.n	80039d8 <Endpoint_Write_Stream_LE+0xa4>
 80039e8:	2000123c 	.word	0x2000123c
 80039ec:	20000eec 	.word	0x20000eec

080039f0 <SwapCopy>:

void SwapCopy(void *const Dest, const void *const Src,uint32_t Length) {
	uint32_t i = 0;
	while(i<Length) {
 80039f0:	b172      	cbz	r2, 8003a10 <SwapCopy+0x20>
void SwapCopy(void *const Dest, const void *const Src,uint32_t Length) {
 80039f2:	b410      	push	{r4}
 80039f4:	1e4b      	subs	r3, r1, #1
 80039f6:	3801      	subs	r0, #1
 80039f8:	4410      	add	r0, r2
 80039fa:	4411      	add	r1, r2
 80039fc:	3901      	subs	r1, #1
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 80039fe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8003a02:	f800 2901 	strb.w	r2, [r0], #-1
	while(i<Length) {
 8003a06:	428b      	cmp	r3, r1
 8003a08:	d1f9      	bne.n	80039fe <SwapCopy+0xe>
		i++;
	}
}
 8003a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	4770      	bx	lr
	...

08003a14 <Endpoint_Write_Stream_BE>:
uint8_t	Endpoint_Write_Stream_BE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8003a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a18:	4680      	mov	r8, r0
 8003a1a:	4689      	mov	r9, r1
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003a1c:	4b22      	ldr	r3, [pc, #136]	; (8003aa8 <Endpoint_Write_Stream_BE+0x94>)
 8003a1e:	f893 513c 	ldrb.w	r5, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8003a22:	4617      	mov	r7, r2
 8003a24:	b142      	cbz	r2, 8003a38 <Endpoint_Write_Stream_BE+0x24>
		Length -= *BytesProcessed;
 8003a26:	8816      	ldrh	r6, [r2, #0]
 8003a28:	1b8c      	subs	r4, r1, r6
 8003a2a:	fa1f f984 	uxth.w	r9, r4
		BytesTransfered = *BytesProcessed;
	}

	while (Length) {
		if (ep->InInUse)
 8003a2e:	4b1e      	ldr	r3, [pc, #120]	; (8003aa8 <Endpoint_Write_Stream_BE+0x94>)
 8003a30:	222c      	movs	r2, #44	; 0x2c
 8003a32:	fb02 3505 	mla	r5, r2, r5, r3
 8003a36:	e01b      	b.n	8003a70 <Endpoint_Write_Stream_BE+0x5c>
	uint16_t BytesTransfered = 0;
 8003a38:	2600      	movs	r6, #0
 8003a3a:	e7f8      	b.n	8003a2e <Endpoint_Write_Stream_BE+0x1a>
			continue;
		if (Endpoint_IsReadWriteAllowed()) {
 8003a3c:	f7fe ffd8 	bl	80029f0 <Endpoint_IsReadWriteAllowed>
 8003a40:	b310      	cbz	r0, 8003a88 <Endpoint_Write_Stream_BE+0x74>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8003a42:	69e8      	ldr	r0, [r5, #28]
 8003a44:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003a46:	1a1b      	subs	r3, r3, r0
 8003a48:	454b      	cmp	r3, r9
 8003a4a:	bf28      	it	cs
 8003a4c:	464b      	movcs	r3, r9
 8003a4e:	b29c      	uxth	r4, r3
			SwapCopy((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable),(void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 8003a50:	6a2b      	ldr	r3, [r5, #32]
 8003a52:	4622      	mov	r2, r4
 8003a54:	eb08 0106 	add.w	r1, r8, r6
 8003a58:	4418      	add	r0, r3
 8003a5a:	f7ff ffc9 	bl	80039f0 <SwapCopy>
			ep->InBytesAvailable += Bytes;
 8003a5e:	69eb      	ldr	r3, [r5, #28]
 8003a60:	4423      	add	r3, r4
 8003a62:	61eb      	str	r3, [r5, #28]
			BytesTransfered += Bytes;
 8003a64:	4426      	add	r6, r4
 8003a66:	b2b6      	uxth	r6, r6
			Length -= Bytes;
 8003a68:	eba9 0404 	sub.w	r4, r9, r4
 8003a6c:	fa1f f984 	uxth.w	r9, r4
	while (Length) {
 8003a70:	f1b9 0f00 	cmp.w	r9, #0
 8003a74:	d014      	beq.n	8003aa0 <Endpoint_Write_Stream_BE+0x8c>
		if (ep->InInUse)
 8003a76:	68ab      	ldr	r3, [r5, #8]
 8003a78:	f013 0f10 	tst.w	r3, #16
 8003a7c:	d0de      	beq.n	8003a3c <Endpoint_Write_Stream_BE+0x28>
 8003a7e:	68ab      	ldr	r3, [r5, #8]
 8003a80:	f013 0f10 	tst.w	r3, #16
 8003a84:	d1fb      	bne.n	8003a7e <Endpoint_Write_Stream_BE+0x6a>
 8003a86:	e7d9      	b.n	8003a3c <Endpoint_Write_Stream_BE+0x28>
		}
		else {
			Endpoint_ClearIN();
 8003a88:	f7fe ff56 	bl	8002938 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 8003a8c:	b92f      	cbnz	r7, 8003a9a <Endpoint_Write_Stream_BE+0x86>
				*BytesProcessed = BytesTransfered;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003a8e:	f7fe fed5 	bl	800283c <Endpoint_WaitUntilReady>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2800      	cmp	r0, #0
 8003a96:	d0eb      	beq.n	8003a70 <Endpoint_Write_Stream_BE+0x5c>
 8003a98:	e003      	b.n	8003aa2 <Endpoint_Write_Stream_BE+0x8e>
				*BytesProcessed = BytesTransfered;
 8003a9a:	803e      	strh	r6, [r7, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003a9c:	2305      	movs	r3, #5
 8003a9e:	e000      	b.n	8003aa2 <Endpoint_Write_Stream_BE+0x8e>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aa8:	2000123c 	.word	0x2000123c

08003aac <Endpoint_Read_Stream_LE>:

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8003aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ab0:	4681      	mov	r9, r0
 8003ab2:	460e      	mov	r6, r1
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003ab4:	4b22      	ldr	r3, [pc, #136]	; (8003b40 <Endpoint_Read_Stream_LE+0x94>)
 8003ab6:	f893 513c 	ldrb.w	r5, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8003aba:	4690      	mov	r8, r2
 8003abc:	b13a      	cbz	r2, 8003ace <Endpoint_Read_Stream_LE+0x22>
		Length -= *BytesProcessed;
 8003abe:	8817      	ldrh	r7, [r2, #0]
 8003ac0:	1bcc      	subs	r4, r1, r7
 8003ac2:	b2a6      	uxth	r6, r4
		BytesTransfered = *BytesProcessed;
	}

	while (Length) {
		if (ep->OutInUse)
 8003ac4:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <Endpoint_Read_Stream_LE+0x94>)
 8003ac6:	222c      	movs	r2, #44	; 0x2c
 8003ac8:	fb02 3505 	mla	r5, r2, r5, r3
 8003acc:	e01b      	b.n	8003b06 <Endpoint_Read_Stream_LE+0x5a>
	uint16_t BytesTransfered = 0;
 8003ace:	2700      	movs	r7, #0
 8003ad0:	e7f8      	b.n	8003ac4 <Endpoint_Read_Stream_LE+0x18>
			continue;
		if (Endpoint_IsReadWriteAllowed()) {
 8003ad2:	f7fe ff8d 	bl	80029f0 <Endpoint_IsReadWriteAllowed>
 8003ad6:	b300      	cbz	r0, 8003b1a <Endpoint_Read_Stream_LE+0x6e>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 8003ad8:	68ec      	ldr	r4, [r5, #12]
 8003ada:	42b4      	cmp	r4, r6
 8003adc:	bf28      	it	cs
 8003ade:	4634      	movcs	r4, r6
 8003ae0:	b2a4      	uxth	r4, r4
			MEMCPY((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8003ae2:	6969      	ldr	r1, [r5, #20]
 8003ae4:	692b      	ldr	r3, [r5, #16]
 8003ae6:	4622      	mov	r2, r4
 8003ae8:	4419      	add	r1, r3
 8003aea:	eb09 0007 	add.w	r0, r9, r7
 8003aee:	f000 f915 	bl	8003d1c <thumb2_memcpy>
			ep->OutBytesAvailable -= Bytes;
 8003af2:	68eb      	ldr	r3, [r5, #12]
 8003af4:	1b1b      	subs	r3, r3, r4
 8003af6:	60eb      	str	r3, [r5, #12]
			ep->OutOffset += Bytes;
 8003af8:	692b      	ldr	r3, [r5, #16]
 8003afa:	4423      	add	r3, r4
 8003afc:	612b      	str	r3, [r5, #16]
			BytesTransfered += Bytes;
 8003afe:	4427      	add	r7, r4
 8003b00:	b2bf      	uxth	r7, r7
			Length -= Bytes;
 8003b02:	1b34      	subs	r4, r6, r4
 8003b04:	b2a6      	uxth	r6, r4
	while (Length) {
 8003b06:	b1be      	cbz	r6, 8003b38 <Endpoint_Read_Stream_LE+0x8c>
		if (ep->OutInUse)
 8003b08:	68ab      	ldr	r3, [r5, #8]
 8003b0a:	f013 0f08 	tst.w	r3, #8
 8003b0e:	d0e0      	beq.n	8003ad2 <Endpoint_Read_Stream_LE+0x26>
 8003b10:	68ab      	ldr	r3, [r5, #8]
 8003b12:	f013 0f08 	tst.w	r3, #8
 8003b16:	d1fb      	bne.n	8003b10 <Endpoint_Read_Stream_LE+0x64>
 8003b18:	e7db      	b.n	8003ad2 <Endpoint_Read_Stream_LE+0x26>
		}
		else {
			Endpoint_ClearOUT();
 8003b1a:	f7fe fedf 	bl	80028dc <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 8003b1e:	f1b8 0f00 	cmp.w	r8, #0
 8003b22:	d105      	bne.n	8003b30 <Endpoint_Read_Stream_LE+0x84>
				*BytesProcessed = BytesTransfered;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003b24:	f7fe fe8a 	bl	800283c <Endpoint_WaitUntilReady>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	d0eb      	beq.n	8003b06 <Endpoint_Read_Stream_LE+0x5a>
 8003b2e:	e004      	b.n	8003b3a <Endpoint_Read_Stream_LE+0x8e>
				*BytesProcessed = BytesTransfered;
 8003b30:	f8a8 7000 	strh.w	r7, [r8]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003b34:	2305      	movs	r3, #5
 8003b36:	e000      	b.n	8003b3a <Endpoint_Read_Stream_LE+0x8e>
				return ErrorCode;
			}

		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b40:	2000123c 	.word	0x2000123c

08003b44 <Endpoint_Read_Stream_BE>:

uint8_t	Endpoint_Read_Stream_BE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8003b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b48:	4681      	mov	r9, r0
 8003b4a:	460e      	mov	r6, r1
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003b4c:	4b22      	ldr	r3, [pc, #136]	; (8003bd8 <Endpoint_Read_Stream_BE+0x94>)
 8003b4e:	f893 513c 	ldrb.w	r5, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8003b52:	4690      	mov	r8, r2
 8003b54:	b13a      	cbz	r2, 8003b66 <Endpoint_Read_Stream_BE+0x22>
		Length -= *BytesProcessed;
 8003b56:	8817      	ldrh	r7, [r2, #0]
 8003b58:	1bcc      	subs	r4, r1, r7
 8003b5a:	b2a6      	uxth	r6, r4
		BytesTransfered = *BytesProcessed;
	}

	while (Length) {
		if (ep->InInUse)
 8003b5c:	4b1e      	ldr	r3, [pc, #120]	; (8003bd8 <Endpoint_Read_Stream_BE+0x94>)
 8003b5e:	222c      	movs	r2, #44	; 0x2c
 8003b60:	fb02 3505 	mla	r5, r2, r5, r3
 8003b64:	e01b      	b.n	8003b9e <Endpoint_Read_Stream_BE+0x5a>
	uint16_t BytesTransfered = 0;
 8003b66:	2700      	movs	r7, #0
 8003b68:	e7f8      	b.n	8003b5c <Endpoint_Read_Stream_BE+0x18>
			continue;
		if (Endpoint_IsReadWriteAllowed()) {
 8003b6a:	f7fe ff41 	bl	80029f0 <Endpoint_IsReadWriteAllowed>
 8003b6e:	b300      	cbz	r0, 8003bb2 <Endpoint_Read_Stream_BE+0x6e>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 8003b70:	68ec      	ldr	r4, [r5, #12]
 8003b72:	42b4      	cmp	r4, r6
 8003b74:	bf28      	it	cs
 8003b76:	4634      	movcs	r4, r6
 8003b78:	b2a4      	uxth	r4, r4
			SwapCopy((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8003b7a:	6969      	ldr	r1, [r5, #20]
 8003b7c:	692b      	ldr	r3, [r5, #16]
 8003b7e:	4622      	mov	r2, r4
 8003b80:	4419      	add	r1, r3
 8003b82:	eb09 0007 	add.w	r0, r9, r7
 8003b86:	f7ff ff33 	bl	80039f0 <SwapCopy>
			ep->OutBytesAvailable -= Bytes;
 8003b8a:	68eb      	ldr	r3, [r5, #12]
 8003b8c:	1b1b      	subs	r3, r3, r4
 8003b8e:	60eb      	str	r3, [r5, #12]
			ep->OutOffset += Bytes;
 8003b90:	692b      	ldr	r3, [r5, #16]
 8003b92:	4423      	add	r3, r4
 8003b94:	612b      	str	r3, [r5, #16]
			BytesTransfered += Bytes;
 8003b96:	4427      	add	r7, r4
 8003b98:	b2bf      	uxth	r7, r7
			Length -= Bytes;
 8003b9a:	1b34      	subs	r4, r6, r4
 8003b9c:	b2a6      	uxth	r6, r4
	while (Length) {
 8003b9e:	b1be      	cbz	r6, 8003bd0 <Endpoint_Read_Stream_BE+0x8c>
		if (ep->InInUse)
 8003ba0:	68ab      	ldr	r3, [r5, #8]
 8003ba2:	f013 0f10 	tst.w	r3, #16
 8003ba6:	d0e0      	beq.n	8003b6a <Endpoint_Read_Stream_BE+0x26>
 8003ba8:	68ab      	ldr	r3, [r5, #8]
 8003baa:	f013 0f10 	tst.w	r3, #16
 8003bae:	d1fb      	bne.n	8003ba8 <Endpoint_Read_Stream_BE+0x64>
 8003bb0:	e7db      	b.n	8003b6a <Endpoint_Read_Stream_BE+0x26>
		}
		else {
			Endpoint_ClearOUT();
 8003bb2:	f7fe fe93 	bl	80028dc <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 8003bb6:	f1b8 0f00 	cmp.w	r8, #0
 8003bba:	d105      	bne.n	8003bc8 <Endpoint_Read_Stream_BE+0x84>
				*BytesProcessed = BytesTransfered;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003bbc:	f7fe fe3e 	bl	800283c <Endpoint_WaitUntilReady>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d0eb      	beq.n	8003b9e <Endpoint_Read_Stream_BE+0x5a>
 8003bc6:	e004      	b.n	8003bd2 <Endpoint_Read_Stream_BE+0x8e>
				*BytesProcessed = BytesTransfered;
 8003bc8:	f8a8 7000 	strh.w	r7, [r8]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003bcc:	2305      	movs	r3, #5
 8003bce:	e000      	b.n	8003bd2 <Endpoint_Read_Stream_BE+0x8e>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bd8:	2000123c 	.word	0x2000123c

08003bdc <Endpoint_Write_Control_Stream_LE>:

uint8_t	Endpoint_Write_Control_Stream_LE (const void *const Buffer, uint16_t Length) {
 8003bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bde:	4607      	mov	r7, r0
 8003be0:	460e      	mov	r6, r1
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
	uint16_t Bytes;

	while (Length) {
		if (!EndPoint->InInUse) {
 8003be2:	4c0f      	ldr	r4, [pc, #60]	; (8003c20 <Endpoint_Write_Control_Stream_LE+0x44>)
	while (Length) {
 8003be4:	b1ce      	cbz	r6, 8003c1a <Endpoint_Write_Control_Stream_LE+0x3e>
		if (!EndPoint->InInUse) {
 8003be6:	68a3      	ldr	r3, [r4, #8]
 8003be8:	f013 0f10 	tst.w	r3, #16
 8003bec:	d003      	beq.n	8003bf6 <Endpoint_Write_Control_Stream_LE+0x1a>
 8003bee:	68a3      	ldr	r3, [r4, #8]
 8003bf0:	f013 0f10 	tst.w	r3, #16
 8003bf4:	d1fb      	bne.n	8003bee <Endpoint_Write_Control_Stream_LE+0x12>
			if (EndPoint->InBufferLength > Length) {
 8003bf6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003bf8:	42b5      	cmp	r5, r6
				Bytes = Length;
			} else {
				Bytes = EndPoint->InBufferLength;
 8003bfa:	bf94      	ite	ls
 8003bfc:	b2ad      	uxthls	r5, r5
 8003bfe:	4635      	movhi	r5, r6
			}
			MEMCPY(EndPoint->InBuffer,Buffer,Bytes);
 8003c00:	462a      	mov	r2, r5
 8003c02:	4639      	mov	r1, r7
 8003c04:	6a20      	ldr	r0, [r4, #32]
 8003c06:	f000 f889 	bl	8003d1c <thumb2_memcpy>
			EndPoint->InBytesAvailable += Bytes;
 8003c0a:	69e3      	ldr	r3, [r4, #28]
 8003c0c:	442b      	add	r3, r5
 8003c0e:	61e3      	str	r3, [r4, #28]
			Length -= Bytes;
 8003c10:	1b75      	subs	r5, r6, r5
 8003c12:	b2ae      	uxth	r6, r5

			Endpoint_ClearIN();
 8003c14:	f7fe fe90 	bl	8002938 <Endpoint_ClearIN>
 8003c18:	e7e4      	b.n	8003be4 <Endpoint_Write_Control_Stream_LE+0x8>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
}
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	2000123c 	.word	0x2000123c

08003c24 <Endpoint_Write_Control_Stream_BE>:

uint8_t	Endpoint_Write_Control_Stream_BE (const void *const Buffer, uint16_t Length) {
 8003c24:	b508      	push	{r3, lr}
	return Endpoint_Write_Control_Stream_LE(Buffer,Length);
 8003c26:	f7ff ffd9 	bl	8003bdc <Endpoint_Write_Control_Stream_LE>
}
 8003c2a:	bd08      	pop	{r3, pc}

08003c2c <Endpoint_Read_Control_Stream_LE>:

uint8_t	Endpoint_Read_Control_Stream_LE (void *const Buffer, uint16_t Length) {
 8003c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c30:	4607      	mov	r7, r0
 8003c32:	460e      	mov	r6, r1
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
	uint16_t Bytes;

	while (Length) {
		if (EndPoint->IsOutRecieved) {
 8003c34:	4c10      	ldr	r4, [pc, #64]	; (8003c78 <Endpoint_Read_Control_Stream_LE+0x4c>)
	while (Length) {
 8003c36:	b1de      	cbz	r6, 8003c70 <Endpoint_Read_Control_Stream_LE+0x44>
		if (EndPoint->IsOutRecieved) {
 8003c38:	68a3      	ldr	r3, [r4, #8]
 8003c3a:	f013 0f20 	tst.w	r3, #32
 8003c3e:	d103      	bne.n	8003c48 <Endpoint_Read_Control_Stream_LE+0x1c>
 8003c40:	68a3      	ldr	r3, [r4, #8]
 8003c42:	f013 0f20 	tst.w	r3, #32
 8003c46:	d0fb      	beq.n	8003c40 <Endpoint_Read_Control_Stream_LE+0x14>
			Bytes = EndPoint->OutBytesAvailable > Length
					? Length : EndPoint->OutBytesAvailable;
 8003c48:	68e5      	ldr	r5, [r4, #12]
 8003c4a:	42b5      	cmp	r5, r6
 8003c4c:	bf28      	it	cs
 8003c4e:	4635      	movcs	r5, r6
 8003c50:	fa1f f885 	uxth.w	r8, r5
			MEMCPY(Buffer,EndPoint->OutBuffer,Bytes);
 8003c54:	4642      	mov	r2, r8
 8003c56:	6961      	ldr	r1, [r4, #20]
 8003c58:	4638      	mov	r0, r7
 8003c5a:	f000 f85f 	bl	8003d1c <thumb2_memcpy>
			EndPoint->OutBytesAvailable -= Bytes;
 8003c5e:	68e3      	ldr	r3, [r4, #12]
 8003c60:	eba3 0308 	sub.w	r3, r3, r8
 8003c64:	60e3      	str	r3, [r4, #12]
			Length -= Bytes;
 8003c66:	1b75      	subs	r5, r6, r5
 8003c68:	b2ae      	uxth	r6, r5

			Endpoint_ClearOUT();
 8003c6a:	f7fe fe37 	bl	80028dc <Endpoint_ClearOUT>
 8003c6e:	e7e2      	b.n	8003c36 <Endpoint_Read_Control_Stream_LE+0xa>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
}
 8003c70:	2000      	movs	r0, #0
 8003c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c76:	bf00      	nop
 8003c78:	2000123c 	.word	0x2000123c

08003c7c <Endpoint_Read_Control_Stream_BE>:

uint8_t	Endpoint_Read_Control_Stream_BE (void *const Buffer, uint16_t Length) {
 8003c7c:	b508      	push	{r3, lr}
	return Endpoint_Read_Control_Stream_LE(Buffer,Length);
 8003c7e:	f7ff ffd5 	bl	8003c2c <Endpoint_Read_Control_Stream_LE>
}
 8003c82:	bd08      	pop	{r3, pc}

08003c84 <Endpoint_Null_Stream>:

uint8_t Endpoint_Null_Stream(uint16_t Length,
								 uint16_t* const BytesProcessed) {
 8003c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c88:	4681      	mov	r9, r0
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003c8a:	4b23      	ldr	r3, [pc, #140]	; (8003d18 <Endpoint_Null_Stream+0x94>)
 8003c8c:	f893 513c 	ldrb.w	r5, [r3, #316]	; 0x13c
		uint16_t Bytes = 0;
		uint16_t BytesTransfered = 0;
		uint8_t ErrorCode;

		if (BytesProcessed!=NULL) {
 8003c90:	460f      	mov	r7, r1
 8003c92:	b151      	cbz	r1, 8003caa <Endpoint_Null_Stream+0x26>
			Length -= *BytesProcessed;
 8003c94:	880e      	ldrh	r6, [r1, #0]
 8003c96:	1b84      	subs	r4, r0, r6
 8003c98:	fa1f f984 	uxth.w	r9, r4
			BytesTransfered = *BytesProcessed;
		}

		while (Length) {
			if (ep->InInUse)
 8003c9c:	4b1e      	ldr	r3, [pc, #120]	; (8003d18 <Endpoint_Null_Stream+0x94>)
 8003c9e:	222c      	movs	r2, #44	; 0x2c
 8003ca0:	fb02 3505 	mla	r5, r2, r5, r3
				continue;
			if (Endpoint_IsReadWriteAllowed()) {
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
				memset(ep->InBuffer + ep->InBytesAvailable,0x0,Bytes);
 8003ca4:	f04f 0800 	mov.w	r8, #0
 8003ca8:	e01a      	b.n	8003ce0 <Endpoint_Null_Stream+0x5c>
		uint16_t BytesTransfered = 0;
 8003caa:	2600      	movs	r6, #0
 8003cac:	e7f6      	b.n	8003c9c <Endpoint_Null_Stream+0x18>
			if (Endpoint_IsReadWriteAllowed()) {
 8003cae:	f7fe fe9f 	bl	80029f0 <Endpoint_IsReadWriteAllowed>
 8003cb2:	b308      	cbz	r0, 8003cf8 <Endpoint_Null_Stream+0x74>
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8003cb4:	69e8      	ldr	r0, [r5, #28]
 8003cb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003cb8:	1a1b      	subs	r3, r3, r0
 8003cba:	454b      	cmp	r3, r9
 8003cbc:	bf28      	it	cs
 8003cbe:	464b      	movcs	r3, r9
 8003cc0:	b29c      	uxth	r4, r3
				memset(ep->InBuffer + ep->InBytesAvailable,0x0,Bytes);
 8003cc2:	6a2b      	ldr	r3, [r5, #32]
 8003cc4:	4622      	mov	r2, r4
 8003cc6:	4641      	mov	r1, r8
 8003cc8:	4418      	add	r0, r3
 8003cca:	f006 ff8d 	bl	800abe8 <memset>
				ep->InBytesAvailable += Bytes;
 8003cce:	69eb      	ldr	r3, [r5, #28]
 8003cd0:	4423      	add	r3, r4
 8003cd2:	61eb      	str	r3, [r5, #28]
				BytesTransfered += Bytes;
 8003cd4:	4426      	add	r6, r4
 8003cd6:	b2b6      	uxth	r6, r6
				Length -= Bytes;
 8003cd8:	eba9 0404 	sub.w	r4, r9, r4
 8003cdc:	fa1f f984 	uxth.w	r9, r4
		while (Length) {
 8003ce0:	f1b9 0f00 	cmp.w	r9, #0
 8003ce4:	d014      	beq.n	8003d10 <Endpoint_Null_Stream+0x8c>
			if (ep->InInUse)
 8003ce6:	68ab      	ldr	r3, [r5, #8]
 8003ce8:	f013 0f10 	tst.w	r3, #16
 8003cec:	d0df      	beq.n	8003cae <Endpoint_Null_Stream+0x2a>
 8003cee:	68ab      	ldr	r3, [r5, #8]
 8003cf0:	f013 0f10 	tst.w	r3, #16
 8003cf4:	d1fb      	bne.n	8003cee <Endpoint_Null_Stream+0x6a>
 8003cf6:	e7da      	b.n	8003cae <Endpoint_Null_Stream+0x2a>
			}
			else {
				Endpoint_ClearIN();
 8003cf8:	f7fe fe1e 	bl	8002938 <Endpoint_ClearIN>
				if (BytesProcessed!=NULL) {
 8003cfc:	b92f      	cbnz	r7, 8003d0a <Endpoint_Null_Stream+0x86>
					*BytesProcessed = BytesTransfered;
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
				}

				if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003cfe:	f7fe fd9d 	bl	800283c <Endpoint_WaitUntilReady>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2800      	cmp	r0, #0
 8003d06:	d0eb      	beq.n	8003ce0 <Endpoint_Null_Stream+0x5c>
 8003d08:	e003      	b.n	8003d12 <Endpoint_Null_Stream+0x8e>
					*BytesProcessed = BytesTransfered;
 8003d0a:	803e      	strh	r6, [r7, #0]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003d0c:	2305      	movs	r3, #5
 8003d0e:	e000      	b.n	8003d12 <Endpoint_Null_Stream+0x8e>
				}


			}
		}
		return ENDPOINT_RWSTREAM_NoError;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d18:	2000123c 	.word	0x2000123c

08003d1c <thumb2_memcpy>:
   stack to improve its performance.  It copies 4 bytes at a time and
   unrolls the loop to perform 4 of these copies per loop iteration.
*/
__attribute__((naked)) void thumb2_memcpy(void* pDest, const void* pSource, size_t length)
{
    __asm (
 8003d1c:	0913      	lsrs	r3, r2, #4
 8003d1e:	d011      	beq.n	8003d44 <thumb2_memcpy+0x28>
 8003d20:	f851 cb04 	ldr.w	ip, [r1], #4
 8003d24:	f840 cb04 	str.w	ip, [r0], #4
 8003d28:	f851 cb04 	ldr.w	ip, [r1], #4
 8003d2c:	f840 cb04 	str.w	ip, [r0], #4
 8003d30:	f851 cb04 	ldr.w	ip, [r1], #4
 8003d34:	f840 cb04 	str.w	ip, [r0], #4
 8003d38:	f851 cb04 	ldr.w	ip, [r1], #4
 8003d3c:	f840 cb04 	str.w	ip, [r0], #4
 8003d40:	3b01      	subs	r3, #1
 8003d42:	d1ed      	bne.n	8003d20 <thumb2_memcpy+0x4>
 8003d44:	f012 030f 	ands.w	r3, r2, #15
 8003d48:	d005      	beq.n	8003d56 <thumb2_memcpy+0x3a>
 8003d4a:	f811 cb01 	ldrb.w	ip, [r1], #1
 8003d4e:	f800 cb01 	strb.w	ip, [r0], #1
 8003d52:	3b01      	subs	r3, #1
 8003d54:	d1f9      	bne.n	8003d4a <thumb2_memcpy+0x2e>
 8003d56:	4770      	bx	lr

08003d58 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8003d58:	b410      	push	{r4}
 8003d5a:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8003d5e:	4418      	add	r0, r3
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8003d60:	6903      	ldr	r3, [r0, #16]
 8003d62:	f001 0103 	and.w	r1, r1, #3
 8003d66:	00c9      	lsls	r1, r1, #3
 8003d68:	24f8      	movs	r4, #248	; 0xf8
 8003d6a:	408c      	lsls	r4, r1
 8003d6c:	ea23 0304 	bic.w	r3, r3, r4
 8003d70:	6103      	str	r3, [r0, #16]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8003d72:	6903      	ldr	r3, [r0, #16]
 8003d74:	fa02 f101 	lsl.w	r1, r2, r1
 8003d78:	4319      	orrs	r1, r3
 8003d7a:	6101      	str	r1, [r0, #16]
}
 8003d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8003d82:	b410      	push	{r4}
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8003d84:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003d86:	0049      	lsls	r1, r1, #1
 8003d88:	2403      	movs	r4, #3
 8003d8a:	408c      	lsls	r4, r1
 8003d8c:	ea23 0304 	bic.w	r3, r3, r4
 8003d90:	6743      	str	r3, [r0, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8003d92:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003d94:	408a      	lsls	r2, r1
 8003d96:	431a      	orrs	r2, r3
 8003d98:	6742      	str	r2, [r0, #116]	; 0x74
}
 8003d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8003da0:	b4f0      	push	{r4, r5, r6, r7}
 8003da2:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8003da6:	4403      	add	r3, r0
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8003da8:	691d      	ldr	r5, [r3, #16]
 8003daa:	f001 0403 	and.w	r4, r1, #3
 8003dae:	00e4      	lsls	r4, r4, #3
 8003db0:	26f8      	movs	r6, #248	; 0xf8
 8003db2:	40a6      	lsls	r6, r4
 8003db4:	ea25 0506 	bic.w	r5, r5, r6
 8003db8:	611d      	str	r5, [r3, #16]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8003dba:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8003dbc:	004f      	lsls	r7, r1, #1
 8003dbe:	2603      	movs	r6, #3
 8003dc0:	40be      	lsls	r6, r7
 8003dc2:	ea25 0506 	bic.w	r5, r5, r6
 8003dc6:	6745      	str	r5, [r0, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8003dc8:	4d15      	ldr	r5, [pc, #84]	; (8003e20 <XMC_GPIO_Init+0x80>)
 8003dca:	42a8      	cmp	r0, r5
 8003dcc:	d01f      	beq.n	8003e0e <XMC_GPIO_Init+0x6e>
 8003dce:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8003dd2:	42a8      	cmp	r0, r5
 8003dd4:	d01b      	beq.n	8003e0e <XMC_GPIO_Init+0x6e>
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8003dd6:	6855      	ldr	r5, [r2, #4]
 8003dd8:	408d      	lsls	r5, r1
 8003dda:	6045      	str	r5, [r0, #4]
 8003ddc:	08cd      	lsrs	r5, r1, #3
 8003dde:	eb00 0085 	add.w	r0, r0, r5, lsl #2

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8003de2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003de4:	f001 0107 	and.w	r1, r1, #7
 8003de8:	0089      	lsls	r1, r1, #2
 8003dea:	2607      	movs	r6, #7
 8003dec:	408e      	lsls	r6, r1
 8003dee:	ea25 0506 	bic.w	r5, r5, r6
 8003df2:	6405      	str	r5, [r0, #64]	; 0x40
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8003df4:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8003df6:	7a15      	ldrb	r5, [r2, #8]
 8003df8:	fa05 f101 	lsl.w	r1, r5, r1
 8003dfc:	4331      	orrs	r1, r6
 8003dfe:	6401      	str	r1, [r0, #64]	; 0x40
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8003e00:	6919      	ldr	r1, [r3, #16]
 8003e02:	7812      	ldrb	r2, [r2, #0]
 8003e04:	40a2      	lsls	r2, r4
 8003e06:	430a      	orrs	r2, r1
 8003e08:	611a      	str	r2, [r3, #16]
}
 8003e0a:	bcf0      	pop	{r4, r5, r6, r7}
 8003e0c:	4770      	bx	lr
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8003e0e:	6e05      	ldr	r5, [r0, #96]	; 0x60
 8003e10:	2601      	movs	r6, #1
 8003e12:	fa06 f101 	lsl.w	r1, r6, r1
 8003e16:	ea25 0101 	bic.w	r1, r5, r1
 8003e1a:	6601      	str	r1, [r0, #96]	; 0x60
 8003e1c:	e7f0      	b.n	8003e00 <XMC_GPIO_Init+0x60>
 8003e1e:	bf00      	nop
 8003e20:	48028e00 	.word	0x48028e00

08003e24 <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 8003e24:	b410      	push	{r4}
 8003e26:	08cb      	lsrs	r3, r1, #3
 8003e28:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8003e2c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003e2e:	f001 0107 	and.w	r1, r1, #7
 8003e32:	0089      	lsls	r1, r1, #2
 8003e34:	2407      	movs	r4, #7
 8003e36:	408c      	lsls	r4, r1
 8003e38:	ea23 0304 	bic.w	r3, r3, r4
 8003e3c:	6403      	str	r3, [r0, #64]	; 0x40
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8003e3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003e40:	fa02 f101 	lsl.w	r1, r2, r1
 8003e44:	4319      	orrs	r1, r3
 8003e46:	6401      	str	r1, [r0, #64]	; 0x40
}
 8003e48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8003e50:	b510      	push	{r4, lr}
 8003e52:	4604      	mov	r4, r0
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8003e54:	2010      	movs	r0, #16
 8003e56:	f7ff f997 	bl	8003188 <XMC_SCU_CLOCK_EnableClock>
  if (module == CCU40)
 8003e5a:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <XMC_CCU4_EnableModule+0x44>)
 8003e5c:	429c      	cmp	r4, r3
 8003e5e:	d009      	beq.n	8003e74 <XMC_CCU4_EnableModule+0x24>
  else if (module == CCU41)
 8003e60:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <XMC_CCU4_EnableModule+0x48>)
 8003e62:	429c      	cmp	r4, r3
 8003e64:	d00a      	beq.n	8003e7c <XMC_CCU4_EnableModule+0x2c>
  else if (module == CCU42)
 8003e66:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <XMC_CCU4_EnableModule+0x4c>)
 8003e68:	429c      	cmp	r4, r3
 8003e6a:	d00b      	beq.n	8003e84 <XMC_CCU4_EnableModule+0x34>
  else if (module == CCU43)
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <XMC_CCU4_EnableModule+0x50>)
 8003e6e:	429c      	cmp	r4, r3
 8003e70:	d00c      	beq.n	8003e8c <XMC_CCU4_EnableModule+0x3c>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
 8003e72:	bd10      	pop	{r4, pc}
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8003e74:	2004      	movs	r0, #4
 8003e76:	f7fe ffdf 	bl	8002e38 <XMC_SCU_RESET_DeassertPeripheralReset>
 8003e7a:	e7fa      	b.n	8003e72 <XMC_CCU4_EnableModule+0x22>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8003e7c:	2008      	movs	r0, #8
 8003e7e:	f7fe ffdb 	bl	8002e38 <XMC_SCU_RESET_DeassertPeripheralReset>
 8003e82:	e7f6      	b.n	8003e72 <XMC_CCU4_EnableModule+0x22>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8003e84:	2010      	movs	r0, #16
 8003e86:	f7fe ffd7 	bl	8002e38 <XMC_SCU_RESET_DeassertPeripheralReset>
 8003e8a:	e7f2      	b.n	8003e72 <XMC_CCU4_EnableModule+0x22>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8003e8c:	4805      	ldr	r0, [pc, #20]	; (8003ea4 <XMC_CCU4_EnableModule+0x54>)
 8003e8e:	f7fe ffd3 	bl	8002e38 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8003e92:	e7ee      	b.n	8003e72 <XMC_CCU4_EnableModule+0x22>
 8003e94:	4000c000 	.word	0x4000c000
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	48004000 	.word	0x48004000
 8003ea4:	10000001 	.word	0x10000001

08003ea8 <XMC_CCU4_DisableModule>:

void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module)
{
 8003ea8:	b508      	push	{r3, lr}
  if (module == CCU40)
 8003eaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <XMC_CCU4_DisableModule+0x3c>)
 8003eac:	4298      	cmp	r0, r3
 8003eae:	d009      	beq.n	8003ec4 <XMC_CCU4_DisableModule+0x1c>
  else if (module == CCU41)
 8003eb0:	4b0d      	ldr	r3, [pc, #52]	; (8003ee8 <XMC_CCU4_DisableModule+0x40>)
 8003eb2:	4298      	cmp	r0, r3
 8003eb4:	d00a      	beq.n	8003ecc <XMC_CCU4_DisableModule+0x24>
  else if (module == CCU42)
 8003eb6:	4b0d      	ldr	r3, [pc, #52]	; (8003eec <XMC_CCU4_DisableModule+0x44>)
 8003eb8:	4298      	cmp	r0, r3
 8003eba:	d00b      	beq.n	8003ed4 <XMC_CCU4_DisableModule+0x2c>
  else if (module == CCU43)
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <XMC_CCU4_DisableModule+0x48>)
 8003ebe:	4298      	cmp	r0, r3
 8003ec0:	d00c      	beq.n	8003edc <XMC_CCU4_DisableModule+0x34>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lGateClock(module);
#endif
}
 8003ec2:	bd08      	pop	{r3, pc}
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8003ec4:	2004      	movs	r0, #4
 8003ec6:	f7fe ffab 	bl	8002e20 <XMC_SCU_RESET_AssertPeripheralReset>
 8003eca:	e7fa      	b.n	8003ec2 <XMC_CCU4_DisableModule+0x1a>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8003ecc:	2008      	movs	r0, #8
 8003ece:	f7fe ffa7 	bl	8002e20 <XMC_SCU_RESET_AssertPeripheralReset>
 8003ed2:	e7f6      	b.n	8003ec2 <XMC_CCU4_DisableModule+0x1a>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8003ed4:	2010      	movs	r0, #16
 8003ed6:	f7fe ffa3 	bl	8002e20 <XMC_SCU_RESET_AssertPeripheralReset>
 8003eda:	e7f2      	b.n	8003ec2 <XMC_CCU4_DisableModule+0x1a>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8003edc:	4805      	ldr	r0, [pc, #20]	; (8003ef4 <XMC_CCU4_DisableModule+0x4c>)
 8003ede:	f7fe ff9f 	bl	8002e20 <XMC_SCU_RESET_AssertPeripheralReset>
}
 8003ee2:	e7ee      	b.n	8003ec2 <XMC_CCU4_DisableModule+0x1a>
 8003ee4:	4000c000 	.word	0x4000c000
 8003ee8:	40010000 	.word	0x40010000
 8003eec:	40014000 	.word	0x40014000
 8003ef0:	48004000 	.word	0x48004000
 8003ef4:	10000001 	.word	0x10000001

08003ef8 <XMC_CCU4_Init>:

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8003ef8:	b538      	push	{r3, r4, r5, lr}
 8003efa:	4604      	mov	r4, r0
 8003efc:	460d      	mov	r5, r1
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8003efe:	f7ff ffa7 	bl	8003e50 <XMC_CCU4_EnableModule>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8003f02:	68e3      	ldr	r3, [r4, #12]
 8003f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f08:	60e3      	str	r3, [r4, #12]
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
  
  gctrl = module->GCTRL;
 8003f0a:	6821      	ldr	r1, [r4, #0]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8003f0c:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8003f10:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
  
  module->GCTRL = gctrl;
 8003f14:	6021      	str	r1, [r4, #0]
}
 8003f16:	bd38      	pop	{r3, r4, r5, pc}

08003f18 <XMC_CCU4_SetModuleClock>:
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 8003f18:	6803      	ldr	r3, [r0, #0]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 8003f1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 8003f1e:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
  
  module->GCTRL = gctrl;
 8003f22:	6001      	str	r1, [r0, #0]
}
 8003f24:	4770      	bx	lr

08003f26 <XMC_CCU4_SetMultiChannelShadowTransferMode>:
{
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));
  
  gctrl = module->GCTRL;
 8003f26:	6803      	ldr	r3, [r0, #0]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 8003f28:	ea23 4311 	bic.w	r3, r3, r1, lsr #16
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 8003f2c:	b289      	uxth	r1, r1
 8003f2e:	4319      	orrs	r1, r3
  module->GCTRL = gctrl;
 8003f30:	6001      	str	r1, [r0, #0]
}
 8003f32:	4770      	bx	lr

08003f34 <XMC_CCU4_SLICE_CompareInit>:
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8003f34:	680b      	ldr	r3, [r1, #0]
 8003f36:	6143      	str	r3, [r0, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8003f38:	794b      	ldrb	r3, [r1, #5]
 8003f3a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003f3e:	051b      	lsls	r3, r3, #20
 8003f40:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8003f42:	790b      	ldrb	r3, [r1, #4]
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	6243      	str	r3, [r0, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8003f4a:	794b      	ldrb	r3, [r1, #5]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	6203      	str	r3, [r0, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8003f52:	794b      	ldrb	r3, [r1, #5]
 8003f54:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003f58:	6183      	str	r3, [r0, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8003f5a:	790b      	ldrb	r3, [r1, #4]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8003f60:	4770      	bx	lr

08003f62 <XMC_CCU4_SLICE_CaptureInit>:
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Capture Init Pointer is NULL",
             (XMC_CCU4_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);

  /* Program the capture mode */
  slice->TC = capture_init->tc;
 8003f62:	680b      	ldr	r3, [r1, #0]
 8003f64:	6143      	str	r3, [r0, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t)capture_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8003f66:	794b      	ldrb	r3, [r1, #5]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	051b      	lsls	r3, r3, #20
 8003f6e:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) capture_init->prescaler_initval;
 8003f70:	790b      	ldrb	r3, [r1, #4]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	6243      	str	r3, [r0, #36]	; 0x24
  /* Program initial floating prescaler compare value */
  slice->FPCS = (uint32_t) capture_init->float_limit;
 8003f78:	790b      	ldrb	r3, [r1, #4]
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8003f7e:	4770      	bx	lr

08003f80 <XMC_CCU4_SLICE_StartConfig>:
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
              (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8003f80:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 8003f82:	f023 0303 	bic.w	r3, r3, #3
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 8003f86:	4319      	orrs	r1, r3

  slice->CMC = cmc;
 8003f88:	6041      	str	r1, [r0, #4]
  
  tc  = slice->TC;
 8003f8a:	6943      	ldr	r3, [r0, #20]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 8003f8c:	2a01      	cmp	r2, #1
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 8003f8e:	bf0c      	ite	eq
 8003f90:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 8003f94:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
  }
  
  slice->TC = tc;
 8003f98:	6143      	str	r3, [r0, #20]
}
 8003f9a:	4770      	bx	lr

08003f9c <XMC_CCU4_SLICE_StopConfig>:
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
  
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8003f9c:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
 8003f9e:	f023 030c 	bic.w	r3, r3, #12
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
 8003fa2:	ea43 0181 	orr.w	r1, r3, r1, lsl #2

  slice->CMC = cmc;
 8003fa6:	6041      	str	r1, [r0, #4]
  
  /* Next, Configure the stop mode */
  tc = slice->TC;
 8003fa8:	6943      	ldr	r3, [r0, #20]
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
 8003faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
 8003fae:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

  slice->TC = tc;
 8003fb2:	6142      	str	r2, [r0, #20]
}
 8003fb4:	4770      	bx	lr

08003fb6 <XMC_CCU4_SLICE_LoadConfig>:
  
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the load function */
  cmc = slice->CMC;
 8003fb6:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
 8003fb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
 8003fbc:	ea43 3101 	orr.w	r1, r3, r1, lsl #12

  slice->CMC = cmc;
 8003fc0:	6041      	str	r1, [r0, #4]
}
 8003fc2:	4770      	bx	lr

08003fc4 <XMC_CCU4_SLICE_ModulationConfig>:
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
 8003fc4:	b430      	push	{r4, r5}
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
              (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
  
  tc  = slice->TC;
 8003fc6:	6944      	ldr	r4, [r0, #20]
  cmc = slice->CMC;
 8003fc8:	6845      	ldr	r5, [r0, #4]
  
  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
 8003fca:	f425 2540 	bic.w	r5, r5, #786432	; 0xc0000
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
 8003fce:	ea45 4181 	orr.w	r1, r5, r1, lsl #18
  slice->CMC = cmc;
 8003fd2:	6041      	str	r1, [r0, #4]
  
  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
 8003fd4:	2a01      	cmp	r2, #1
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
 8003fd6:	bf0c      	ite	eq
 8003fd8:	f044 7480 	orreq.w	r4, r4, #16777216	; 0x1000000
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
 8003fdc:	f024 7480 	bicne.w	r4, r4, #16777216	; 0x1000000
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
 8003fe0:	b923      	cbnz	r3, 8003fec <XMC_CCU4_SLICE_ModulationConfig+0x28>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
 8003fe2:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
  }
  
  slice->TC = tc;
 8003fe6:	6144      	str	r4, [r0, #20]
}
 8003fe8:	bc30      	pop	{r4, r5}
 8003fea:	4770      	bx	lr
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
 8003fec:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8003ff0:	e7f9      	b.n	8003fe6 <XMC_CCU4_SLICE_ModulationConfig+0x22>

08003ff2 <XMC_CCU4_SLICE_CountConfig>:
  
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
 8003ff2:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 8003ff4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 8003ff8:	ea43 3181 	orr.w	r1, r3, r1, lsl #14

  slice->CMC = cmc;
 8003ffc:	6041      	str	r1, [r0, #4]
}
 8003ffe:	4770      	bx	lr

08004000 <XMC_CCU4_SLICE_GateConfig>:
  
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8004000:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 8004002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 8004006:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  slice->CMC = cmc;
 800400a:	6041      	str	r1, [r0, #4]
}
 800400c:	4770      	bx	lr

0800400e <XMC_CCU4_SLICE_Capture0Config>:
  
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 800400e:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP0S_Msk);
 8004010:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP0S_Pos;
 8004014:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  slice->CMC = cmc;
 8004018:	6041      	str	r1, [r0, #4]
}
 800401a:	4770      	bx	lr

0800401c <XMC_CCU4_SLICE_Capture1Config>:
  
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 800401c:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP1S_Msk);
 800401e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP1S_Pos;
 8004022:	ea43 1181 	orr.w	r1, r3, r1, lsl #6

  slice->CMC = cmc;
 8004026:	6041      	str	r1, [r0, #4]
}
 8004028:	4770      	bx	lr

0800402a <XMC_CCU4_SLICE_DirectionConfig>:
  
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
 800402a:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 800402c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 8004030:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
  
  slice->CMC = cmc;
 8004034:	6041      	str	r1, [r0, #4]
}
 8004036:	4770      	bx	lr

08004038 <XMC_CCU4_SLICE_StatusBitOverrideConfig>:
  uint32_t cmc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  
  /* Bind the event with the override function */
  cmc = slice->CMC;
 8004038:	6843      	ldr	r3, [r0, #4]
  /* Map status bit trigger override to Event 1 & 
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
 800403a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000

  slice->CMC = cmc;
 800403e:	6043      	str	r3, [r0, #4]
}
 8004040:	4770      	bx	lr

08004042 <XMC_CCU4_SLICE_TrapConfig>:
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));
    
  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
 8004042:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
 8004044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  slice->CMC = cmc;
 8004048:	6043      	str	r3, [r0, #4]
  
  /* Next, Configure synchronization option */
  tc = slice->TC;
 800404a:	6943      	ldr	r3, [r0, #20]

  if (synch_with_pwm == (bool) true)
 800404c:	b14a      	cbz	r2, 8004062 <XMC_CCU4_SLICE_TrapConfig+0x20>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
 800404e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
  }
  
  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
 8004052:	2901      	cmp	r1, #1
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
 8004054:	bf0c      	ite	eq
 8004056:	f443 0380 	orreq.w	r3, r3, #4194304	; 0x400000
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
 800405a:	f423 0380 	bicne.w	r3, r3, #4194304	; 0x400000
  }
  
  slice->TC = tc;
 800405e:	6143      	str	r3, [r0, #20]
}
 8004060:	4770      	bx	lr
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
 8004062:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004066:	e7f4      	b.n	8004052 <XMC_CCU4_SLICE_TrapConfig+0x10>

08004068 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 8004068:	b410      	push	{r4}
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
  
  slice->INS1 = ins;
#else
  ins = slice->INS;
 800406a:	6803      	ldr	r3, [r0, #0]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
 800406c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
 8004070:	784c      	ldrb	r4, [r1, #1]
 8004072:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  
  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
 8004076:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
 800407a:	7854      	ldrb	r4, [r2, #1]
 800407c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  
  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
 8004080:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
 8004084:	788c      	ldrb	r4, [r1, #2]
 8004086:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
  
  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
 800408a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
 800408e:	7894      	ldrb	r4, [r2, #2]
 8004090:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  
  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
 8004094:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
 8004098:	78cc      	ldrb	r4, [r1, #3]
 800409a:	ea43 63c4 	orr.w	r3, r3, r4, lsl #27

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
 800409e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
 80040a2:	78d4      	ldrb	r4, [r2, #3]
 80040a4:	ea43 7344 	orr.w	r3, r3, r4, lsl #29
  
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
 80040a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
 80040ac:	7809      	ldrb	r1, [r1, #0]
 80040ae:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
 80040b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
 80040b6:	7812      	ldrb	r2, [r2, #0]
 80040b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  
  slice->INS = ins;
 80040bc:	6003      	str	r3, [r0, #0]
#endif
}
 80040be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 80040c4:	b4f0      	push	{r4, r5, r6, r7}
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 80040c6:	1e4c      	subs	r4, r1, #1
 80040c8:	b2e4      	uxtb	r4, r4
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 80040ca:	f8d0 c000 	ldr.w	ip, [r0]
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 80040ce:	0065      	lsls	r5, r4, #1
 80040d0:	b2ed      	uxtb	r5, r5
 80040d2:	f105 0310 	add.w	r3, r5, #16
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 80040d6:	b2df      	uxtb	r7, r3
 80040d8:	2603      	movs	r6, #3
 80040da:	fa06 f307 	lsl.w	r3, r6, r7
 80040de:	ea2c 0c03 	bic.w	ip, ip, r3
  ins |= ((uint32_t) config->edge) << pos;
 80040e2:	7853      	ldrb	r3, [r2, #1]
 80040e4:	40bb      	lsls	r3, r7
 80040e6:	ea43 030c 	orr.w	r3, r3, ip
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 80040ea:	3115      	adds	r1, #21
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 80040ec:	b2cf      	uxtb	r7, r1
 80040ee:	2101      	movs	r1, #1
 80040f0:	40b9      	lsls	r1, r7
 80040f2:	ea23 0301 	bic.w	r3, r3, r1
  ins |= ((uint32_t) config->level) << pos;
 80040f6:	7891      	ldrb	r1, [r2, #2]
 80040f8:	40b9      	lsls	r1, r7
 80040fa:	4319      	orrs	r1, r3
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 80040fc:	3519      	adds	r5, #25
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 80040fe:	b2ed      	uxtb	r5, r5
 8004100:	fa06 f305 	lsl.w	r3, r6, r5
 8004104:	ea21 0103 	bic.w	r1, r1, r3
  ins |= ((uint32_t) config->duration) << pos;
 8004108:	78d3      	ldrb	r3, [r2, #3]
 800410a:	40ab      	lsls	r3, r5
 800410c:	430b      	orrs	r3, r1

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 800410e:	00a1      	lsls	r1, r4, #2
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8004110:	b2c9      	uxtb	r1, r1
 8004112:	240f      	movs	r4, #15
 8004114:	408c      	lsls	r4, r1
 8004116:	ea23 0304 	bic.w	r3, r3, r4
  ins |= ((uint32_t) config->mapped_input) << pos;
 800411a:	7812      	ldrb	r2, [r2, #0]
 800411c:	fa02 f101 	lsl.w	r1, r2, r1
 8004120:	430b      	orrs	r3, r1

  slice->INS = ins;
 8004122:	6003      	str	r3, [r0, #0]
#endif
}
 8004124:	bcf0      	pop	{r4, r5, r6, r7}
 8004126:	4770      	bx	lr

08004128 <XMC_CCU4_SLICE_SetInput>:

/* API to bind an input to a slice trigger event */
void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
                         const XMC_CCU4_SLICE_EVENT_t event,
                             const XMC_CCU4_SLICE_INPUT_t input)
{
 8004128:	b410      	push	{r4}

  slice->INS1 = ins;
#else
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);

  ins = slice->INS;
 800412a:	6803      	ldr	r3, [r0, #0]
  offset = ((uint8_t) event) - 1U;
 800412c:	3901      	subs	r1, #1
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);
 800412e:	0089      	lsls	r1, r1, #2
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8004130:	b2c9      	uxtb	r1, r1
 8004132:	240f      	movs	r4, #15
 8004134:	408c      	lsls	r4, r1
 8004136:	ea23 0304 	bic.w	r3, r3, r4
  ins |= ((uint32_t) input) << pos;
 800413a:	fa02 f101 	lsl.w	r1, r2, r1
 800413e:	4319      	orrs	r1, r3

  slice->INS = ins;
 8004140:	6001      	str	r1, [r0, #0]
#endif
}
 8004142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004146:	4770      	bx	lr

08004148 <XMC_CCU4_SLICE_SetTimerRepeatMode>:
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Timer Repeat Mode",
             ((mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT) ||\
          (mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE)));
  
  if (XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT == mode)
 8004148:	b121      	cbz	r1, 8004154 <XMC_CCU4_SLICE_SetTimerRepeatMode+0xc>
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TSSM_Msk);
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TSSM_Msk;
 800414a:	6943      	ldr	r3, [r0, #20]
 800414c:	f043 0302 	orr.w	r3, r3, #2
 8004150:	6143      	str	r3, [r0, #20]
  }
}
 8004152:	4770      	bx	lr
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TSSM_Msk);
 8004154:	6943      	ldr	r3, [r0, #20]
 8004156:	f023 0302 	bic.w	r3, r3, #2
 800415a:	6143      	str	r3, [r0, #20]
 800415c:	4770      	bx	lr

0800415e <XMC_CCU4_SLICE_SetTimerCountingMode>:
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Timer Count Mode", ((mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA) ||\
                                                                              (mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA)));
  
  if (XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA == mode)
 800415e:	b121      	cbz	r1, 800416a <XMC_CCU4_SLICE_SetTimerCountingMode+0xc>
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TCM_Msk);
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
 8004160:	6943      	ldr	r3, [r0, #20]
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	6143      	str	r3, [r0, #20]
  }
}
 8004168:	4770      	bx	lr
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TCM_Msk);
 800416a:	6943      	ldr	r3, [r0, #20]
 800416c:	f023 0301 	bic.w	r3, r3, #1
 8004170:	6143      	str	r3, [r0, #20]
 8004172:	4770      	bx	lr

08004174 <XMC_CCU4_SLICE_GetCaptureRegisterValue>:
/* Retrieves desired capture register value */
uint32_t XMC_CCU4_SLICE_GetCaptureRegisterValue(const XMC_CCU4_SLICE_t *const slice, const uint8_t reg_num)
{
  XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid register number", (reg_num < 4U));
  return(slice->CV[reg_num]);
 8004174:	311c      	adds	r1, #28
 8004176:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800417a:	6848      	ldr	r0, [r1, #4]
}
 800417c:	4770      	bx	lr

0800417e <XMC_CCU4_SLICE_GetLastCapturedTimerValue>:

/* @brief Retrieves the latest captured timer value */
XMC_CCU4_STATUS_t XMC_CCU4_SLICE_GetLastCapturedTimerValue(const XMC_CCU4_SLICE_t *const slice,
                                                           const XMC_CCU4_SLICE_CAP_REG_SET_t set,
                                                           uint32_t *val_ptr)
{
 800417e:	b430      	push	{r4, r5}
                                                                               (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)));
  
  retval = XMC_CCU4_STATUS_ERROR;

  /* First check if extended capture mode is enabled */
  if ((slice->TC) & CCU4_CC4_TC_ECM_Msk)
 8004180:	6943      	ldr	r3, [r0, #20]
 8004182:	f013 0f10 	tst.w	r3, #16
 8004186:	d127      	bne.n	80041d8 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x5a>
      end   = (uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE;
    }
    else
    {
      start = 0U;
      end = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 8004188:	2901      	cmp	r1, #1
 800418a:	bf0b      	itete	eq
 800418c:	2504      	moveq	r5, #4
 800418e:	2502      	movne	r5, #2
 8004190:	2302      	moveq	r3, #2
 8004192:	2300      	movne	r3, #0
    }
  }

  for(i=start; i < end; i++)
  {
    if ( (slice->CV[i]) & CCU4_CC4_CV_FFL_Msk )
 8004194:	461c      	mov	r4, r3
 8004196:	f103 011c 	add.w	r1, r3, #28
 800419a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800419e:	6849      	ldr	r1, [r1, #4]
 80041a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80041a4:	bf08      	it	eq
 80041a6:	3301      	addeq	r3, #1
 80041a8:	d10c      	bne.n	80041c4 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x46>
  for(i=start; i < end; i++)
 80041aa:	b2d9      	uxtb	r1, r3
 80041ac:	428d      	cmp	r5, r1
 80041ae:	d911      	bls.n	80041d4 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x56>
    if ( (slice->CV[i]) & CCU4_CC4_CV_FFL_Msk )
 80041b0:	461c      	mov	r4, r3
 80041b2:	f103 011c 	add.w	r1, r3, #28
 80041b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80041ba:	6849      	ldr	r1, [r1, #4]
 80041bc:	3301      	adds	r3, #1
 80041be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80041c2:	d0f2      	beq.n	80041aa <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x2c>
    {
      *val_ptr = slice->CV[i];
 80041c4:	341c      	adds	r4, #28
 80041c6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80041ca:	6843      	ldr	r3, [r0, #4]
 80041cc:	6013      	str	r3, [r2, #0]
      retval = XMC_CCU4_STATUS_OK;
 80041ce:	2000      	movs	r0, #0
      break;
    }
  }

  return retval;
}
 80041d0:	bc30      	pop	{r4, r5}
 80041d2:	4770      	bx	lr
  retval = XMC_CCU4_STATUS_ERROR;
 80041d4:	2001      	movs	r0, #1
  return retval;
 80041d6:	e7fb      	b.n	80041d0 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x52>
    end = XMC_CCU4_NUM_SLICES_PER_MODULE;
 80041d8:	2504      	movs	r5, #4
    start = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	e7da      	b.n	8004194 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x16>

080041de <XMC_CCU4_GetCapturedValueFromFifo>:
  uint32_t  extracted_slice;
  
  XMC_ASSERT("XMC_CCU4_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));

  /* First read the global fifo register */
  cap = (int32_t) module->ECRD;
 80041de:	6d00      	ldr	r0, [r0, #80]	; 0x50

  extracted_slice = (((uint32_t) cap) & ((uint32_t) CCU4_ECRD_SPTR_Msk)) >> CCU4_ECRD_SPTR_Pos;
 80041e0:	f3c0 5201 	ubfx	r2, r0, #20, #2
  {
    cap = -1;
  }

  return (cap);
}
 80041e4:	4291      	cmp	r1, r2
 80041e6:	bf18      	it	ne
 80041e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80041ec:	4770      	bx	lr

080041ee <XMC_CCU4_SLICE_EnableDithering>:
/* Enables PWM dithering feature */
void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
                                    const bool period_dither,
                                    const bool duty_dither,
                                    const uint8_t spread)
{
 80041ee:	b410      	push	{r4}
  uint32_t tc;

  XMC_ASSERT("XMC_CCU4_SLICE_EnableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  tc = slice->TC;
 80041f0:	6944      	ldr	r4, [r0, #20]
  tc &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
 80041f2:	f424 44c0 	bic.w	r4, r4, #24576	; 0x6000

  if ((bool) true == period_dither)
 80041f6:	b109      	cbz	r1, 80041fc <XMC_CCU4_SLICE_EnableDithering+0xe>
  {
    tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_PERIOD_MASK) << CCU4_CC4_TC_DITHE_Pos);
 80041f8:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  }
  if ((bool) true == duty_dither)
 80041fc:	b10a      	cbz	r2, 8004202 <XMC_CCU4_SLICE_EnableDithering+0x14>
  {
    tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_DUTYCYCLE_MASK) << CCU4_CC4_TC_DITHE_Pos);
 80041fe:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
  }

  slice->TC = tc;
 8004202:	6144      	str	r4, [r0, #20]
 *  XMC_CCU4_SLICE_EnableDithering().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetDitherCompareValue(XMC_CCU4_SLICE_t *const slice, const uint8_t comp_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->DITS = comp_val;
 8004204:	6203      	str	r3, [r0, #32]
  
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
}
 8004206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800420a:	4770      	bx	lr

0800420c <XMC_CCU4_SLICE_SetPrescaler>:
{
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 800420c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 800420e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 8004212:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  slice->FPC = fpc;
 8004216:	6283      	str	r3, [r0, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 8004218:	6241      	str	r1, [r0, #36]	; 0x24
}
 800421a:	4770      	bx	lr

0800421c <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 800421c:	b410      	push	{r4}

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 800421e:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
  
  switch(event)
 8004222:	2909      	cmp	r1, #9
 8004224:	d811      	bhi.n	800424a <XMC_CCU4_SLICE_SetInterruptNode+0x2e>
 8004226:	e8df f001 	tbb	[pc, r1]
 800422a:	1414      	.short	0x1414
 800422c:	10100505 	.word	0x10100505
 8004230:	0c081010 	.word	0x0c081010
      pos  = CCU4_CC4_SRS_POSR_Pos;
      break;

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8004234:	240c      	movs	r4, #12
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8004236:	2102      	movs	r1, #2
 8004238:	e00d      	b.n	8004256 <XMC_CCU4_SLICE_SetInterruptNode+0x3a>
      break;

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 800423a:	f44f 7440 	mov.w	r4, #768	; 0x300
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 800423e:	2108      	movs	r1, #8
      break;
 8004240:	e009      	b.n	8004256 <XMC_CCU4_SLICE_SetInterruptNode+0x3a>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8004242:	f44f 6440 	mov.w	r4, #3072	; 0xc00
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8004246:	210a      	movs	r1, #10
      break;
 8004248:	e005      	b.n	8004256 <XMC_CCU4_SLICE_SetInterruptNode+0x3a>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 800424a:	f44f 5440 	mov.w	r4, #12288	; 0x3000
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 800424e:	210c      	movs	r1, #12
      break;
 8004250:	e001      	b.n	8004256 <XMC_CCU4_SLICE_SetInterruptNode+0x3a>
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8004252:	2403      	movs	r4, #3
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8004254:	2100      	movs	r1, #0
  }
  
  srs &= ~mask; 
 8004256:	ea23 0304 	bic.w	r3, r3, r4
  srs |= (uint32_t)sr << pos;
 800425a:	408a      	lsls	r2, r1
 800425c:	431a      	orrs	r2, r3
  slice->SRS = srs;
 800425e:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
}
 8004262:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004266:	4770      	bx	lr

08004268 <XMC_CCU4_SLICE_SetPassiveLevel>:
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Passive level", ((level == XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW) ||\
                                                                      (level == XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH)));
  
  psl = slice->PSL;
 8004268:	6983      	ldr	r3, [r0, #24]
  psl &= ~((uint32_t) CCU4_CC4_PSL_PSL_Msk);
 800426a:	f023 0301 	bic.w	r3, r3, #1
  psl |= (uint32_t) level;
 800426e:	4319      	orrs	r1, r3
  
  /* Program CC4 slice output passive level */
  slice->PSL = psl;
 8004270:	6181      	str	r1, [r0, #24]
}
 8004272:	4770      	bx	lr

08004274 <randombytes_salsa20XMC_random_rekey>:
    assert(stream.nonce != (uint64_t) 0U);
}

static void
randombytes_salsa20XMC_random_rekey(const unsigned char * const mix)
{
 8004274:	b410      	push	{r4}
 8004276:	4c08      	ldr	r4, [pc, #32]	; (8004298 <randombytes_salsa20XMC_random_rekey+0x24>)
 8004278:	f104 030f 	add.w	r3, r4, #15
 800427c:	3801      	subs	r0, #1
 800427e:	342f      	adds	r4, #47	; 0x2f
    unsigned char *key = stream.key;
    size_t         i;

    for (i = (size_t) 0U; i < sizeof stream.key; i++) {
        key[i] ^= mix[i];
 8004280:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004284:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8004288:	404a      	eors	r2, r1
 800428a:	701a      	strb	r2, [r3, #0]
    for (i = (size_t) 0U; i < sizeof stream.key; i++) {
 800428c:	42a3      	cmp	r3, r4
 800428e:	d1f7      	bne.n	8004280 <randombytes_salsa20XMC_random_rekey+0xc>
    }
}
 8004290:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	20000030 	.word	0x20000030

0800429c <randombytes_salsa20XMC_implementation_name>:

static const char *
randombytes_salsa20XMC_implementation_name(void)
{
    return "salsa20XMC";
}
 800429c:	4800      	ldr	r0, [pc, #0]	; (80042a0 <randombytes_salsa20XMC_implementation_name+0x4>)
 800429e:	4770      	bx	lr
 80042a0:	0800df38 	.word	0x0800df38

080042a4 <randombytes_salsa20XMC_random_stir>:
{
 80042a4:	b530      	push	{r4, r5, lr}
 80042a6:	b0b7      	sub	sp, #220	; 0xdc
 80042a8:	4b2c      	ldr	r3, [pc, #176]	; (800435c <randombytes_salsa20XMC_random_stir+0xb8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	9335      	str	r3, [sp, #212]	; 0xd4
    const unsigned char hsigma[crypto_generichash_KEYBYTES] = {
 80042ae:	ac05      	add	r4, sp, #20
 80042b0:	4d2b      	ldr	r5, [pc, #172]	; (8004360 <randombytes_salsa20XMC_random_stir+0xbc>)
 80042b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80042ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    memset(stream.rnd32, 0, sizeof stream.rnd32);
 80042be:	4c29      	ldr	r4, [pc, #164]	; (8004364 <randombytes_salsa20XMC_random_stir+0xc0>)
 80042c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042c4:	2100      	movs	r1, #0
 80042c6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80042ca:	f006 fc8d 	bl	800abe8 <memset>
    stream.rnd32_outleft = (size_t) 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	6023      	str	r3, [r4, #0]
    if (stream.initialized == 0) {
 80042d2:	68a3      	ldr	r3, [r4, #8]
 80042d4:	b1db      	cbz	r3, 800430e <randombytes_salsa20XMC_random_stir+0x6a>
    if (crypto_generichash(stream.key, sizeof stream.key, k0, sizeof_k0,
 80042d6:	2120      	movs	r1, #32
 80042d8:	9103      	str	r1, [sp, #12]
 80042da:	ab05      	add	r3, sp, #20
 80042dc:	9302      	str	r3, [sp, #8]
 80042de:	2280      	movs	r2, #128	; 0x80
 80042e0:	2300      	movs	r3, #0
 80042e2:	e9cd 2300 	strd	r2, r3, [sp]
 80042e6:	aa15      	add	r2, sp, #84	; 0x54
 80042e8:	481f      	ldr	r0, [pc, #124]	; (8004368 <randombytes_salsa20XMC_random_stir+0xc4>)
 80042ea:	f000 fa60 	bl	80047ae <crypto_generichash>
 80042ee:	2800      	cmp	r0, #0
 80042f0:	d12f      	bne.n	8004352 <randombytes_salsa20XMC_random_stir+0xae>
    randombytes_salsa20XMC_random_rekey(m0);
 80042f2:	a80d      	add	r0, sp, #52	; 0x34
 80042f4:	f7ff ffbe 	bl	8004274 <randombytes_salsa20XMC_random_rekey>
    sodium_memzero(m0, sizeof m0);
 80042f8:	21a0      	movs	r1, #160	; 0xa0
 80042fa:	a80d      	add	r0, sp, #52	; 0x34
 80042fc:	f000 fdf5 	bl	8004eea <sodium_memzero>
}
 8004300:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8004302:	4b16      	ldr	r3, [pc, #88]	; (800435c <randombytes_salsa20XMC_random_stir+0xb8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d125      	bne.n	8004356 <randombytes_salsa20XMC_random_stir+0xb2>
 800430a:	b037      	add	sp, #220	; 0xdc
 800430c:	bd30      	pop	{r4, r5, pc}
    crypto_generichash(hash, sizeof hash, RANDOMBYTES_SALSA20XMC_PSRAM_START,\
 800430e:	ac0d      	add	r4, sp, #52	; 0x34
 8004310:	9303      	str	r3, [sp, #12]
 8004312:	9302      	str	r3, [sp, #8]
 8004314:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004318:	2300      	movs	r3, #0
 800431a:	e9cd 2300 	strd	r2, r3, [sp]
 800431e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004322:	2120      	movs	r1, #32
 8004324:	4620      	mov	r0, r4
 8004326:	f000 fa42 	bl	80047ae <crypto_generichash>
    memcpy(&stream.nonce, &hash, sizeof(stream.nonce) < sizeof(hash) ? \
 800432a:	4b10      	ldr	r3, [pc, #64]	; (800436c <randombytes_salsa20XMC_random_stir+0xc8>)
 800432c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004330:	e883 0003 	stmia.w	r3, {r0, r1}
    assert(stream.nonce != (uint64_t) 0U);
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	4313      	orrs	r3, r2
 800433a:	d003      	beq.n	8004344 <randombytes_salsa20XMC_random_stir+0xa0>
        stream.initialized = 1;
 800433c:	4b09      	ldr	r3, [pc, #36]	; (8004364 <randombytes_salsa20XMC_random_stir+0xc0>)
 800433e:	2201      	movs	r2, #1
 8004340:	609a      	str	r2, [r3, #8]
 8004342:	e7c8      	b.n	80042d6 <randombytes_salsa20XMC_random_stir+0x32>
    assert(stream.nonce != (uint64_t) 0U);
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <randombytes_salsa20XMC_random_stir+0xcc>)
 8004346:	f105 0210 	add.w	r2, r5, #16
 800434a:	2151      	movs	r1, #81	; 0x51
 800434c:	4809      	ldr	r0, [pc, #36]	; (8004374 <randombytes_salsa20XMC_random_stir+0xd0>)
 800434e:	f005 ffeb 	bl	800a328 <__assert_func>
        abort(); /* LCOV_EXCL_LINE */
 8004352:	f005 ffe1 	bl	800a318 <abort>
}
 8004356:	f7fc fbdd 	bl	8000b14 <__stack_chk_fail>
 800435a:	bf00      	nop
 800435c:	0800de5c 	.word	0x0800de5c
 8004360:	0800dea8 	.word	0x0800dea8
 8004364:	20000030 	.word	0x20000030
 8004368:	20000040 	.word	0x20000040
 800436c:	20000460 	.word	0x20000460
 8004370:	0800df44 	.word	0x0800df44
 8004374:	0800df64 	.word	0x0800df64

08004378 <randombytes_salsa20XMC_random_buf>:
{
 8004378:	b530      	push	{r4, r5, lr}
 800437a:	b085      	sub	sp, #20
 800437c:	4604      	mov	r4, r0
 800437e:	9103      	str	r1, [sp, #12]
    if (stream.initialized == 0) {
 8004380:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <randombytes_salsa20XMC_random_buf+0x78>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	b35b      	cbz	r3, 80043de <randombytes_salsa20XMC_random_buf+0x66>
    ret = crypto_stream_salsa20((unsigned char *) buf, (unsigned long long) size,
 8004386:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <randombytes_salsa20XMC_random_buf+0x78>)
 8004388:	f103 0210 	add.w	r2, r3, #16
 800438c:	9201      	str	r2, [sp, #4]
 800438e:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	9a03      	ldr	r2, [sp, #12]
 8004396:	2300      	movs	r3, #0
 8004398:	4620      	mov	r0, r4
 800439a:	f000 fc1d 	bl	8004bd8 <crypto_stream_salsa20>
    assert(ret == 0);
 800439e:	bb08      	cbnz	r0, 80043e4 <randombytes_salsa20XMC_random_buf+0x6c>
 80043a0:	4914      	ldr	r1, [pc, #80]	; (80043f4 <randombytes_salsa20XMC_random_buf+0x7c>)
 80043a2:	aa03      	add	r2, sp, #12
 80043a4:	ac04      	add	r4, sp, #16
        stream.key[i] ^= ((const unsigned char *) (const void *) &size)[i];
 80043a6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80043aa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80043ae:	4043      	eors	r3, r0
 80043b0:	700b      	strb	r3, [r1, #0]
    for (i = 0U; i < sizeof size; i++) {
 80043b2:	42a2      	cmp	r2, r4
 80043b4:	d1f7      	bne.n	80043a6 <randombytes_salsa20XMC_random_buf+0x2e>
    stream.nonce++;
 80043b6:	480e      	ldr	r0, [pc, #56]	; (80043f0 <randombytes_salsa20XMC_random_buf+0x78>)
 80043b8:	f500 6386 	add.w	r3, r0, #1072	; 0x430
 80043bc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80043c0:	1c61      	adds	r1, r4, #1
 80043c2:	f145 0200 	adc.w	r2, r5, #0
 80043c6:	e9c3 1200 	strd	r1, r2, [r3]
    crypto_stream_salsa20_xor(stream.key, stream.key, sizeof stream.key,
 80043ca:	3010      	adds	r0, #16
 80043cc:	9001      	str	r0, [sp, #4]
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	2220      	movs	r2, #32
 80043d2:	2300      	movs	r3, #0
 80043d4:	4601      	mov	r1, r0
 80043d6:	f000 fc13 	bl	8004c00 <crypto_stream_salsa20_xor>
}
 80043da:	b005      	add	sp, #20
 80043dc:	bd30      	pop	{r4, r5, pc}
        randombytes_salsa20XMC_random_stir();
 80043de:	f7ff ff61 	bl	80042a4 <randombytes_salsa20XMC_random_stir>
 80043e2:	e7d0      	b.n	8004386 <randombytes_salsa20XMC_random_buf+0xe>
    assert(ret == 0);
 80043e4:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <randombytes_salsa20XMC_random_buf+0x80>)
 80043e6:	4a05      	ldr	r2, [pc, #20]	; (80043fc <randombytes_salsa20XMC_random_buf+0x84>)
 80043e8:	219d      	movs	r1, #157	; 0x9d
 80043ea:	4805      	ldr	r0, [pc, #20]	; (8004400 <randombytes_salsa20XMC_random_buf+0x88>)
 80043ec:	f005 ff9c 	bl	800a328 <__assert_func>
 80043f0:	20000030 	.word	0x20000030
 80043f4:	2000003f 	.word	0x2000003f
 80043f8:	0800df84 	.word	0x0800df84
 80043fc:	0800deec 	.word	0x0800deec
 8004400:	0800df64 	.word	0x0800df64

08004404 <randombytes_salsa20XMC_random>:
{
 8004404:	b510      	push	{r4, lr}
 8004406:	b082      	sub	sp, #8
    if (stream.rnd32_outleft <= (size_t) 0U) {
 8004408:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <randombytes_salsa20XMC_random+0x74>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	bb0b      	cbnz	r3, 8004452 <randombytes_salsa20XMC_random+0x4e>
    if (stream.initialized == 0) {
 800440e:	4b1a      	ldr	r3, [pc, #104]	; (8004478 <randombytes_salsa20XMC_random+0x74>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	b343      	cbz	r3, 8004466 <randombytes_salsa20XMC_random+0x62>
        ret = crypto_stream_salsa20((unsigned char *) stream.rnd32,
 8004414:	4818      	ldr	r0, [pc, #96]	; (8004478 <randombytes_salsa20XMC_random+0x74>)
 8004416:	f100 0310 	add.w	r3, r0, #16
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	f500 6386 	add.w	r3, r0, #1072	; 0x430
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004426:	2300      	movs	r3, #0
 8004428:	3030      	adds	r0, #48	; 0x30
 800442a:	f000 fbd5 	bl	8004bd8 <crypto_stream_salsa20>
        assert(ret == 0);
 800442e:	b9e8      	cbnz	r0, 800446c <randombytes_salsa20XMC_random+0x68>
        stream.rnd32_outleft = (sizeof stream.rnd32) - (sizeof stream.key);
 8004430:	4c11      	ldr	r4, [pc, #68]	; (8004478 <randombytes_salsa20XMC_random+0x74>)
 8004432:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004436:	6023      	str	r3, [r4, #0]
        randombytes_salsa20XMC_random_rekey(&stream.rnd32[stream.rnd32_outleft]);
 8004438:	f504 6082 	add.w	r0, r4, #1040	; 0x410
 800443c:	f7ff ff1a 	bl	8004274 <randombytes_salsa20XMC_random_rekey>
        stream.nonce++;
 8004440:	f504 6486 	add.w	r4, r4, #1072	; 0x430
 8004444:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004448:	1c50      	adds	r0, r2, #1
 800444a:	f143 0100 	adc.w	r1, r3, #0
 800444e:	e9c4 0100 	strd	r0, r1, [r4]
    stream.rnd32_outleft -= sizeof val;
 8004452:	4a09      	ldr	r2, [pc, #36]	; (8004478 <randombytes_salsa20XMC_random+0x74>)
 8004454:	6813      	ldr	r3, [r2, #0]
 8004456:	1f19      	subs	r1, r3, #4
 8004458:	6011      	str	r1, [r2, #0]
    memcpy(&val, &stream.rnd32[stream.rnd32_outleft], sizeof val);
 800445a:	332c      	adds	r3, #44	; 0x2c
 800445c:	58d0      	ldr	r0, [r2, r3]
    memset(&stream.rnd32[stream.rnd32_outleft], 0, sizeof val);
 800445e:	2100      	movs	r1, #0
 8004460:	50d1      	str	r1, [r2, r3]
}
 8004462:	b002      	add	sp, #8
 8004464:	bd10      	pop	{r4, pc}
        randombytes_salsa20XMC_random_stir();
 8004466:	f7ff ff1d 	bl	80042a4 <randombytes_salsa20XMC_random_stir>
 800446a:	e7d3      	b.n	8004414 <randombytes_salsa20XMC_random+0x10>
        assert(ret == 0);
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <randombytes_salsa20XMC_random+0x78>)
 800446e:	4a04      	ldr	r2, [pc, #16]	; (8004480 <randombytes_salsa20XMC_random+0x7c>)
 8004470:	21b6      	movs	r1, #182	; 0xb6
 8004472:	4804      	ldr	r0, [pc, #16]	; (8004484 <randombytes_salsa20XMC_random+0x80>)
 8004474:	f005 ff58 	bl	800a328 <__assert_func>
 8004478:	20000030 	.word	0x20000030
 800447c:	0800df84 	.word	0x0800df84
 8004480:	0800df10 	.word	0x0800df10
 8004484:	0800df64 	.word	0x0800df64

08004488 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8004488:	b082      	sub	sp, #8
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 800448a:	2300      	movs	r3, #0
 800448c:	9301      	str	r3, [sp, #4]
 800448e:	9b01      	ldr	r3, [sp, #4]
 8004490:	4298      	cmp	r0, r3
 8004492:	d906      	bls.n	80044a2 <delay+0x1a>
  {
    __NOP();
 8004494:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8004496:	9b01      	ldr	r3, [sp, #4]
 8004498:	3301      	adds	r3, #1
 800449a:	9301      	str	r3, [sp, #4]
 800449c:	9b01      	ldr	r3, [sp, #4]
 800449e:	4283      	cmp	r3, r0
 80044a0:	d3f8      	bcc.n	8004494 <delay+0xc>
  }
}
 80044a2:	b002      	add	sp, #8
 80044a4:	4770      	bx	lr
	...

080044a8 <SystemCoreSetup>:
  __ASM volatile ("cpsid i" : : : "memory");
 80044a8:	b672      	cpsid	i
{
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80044aa:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <SystemCoreSetup+0x38>)
 80044ac:	4a0d      	ldr	r2, [pc, #52]	; (80044e4 <SystemCoreSetup+0x3c>)
 80044ae:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80044b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 80044b4:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80044b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044ba:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80044be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 80044c2:	695a      	ldr	r2, [r3, #20]
 80044c4:	f022 0208 	bic.w	r2, r2, #8
 80044c8:	615a      	str	r2, [r3, #20]

  temp = FLASH0->FCON;
 80044ca:	4907      	ldr	r1, [pc, #28]	; (80044e8 <SystemCoreSetup+0x40>)
 80044cc:	f241 0214 	movw	r2, #4116	; 0x1014
 80044d0:	588b      	ldr	r3, [r1, r2]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80044d2:	f023 030f 	bic.w	r3, r3, #15
  temp |= PMU_FLASH_WS;
 80044d6:	f043 0303 	orr.w	r3, r3, #3
  FLASH0->FCON = temp;
 80044da:	508b      	str	r3, [r1, r2]
}
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	e000ed00 	.word	0xe000ed00
 80044e4:	08000000 	.word	0x08000000
 80044e8:	58001000 	.word	0x58001000

080044ec <OSCHP_GetFrequency>:
}

__WEAK uint32_t OSCHP_GetFrequency(void)
{
  return OSCHP_FREQUENCY;
}
 80044ec:	4800      	ldr	r0, [pc, #0]	; (80044f0 <OSCHP_GetFrequency+0x4>)
 80044ee:	4770      	bx	lr
 80044f0:	00b71b00 	.word	0x00b71b00

080044f4 <SystemCoreClockUpdate>:
{
 80044f4:	b508      	push	{r3, lr}
  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80044f6:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <SystemCoreClockUpdate+0x7c>)
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80044fe:	d027      	beq.n	8004550 <SystemCoreClockUpdate+0x5c>
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8004500:	4b1c      	ldr	r3, [pc, #112]	; (8004574 <SystemCoreClockUpdate+0x80>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f013 0f01 	tst.w	r3, #1
 8004508:	d00d      	beq.n	8004526 <SystemCoreClockUpdate+0x32>
      temp = OFI_FREQUENCY;
 800450a:	481b      	ldr	r0, [pc, #108]	; (8004578 <SystemCoreClockUpdate+0x84>)
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 800450c:	4b19      	ldr	r3, [pc, #100]	; (8004574 <SystemCoreClockUpdate+0x80>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f013 0f04 	tst.w	r3, #4
 8004514:	d10a      	bne.n	800452c <SystemCoreClockUpdate+0x38>
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8004516:	4b17      	ldr	r3, [pc, #92]	; (8004574 <SystemCoreClockUpdate+0x80>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800451e:	3301      	adds	r3, #1
      temp = (temp / kdiv);
 8004520:	fbb0 f0f3 	udiv	r0, r0, r3
 8004524:	e015      	b.n	8004552 <SystemCoreClockUpdate+0x5e>
      temp = OSCHP_GetFrequency();
 8004526:	f7ff ffe1 	bl	80044ec <OSCHP_GetFrequency>
 800452a:	e7ef      	b.n	800450c <SystemCoreClockUpdate+0x18>
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800452c:	4b11      	ldr	r3, [pc, #68]	; (8004574 <SystemCoreClockUpdate+0x80>)
 800452e:	6899      	ldr	r1, [r3, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8004530:	689a      	ldr	r2, [r3, #8]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8004532:	689b      	ldr	r3, [r3, #8]
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8004534:	f3c1 6103 	ubfx	r1, r1, #24, #4
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8004538:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800453c:	3301      	adds	r3, #1
      temp = (temp / (pdiv * kdiv)) * ndiv;
 800453e:	fb01 3303 	mla	r3, r1, r3, r3
 8004542:	fbb0 f0f3 	udiv	r0, r0, r3
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8004546:	f3c2 2306 	ubfx	r3, r2, #8, #7
      temp = (temp / (pdiv * kdiv)) * ndiv;
 800454a:	fb03 0000 	mla	r0, r3, r0, r0
 800454e:	e000      	b.n	8004552 <SystemCoreClockUpdate+0x5e>
    temp = OFI_FREQUENCY;
 8004550:	4809      	ldr	r0, [pc, #36]	; (8004578 <SystemCoreClockUpdate+0x84>)
  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8004552:	4a07      	ldr	r2, [pc, #28]	; (8004570 <SystemCoreClockUpdate+0x7c>)
 8004554:	68d3      	ldr	r3, [r2, #12]
 8004556:	b2db      	uxtb	r3, r3
 8004558:	3301      	adds	r3, #1
 800455a:	fbb0 f0f3 	udiv	r0, r0, r3
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 800455e:	6913      	ldr	r3, [r2, #16]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	3301      	adds	r3, #1
 8004566:	fbb0 f0f3 	udiv	r0, r0, r3
  SystemCoreClock = temp;
 800456a:	4b04      	ldr	r3, [pc, #16]	; (800457c <SystemCoreClockUpdate+0x88>)
 800456c:	6018      	str	r0, [r3, #0]
}
 800456e:	bd08      	pop	{r3, pc}
 8004570:	50004600 	.word	0x50004600
 8004574:	50004710 	.word	0x50004710
 8004578:	016e3600 	.word	0x016e3600
 800457c:	2000ffc0 	.word	0x2000ffc0
{
 8004580:	b510      	push	{r4, lr}
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8004582:	4b5c      	ldr	r3, [pc, #368]	; (80046f4 <SystemCoreClockUpdate+0x200>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f013 0f01 	tst.w	r3, #1
 800458a:	d108      	bne.n	800459e <SystemCoreClockUpdate+0xaa>
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 800458c:	4a59      	ldr	r2, [pc, #356]	; (80046f4 <SystemCoreClockUpdate+0x200>)
 800458e:	6853      	ldr	r3, [r2, #4]
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	6053      	str	r3, [r2, #4]
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8004596:	6813      	ldr	r3, [r2, #0]
 8004598:	f013 0f01 	tst.w	r3, #1
 800459c:	d0fb      	beq.n	8004596 <SystemCoreClockUpdate+0xa2>
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800459e:	4b56      	ldr	r3, [pc, #344]	; (80046f8 <SystemCoreClockUpdate+0x204>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80045a6:	d178      	bne.n	800469a <SystemCoreClockUpdate+0x1a6>
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80045a8:	4c54      	ldr	r4, [pc, #336]	; (80046fc <SystemCoreClockUpdate+0x208>)
 80045aa:	6863      	ldr	r3, [r4, #4]
 80045ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045b0:	6063      	str	r3, [r4, #4]
  delay(DELAY_CNT_50US_50MHZ);
 80045b2:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80045b6:	f7ff ff67 	bl	8004488 <delay>
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80045ba:	6863      	ldr	r3, [r4, #4]
 80045bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c0:	f023 0302 	bic.w	r3, r3, #2
 80045c4:	6063      	str	r3, [r4, #4]
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80045c6:	4b4e      	ldr	r3, [pc, #312]	; (8004700 <SystemCoreClockUpdate+0x20c>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f013 0f30 	tst.w	r3, #48	; 0x30
 80045ce:	d16e      	bne.n	80046ae <SystemCoreClockUpdate+0x1ba>
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 80045d0:	4b4a      	ldr	r3, [pc, #296]	; (80046fc <SystemCoreClockUpdate+0x208>)
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	f042 0201 	orr.w	r2, r2, #1
 80045d8:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	f042 0210 	orr.w	r2, r2, #16
 80045e0:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80045e2:	4a48      	ldr	r2, [pc, #288]	; (8004704 <SystemCoreClockUpdate+0x210>)
 80045e4:	609a      	str	r2, [r3, #8]
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ec:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	f022 0210 	bic.w	r2, r2, #16
 80045f4:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80045fc:	605a      	str	r2, [r3, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80045fe:	461a      	mov	r2, r3
 8004600:	6813      	ldr	r3, [r2, #0]
 8004602:	f013 0f04 	tst.w	r3, #4
 8004606:	d0fb      	beq.n	8004600 <SystemCoreClockUpdate+0x10c>
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8004608:	4a3c      	ldr	r2, [pc, #240]	; (80046fc <SystemCoreClockUpdate+0x208>)
 800460a:	6853      	ldr	r3, [r2, #4]
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8004612:	6813      	ldr	r3, [r2, #0]
 8004614:	f013 0f01 	tst.w	r3, #1
 8004618:	d1fb      	bne.n	8004612 <SystemCoreClockUpdate+0x11e>
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 800461a:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <SystemCoreClockUpdate+0x214>)
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004622:	60da      	str	r2, [r3, #12]
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8004624:	2200      	movs	r2, #0
 8004626:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8004628:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 800462a:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 800462c:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 800462e:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8004630:	2203      	movs	r2, #3
 8004632:	619a      	str	r2, [r3, #24]
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8004634:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800463e:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8004640:	4a32      	ldr	r2, [pc, #200]	; (800470c <SystemCoreClockUpdate+0x218>)
 8004642:	609a      	str	r2, [r3, #8]
  delay(DELAY_CNT_50US_60MHZ);
 8004644:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004648:	f7ff ff1e 	bl	8004488 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800464c:	4a2b      	ldr	r2, [pc, #172]	; (80046fc <SystemCoreClockUpdate+0x208>)
 800464e:	6813      	ldr	r3, [r2, #0]
 8004650:	f013 0f04 	tst.w	r3, #4
 8004654:	d0fb      	beq.n	800464e <SystemCoreClockUpdate+0x15a>
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8004656:	4b29      	ldr	r3, [pc, #164]	; (80046fc <SystemCoreClockUpdate+0x208>)
 8004658:	4a2d      	ldr	r2, [pc, #180]	; (8004710 <SystemCoreClockUpdate+0x21c>)
 800465a:	609a      	str	r2, [r3, #8]
  delay(DELAY_CNT_50US_90MHZ);
 800465c:	f241 1094 	movw	r0, #4500	; 0x1194
 8004660:	f7ff ff12 	bl	8004488 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8004664:	4a25      	ldr	r2, [pc, #148]	; (80046fc <SystemCoreClockUpdate+0x208>)
 8004666:	6813      	ldr	r3, [r2, #0]
 8004668:	f013 0f04 	tst.w	r3, #4
 800466c:	d0fb      	beq.n	8004666 <SystemCoreClockUpdate+0x172>
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800466e:	4b23      	ldr	r3, [pc, #140]	; (80046fc <SystemCoreClockUpdate+0x208>)
 8004670:	4a28      	ldr	r2, [pc, #160]	; (8004714 <SystemCoreClockUpdate+0x220>)
 8004672:	609a      	str	r2, [r3, #8]
  delay(DELAY_CNT_50US_120MHZ);
 8004674:	f241 7070 	movw	r0, #6000	; 0x1770
 8004678:	f7ff ff06 	bl	8004488 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800467c:	4a1f      	ldr	r2, [pc, #124]	; (80046fc <SystemCoreClockUpdate+0x208>)
 800467e:	6813      	ldr	r3, [r2, #0]
 8004680:	f013 0f04 	tst.w	r3, #4
 8004684:	d0fb      	beq.n	800467e <SystemCoreClockUpdate+0x18a>
  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8004686:	4b24      	ldr	r3, [pc, #144]	; (8004718 <SystemCoreClockUpdate+0x224>)
 8004688:	2205      	movs	r2, #5
 800468a:	60da      	str	r2, [r3, #12]
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 800468c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8004690:	2200      	movs	r2, #0
 8004692:	605a      	str	r2, [r3, #4]
  SystemCoreClockUpdate();
 8004694:	f7ff ff2e 	bl	80044f4 <SystemCoreClockUpdate>
}
 8004698:	bd10      	pop	{r4, pc}
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 800469a:	4a17      	ldr	r2, [pc, #92]	; (80046f8 <SystemCoreClockUpdate+0x204>)
 800469c:	6893      	ldr	r3, [r2, #8]
 800469e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046a2:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80046a4:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80046a8:	f7ff feee 	bl	8004488 <delay>
 80046ac:	e77c      	b.n	80045a8 <SystemCoreClockUpdate+0xb4>
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80046ae:	3c10      	subs	r4, #16
 80046b0:	6863      	ldr	r3, [r4, #4]
 80046b2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80046b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80046ba:	6063      	str	r3, [r4, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80046bc:	f7ff ff16 	bl	80044ec <OSCHP_GetFrequency>
 80046c0:	6862      	ldr	r2, [r4, #4]
 80046c2:	4b16      	ldr	r3, [pc, #88]	; (800471c <SystemCoreClockUpdate+0x228>)
 80046c4:	fba3 1300 	umull	r1, r3, r3, r0
 80046c8:	0d1b      	lsrs	r3, r3, #20
 80046ca:	3b01      	subs	r3, #1
 80046cc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80046d0:	6063      	str	r3, [r4, #4]
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 80046d2:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <SystemCoreClockUpdate+0x208>)
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	f022 0201 	bic.w	r2, r2, #1
 80046da:	60da      	str	r2, [r3, #12]
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80046e2:	605a      	str	r2, [r3, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 80046e4:	461a      	mov	r2, r3
 80046e6:	6813      	ldr	r3, [r2, #0]
 80046e8:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80046ec:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80046f0:	d1f9      	bne.n	80046e6 <SystemCoreClockUpdate+0x1f2>
 80046f2:	e76d      	b.n	80045d0 <SystemCoreClockUpdate+0xdc>
 80046f4:	50004200 	.word	0x50004200
 80046f8:	50004400 	.word	0x50004400
 80046fc:	50004710 	.word	0x50004710
 8004700:	50004700 	.word	0x50004700
 8004704:	01134f00 	.word	0x01134f00
 8004708:	50004600 	.word	0x50004600
 800470c:	01074f00 	.word	0x01074f00
 8004710:	01044f00 	.word	0x01044f00
 8004714:	01034f00 	.word	0x01034f00
 8004718:	50004160 	.word	0x50004160
 800471c:	6b5fca6b 	.word	0x6b5fca6b

08004720 <SystemInit>:
{
 8004720:	b510      	push	{r4, lr}
  memcpy(g_chipid, CHIPID_LOC, 16);
 8004722:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004726:	4c04      	ldr	r4, [pc, #16]	; (8004738 <SystemInit+0x18>)
 8004728:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800472a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SystemCoreSetup();
 800472e:	f7ff febb 	bl	80044a8 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8004732:	f7fb fe1b 	bl	800036c <SystemCoreClockSetup>
}
 8004736:	bd10      	pop	{r4, pc}
 8004738:	2000ffc4 	.word	0x2000ffc4

0800473c <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 800473c:	b508      	push	{r3, lr}
 800473e:	4603      	mov	r3, r0
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8004740:	4a0c      	ldr	r2, [pc, #48]	; (8004774 <_sbrk+0x38>)
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	b15a      	cbz	r2, 800475e <_sbrk+0x22>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
  }

  base = heap_ptr;
 8004746:	4a0b      	ldr	r2, [pc, #44]	; (8004774 <_sbrk+0x38>)
 8004748:	6810      	ldr	r0, [r2, #0]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 800474a:	3303      	adds	r3, #3
 800474c:	f023 0303 	bic.w	r3, r3, #3
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8004750:	4403      	add	r3, r0
 8004752:	4a09      	ldr	r2, [pc, #36]	; (8004778 <_sbrk+0x3c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d206      	bcs.n	8004766 <_sbrk+0x2a>
  {
    heap_ptr += nbytes;
 8004758:	4a06      	ldr	r2, [pc, #24]	; (8004774 <_sbrk+0x38>)
 800475a:	6013      	str	r3, [r2, #0]
  {
    /* Heap overflow */
    errno = ENOMEM;
    return ((caddr_t)-1);
  }
}
 800475c:	bd08      	pop	{r3, pc}
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 800475e:	4a05      	ldr	r2, [pc, #20]	; (8004774 <_sbrk+0x38>)
 8004760:	4906      	ldr	r1, [pc, #24]	; (800477c <_sbrk+0x40>)
 8004762:	6011      	str	r1, [r2, #0]
 8004764:	e7ef      	b.n	8004746 <_sbrk+0xa>
    errno = ENOMEM;
 8004766:	f005 fe3f 	bl	800a3e8 <__errno>
 800476a:	230c      	movs	r3, #12
 800476c:	6003      	str	r3, [r0, #0]
    return ((caddr_t)-1);
 800476e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004772:	e7f3      	b.n	800475c <_sbrk+0x20>
 8004774:	20000ef0 	.word	0x20000ef0
 8004778:	2000ffc0 	.word	0x2000ffc0
 800477c:	20001640 	.word	0x20001640

08004780 <_init>:

/* Init */
void _init(void)
{}
 8004780:	4770      	bx	lr

08004782 <crypto_generichash_bytes_min>:
 8004782:	2010      	movs	r0, #16
 8004784:	4770      	bx	lr

08004786 <crypto_generichash_bytes_max>:
 8004786:	2040      	movs	r0, #64	; 0x40
 8004788:	4770      	bx	lr

0800478a <crypto_generichash_bytes>:
 800478a:	2020      	movs	r0, #32
 800478c:	4770      	bx	lr

0800478e <crypto_generichash_keybytes_min>:
 800478e:	2010      	movs	r0, #16
 8004790:	4770      	bx	lr

08004792 <crypto_generichash_keybytes_max>:
 8004792:	2040      	movs	r0, #64	; 0x40
 8004794:	4770      	bx	lr

08004796 <crypto_generichash_keybytes>:
 8004796:	2020      	movs	r0, #32
 8004798:	4770      	bx	lr
	...

0800479c <crypto_generichash_primitive>:
 800479c:	4801      	ldr	r0, [pc, #4]	; (80047a4 <crypto_generichash_primitive+0x8>)
 800479e:	4478      	add	r0, pc
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	000097eb 	.word	0x000097eb

080047a8 <crypto_generichash_statebytes>:
 80047a8:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80047ac:	4770      	bx	lr

080047ae <crypto_generichash>:
 80047ae:	b430      	push	{r4, r5}
 80047b0:	bc30      	pop	{r4, r5}
 80047b2:	f000 b809 	b.w	80047c8 <crypto_generichash_blake2b>

080047b6 <crypto_generichash_init>:
 80047b6:	f000 b835 	b.w	8004824 <crypto_generichash_blake2b_init>

080047ba <crypto_generichash_update>:
 80047ba:	f000 b870 	b.w	800489e <crypto_generichash_blake2b_update>

080047be <crypto_generichash_final>:
 80047be:	f000 b871 	b.w	80048a4 <crypto_generichash_blake2b_final>

080047c2 <crypto_generichash_keygen>:
 80047c2:	2120      	movs	r1, #32
 80047c4:	f000 baa6 	b.w	8004d14 <randombytes_buf>

080047c8 <crypto_generichash_blake2b>:
 80047c8:	460b      	mov	r3, r1
 80047ca:	b4f0      	push	{r4, r5, r6, r7}
 80047cc:	1e5d      	subs	r5, r3, #1
 80047ce:	2d3f      	cmp	r5, #63	; 0x3f
 80047d0:	4611      	mov	r1, r2
 80047d2:	9c07      	ldr	r4, [sp, #28]
 80047d4:	9a06      	ldr	r2, [sp, #24]
 80047d6:	d807      	bhi.n	80047e8 <crypto_generichash_blake2b+0x20>
 80047d8:	2c40      	cmp	r4, #64	; 0x40
 80047da:	d805      	bhi.n	80047e8 <crypto_generichash_blake2b+0x20>
 80047dc:	b2e4      	uxtb	r4, r4
 80047de:	9406      	str	r4, [sp, #24]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	bcf0      	pop	{r4, r5, r6, r7}
 80047e4:	f001 bb36 	b.w	8005e54 <crypto_generichash_blake2b__blake2b>
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047ec:	bcf0      	pop	{r4, r5, r6, r7}
 80047ee:	4770      	bx	lr

080047f0 <crypto_generichash_blake2b_salt_personal>:
 80047f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f2:	460b      	mov	r3, r1
 80047f4:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 80047f8:	4611      	mov	r1, r2
 80047fa:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 80047fe:	aa07      	add	r2, sp, #28
 8004800:	e892 4034 	ldmia.w	r2, {r2, r4, r5, lr}
 8004804:	d80b      	bhi.n	800481e <crypto_generichash_blake2b_salt_personal+0x2e>
 8004806:	2c40      	cmp	r4, #64	; 0x40
 8004808:	d809      	bhi.n	800481e <crypto_generichash_blake2b_salt_personal+0x2e>
 800480a:	b2e4      	uxtb	r4, r4
 800480c:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8004810:	9508      	str	r5, [sp, #32]
 8004812:	9407      	str	r4, [sp, #28]
 8004814:	b2db      	uxtb	r3, r3
 8004816:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800481a:	f001 bb56 	b.w	8005eca <crypto_generichash_blake2b__blake2b_salt_personal>
 800481e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004822:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004824 <crypto_generichash_blake2b_init>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	460c      	mov	r4, r1
 8004828:	1e59      	subs	r1, r3, #1
 800482a:	293f      	cmp	r1, #63	; 0x3f
 800482c:	4605      	mov	r5, r0
 800482e:	d811      	bhi.n	8004854 <crypto_generichash_blake2b_init+0x30>
 8004830:	2a40      	cmp	r2, #64	; 0x40
 8004832:	d80f      	bhi.n	8004854 <crypto_generichash_blake2b_init+0x30>
 8004834:	b2d9      	uxtb	r1, r3
 8004836:	b104      	cbz	r4, 800483a <crypto_generichash_blake2b_init+0x16>
 8004838:	b93a      	cbnz	r2, 800484a <crypto_generichash_blake2b_init+0x26>
 800483a:	4628      	mov	r0, r5
 800483c:	f001 f8b8 	bl	80059b0 <crypto_generichash_blake2b__init>
 8004840:	3000      	adds	r0, #0
 8004842:	bf18      	it	ne
 8004844:	2001      	movne	r0, #1
 8004846:	4240      	negs	r0, r0
 8004848:	bd38      	pop	{r3, r4, r5, pc}
 800484a:	b2d3      	uxtb	r3, r2
 800484c:	4622      	mov	r2, r4
 800484e:	f001 f99f 	bl	8005b90 <crypto_generichash_blake2b__init_key>
 8004852:	e7f5      	b.n	8004840 <crypto_generichash_blake2b_init+0x1c>
 8004854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004858:	bd38      	pop	{r3, r4, r5, pc}

0800485a <crypto_generichash_blake2b_init_salt_personal>:
 800485a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800485c:	460c      	mov	r4, r1
 800485e:	1e59      	subs	r1, r3, #1
 8004860:	293f      	cmp	r1, #63	; 0x3f
 8004862:	4607      	mov	r7, r0
 8004864:	9d08      	ldr	r5, [sp, #32]
 8004866:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004868:	d816      	bhi.n	8004898 <crypto_generichash_blake2b_init_salt_personal+0x3e>
 800486a:	2a40      	cmp	r2, #64	; 0x40
 800486c:	d814      	bhi.n	8004898 <crypto_generichash_blake2b_init_salt_personal+0x3e>
 800486e:	b2d9      	uxtb	r1, r3
 8004870:	b104      	cbz	r4, 8004874 <crypto_generichash_blake2b_init_salt_personal+0x1a>
 8004872:	b952      	cbnz	r2, 800488a <crypto_generichash_blake2b_init_salt_personal+0x30>
 8004874:	4633      	mov	r3, r6
 8004876:	462a      	mov	r2, r5
 8004878:	4638      	mov	r0, r7
 800487a:	f001 f8cf 	bl	8005a1c <crypto_generichash_blake2b__init_salt_personal>
 800487e:	3000      	adds	r0, #0
 8004880:	bf18      	it	ne
 8004882:	2001      	movne	r0, #1
 8004884:	4240      	negs	r0, r0
 8004886:	b003      	add	sp, #12
 8004888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800488a:	b2d3      	uxtb	r3, r2
 800488c:	e88d 0060 	stmia.w	sp, {r5, r6}
 8004890:	4622      	mov	r2, r4
 8004892:	f001 f9d4 	bl	8005c3e <crypto_generichash_blake2b__init_key_salt_personal>
 8004896:	e7f2      	b.n	800487e <crypto_generichash_blake2b_init_salt_personal+0x24>
 8004898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800489c:	e7f3      	b.n	8004886 <crypto_generichash_blake2b_init_salt_personal+0x2c>

0800489e <crypto_generichash_blake2b_update>:
 800489e:	f001 b911 	b.w	8005ac4 <crypto_generichash_blake2b__update>
	...

080048a4 <crypto_generichash_blake2b_final>:
 80048a4:	2aff      	cmp	r2, #255	; 0xff
 80048a6:	b508      	push	{r3, lr}
 80048a8:	d908      	bls.n	80048bc <crypto_generichash_blake2b_final+0x18>
 80048aa:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <crypto_generichash_blake2b_final+0x24>)
 80048ac:	4a07      	ldr	r2, [pc, #28]	; (80048cc <crypto_generichash_blake2b_final+0x28>)
 80048ae:	4808      	ldr	r0, [pc, #32]	; (80048d0 <crypto_generichash_blake2b_final+0x2c>)
 80048b0:	447b      	add	r3, pc
 80048b2:	447a      	add	r2, pc
 80048b4:	2166      	movs	r1, #102	; 0x66
 80048b6:	4478      	add	r0, pc
 80048b8:	f005 fd36 	bl	800a328 <__assert_func>
 80048bc:	b2d2      	uxtb	r2, r2
 80048be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80048c2:	f001 ba35 	b.w	8005d30 <crypto_generichash_blake2b__final>
 80048c6:	bf00      	nop
 80048c8:	00009702 	.word	0x00009702
 80048cc:	000096df 	.word	0x000096df
 80048d0:	00009710 	.word	0x00009710

080048d4 <_crypto_generichash_blake2b_pick_best_implementation>:
 80048d4:	f001 bb3c 	b.w	8005f50 <crypto_generichash_blake2b__pick_best_implementation>

080048d8 <crypto_secretbox_detached>:
 80048d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048dc:	b0a3      	sub	sp, #140	; 0x8c
 80048de:	af06      	add	r7, sp, #24
 80048e0:	4604      	mov	r4, r0
 80048e2:	f8d7 80a0 	ldr.w	r8, [r7, #160]	; 0xa0
 80048e6:	6039      	str	r1, [r7, #0]
 80048e8:	4615      	mov	r5, r2
 80048ea:	b0c4      	sub	sp, #272	; 0x110
 80048ec:	2300      	movs	r3, #0
 80048ee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80048f2:	4641      	mov	r1, r8
 80048f4:	f107 0010 	add.w	r0, r7, #16
 80048f8:	f10d 0627 	add.w	r6, sp, #39	; 0x27
 80048fc:	f000 fdfa 	bl	80054f4 <crypto_core_hsalsa20>
 8004900:	42ac      	cmp	r4, r5
 8004902:	f026 060f 	bic.w	r6, r6, #15
 8004906:	d907      	bls.n	8004918 <crypto_secretbox_detached+0x40>
 8004908:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800490c:	2300      	movs	r3, #0
 800490e:	1b62      	subs	r2, r4, r5
 8004910:	428b      	cmp	r3, r1
 8004912:	bf08      	it	eq
 8004914:	4282      	cmpeq	r2, r0
 8004916:	d309      	bcc.n	800492c <crypto_secretbox_detached+0x54>
 8004918:	42ac      	cmp	r4, r5
 800491a:	d20e      	bcs.n	800493a <crypto_secretbox_detached+0x62>
 800491c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004920:	2300      	movs	r3, #0
 8004922:	1b2a      	subs	r2, r5, r4
 8004924:	428b      	cmp	r3, r1
 8004926:	bf08      	it	eq
 8004928:	4282      	cmpeq	r2, r0
 800492a:	d206      	bcs.n	800493a <crypto_secretbox_detached+0x62>
 800492c:	4629      	mov	r1, r5
 800492e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004932:	4620      	mov	r0, r4
 8004934:	f006 f8f4 	bl	800ab20 <memmove>
 8004938:	4625      	mov	r5, r4
 800493a:	2220      	movs	r2, #32
 800493c:	2100      	movs	r1, #0
 800493e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8004942:	f006 f951 	bl	800abe8 <memset>
 8004946:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800494a:	2b00      	cmp	r3, #0
 800494c:	bf08      	it	eq
 800494e:	2a21      	cmpeq	r2, #33	; 0x21
 8004950:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004954:	d303      	bcc.n	800495e <crypto_secretbox_detached+0x86>
 8004956:	2220      	movs	r2, #32
 8004958:	2300      	movs	r3, #0
 800495a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800495e:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8004962:	f107 094f 	add.w	r9, r7, #79	; 0x4f
 8004966:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800496a:	1e6a      	subs	r2, r5, #1
 800496c:	442b      	add	r3, r5
 800496e:	4649      	mov	r1, r9
 8004970:	429a      	cmp	r2, r3
 8004972:	d154      	bne.n	8004a1e <crypto_secretbox_detached+0x146>
 8004974:	f108 0310 	add.w	r3, r8, #16
 8004978:	f107 0a10 	add.w	sl, r7, #16
 800497c:	607b      	str	r3, [r7, #4]
 800497e:	e88d 0408 	stmia.w	sp, {r3, sl}
 8004982:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004986:	f107 0830 	add.w	r8, r7, #48	; 0x30
 800498a:	3220      	adds	r2, #32
 800498c:	f143 0300 	adc.w	r3, r3, #0
 8004990:	4641      	mov	r1, r8
 8004992:	4640      	mov	r0, r8
 8004994:	f000 f934 	bl	8004c00 <crypto_stream_salsa20_xor>
 8004998:	4641      	mov	r1, r8
 800499a:	4630      	mov	r0, r6
 800499c:	f001 fb00 	bl	8005fa0 <crypto_onetimeauth_poly1305_init>
 80049a0:	f10b 031f 	add.w	r3, fp, #31
 80049a4:	1e62      	subs	r2, r4, #1
 80049a6:	4443      	add	r3, r8
 80049a8:	4599      	cmp	r9, r3
 80049aa:	d13d      	bne.n	8004a28 <crypto_secretbox_detached+0x150>
 80049ac:	2140      	movs	r1, #64	; 0x40
 80049ae:	4640      	mov	r0, r8
 80049b0:	f000 fa9b 	bl	8004eea <sodium_memzero>
 80049b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049bc:	428b      	cmp	r3, r1
 80049be:	bf08      	it	eq
 80049c0:	4282      	cmpeq	r2, r0
 80049c2:	d214      	bcs.n	80049ee <crypto_secretbox_detached+0x116>
 80049c4:	2201      	movs	r2, #1
 80049c6:	2300      	movs	r3, #0
 80049c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049d8:	1a12      	subs	r2, r2, r0
 80049da:	eb63 0301 	sbc.w	r3, r3, r1
 80049de:	f8cd a010 	str.w	sl, [sp, #16]
 80049e2:	eb05 010b 	add.w	r1, r5, fp
 80049e6:	eb04 000b 	add.w	r0, r4, fp
 80049ea:	f000 f8ff 	bl	8004bec <crypto_stream_salsa20_xor_ic>
 80049ee:	4650      	mov	r0, sl
 80049f0:	2120      	movs	r1, #32
 80049f2:	f000 fa7a 	bl	8004eea <sodium_memzero>
 80049f6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80049fa:	4621      	mov	r1, r4
 80049fc:	4630      	mov	r0, r6
 80049fe:	f001 fad7 	bl	8005fb0 <crypto_onetimeauth_poly1305_update>
 8004a02:	6839      	ldr	r1, [r7, #0]
 8004a04:	4630      	mov	r0, r6
 8004a06:	f001 fadf 	bl	8005fc8 <crypto_onetimeauth_poly1305_final>
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a10:	f000 fa6b 	bl	8004eea <sodium_memzero>
 8004a14:	2000      	movs	r0, #0
 8004a16:	3774      	adds	r7, #116	; 0x74
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a1e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8004a22:	f801 0f01 	strb.w	r0, [r1, #1]!
 8004a26:	e7a3      	b.n	8004970 <crypto_secretbox_detached+0x98>
 8004a28:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8004a2c:	f802 1f01 	strb.w	r1, [r2, #1]!
 8004a30:	e7ba      	b.n	80049a8 <crypto_secretbox_detached+0xd0>

08004a32 <crypto_secretbox_easy>:
 8004a32:	b530      	push	{r4, r5, lr}
 8004a34:	2500      	movs	r5, #0
 8004a36:	f06f 0410 	mvn.w	r4, #16
 8004a3a:	429d      	cmp	r5, r3
 8004a3c:	bf08      	it	eq
 8004a3e:	4294      	cmpeq	r4, r2
 8004a40:	b085      	sub	sp, #20
 8004a42:	d201      	bcs.n	8004a48 <crypto_secretbox_easy+0x16>
 8004a44:	f000 f9e8 	bl	8004e18 <sodium_misuse>
 8004a48:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004a4a:	9403      	str	r4, [sp, #12]
 8004a4c:	9c08      	ldr	r4, [sp, #32]
 8004a4e:	9402      	str	r4, [sp, #8]
 8004a50:	e9cd 2300 	strd	r2, r3, [sp]
 8004a54:	460a      	mov	r2, r1
 8004a56:	4601      	mov	r1, r0
 8004a58:	3010      	adds	r0, #16
 8004a5a:	f7ff ff3d 	bl	80048d8 <crypto_secretbox_detached>
 8004a5e:	b005      	add	sp, #20
 8004a60:	bd30      	pop	{r4, r5, pc}

08004a62 <crypto_secretbox_open_detached>:
 8004a62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a66:	b0a1      	sub	sp, #132	; 0x84
 8004a68:	f10d 0820 	add.w	r8, sp, #32
 8004a6c:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 8004a6e:	4691      	mov	r9, r2
 8004a70:	460c      	mov	r4, r1
 8004a72:	2300      	movs	r3, #0
 8004a74:	4639      	mov	r1, r7
 8004a76:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8004a78:	ae10      	add	r6, sp, #64	; 0x40
 8004a7a:	4605      	mov	r5, r0
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	4640      	mov	r0, r8
 8004a80:	f000 fd38 	bl	80054f4 <crypto_core_hsalsa20>
 8004a84:	2220      	movs	r2, #32
 8004a86:	2300      	movs	r3, #0
 8004a88:	e88d 0180 	stmia.w	sp, {r7, r8}
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	f000 f8a3 	bl	8004bd8 <crypto_stream_salsa20>
 8004a92:	4648      	mov	r0, r9
 8004a94:	9600      	str	r6, [sp, #0]
 8004a96:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	f001 fa74 	bl	8005f88 <crypto_onetimeauth_poly1305_verify>
 8004aa0:	4681      	mov	r9, r0
 8004aa2:	b148      	cbz	r0, 8004ab8 <crypto_secretbox_open_detached+0x56>
 8004aa4:	2120      	movs	r1, #32
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	f000 fa1f 	bl	8004eea <sodium_memzero>
 8004aac:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004ab0:	4648      	mov	r0, r9
 8004ab2:	b021      	add	sp, #132	; 0x84
 8004ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab8:	2d00      	cmp	r5, #0
 8004aba:	d0f9      	beq.n	8004ab0 <crypto_secretbox_open_detached+0x4e>
 8004abc:	42ac      	cmp	r4, r5
 8004abe:	d309      	bcc.n	8004ad4 <crypto_secretbox_open_detached+0x72>
 8004ac0:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	1b62      	subs	r2, r4, r5
 8004ac8:	428b      	cmp	r3, r1
 8004aca:	bf08      	it	eq
 8004acc:	4282      	cmpeq	r2, r0
 8004ace:	d309      	bcc.n	8004ae4 <crypto_secretbox_open_detached+0x82>
 8004ad0:	42ac      	cmp	r4, r5
 8004ad2:	d80d      	bhi.n	8004af0 <crypto_secretbox_open_detached+0x8e>
 8004ad4:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8004ad8:	2300      	movs	r3, #0
 8004ada:	1b2a      	subs	r2, r5, r4
 8004adc:	428b      	cmp	r3, r1
 8004ade:	bf08      	it	eq
 8004ae0:	4282      	cmpeq	r2, r0
 8004ae2:	d205      	bcs.n	8004af0 <crypto_secretbox_open_detached+0x8e>
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8004ae8:	4628      	mov	r0, r5
 8004aea:	f006 f819 	bl	800ab20 <memmove>
 8004aee:	462c      	mov	r4, r5
 8004af0:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bf08      	it	eq
 8004af8:	2a21      	cmpeq	r2, #33	; 0x21
 8004afa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004afe:	d303      	bcc.n	8004b08 <crypto_secretbox_open_detached+0xa6>
 8004b00:	2220      	movs	r2, #32
 8004b02:	2300      	movs	r3, #0
 8004b04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004b08:	f8dd b018 	ldr.w	fp, [sp, #24]
 8004b0c:	f10d 085f 	add.w	r8, sp, #95	; 0x5f
 8004b10:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8004b14:	1e62      	subs	r2, r4, #1
 8004b16:	4423      	add	r3, r4
 8004b18:	4641      	mov	r1, r8
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d134      	bne.n	8004b88 <crypto_secretbox_open_detached+0x126>
 8004b1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b22:	ae10      	add	r6, sp, #64	; 0x40
 8004b24:	3220      	adds	r2, #32
 8004b26:	f10d 0a20 	add.w	sl, sp, #32
 8004b2a:	f143 0300 	adc.w	r3, r3, #0
 8004b2e:	4631      	mov	r1, r6
 8004b30:	4630      	mov	r0, r6
 8004b32:	e88d 0480 	stmia.w	sp, {r7, sl}
 8004b36:	f000 f863 	bl	8004c00 <crypto_stream_salsa20_xor>
 8004b3a:	f10b 021f 	add.w	r2, fp, #31
 8004b3e:	1e6b      	subs	r3, r5, #1
 8004b40:	4416      	add	r6, r2
 8004b42:	45b0      	cmp	r8, r6
 8004b44:	d125      	bne.n	8004b92 <crypto_secretbox_open_detached+0x130>
 8004b46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b4a:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8004b4e:	428b      	cmp	r3, r1
 8004b50:	bf08      	it	eq
 8004b52:	4282      	cmpeq	r2, r0
 8004b54:	d213      	bcs.n	8004b7e <crypto_secretbox_open_detached+0x11c>
 8004b56:	2201      	movs	r2, #1
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b66:	1a12      	subs	r2, r2, r0
 8004b68:	eb63 0301 	sbc.w	r3, r3, r1
 8004b6c:	f8cd a010 	str.w	sl, [sp, #16]
 8004b70:	9700      	str	r7, [sp, #0]
 8004b72:	eb04 010b 	add.w	r1, r4, fp
 8004b76:	eb05 000b 	add.w	r0, r5, fp
 8004b7a:	f000 f837 	bl	8004bec <crypto_stream_salsa20_xor_ic>
 8004b7e:	2120      	movs	r1, #32
 8004b80:	4650      	mov	r0, sl
 8004b82:	f000 f9b2 	bl	8004eea <sodium_memzero>
 8004b86:	e793      	b.n	8004ab0 <crypto_secretbox_open_detached+0x4e>
 8004b88:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8004b8c:	f801 0f01 	strb.w	r0, [r1, #1]!
 8004b90:	e7c3      	b.n	8004b1a <crypto_secretbox_open_detached+0xb8>
 8004b92:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8004b96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b9a:	e7d2      	b.n	8004b42 <crypto_secretbox_open_detached+0xe0>

08004b9c <crypto_secretbox_open_easy>:
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf08      	it	eq
 8004ba0:	2a10      	cmpeq	r2, #16
 8004ba2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ba4:	d30e      	bcc.n	8004bc4 <crypto_secretbox_open_easy+0x28>
 8004ba6:	3a10      	subs	r2, #16
 8004ba8:	9c07      	ldr	r4, [sp, #28]
 8004baa:	9403      	str	r4, [sp, #12]
 8004bac:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8004bb0:	9c06      	ldr	r4, [sp, #24]
 8004bb2:	9402      	str	r4, [sp, #8]
 8004bb4:	e9cd 2300 	strd	r2, r3, [sp]
 8004bb8:	460a      	mov	r2, r1
 8004bba:	3110      	adds	r1, #16
 8004bbc:	f7ff ff51 	bl	8004a62 <crypto_secretbox_open_detached>
 8004bc0:	b004      	add	sp, #16
 8004bc2:	bd10      	pop	{r4, pc}
 8004bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bc8:	e7fa      	b.n	8004bc0 <crypto_secretbox_open_easy+0x24>

08004bca <crypto_stream_salsa20_keybytes>:
 8004bca:	2020      	movs	r0, #32
 8004bcc:	4770      	bx	lr

08004bce <crypto_stream_salsa20_noncebytes>:
 8004bce:	2008      	movs	r0, #8
 8004bd0:	4770      	bx	lr

08004bd2 <crypto_stream_salsa20_messagebytes_max>:
 8004bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bd6:	4770      	bx	lr

08004bd8 <crypto_stream_salsa20>:
 8004bd8:	b410      	push	{r4}
 8004bda:	4903      	ldr	r1, [pc, #12]	; (8004be8 <crypto_stream_salsa20+0x10>)
 8004bdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004be0:	4479      	add	r1, pc
 8004be2:	6809      	ldr	r1, [r1, #0]
 8004be4:	6809      	ldr	r1, [r1, #0]
 8004be6:	4708      	bx	r1
 8004be8:	17ffb8a8 	.word	0x17ffb8a8

08004bec <crypto_stream_salsa20_xor_ic>:
 8004bec:	b4f0      	push	{r4, r5, r6, r7}
 8004bee:	4c03      	ldr	r4, [pc, #12]	; (8004bfc <crypto_stream_salsa20_xor_ic+0x10>)
 8004bf0:	447c      	add	r4, pc
 8004bf2:	6824      	ldr	r4, [r4, #0]
 8004bf4:	6864      	ldr	r4, [r4, #4]
 8004bf6:	46a4      	mov	ip, r4
 8004bf8:	bcf0      	pop	{r4, r5, r6, r7}
 8004bfa:	4760      	bx	ip
 8004bfc:	17ffb898 	.word	0x17ffb898

08004c00 <crypto_stream_salsa20_xor>:
 8004c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c02:	4c08      	ldr	r4, [pc, #32]	; (8004c24 <crypto_stream_salsa20_xor+0x24>)
 8004c04:	b087      	sub	sp, #28
 8004c06:	447c      	add	r4, pc
 8004c08:	2600      	movs	r6, #0
 8004c0a:	2700      	movs	r7, #0
 8004c0c:	6824      	ldr	r4, [r4, #0]
 8004c0e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004c10:	9504      	str	r5, [sp, #16]
 8004c12:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004c16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c18:	9500      	str	r5, [sp, #0]
 8004c1a:	6864      	ldr	r4, [r4, #4]
 8004c1c:	47a0      	blx	r4
 8004c1e:	b007      	add	sp, #28
 8004c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c22:	bf00      	nop
 8004c24:	17ffb882 	.word	0x17ffb882

08004c28 <crypto_stream_salsa20_keygen>:
 8004c28:	2120      	movs	r1, #32
 8004c2a:	f000 b873 	b.w	8004d14 <randombytes_buf>
	...

08004c30 <_crypto_stream_salsa20_pick_best_implementation>:
 8004c30:	4b04      	ldr	r3, [pc, #16]	; (8004c44 <_crypto_stream_salsa20_pick_best_implementation+0x14>)
 8004c32:	4a05      	ldr	r2, [pc, #20]	; (8004c48 <_crypto_stream_salsa20_pick_best_implementation+0x18>)
 8004c34:	447b      	add	r3, pc
 8004c36:	2000      	movs	r0, #0
 8004c38:	589a      	ldr	r2, [r3, r2]
 8004c3a:	4b04      	ldr	r3, [pc, #16]	; (8004c4c <_crypto_stream_salsa20_pick_best_implementation+0x1c>)
 8004c3c:	447b      	add	r3, pc
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	17ffc25c 	.word	0x17ffc25c
 8004c48:	00000000 	.word	0x00000000
 8004c4c:	17ffb84c 	.word	0x17ffb84c

08004c50 <randombytes_set_implementation>:
 8004c50:	4b02      	ldr	r3, [pc, #8]	; (8004c5c <randombytes_set_implementation+0xc>)
 8004c52:	447b      	add	r3, pc
 8004c54:	6018      	str	r0, [r3, #0]
 8004c56:	2000      	movs	r0, #0
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	17ffc2a2 	.word	0x17ffc2a2

08004c60 <randombytes_stir>:
 8004c60:	b510      	push	{r4, lr}
 8004c62:	f000 f80b 	bl	8004c7c <randombytes_init_if_needed>
 8004c66:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <randombytes_stir+0x18>)
 8004c68:	447b      	add	r3, pc
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	b113      	cbz	r3, 8004c76 <randombytes_stir+0x16>
 8004c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c74:	4718      	bx	r3
 8004c76:	bd10      	pop	{r4, pc}
 8004c78:	17ffc28c 	.word	0x17ffc28c

08004c7c <randombytes_init_if_needed>:
 8004c7c:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <randombytes_init_if_needed+0x18>)
 8004c7e:	4a06      	ldr	r2, [pc, #24]	; (8004c98 <randombytes_init_if_needed+0x1c>)
 8004c80:	447b      	add	r3, pc
 8004c82:	447a      	add	r2, pc
 8004c84:	6819      	ldr	r1, [r3, #0]
 8004c86:	b921      	cbnz	r1, 8004c92 <randombytes_init_if_needed+0x16>
 8004c88:	4904      	ldr	r1, [pc, #16]	; (8004c9c <randombytes_init_if_needed+0x20>)
 8004c8a:	5852      	ldr	r2, [r2, r1]
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	f7ff bfe7 	b.w	8004c60 <randombytes_stir>
 8004c92:	4770      	bx	lr
 8004c94:	17ffc274 	.word	0x17ffc274
 8004c98:	17ffc20e 	.word	0x17ffc20e
 8004c9c:	0000000c 	.word	0x0000000c

08004ca0 <randombytes_implementation_name>:
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	f7ff ffeb 	bl	8004c7c <randombytes_init_if_needed>
 8004ca6:	4b03      	ldr	r3, [pc, #12]	; (8004cb4 <randombytes_implementation_name+0x14>)
 8004ca8:	447b      	add	r3, pc
 8004caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4718      	bx	r3
 8004cb4:	17ffc24c 	.word	0x17ffc24c

08004cb8 <randombytes_random>:
 8004cb8:	b510      	push	{r4, lr}
 8004cba:	f7ff ffdf 	bl	8004c7c <randombytes_init_if_needed>
 8004cbe:	4b03      	ldr	r3, [pc, #12]	; (8004ccc <randombytes_random+0x14>)
 8004cc0:	447b      	add	r3, pc
 8004cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	4718      	bx	r3
 8004ccc:	17ffc234 	.word	0x17ffc234

08004cd0 <randombytes_uniform>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	f7ff ffd2 	bl	8004c7c <randombytes_init_if_needed>
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <randombytes_uniform+0x40>)
 8004cda:	447b      	add	r3, pc
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	b11b      	cbz	r3, 8004cea <randombytes_uniform+0x1a>
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ce8:	4718      	bx	r3
 8004cea:	2c01      	cmp	r4, #1
 8004cec:	d90d      	bls.n	8004d0a <randombytes_uniform+0x3a>
 8004cee:	4263      	negs	r3, r4
 8004cf0:	fbb3 f5f4 	udiv	r5, r3, r4
 8004cf4:	fb04 3515 	mls	r5, r4, r5, r3
 8004cf8:	f7ff ffde 	bl	8004cb8 <randombytes_random>
 8004cfc:	4285      	cmp	r5, r0
 8004cfe:	d8fb      	bhi.n	8004cf8 <randombytes_uniform+0x28>
 8004d00:	fbb0 f3f4 	udiv	r3, r0, r4
 8004d04:	fb04 0013 	mls	r0, r4, r3, r0
 8004d08:	bd70      	pop	{r4, r5, r6, pc}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	bd70      	pop	{r4, r5, r6, pc}
 8004d0e:	bf00      	nop
 8004d10:	17ffc21a 	.word	0x17ffc21a

08004d14 <randombytes_buf>:
 8004d14:	b570      	push	{r4, r5, r6, lr}
 8004d16:	460c      	mov	r4, r1
 8004d18:	4605      	mov	r5, r0
 8004d1a:	f7ff ffaf 	bl	8004c7c <randombytes_init_if_needed>
 8004d1e:	b144      	cbz	r4, 8004d32 <randombytes_buf+0x1e>
 8004d20:	4b04      	ldr	r3, [pc, #16]	; (8004d34 <randombytes_buf+0x20>)
 8004d22:	447b      	add	r3, pc
 8004d24:	4621      	mov	r1, r4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4628      	mov	r0, r5
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d30:	4718      	bx	r3
 8004d32:	bd70      	pop	{r4, r5, r6, pc}
 8004d34:	17ffc1d2 	.word	0x17ffc1d2

08004d38 <randombytes_buf_deterministic>:
 8004d38:	b507      	push	{r0, r1, r2, lr}
 8004d3a:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <randombytes_buf_deterministic+0x18>)
 8004d3c:	9201      	str	r2, [sp, #4]
 8004d3e:	447b      	add	r3, pc
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	460a      	mov	r2, r1
 8004d44:	2300      	movs	r3, #0
 8004d46:	f001 fc23 	bl	8006590 <crypto_stream_chacha20_ietf>
 8004d4a:	b003      	add	sp, #12
 8004d4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d50:	000092bd 	.word	0x000092bd

08004d54 <randombytes_seedbytes>:
 8004d54:	2020      	movs	r0, #32
 8004d56:	4770      	bx	lr

08004d58 <randombytes_close>:
 8004d58:	4b04      	ldr	r3, [pc, #16]	; (8004d6c <randombytes_close+0x14>)
 8004d5a:	447b      	add	r3, pc
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	b113      	cbz	r3, 8004d66 <randombytes_close+0xe>
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	b103      	cbz	r3, 8004d66 <randombytes_close+0xe>
 8004d64:	4718      	bx	r3
 8004d66:	2000      	movs	r0, #0
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	17ffc19a 	.word	0x17ffc19a

08004d70 <randombytes>:
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	bf08      	it	eq
 8004d74:	2a00      	cmpeq	r2, #0
 8004d76:	b508      	push	{r3, lr}
 8004d78:	d309      	bcc.n	8004d8e <randombytes+0x1e>
 8004d7a:	4a07      	ldr	r2, [pc, #28]	; (8004d98 <randombytes+0x28>)
 8004d7c:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <randombytes+0x2c>)
 8004d7e:	4808      	ldr	r0, [pc, #32]	; (8004da0 <randombytes+0x30>)
 8004d80:	447a      	add	r2, pc
 8004d82:	447b      	add	r3, pc
 8004d84:	320c      	adds	r2, #12
 8004d86:	21cc      	movs	r1, #204	; 0xcc
 8004d88:	4478      	add	r0, pc
 8004d8a:	f005 facd 	bl	800a328 <__assert_func>
 8004d8e:	4611      	mov	r1, r2
 8004d90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004d94:	f7ff bfbe 	b.w	8004d14 <randombytes_buf>
 8004d98:	0000927b 	.word	0x0000927b
 8004d9c:	00009291 	.word	0x00009291
 8004da0:	0000929f 	.word	0x0000929f

08004da4 <sodium_crit_enter>:
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <sodium_crit_enter+0x1c>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	447b      	add	r3, pc
 8004daa:	e853 0f00 	ldrex	r0, [r3]
 8004dae:	e843 2100 	strex	r1, r2, [r3]
 8004db2:	2900      	cmp	r1, #0
 8004db4:	d1f9      	bne.n	8004daa <sodium_crit_enter+0x6>
 8004db6:	f3bf 8f5b 	dmb	ish
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	d1f5      	bne.n	8004daa <sodium_crit_enter+0x6>
 8004dbe:	4770      	bx	lr
 8004dc0:	17ffc150 	.word	0x17ffc150

08004dc4 <sodium_init>:
 8004dc4:	b570      	push	{r4, r5, r6, lr}
 8004dc6:	f7ff ffed 	bl	8004da4 <sodium_crit_enter>
 8004dca:	4604      	mov	r4, r0
 8004dcc:	b9a8      	cbnz	r0, 8004dfa <sodium_init+0x36>
 8004dce:	4d0c      	ldr	r5, [pc, #48]	; (8004e00 <sodium_init+0x3c>)
 8004dd0:	447d      	add	r5, pc
 8004dd2:	2601      	movs	r6, #1
 8004dd4:	686b      	ldr	r3, [r5, #4]
 8004dd6:	b12b      	cbz	r3, 8004de4 <sodium_init+0x20>
 8004dd8:	f3bf 8f5b 	dmb	ish
 8004ddc:	4634      	mov	r4, r6
 8004dde:	6028      	str	r0, [r5, #0]
 8004de0:	4620      	mov	r0, r4
 8004de2:	bd70      	pop	{r4, r5, r6, pc}
 8004de4:	f000 f83a 	bl	8004e5c <_sodium_runtime_get_cpu_features>
 8004de8:	f7ff ff3a 	bl	8004c60 <randombytes_stir>
 8004dec:	f000 f900 	bl	8004ff0 <_sodium_alloc_init>
 8004df0:	606e      	str	r6, [r5, #4]
 8004df2:	f3bf 8f5b 	dmb	ish
 8004df6:	602c      	str	r4, [r5, #0]
 8004df8:	e7f2      	b.n	8004de0 <sodium_init+0x1c>
 8004dfa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004dfe:	e7ef      	b.n	8004de0 <sodium_init+0x1c>
 8004e00:	17ffc128 	.word	0x17ffc128

08004e04 <sodium_crit_leave>:
 8004e04:	4b03      	ldr	r3, [pc, #12]	; (8004e14 <sodium_crit_leave+0x10>)
 8004e06:	f3bf 8f5b 	dmb	ish
 8004e0a:	447b      	add	r3, pc
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	6018      	str	r0, [r3, #0]
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	17ffc0ee 	.word	0x17ffc0ee

08004e18 <sodium_misuse>:
 8004e18:	b508      	push	{r3, lr}
 8004e1a:	f7ff ffc3 	bl	8004da4 <sodium_crit_enter>
 8004e1e:	b938      	cbnz	r0, 8004e30 <sodium_misuse+0x18>
 8004e20:	4a04      	ldr	r2, [pc, #16]	; (8004e34 <sodium_misuse+0x1c>)
 8004e22:	447a      	add	r2, pc
 8004e24:	6893      	ldr	r3, [r2, #8]
 8004e26:	f3bf 8f5b 	dmb	ish
 8004e2a:	6010      	str	r0, [r2, #0]
 8004e2c:	b103      	cbz	r3, 8004e30 <sodium_misuse+0x18>
 8004e2e:	4798      	blx	r3
 8004e30:	f005 fa72 	bl	800a318 <abort>
 8004e34:	17ffc0d6 	.word	0x17ffc0d6

08004e38 <sodium_set_misuse_handler>:
 8004e38:	b510      	push	{r4, lr}
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	f7ff ffb2 	bl	8004da4 <sodium_crit_enter>
 8004e40:	b930      	cbnz	r0, 8004e50 <sodium_set_misuse_handler+0x18>
 8004e42:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <sodium_set_misuse_handler+0x20>)
 8004e44:	447b      	add	r3, pc
 8004e46:	609c      	str	r4, [r3, #8]
 8004e48:	f3bf 8f5b 	dmb	ish
 8004e4c:	6018      	str	r0, [r3, #0]
 8004e4e:	bd10      	pop	{r4, pc}
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e54:	bd10      	pop	{r4, pc}
 8004e56:	bf00      	nop
 8004e58:	17ffc0b4 	.word	0x17ffc0b4

08004e5c <_sodium_runtime_get_cpu_features>:
 8004e5c:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <_sodium_runtime_get_cpu_features+0x10>)
 8004e5e:	447b      	add	r3, pc
 8004e60:	2000      	movs	r0, #0
 8004e62:	2201      	movs	r2, #1
 8004e64:	6058      	str	r0, [r3, #4]
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	17ffc0a6 	.word	0x17ffc0a6

08004e70 <sodium_runtime_has_neon>:
 8004e70:	4b01      	ldr	r3, [pc, #4]	; (8004e78 <sodium_runtime_has_neon+0x8>)
 8004e72:	447b      	add	r3, pc
 8004e74:	6858      	ldr	r0, [r3, #4]
 8004e76:	4770      	bx	lr
 8004e78:	17ffc092 	.word	0x17ffc092

08004e7c <sodium_runtime_has_sse2>:
 8004e7c:	4b01      	ldr	r3, [pc, #4]	; (8004e84 <sodium_runtime_has_sse2+0x8>)
 8004e7e:	447b      	add	r3, pc
 8004e80:	6898      	ldr	r0, [r3, #8]
 8004e82:	4770      	bx	lr
 8004e84:	17ffc086 	.word	0x17ffc086

08004e88 <sodium_runtime_has_sse3>:
 8004e88:	4b01      	ldr	r3, [pc, #4]	; (8004e90 <sodium_runtime_has_sse3+0x8>)
 8004e8a:	447b      	add	r3, pc
 8004e8c:	68d8      	ldr	r0, [r3, #12]
 8004e8e:	4770      	bx	lr
 8004e90:	17ffc07a 	.word	0x17ffc07a

08004e94 <sodium_runtime_has_ssse3>:
 8004e94:	4b01      	ldr	r3, [pc, #4]	; (8004e9c <sodium_runtime_has_ssse3+0x8>)
 8004e96:	447b      	add	r3, pc
 8004e98:	6918      	ldr	r0, [r3, #16]
 8004e9a:	4770      	bx	lr
 8004e9c:	17ffc06e 	.word	0x17ffc06e

08004ea0 <sodium_runtime_has_sse41>:
 8004ea0:	4b01      	ldr	r3, [pc, #4]	; (8004ea8 <sodium_runtime_has_sse41+0x8>)
 8004ea2:	447b      	add	r3, pc
 8004ea4:	6958      	ldr	r0, [r3, #20]
 8004ea6:	4770      	bx	lr
 8004ea8:	17ffc062 	.word	0x17ffc062

08004eac <sodium_runtime_has_avx>:
 8004eac:	4b01      	ldr	r3, [pc, #4]	; (8004eb4 <sodium_runtime_has_avx+0x8>)
 8004eae:	447b      	add	r3, pc
 8004eb0:	6998      	ldr	r0, [r3, #24]
 8004eb2:	4770      	bx	lr
 8004eb4:	17ffc056 	.word	0x17ffc056

08004eb8 <sodium_runtime_has_avx2>:
 8004eb8:	4b01      	ldr	r3, [pc, #4]	; (8004ec0 <sodium_runtime_has_avx2+0x8>)
 8004eba:	447b      	add	r3, pc
 8004ebc:	69d8      	ldr	r0, [r3, #28]
 8004ebe:	4770      	bx	lr
 8004ec0:	17ffc04a 	.word	0x17ffc04a

08004ec4 <sodium_runtime_has_avx512f>:
 8004ec4:	4b01      	ldr	r3, [pc, #4]	; (8004ecc <sodium_runtime_has_avx512f+0x8>)
 8004ec6:	447b      	add	r3, pc
 8004ec8:	6a18      	ldr	r0, [r3, #32]
 8004eca:	4770      	bx	lr
 8004ecc:	17ffc03e 	.word	0x17ffc03e

08004ed0 <sodium_runtime_has_pclmul>:
 8004ed0:	4b01      	ldr	r3, [pc, #4]	; (8004ed8 <sodium_runtime_has_pclmul+0x8>)
 8004ed2:	447b      	add	r3, pc
 8004ed4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004ed6:	4770      	bx	lr
 8004ed8:	17ffc032 	.word	0x17ffc032

08004edc <sodium_runtime_has_aesni>:
 8004edc:	4b01      	ldr	r3, [pc, #4]	; (8004ee4 <sodium_runtime_has_aesni+0x8>)
 8004ede:	447b      	add	r3, pc
 8004ee0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004ee2:	4770      	bx	lr
 8004ee4:	17ffc026 	.word	0x17ffc026

08004ee8 <_sodium_dummy_symbol_to_prevent_memzero_lto>:
 8004ee8:	4770      	bx	lr

08004eea <sodium_memzero>:
 8004eea:	f005 ba83 	b.w	800a3f4 <explicit_bzero>

08004eee <_sodium_dummy_symbol_to_prevent_memcmp_lto>:
 8004eee:	4770      	bx	lr

08004ef0 <sodium_memcmp>:
 8004ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ef2:	2400      	movs	r4, #0
 8004ef4:	4606      	mov	r6, r0
 8004ef6:	460f      	mov	r7, r1
 8004ef8:	4615      	mov	r5, r2
 8004efa:	f88d 4007 	strb.w	r4, [sp, #7]
 8004efe:	f7ff fff6 	bl	8004eee <_sodium_dummy_symbol_to_prevent_memcmp_lto>
 8004f02:	4623      	mov	r3, r4
 8004f04:	42ab      	cmp	r3, r5
 8004f06:	d106      	bne.n	8004f16 <sodium_memcmp+0x26>
 8004f08:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004f0c:	3801      	subs	r0, #1
 8004f0e:	0fc0      	lsrs	r0, r0, #31
 8004f10:	3801      	subs	r0, #1
 8004f12:	b003      	add	sp, #12
 8004f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f16:	5cf1      	ldrb	r1, [r6, r3]
 8004f18:	5cf8      	ldrb	r0, [r7, r3]
 8004f1a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004f1e:	4041      	eors	r1, r0
 8004f20:	430a      	orrs	r2, r1
 8004f22:	f88d 2007 	strb.w	r2, [sp, #7]
 8004f26:	3301      	adds	r3, #1
 8004f28:	e7ec      	b.n	8004f04 <sodium_memcmp+0x14>

08004f2a <_sodium_dummy_symbol_to_prevent_compare_lto>:
 8004f2a:	4770      	bx	lr

08004f2c <sodium_compare>:
 8004f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f2e:	2300      	movs	r3, #0
 8004f30:	4616      	mov	r6, r2
 8004f32:	f88d 3006 	strb.w	r3, [sp, #6]
 8004f36:	4605      	mov	r5, r0
 8004f38:	460c      	mov	r4, r1
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f88d 3007 	strb.w	r3, [sp, #7]
 8004f40:	f7ff fff3 	bl	8004f2a <_sodium_dummy_symbol_to_prevent_compare_lto>
 8004f44:	19aa      	adds	r2, r5, r6
 8004f46:	19a1      	adds	r1, r4, r6
 8004f48:	42aa      	cmp	r2, r5
 8004f4a:	d10a      	bne.n	8004f62 <sodium_compare+0x36>
 8004f4c:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8004f50:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8004f54:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004f58:	4410      	add	r0, r2
 8004f5a:	4418      	add	r0, r3
 8004f5c:	3801      	subs	r0, #1
 8004f5e:	b003      	add	sp, #12
 8004f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f62:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 8004f66:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 8004f6a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004f6e:	f89d 6006 	ldrb.w	r6, [sp, #6]
 8004f72:	1ae7      	subs	r7, r4, r3
 8004f74:	ea00 2027 	and.w	r0, r0, r7, asr #8
 8004f78:	4330      	orrs	r0, r6
 8004f7a:	f88d 0006 	strb.w	r0, [sp, #6]
 8004f7e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004f82:	4063      	eors	r3, r4
 8004f84:	3b01      	subs	r3, #1
 8004f86:	ea00 73e3 	and.w	r3, r0, r3, asr #31
 8004f8a:	f88d 3007 	strb.w	r3, [sp, #7]
 8004f8e:	e7db      	b.n	8004f48 <sodium_compare+0x1c>

08004f90 <sodium_is_zero>:
 8004f90:	b082      	sub	sp, #8
 8004f92:	2300      	movs	r3, #0
 8004f94:	f88d 3007 	strb.w	r3, [sp, #7]
 8004f98:	4401      	add	r1, r0
 8004f9a:	4288      	cmp	r0, r1
 8004f9c:	d105      	bne.n	8004faa <sodium_is_zero+0x1a>
 8004f9e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004fa2:	3801      	subs	r0, #1
 8004fa4:	0fc0      	lsrs	r0, r0, #31
 8004fa6:	b002      	add	sp, #8
 8004fa8:	4770      	bx	lr
 8004faa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004fae:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f88d 3007 	strb.w	r3, [sp, #7]
 8004fb8:	e7ef      	b.n	8004f9a <sodium_is_zero+0xa>

08004fba <sodium_increment>:
 8004fba:	4401      	add	r1, r0
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	4288      	cmp	r0, r1
 8004fc0:	d100      	bne.n	8004fc4 <sodium_increment+0xa>
 8004fc2:	4770      	bx	lr
 8004fc4:	7802      	ldrb	r2, [r0, #0]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f800 3b01 	strb.w	r3, [r0], #1
 8004fcc:	0a1b      	lsrs	r3, r3, #8
 8004fce:	e7f6      	b.n	8004fbe <sodium_increment+0x4>

08004fd0 <sodium_add>:
 8004fd0:	b530      	push	{r4, r5, lr}
 8004fd2:	3901      	subs	r1, #1
 8004fd4:	4402      	add	r2, r0
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	4290      	cmp	r0, r2
 8004fda:	d100      	bne.n	8004fde <sodium_add+0xe>
 8004fdc:	bd30      	pop	{r4, r5, pc}
 8004fde:	7804      	ldrb	r4, [r0, #0]
 8004fe0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8004fe4:	442c      	add	r4, r5
 8004fe6:	4423      	add	r3, r4
 8004fe8:	f800 3b01 	strb.w	r3, [r0], #1
 8004fec:	0a1b      	lsrs	r3, r3, #8
 8004fee:	e7f3      	b.n	8004fd8 <sodium_add+0x8>

08004ff0 <_sodium_alloc_init>:
 8004ff0:	b508      	push	{r3, lr}
 8004ff2:	4803      	ldr	r0, [pc, #12]	; (8005000 <_sodium_alloc_init+0x10>)
 8004ff4:	2110      	movs	r1, #16
 8004ff6:	4478      	add	r0, pc
 8004ff8:	f7ff fe8c 	bl	8004d14 <randombytes_buf>
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	bd08      	pop	{r3, pc}
 8005000:	17ffbf3a 	.word	0x17ffbf3a

08005004 <sodium_mlock>:
 8005004:	b508      	push	{r3, lr}
 8005006:	f005 f9ef 	bl	800a3e8 <__errno>
 800500a:	2358      	movs	r3, #88	; 0x58
 800500c:	6003      	str	r3, [r0, #0]
 800500e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005012:	bd08      	pop	{r3, pc}

08005014 <sodium_munlock>:
 8005014:	b508      	push	{r3, lr}
 8005016:	f005 f9ed 	bl	800a3f4 <explicit_bzero>
 800501a:	f005 f9e5 	bl	800a3e8 <__errno>
 800501e:	2358      	movs	r3, #88	; 0x58
 8005020:	6003      	str	r3, [r0, #0]
 8005022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005026:	bd08      	pop	{r3, pc}

08005028 <sodium_malloc>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4605      	mov	r5, r0
 800502c:	2800      	cmp	r0, #0
 800502e:	bf08      	it	eq
 8005030:	2001      	moveq	r0, #1
 8005032:	f005 fa27 	bl	800a484 <malloc>
 8005036:	4604      	mov	r4, r0
 8005038:	b118      	cbz	r0, 8005042 <sodium_malloc+0x1a>
 800503a:	462a      	mov	r2, r5
 800503c:	21db      	movs	r1, #219	; 0xdb
 800503e:	f005 fdd3 	bl	800abe8 <memset>
 8005042:	4620      	mov	r0, r4
 8005044:	bd38      	pop	{r3, r4, r5, pc}

08005046 <sodium_allocarray>:
 8005046:	b508      	push	{r3, lr}
 8005048:	b128      	cbz	r0, 8005056 <sodium_allocarray+0x10>
 800504a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800504e:	fbb3 f3f0 	udiv	r3, r3, r0
 8005052:	428b      	cmp	r3, r1
 8005054:	d904      	bls.n	8005060 <sodium_allocarray+0x1a>
 8005056:	4348      	muls	r0, r1
 8005058:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800505c:	f7ff bfe4 	b.w	8005028 <sodium_malloc>
 8005060:	f005 f9c2 	bl	800a3e8 <__errno>
 8005064:	230c      	movs	r3, #12
 8005066:	6003      	str	r3, [r0, #0]
 8005068:	2000      	movs	r0, #0
 800506a:	bd08      	pop	{r3, pc}

0800506c <sodium_free>:
 800506c:	f005 ba12 	b.w	800a494 <free>

08005070 <sodium_mprotect_noaccess>:
 8005070:	b508      	push	{r3, lr}
 8005072:	f005 f9b9 	bl	800a3e8 <__errno>
 8005076:	2358      	movs	r3, #88	; 0x58
 8005078:	6003      	str	r3, [r0, #0]
 800507a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800507e:	bd08      	pop	{r3, pc}

08005080 <sodium_mprotect_readonly>:
 8005080:	b508      	push	{r3, lr}
 8005082:	f005 f9b1 	bl	800a3e8 <__errno>
 8005086:	2358      	movs	r3, #88	; 0x58
 8005088:	6003      	str	r3, [r0, #0]
 800508a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800508e:	bd08      	pop	{r3, pc}

08005090 <sodium_mprotect_readwrite>:
 8005090:	b508      	push	{r3, lr}
 8005092:	f005 f9a9 	bl	800a3e8 <__errno>
 8005096:	2358      	movs	r3, #88	; 0x58
 8005098:	6003      	str	r3, [r0, #0]
 800509a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800509e:	bd08      	pop	{r3, pc}

080050a0 <sodium_pad>:
 80050a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050a2:	b393      	cbz	r3, 800510a <sodium_pad+0x6a>
 80050a4:	1e5c      	subs	r4, r3, #1
 80050a6:	4223      	tst	r3, r4
 80050a8:	ea6f 0602 	mvn.w	r6, r2
 80050ac:	bf1b      	ittet	ne
 80050ae:	fbb2 f5f3 	udivne	r5, r2, r3
 80050b2:	fb03 2515 	mlsne	r5, r3, r5, r2
 80050b6:	4034      	andeq	r4, r6
 80050b8:	1b64      	subne	r4, r4, r5
 80050ba:	42b4      	cmp	r4, r6
 80050bc:	d301      	bcc.n	80050c2 <sodium_pad+0x22>
 80050be:	f7ff feab 	bl	8004e18 <sodium_misuse>
 80050c2:	9d06      	ldr	r5, [sp, #24]
 80050c4:	4422      	add	r2, r4
 80050c6:	42aa      	cmp	r2, r5
 80050c8:	d21f      	bcs.n	800510a <sodium_pad+0x6a>
 80050ca:	b108      	cbz	r0, 80050d0 <sodium_pad+0x30>
 80050cc:	1c55      	adds	r5, r2, #1
 80050ce:	6005      	str	r5, [r0, #0]
 80050d0:	2500      	movs	r5, #0
 80050d2:	f88d 5007 	strb.w	r5, [sp, #7]
 80050d6:	440a      	add	r2, r1
 80050d8:	ea84 0005 	eor.w	r0, r4, r5
 80050dc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80050e0:	7816      	ldrb	r6, [r2, #0]
 80050e2:	3801      	subs	r0, #1
 80050e4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80050e8:	4031      	ands	r1, r6
 80050ea:	f020 067f 	bic.w	r6, r0, #127	; 0x7f
 80050ee:	4331      	orrs	r1, r6
 80050f0:	f802 1901 	strb.w	r1, [r2], #-1
 80050f4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80050f8:	3501      	adds	r5, #1
 80050fa:	4308      	orrs	r0, r1
 80050fc:	42ab      	cmp	r3, r5
 80050fe:	f88d 0007 	strb.w	r0, [sp, #7]
 8005102:	d1e9      	bne.n	80050d8 <sodium_pad+0x38>
 8005104:	2000      	movs	r0, #0
 8005106:	b002      	add	sp, #8
 8005108:	bd70      	pop	{r4, r5, r6, pc}
 800510a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800510e:	e7fa      	b.n	8005106 <sodium_pad+0x66>

08005110 <sodium_unpad>:
 8005110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005112:	429a      	cmp	r2, r3
 8005114:	f04f 0500 	mov.w	r5, #0
 8005118:	9501      	str	r5, [sp, #4]
 800511a:	d325      	bcc.n	8005168 <sodium_unpad+0x58>
 800511c:	b323      	cbz	r3, 8005168 <sodium_unpad+0x58>
 800511e:	4411      	add	r1, r2
 8005120:	462e      	mov	r6, r5
 8005122:	46ae      	mov	lr, r5
 8005124:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 8005128:	9f01      	ldr	r7, [sp, #4]
 800512a:	f08c 0480 	eor.w	r4, ip, #128	; 0x80
 800512e:	3f01      	subs	r7, #1
 8005130:	3c01      	subs	r4, #1
 8005132:	403c      	ands	r4, r7
 8005134:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
 8005138:	403c      	ands	r4, r7
 800513a:	f3c4 2400 	ubfx	r4, r4, #8, #1
 800513e:	ea4c 0e0e 	orr.w	lr, ip, lr
 8005142:	4267      	negs	r7, r4
 8005144:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005148:	402f      	ands	r7, r5
 800514a:	3501      	adds	r5, #1
 800514c:	ea47 070c 	orr.w	r7, r7, ip
 8005150:	42ab      	cmp	r3, r5
 8005152:	9701      	str	r7, [sp, #4]
 8005154:	ea46 0604 	orr.w	r6, r6, r4
 8005158:	d1e4      	bne.n	8005124 <sodium_unpad+0x14>
 800515a:	9b01      	ldr	r3, [sp, #4]
 800515c:	43db      	mvns	r3, r3
 800515e:	441a      	add	r2, r3
 8005160:	6002      	str	r2, [r0, #0]
 8005162:	1e70      	subs	r0, r6, #1
 8005164:	b003      	add	sp, #12
 8005166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800516c:	e7fa      	b.n	8005164 <sodium_unpad+0x54>
	...

08005170 <randombytes_sysrandom_implementation_name>:
 8005170:	4801      	ldr	r0, [pc, #4]	; (8005178 <randombytes_sysrandom_implementation_name+0x8>)
 8005172:	4478      	add	r0, pc
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	00008ed9 	.word	0x00008ed9

0800517c <randombytes_sysrandom_close>:
 800517c:	b510      	push	{r4, lr}
 800517e:	4c08      	ldr	r4, [pc, #32]	; (80051a0 <randombytes_sysrandom_close+0x24>)
 8005180:	447c      	add	r4, pc
 8005182:	6820      	ldr	r0, [r4, #0]
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	d102      	bne.n	800518e <randombytes_sysrandom_close+0x12>
 8005188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800518c:	bd10      	pop	{r4, pc}
 800518e:	f005 fee5 	bl	800af5c <close>
 8005192:	2800      	cmp	r0, #0
 8005194:	d1f8      	bne.n	8005188 <randombytes_sysrandom_close+0xc>
 8005196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800519a:	6023      	str	r3, [r4, #0]
 800519c:	6060      	str	r0, [r4, #4]
 800519e:	bd10      	pop	{r4, pc}
 80051a0:	17ffb2fc 	.word	0x17ffb2fc

080051a4 <randombytes_sysrandom_stir>:
 80051a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051a6:	4b24      	ldr	r3, [pc, #144]	; (8005238 <randombytes_sysrandom_stir+0x94>)
 80051a8:	447b      	add	r3, pc
 80051aa:	b091      	sub	sp, #68	; 0x44
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d140      	bne.n	8005234 <randombytes_sysrandom_stir+0x90>
 80051b2:	f005 f919 	bl	800a3e8 <__errno>
 80051b6:	4d21      	ldr	r5, [pc, #132]	; (800523c <randombytes_sysrandom_stir+0x98>)
 80051b8:	6806      	ldr	r6, [r0, #0]
 80051ba:	447d      	add	r5, pc
 80051bc:	af01      	add	r7, sp, #4
 80051be:	2100      	movs	r1, #0
 80051c0:	6828      	ldr	r0, [r5, #0]
 80051c2:	f005 fee3 	bl	800af8c <open>
 80051c6:	1c43      	adds	r3, r0, #1
 80051c8:	4604      	mov	r4, r0
 80051ca:	d01f      	beq.n	800520c <randombytes_sysrandom_stir+0x68>
 80051cc:	4639      	mov	r1, r7
 80051ce:	f005 fed5 	bl	800af7c <fstat>
 80051d2:	b9b0      	cbnz	r0, 8005202 <randombytes_sysrandom_stir+0x5e>
 80051d4:	9b02      	ldr	r3, [sp, #8]
 80051d6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80051da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051de:	d110      	bne.n	8005202 <randombytes_sysrandom_stir+0x5e>
 80051e0:	2101      	movs	r1, #1
 80051e2:	4620      	mov	r0, r4
 80051e4:	f005 fec2 	bl	800af6c <fcntl>
 80051e8:	2102      	movs	r1, #2
 80051ea:	f040 0201 	orr.w	r2, r0, #1
 80051ee:	4620      	mov	r0, r4
 80051f0:	f005 febc 	bl	800af6c <fcntl>
 80051f4:	4d12      	ldr	r5, [pc, #72]	; (8005240 <randombytes_sysrandom_stir+0x9c>)
 80051f6:	447d      	add	r5, pc
 80051f8:	602c      	str	r4, [r5, #0]
 80051fa:	3401      	adds	r4, #1
 80051fc:	d115      	bne.n	800522a <randombytes_sysrandom_stir+0x86>
 80051fe:	f7ff fe0b 	bl	8004e18 <sodium_misuse>
 8005202:	4620      	mov	r0, r4
 8005204:	f005 feaa 	bl	800af5c <close>
 8005208:	3504      	adds	r5, #4
 800520a:	e004      	b.n	8005216 <randombytes_sysrandom_stir+0x72>
 800520c:	f005 f8ec 	bl	800a3e8 <__errno>
 8005210:	6803      	ldr	r3, [r0, #0]
 8005212:	2b04      	cmp	r3, #4
 8005214:	d1f8      	bne.n	8005208 <randombytes_sysrandom_stir+0x64>
 8005216:	682b      	ldr	r3, [r5, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1d0      	bne.n	80051be <randombytes_sysrandom_stir+0x1a>
 800521c:	f005 f8e4 	bl	800a3e8 <__errno>
 8005220:	2305      	movs	r3, #5
 8005222:	6003      	str	r3, [r0, #0]
 8005224:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005228:	e7e4      	b.n	80051f4 <randombytes_sysrandom_stir+0x50>
 800522a:	f005 f8dd 	bl	800a3e8 <__errno>
 800522e:	2301      	movs	r3, #1
 8005230:	6006      	str	r6, [r0, #0]
 8005232:	606b      	str	r3, [r5, #4]
 8005234:	b011      	add	sp, #68	; 0x44
 8005236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005238:	17ffb2d4 	.word	0x17ffb2d4
 800523c:	17ffb2d2 	.word	0x17ffb2d2
 8005240:	17ffb286 	.word	0x17ffb286

08005244 <randombytes_sysrandom_buf>:
 8005244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005248:	4b22      	ldr	r3, [pc, #136]	; (80052d4 <randombytes_sysrandom_buf+0x90>)
 800524a:	447b      	add	r3, pc
 800524c:	4680      	mov	r8, r0
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	460e      	mov	r6, r1
 8005252:	b90b      	cbnz	r3, 8005258 <randombytes_sysrandom_buf+0x14>
 8005254:	f7ff ffa6 	bl	80051a4 <randombytes_sysrandom_stir>
 8005258:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <randombytes_sysrandom_buf+0x94>)
 800525a:	447b      	add	r3, pc
 800525c:	f8d3 9000 	ldr.w	r9, [r3]
 8005260:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8005264:	d101      	bne.n	800526a <randombytes_sysrandom_buf+0x26>
 8005266:	f7ff fdd7 	bl	8004e18 <sodium_misuse>
 800526a:	b946      	cbnz	r6, 800527e <randombytes_sysrandom_buf+0x3a>
 800526c:	4b1b      	ldr	r3, [pc, #108]	; (80052dc <randombytes_sysrandom_buf+0x98>)
 800526e:	4a1c      	ldr	r2, [pc, #112]	; (80052e0 <randombytes_sysrandom_buf+0x9c>)
 8005270:	481c      	ldr	r0, [pc, #112]	; (80052e4 <randombytes_sysrandom_buf+0xa0>)
 8005272:	447b      	add	r3, pc
 8005274:	447a      	add	r2, pc
 8005276:	2170      	movs	r1, #112	; 0x70
 8005278:	4478      	add	r0, pc
 800527a:	f005 f855 	bl	800a328 <__assert_func>
 800527e:	4b14      	ldr	r3, [pc, #80]	; (80052d0 <randombytes_sysrandom_buf+0x8c>)
 8005280:	429e      	cmp	r6, r3
 8005282:	d816      	bhi.n	80052b2 <randombytes_sysrandom_buf+0x6e>
 8005284:	4645      	mov	r5, r8
 8005286:	4637      	mov	r7, r6
 8005288:	463a      	mov	r2, r7
 800528a:	4629      	mov	r1, r5
 800528c:	4648      	mov	r0, r9
 800528e:	f005 fe91 	bl	800afb4 <read>
 8005292:	1e04      	subs	r4, r0, #0
 8005294:	da15      	bge.n	80052c2 <randombytes_sysrandom_buf+0x7e>
 8005296:	f005 f8a7 	bl	800a3e8 <__errno>
 800529a:	6803      	ldr	r3, [r0, #0]
 800529c:	2b04      	cmp	r3, #4
 800529e:	d0f3      	beq.n	8005288 <randombytes_sysrandom_buf+0x44>
 80052a0:	f005 f8a2 	bl	800a3e8 <__errno>
 80052a4:	6803      	ldr	r3, [r0, #0]
 80052a6:	2b0b      	cmp	r3, #11
 80052a8:	d0ee      	beq.n	8005288 <randombytes_sysrandom_buf+0x44>
 80052aa:	42a6      	cmp	r6, r4
 80052ac:	d1db      	bne.n	8005266 <randombytes_sysrandom_buf+0x22>
 80052ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052b2:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <randombytes_sysrandom_buf+0xa4>)
 80052b4:	4a0d      	ldr	r2, [pc, #52]	; (80052ec <randombytes_sysrandom_buf+0xa8>)
 80052b6:	480e      	ldr	r0, [pc, #56]	; (80052f0 <randombytes_sysrandom_buf+0xac>)
 80052b8:	447b      	add	r3, pc
 80052ba:	447a      	add	r2, pc
 80052bc:	2171      	movs	r1, #113	; 0x71
 80052be:	4478      	add	r0, pc
 80052c0:	e7db      	b.n	800527a <randombytes_sysrandom_buf+0x36>
 80052c2:	d002      	beq.n	80052ca <randombytes_sysrandom_buf+0x86>
 80052c4:	1b3f      	subs	r7, r7, r4
 80052c6:	4425      	add	r5, r4
 80052c8:	d1de      	bne.n	8005288 <randombytes_sysrandom_buf+0x44>
 80052ca:	eba5 0408 	sub.w	r4, r5, r8
 80052ce:	e7ec      	b.n	80052aa <randombytes_sysrandom_buf+0x66>
 80052d0:	7ffffffe 	.word	0x7ffffffe
 80052d4:	17ffb232 	.word	0x17ffb232
 80052d8:	17ffb222 	.word	0x17ffb222
 80052dc:	00008de3 	.word	0x00008de3
 80052e0:	00008dcd 	.word	0x00008dcd
 80052e4:	00008df0 	.word	0x00008df0
 80052e8:	00008dde 	.word	0x00008dde
 80052ec:	00008d87 	.word	0x00008d87
 80052f0:	00008daa 	.word	0x00008daa

080052f4 <randombytes_sysrandom>:
 80052f4:	b507      	push	{r0, r1, r2, lr}
 80052f6:	2104      	movs	r1, #4
 80052f8:	eb0d 0001 	add.w	r0, sp, r1
 80052fc:	f7ff ffa2 	bl	8005244 <randombytes_sysrandom_buf>
 8005300:	9801      	ldr	r0, [sp, #4]
 8005302:	b003      	add	sp, #12
 8005304:	f85d fb04 	ldr.w	pc, [sp], #4

08005308 <stream_ref_xor_ic>:
 8005308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800530c:	4614      	mov	r4, r2
 800530e:	b0a1      	sub	sp, #132	; 0x84
 8005310:	461d      	mov	r5, r3
 8005312:	ea54 0305 	orrs.w	r3, r4, r5
 8005316:	4682      	mov	sl, r0
 8005318:	4689      	mov	r9, r1
 800531a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800531c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800531e:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 8005320:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8005322:	d043      	beq.n	80053ac <stream_ref_xor_ic+0xa4>
 8005324:	2300      	movs	r3, #0
 8005326:	f10d 0820 	add.w	r8, sp, #32
 800532a:	5cc6      	ldrb	r6, [r0, r3]
 800532c:	f803 6008 	strb.w	r6, [r3, r8]
 8005330:	3301      	adds	r3, #1
 8005332:	2b20      	cmp	r3, #32
 8005334:	d1f9      	bne.n	800532a <stream_ref_xor_ic+0x22>
 8005336:	2300      	movs	r3, #0
 8005338:	ae04      	add	r6, sp, #16
 800533a:	5cc8      	ldrb	r0, [r1, r3]
 800533c:	5598      	strb	r0, [r3, r6]
 800533e:	3301      	adds	r3, #1
 8005340:	2b08      	cmp	r3, #8
 8005342:	d1fa      	bne.n	800533a <stream_ref_xor_ic+0x32>
 8005344:	54f2      	strb	r2, [r6, r3]
 8005346:	3301      	adds	r3, #1
 8005348:	0a12      	lsrs	r2, r2, #8
 800534a:	2b10      	cmp	r3, #16
 800534c:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
 8005350:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8005354:	d1f6      	bne.n	8005344 <stream_ref_xor_ic+0x3c>
 8005356:	e9cd 4500 	strd	r4, r5, [sp]
 800535a:	af10      	add	r7, sp, #64	; 0x40
 800535c:	9b00      	ldr	r3, [sp, #0]
 800535e:	1ae3      	subs	r3, r4, r3
 8005360:	eb0a 0b03 	add.w	fp, sl, r3
 8005364:	444b      	add	r3, r9
 8005366:	9303      	str	r3, [sp, #12]
 8005368:	e9dd 2300 	ldrd	r2, r3, [sp]
 800536c:	2b00      	cmp	r3, #0
 800536e:	bf08      	it	eq
 8005370:	2a40      	cmpeq	r2, #64	; 0x40
 8005372:	d21f      	bcs.n	80053b4 <stream_ref_xor_ic+0xac>
 8005374:	09a2      	lsrs	r2, r4, #6
 8005376:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 800537a:	0193      	lsls	r3, r2, #6
 800537c:	09a9      	lsrs	r1, r5, #6
 800537e:	4250      	negs	r0, r2
 8005380:	449a      	add	sl, r3
 8005382:	4499      	add	r9, r3
 8005384:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8005388:	fb03 0101 	mla	r1, r3, r1, r0
 800538c:	fba2 2303 	umull	r2, r3, r2, r3
 8005390:	440b      	add	r3, r1
 8005392:	18a4      	adds	r4, r4, r2
 8005394:	415d      	adcs	r5, r3
 8005396:	ea54 0305 	orrs.w	r3, r4, r5
 800539a:	d12d      	bne.n	80053f8 <stream_ref_xor_ic+0xf0>
 800539c:	2140      	movs	r1, #64	; 0x40
 800539e:	4638      	mov	r0, r7
 80053a0:	f7ff fda3 	bl	8004eea <sodium_memzero>
 80053a4:	2120      	movs	r1, #32
 80053a6:	4640      	mov	r0, r8
 80053a8:	f7ff fd9f 	bl	8004eea <sodium_memzero>
 80053ac:	2000      	movs	r0, #0
 80053ae:	b021      	add	sp, #132	; 0x84
 80053b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b4:	2300      	movs	r3, #0
 80053b6:	4642      	mov	r2, r8
 80053b8:	4631      	mov	r1, r6
 80053ba:	4638      	mov	r0, r7
 80053bc:	f000 fa98 	bl	80058f0 <crypto_core_salsa20>
 80053c0:	2300      	movs	r3, #0
 80053c2:	9a03      	ldr	r2, [sp, #12]
 80053c4:	5cf9      	ldrb	r1, [r7, r3]
 80053c6:	5cd2      	ldrb	r2, [r2, r3]
 80053c8:	404a      	eors	r2, r1
 80053ca:	f80b 2003 	strb.w	r2, [fp, r3]
 80053ce:	3301      	adds	r3, #1
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d1f6      	bne.n	80053c2 <stream_ref_xor_ic+0xba>
 80053d4:	2308      	movs	r3, #8
 80053d6:	2201      	movs	r2, #1
 80053d8:	5cf1      	ldrb	r1, [r6, r3]
 80053da:	440a      	add	r2, r1
 80053dc:	54f2      	strb	r2, [r6, r3]
 80053de:	3301      	adds	r3, #1
 80053e0:	2b10      	cmp	r3, #16
 80053e2:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80053e6:	d1f7      	bne.n	80053d8 <stream_ref_xor_ic+0xd0>
 80053e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053ec:	3a40      	subs	r2, #64	; 0x40
 80053ee:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 80053f2:	e9cd 2300 	strd	r2, r3, [sp]
 80053f6:	e7b1      	b.n	800535c <stream_ref_xor_ic+0x54>
 80053f8:	2300      	movs	r3, #0
 80053fa:	4642      	mov	r2, r8
 80053fc:	4631      	mov	r1, r6
 80053fe:	4638      	mov	r0, r7
 8005400:	f000 fa76 	bl	80058f0 <crypto_core_salsa20>
 8005404:	2300      	movs	r3, #0
 8005406:	42a3      	cmp	r3, r4
 8005408:	d2c8      	bcs.n	800539c <stream_ref_xor_ic+0x94>
 800540a:	f819 2003 	ldrb.w	r2, [r9, r3]
 800540e:	5cf9      	ldrb	r1, [r7, r3]
 8005410:	404a      	eors	r2, r1
 8005412:	f80a 2003 	strb.w	r2, [sl, r3]
 8005416:	3301      	adds	r3, #1
 8005418:	e7f5      	b.n	8005406 <stream_ref_xor_ic+0xfe>

0800541a <stream_ref>:
 800541a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800541e:	4614      	mov	r4, r2
 8005420:	b09c      	sub	sp, #112	; 0x70
 8005422:	461d      	mov	r5, r3
 8005424:	ea54 0305 	orrs.w	r3, r4, r5
 8005428:	4682      	mov	sl, r0
 800542a:	9924      	ldr	r1, [sp, #144]	; 0x90
 800542c:	9825      	ldr	r0, [sp, #148]	; 0x94
 800542e:	d03a      	beq.n	80054a6 <stream_ref+0x8c>
 8005430:	2300      	movs	r3, #0
 8005432:	af04      	add	r7, sp, #16
 8005434:	5cc2      	ldrb	r2, [r0, r3]
 8005436:	55da      	strb	r2, [r3, r7]
 8005438:	3301      	adds	r3, #1
 800543a:	2b20      	cmp	r3, #32
 800543c:	d1fa      	bne.n	8005434 <stream_ref+0x1a>
 800543e:	2300      	movs	r3, #0
 8005440:	466e      	mov	r6, sp
 8005442:	5cca      	ldrb	r2, [r1, r3]
 8005444:	559a      	strb	r2, [r3, r6]
 8005446:	3301      	adds	r3, #1
 8005448:	2b08      	cmp	r3, #8
 800544a:	d1fa      	bne.n	8005442 <stream_ref+0x28>
 800544c:	2200      	movs	r2, #0
 800544e:	54f2      	strb	r2, [r6, r3]
 8005450:	3301      	adds	r3, #1
 8005452:	2b10      	cmp	r3, #16
 8005454:	d1fb      	bne.n	800544e <stream_ref+0x34>
 8005456:	46a0      	mov	r8, r4
 8005458:	46a9      	mov	r9, r5
 800545a:	f1b9 0f00 	cmp.w	r9, #0
 800545e:	eba4 0008 	sub.w	r0, r4, r8
 8005462:	bf08      	it	eq
 8005464:	f1b8 0f40 	cmpeq.w	r8, #64	; 0x40
 8005468:	4450      	add	r0, sl
 800546a:	d220      	bcs.n	80054ae <stream_ref+0x94>
 800546c:	09a2      	lsrs	r2, r4, #6
 800546e:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8005472:	09a9      	lsrs	r1, r5, #6
 8005474:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8005478:	4250      	negs	r0, r2
 800547a:	fb03 0101 	mla	r1, r3, r1, r0
 800547e:	eb0a 1a82 	add.w	sl, sl, r2, lsl #6
 8005482:	fba2 2303 	umull	r2, r3, r2, r3
 8005486:	440b      	add	r3, r1
 8005488:	18a4      	adds	r4, r4, r2
 800548a:	415d      	adcs	r5, r3
 800548c:	ea54 0305 	orrs.w	r3, r4, r5
 8005490:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8005494:	d11f      	bne.n	80054d6 <stream_ref+0xbc>
 8005496:	2140      	movs	r1, #64	; 0x40
 8005498:	4640      	mov	r0, r8
 800549a:	f7ff fd26 	bl	8004eea <sodium_memzero>
 800549e:	2120      	movs	r1, #32
 80054a0:	4638      	mov	r0, r7
 80054a2:	f7ff fd22 	bl	8004eea <sodium_memzero>
 80054a6:	2000      	movs	r0, #0
 80054a8:	b01c      	add	sp, #112	; 0x70
 80054aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ae:	2300      	movs	r3, #0
 80054b0:	463a      	mov	r2, r7
 80054b2:	4631      	mov	r1, r6
 80054b4:	f000 fa1c 	bl	80058f0 <crypto_core_salsa20>
 80054b8:	2308      	movs	r3, #8
 80054ba:	2201      	movs	r2, #1
 80054bc:	5cf1      	ldrb	r1, [r6, r3]
 80054be:	440a      	add	r2, r1
 80054c0:	54f2      	strb	r2, [r6, r3]
 80054c2:	3301      	adds	r3, #1
 80054c4:	2b10      	cmp	r3, #16
 80054c6:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80054ca:	d1f7      	bne.n	80054bc <stream_ref+0xa2>
 80054cc:	f1b8 0840 	subs.w	r8, r8, #64	; 0x40
 80054d0:	f149 39ff 	adc.w	r9, r9, #4294967295	; 0xffffffff
 80054d4:	e7c1      	b.n	800545a <stream_ref+0x40>
 80054d6:	2300      	movs	r3, #0
 80054d8:	463a      	mov	r2, r7
 80054da:	4631      	mov	r1, r6
 80054dc:	4640      	mov	r0, r8
 80054de:	f000 fa07 	bl	80058f0 <crypto_core_salsa20>
 80054e2:	2300      	movs	r3, #0
 80054e4:	42a3      	cmp	r3, r4
 80054e6:	d2d6      	bcs.n	8005496 <stream_ref+0x7c>
 80054e8:	f818 2003 	ldrb.w	r2, [r8, r3]
 80054ec:	f80a 2003 	strb.w	r2, [sl, r3]
 80054f0:	3301      	adds	r3, #1
 80054f2:	e7f7      	b.n	80054e4 <stream_ref+0xca>

080054f4 <crypto_core_hsalsa20>:
 80054f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f8:	b08b      	sub	sp, #44	; 0x2c
 80054fa:	9000      	str	r0, [sp, #0]
 80054fc:	b36b      	cbz	r3, 800555a <crypto_core_hsalsa20+0x66>
 80054fe:	68dc      	ldr	r4, [r3, #12]
 8005500:	689d      	ldr	r5, [r3, #8]
 8005502:	685e      	ldr	r6, [r3, #4]
 8005504:	681f      	ldr	r7, [r3, #0]
 8005506:	6913      	ldr	r3, [r2, #16]
 8005508:	6890      	ldr	r0, [r2, #8]
 800550a:	9302      	str	r3, [sp, #8]
 800550c:	9005      	str	r0, [sp, #20]
 800550e:	684b      	ldr	r3, [r1, #4]
 8005510:	6850      	ldr	r0, [r2, #4]
 8005512:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8005516:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800551a:	f8d2 c014 	ldr.w	ip, [r2, #20]
 800551e:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8005522:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	9003      	str	r0, [sp, #12]
 800552a:	680b      	ldr	r3, [r1, #0]
 800552c:	68d1      	ldr	r1, [r2, #12]
 800552e:	6812      	ldr	r2, [r2, #0]
 8005530:	200b      	movs	r0, #11
 8005532:	9008      	str	r0, [sp, #32]
 8005534:	9808      	ldr	r0, [sp, #32]
 8005536:	3801      	subs	r0, #1
 8005538:	9008      	str	r0, [sp, #32]
 800553a:	d113      	bne.n	8005564 <crypto_core_hsalsa20+0x70>
 800553c:	9a00      	ldr	r2, [sp, #0]
 800553e:	6113      	str	r3, [r2, #16]
 8005540:	9b01      	ldr	r3, [sp, #4]
 8005542:	6017      	str	r7, [r2, #0]
 8005544:	6056      	str	r6, [r2, #4]
 8005546:	6095      	str	r5, [r2, #8]
 8005548:	60d4      	str	r4, [r2, #12]
 800554a:	6153      	str	r3, [r2, #20]
 800554c:	f8c2 e018 	str.w	lr, [r2, #24]
 8005550:	f8c2 801c 	str.w	r8, [r2, #28]
 8005554:	b00b      	add	sp, #44	; 0x2c
 8005556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800555a:	4c4c      	ldr	r4, [pc, #304]	; (800568c <crypto_core_hsalsa20+0x198>)
 800555c:	4d4c      	ldr	r5, [pc, #304]	; (8005690 <crypto_core_hsalsa20+0x19c>)
 800555e:	4e4d      	ldr	r6, [pc, #308]	; (8005694 <crypto_core_hsalsa20+0x1a0>)
 8005560:	4f4d      	ldr	r7, [pc, #308]	; (8005698 <crypto_core_hsalsa20+0x1a4>)
 8005562:	e7d0      	b.n	8005506 <crypto_core_hsalsa20+0x12>
 8005564:	eb07 0b0c 	add.w	fp, r7, ip
 8005568:	ea81 6b7b 	eor.w	fp, r1, fp, ror #25
 800556c:	eb07 010b 	add.w	r1, r7, fp
 8005570:	ea8e 51f1 	eor.w	r1, lr, r1, ror #23
 8005574:	9106      	str	r1, [sp, #24]
 8005576:	4459      	add	r1, fp
 8005578:	ea8c 41f1 	eor.w	r1, ip, r1, ror #19
 800557c:	9109      	str	r1, [sp, #36]	; 0x24
 800557e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005580:	9906      	ldr	r1, [sp, #24]
 8005582:	4401      	add	r1, r0
 8005584:	ea87 37b1 	eor.w	r7, r7, r1, ror #14
 8005588:	1991      	adds	r1, r2, r6
 800558a:	ea88 6171 	eor.w	r1, r8, r1, ror #25
 800558e:	9104      	str	r1, [sp, #16]
 8005590:	1871      	adds	r1, r6, r1
 8005592:	ea89 51f1 	eor.w	r1, r9, r1, ror #23
 8005596:	9107      	str	r1, [sp, #28]
 8005598:	9807      	ldr	r0, [sp, #28]
 800559a:	9904      	ldr	r1, [sp, #16]
 800559c:	4401      	add	r1, r0
 800559e:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
 80055a2:	4601      	mov	r1, r0
 80055a4:	4411      	add	r1, r2
 80055a6:	ea86 36b1 	eor.w	r6, r6, r1, ror #14
 80055aa:	1959      	adds	r1, r3, r5
 80055ac:	ea8a 6a71 	eor.w	sl, sl, r1, ror #25
 80055b0:	9903      	ldr	r1, [sp, #12]
 80055b2:	9801      	ldr	r0, [sp, #4]
 80055b4:	eb05 0e0a 	add.w	lr, r5, sl
 80055b8:	ea81 5efe 	eor.w	lr, r1, lr, ror #23
 80055bc:	eb0a 010e 	add.w	r1, sl, lr
 80055c0:	ea83 43f1 	eor.w	r3, r3, r1, ror #19
 80055c4:	eb0e 0103 	add.w	r1, lr, r3
 80055c8:	ea85 35b1 	eor.w	r5, r5, r1, ror #14
 80055cc:	9902      	ldr	r1, [sp, #8]
 80055ce:	eb01 0804 	add.w	r8, r1, r4
 80055d2:	9905      	ldr	r1, [sp, #20]
 80055d4:	ea81 6878 	eor.w	r8, r1, r8, ror #25
 80055d8:	eb04 0108 	add.w	r1, r4, r8
 80055dc:	ea80 51f1 	eor.w	r1, r0, r1, ror #23
 80055e0:	9802      	ldr	r0, [sp, #8]
 80055e2:	eb08 0c01 	add.w	ip, r8, r1
 80055e6:	ea80 4cfc 	eor.w	ip, r0, ip, ror #19
 80055ea:	eb01 090c 	add.w	r9, r1, ip
 80055ee:	ea84 34b9 	eor.w	r4, r4, r9, ror #14
 80055f2:	eb07 0908 	add.w	r9, r7, r8
 80055f6:	ea82 6279 	eor.w	r2, r2, r9, ror #25
 80055fa:	eb07 0902 	add.w	r9, r7, r2
 80055fe:	ea8e 50f9 	eor.w	r0, lr, r9, ror #23
 8005602:	eb02 0e00 	add.w	lr, r2, r0
 8005606:	9003      	str	r0, [sp, #12]
 8005608:	ea88 40fe 	eor.w	r0, r8, lr, ror #19
 800560c:	9005      	str	r0, [sp, #20]
 800560e:	9803      	ldr	r0, [sp, #12]
 8005610:	4686      	mov	lr, r0
 8005612:	9805      	ldr	r0, [sp, #20]
 8005614:	4486      	add	lr, r0
 8005616:	ea87 37be 	eor.w	r7, r7, lr, ror #14
 800561a:	eb0b 0e06 	add.w	lr, fp, r6
 800561e:	ea83 637e 	eor.w	r3, r3, lr, ror #25
 8005622:	eb06 0e03 	add.w	lr, r6, r3
 8005626:	ea81 51fe 	eor.w	r1, r1, lr, ror #23
 800562a:	9101      	str	r1, [sp, #4]
 800562c:	9801      	ldr	r0, [sp, #4]
 800562e:	1859      	adds	r1, r3, r1
 8005630:	ea8b 41f1 	eor.w	r1, fp, r1, ror #19
 8005634:	eb00 0e01 	add.w	lr, r0, r1
 8005638:	9804      	ldr	r0, [sp, #16]
 800563a:	ea86 36be 	eor.w	r6, r6, lr, ror #14
 800563e:	eb00 0e05 	add.w	lr, r0, r5
 8005642:	ea8c 607e 	eor.w	r0, ip, lr, ror #25
 8005646:	eb05 0e00 	add.w	lr, r5, r0
 800564a:	9002      	str	r0, [sp, #8]
 800564c:	9806      	ldr	r0, [sp, #24]
 800564e:	ea80 5efe 	eor.w	lr, r0, lr, ror #23
 8005652:	9802      	ldr	r0, [sp, #8]
 8005654:	eb00 080e 	add.w	r8, r0, lr
 8005658:	9804      	ldr	r0, [sp, #16]
 800565a:	ea80 48f8 	eor.w	r8, r0, r8, ror #19
 800565e:	eb0e 0c08 	add.w	ip, lr, r8
 8005662:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005664:	ea85 35bc 	eor.w	r5, r5, ip, ror #14
 8005668:	eb0a 0c04 	add.w	ip, sl, r4
 800566c:	ea80 6c7c 	eor.w	ip, r0, ip, ror #25
 8005670:	9807      	ldr	r0, [sp, #28]
 8005672:	eb04 090c 	add.w	r9, r4, ip
 8005676:	ea80 59f9 	eor.w	r9, r0, r9, ror #23
 800567a:	eb0c 0b09 	add.w	fp, ip, r9
 800567e:	ea8a 4afb 	eor.w	sl, sl, fp, ror #19
 8005682:	eb09 0b0a 	add.w	fp, r9, sl
 8005686:	ea84 34bb 	eor.w	r4, r4, fp, ror #14
 800568a:	e753      	b.n	8005534 <crypto_core_hsalsa20+0x40>
 800568c:	6b206574 	.word	0x6b206574
 8005690:	79622d32 	.word	0x79622d32
 8005694:	3320646e 	.word	0x3320646e
 8005698:	61707865 	.word	0x61707865

0800569c <crypto_core_salsa>:
 800569c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a0:	b09b      	sub	sp, #108	; 0x6c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d07a      	beq.n	800579c <crypto_core_salsa+0x100>
 80056a6:	68dc      	ldr	r4, [r3, #12]
 80056a8:	940a      	str	r4, [sp, #40]	; 0x28
 80056aa:	689c      	ldr	r4, [r3, #8]
 80056ac:	9409      	str	r4, [sp, #36]	; 0x24
 80056ae:	685c      	ldr	r4, [r3, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	9408      	str	r4, [sp, #32]
 80056b4:	9307      	str	r3, [sp, #28]
 80056b6:	6813      	ldr	r3, [r2, #0]
 80056b8:	930e      	str	r3, [sp, #56]	; 0x38
 80056ba:	6853      	ldr	r3, [r2, #4]
 80056bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80056be:	6893      	ldr	r3, [r2, #8]
 80056c0:	9310      	str	r3, [sp, #64]	; 0x40
 80056c2:	68d3      	ldr	r3, [r2, #12]
 80056c4:	9311      	str	r3, [sp, #68]	; 0x44
 80056c6:	6913      	ldr	r3, [r2, #16]
 80056c8:	9312      	str	r3, [sp, #72]	; 0x48
 80056ca:	6953      	ldr	r3, [r2, #20]
 80056cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80056ce:	6993      	ldr	r3, [r2, #24]
 80056d0:	9314      	str	r3, [sp, #80]	; 0x50
 80056d2:	69d3      	ldr	r3, [r2, #28]
 80056d4:	9315      	str	r3, [sp, #84]	; 0x54
 80056d6:	680b      	ldr	r3, [r1, #0]
 80056d8:	9316      	str	r3, [sp, #88]	; 0x58
 80056da:	684b      	ldr	r3, [r1, #4]
 80056dc:	9317      	str	r3, [sp, #92]	; 0x5c
 80056de:	688b      	ldr	r3, [r1, #8]
 80056e0:	9318      	str	r3, [sp, #96]	; 0x60
 80056e2:	68cb      	ldr	r3, [r1, #12]
 80056e4:	9319      	str	r3, [sp, #100]	; 0x64
 80056e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056e8:	9303      	str	r3, [sp, #12]
 80056ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80056ee:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 80056f2:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 80056f6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80056f8:	9302      	str	r3, [sp, #8]
 80056fa:	ab17      	add	r3, sp, #92	; 0x5c
 80056fc:	e893 0a08 	ldmia.w	r3, {r3, r9, fp}
 8005700:	9301      	str	r3, [sp, #4]
 8005702:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005704:	9304      	str	r3, [sp, #16]
 8005706:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 800570e:	9f08      	ldr	r7, [sp, #32]
 8005710:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005714:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005718:	2100      	movs	r1, #0
 800571a:	910b      	str	r1, [sp, #44]	; 0x2c
 800571c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800571e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8005720:	42b1      	cmp	r1, r6
 8005722:	db48      	blt.n	80057b6 <crypto_core_salsa+0x11a>
 8005724:	9907      	ldr	r1, [sp, #28]
 8005726:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005728:	4461      	add	r1, ip
 800572a:	6001      	str	r1, [r0, #0]
 800572c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800572e:	440b      	add	r3, r1
 8005730:	6043      	str	r3, [r0, #4]
 8005732:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005734:	9b00      	ldr	r3, [sp, #0]
 8005736:	440b      	add	r3, r1
 8005738:	6083      	str	r3, [r0, #8]
 800573a:	9b04      	ldr	r3, [sp, #16]
 800573c:	4433      	add	r3, r6
 800573e:	60c3      	str	r3, [r0, #12]
 8005740:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005742:	441a      	add	r2, r3
 8005744:	9b08      	ldr	r3, [sp, #32]
 8005746:	6102      	str	r2, [r0, #16]
 8005748:	443b      	add	r3, r7
 800574a:	6143      	str	r3, [r0, #20]
 800574c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800574e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005750:	449a      	add	sl, r3
 8005752:	9b01      	ldr	r3, [sp, #4]
 8005754:	f8c0 a018 	str.w	sl, [r0, #24]
 8005758:	4413      	add	r3, r2
 800575a:	61c3      	str	r3, [r0, #28]
 800575c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800575e:	9a02      	ldr	r2, [sp, #8]
 8005760:	4499      	add	r9, r3
 8005762:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005764:	f8c0 9020 	str.w	r9, [r0, #32]
 8005768:	449b      	add	fp, r3
 800576a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800576c:	f8c0 b024 	str.w	fp, [r0, #36]	; 0x24
 8005770:	4413      	add	r3, r2
 8005772:	6283      	str	r3, [r0, #40]	; 0x28
 8005774:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005776:	9a03      	ldr	r2, [sp, #12]
 8005778:	4423      	add	r3, r4
 800577a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800577c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800577e:	449e      	add	lr, r3
 8005780:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005782:	f8c0 e030 	str.w	lr, [r0, #48]	; 0x30
 8005786:	441a      	add	r2, r3
 8005788:	6342      	str	r2, [r0, #52]	; 0x34
 800578a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800578c:	4443      	add	r3, r8
 800578e:	6383      	str	r3, [r0, #56]	; 0x38
 8005790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005792:	442b      	add	r3, r5
 8005794:	63c3      	str	r3, [r0, #60]	; 0x3c
 8005796:	b01b      	add	sp, #108	; 0x6c
 8005798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800579c:	4b51      	ldr	r3, [pc, #324]	; (80058e4 <crypto_core_salsa+0x248>)
 800579e:	930a      	str	r3, [sp, #40]	; 0x28
 80057a0:	f103 6364 	add.w	r3, r3, #239075328	; 0xe400000
 80057a4:	f503 33e3 	add.w	r3, r3, #116224	; 0x1c600
 80057a8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80057ac:	9309      	str	r3, [sp, #36]	; 0x24
 80057ae:	4b4e      	ldr	r3, [pc, #312]	; (80058e8 <crypto_core_salsa+0x24c>)
 80057b0:	9308      	str	r3, [sp, #32]
 80057b2:	4b4e      	ldr	r3, [pc, #312]	; (80058ec <crypto_core_salsa+0x250>)
 80057b4:	e77e      	b.n	80056b4 <crypto_core_salsa+0x18>
 80057b6:	eb0c 010e 	add.w	r1, ip, lr
 80057ba:	ea82 6271 	eor.w	r2, r2, r1, ror #25
 80057be:	eb0c 0102 	add.w	r1, ip, r2
 80057c2:	ea89 51f1 	eor.w	r1, r9, r1, ror #23
 80057c6:	910c      	str	r1, [sp, #48]	; 0x30
 80057c8:	1851      	adds	r1, r2, r1
 80057ca:	ea8e 41f1 	eor.w	r1, lr, r1, ror #19
 80057ce:	910d      	str	r1, [sp, #52]	; 0x34
 80057d0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80057d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80057d4:	4431      	add	r1, r6
 80057d6:	ea8c 3cb1 	eor.w	ip, ip, r1, ror #14
 80057da:	19d9      	adds	r1, r3, r7
 80057dc:	9e03      	ldr	r6, [sp, #12]
 80057de:	ea8b 6171 	eor.w	r1, fp, r1, ror #25
 80057e2:	9105      	str	r1, [sp, #20]
 80057e4:	1879      	adds	r1, r7, r1
 80057e6:	ea86 51f1 	eor.w	r1, r6, r1, ror #23
 80057ea:	9103      	str	r1, [sp, #12]
 80057ec:	9e03      	ldr	r6, [sp, #12]
 80057ee:	9905      	ldr	r1, [sp, #20]
 80057f0:	eb01 0b06 	add.w	fp, r1, r6
 80057f4:	ea83 4bfb 	eor.w	fp, r3, fp, ror #19
 80057f8:	4633      	mov	r3, r6
 80057fa:	445b      	add	r3, fp
 80057fc:	ea87 37b3 	eor.w	r7, r7, r3, ror #14
 8005800:	9b02      	ldr	r3, [sp, #8]
 8005802:	4453      	add	r3, sl
 8005804:	ea88 6373 	eor.w	r3, r8, r3, ror #25
 8005808:	9306      	str	r3, [sp, #24]
 800580a:	9906      	ldr	r1, [sp, #24]
 800580c:	9b02      	ldr	r3, [sp, #8]
 800580e:	eb03 0801 	add.w	r8, r3, r1
 8005812:	9b00      	ldr	r3, [sp, #0]
 8005814:	ea83 58f8 	eor.w	r8, r3, r8, ror #23
 8005818:	460b      	mov	r3, r1
 800581a:	4443      	add	r3, r8
 800581c:	ea8a 4af3 	eor.w	sl, sl, r3, ror #19
 8005820:	9b02      	ldr	r3, [sp, #8]
 8005822:	eb08 060a 	add.w	r6, r8, sl
 8005826:	ea83 36b6 	eor.w	r6, r3, r6, ror #14
 800582a:	9b04      	ldr	r3, [sp, #16]
 800582c:	1961      	adds	r1, r4, r5
 800582e:	ea83 6171 	eor.w	r1, r3, r1, ror #25
 8005832:	9b01      	ldr	r3, [sp, #4]
 8005834:	eb05 0e01 	add.w	lr, r5, r1
 8005838:	ea83 5efe 	eor.w	lr, r3, lr, ror #23
 800583c:	eb01 090e 	add.w	r9, r1, lr
 8005840:	eb0c 0301 	add.w	r3, ip, r1
 8005844:	ea84 49f9 	eor.w	r9, r4, r9, ror #19
 8005848:	ea8b 6373 	eor.w	r3, fp, r3, ror #25
 800584c:	eb0e 0409 	add.w	r4, lr, r9
 8005850:	eb0c 0b03 	add.w	fp, ip, r3
 8005854:	ea85 35b4 	eor.w	r5, r5, r4, ror #14
 8005858:	ea88 54fb 	eor.w	r4, r8, fp, ror #23
 800585c:	eb03 0804 	add.w	r8, r3, r4
 8005860:	ea81 41f8 	eor.w	r1, r1, r8, ror #19
 8005864:	9104      	str	r1, [sp, #16]
 8005866:	9400      	str	r4, [sp, #0]
 8005868:	4621      	mov	r1, r4
 800586a:	9c04      	ldr	r4, [sp, #16]
 800586c:	4421      	add	r1, r4
 800586e:	ea8c 3cb1 	eor.w	ip, ip, r1, ror #14
 8005872:	19d1      	adds	r1, r2, r7
 8005874:	ea8a 6a71 	eor.w	sl, sl, r1, ror #25
 8005878:	eb07 010a 	add.w	r1, r7, sl
 800587c:	ea8e 51f1 	eor.w	r1, lr, r1, ror #23
 8005880:	9101      	str	r1, [sp, #4]
 8005882:	4451      	add	r1, sl
 8005884:	ea82 42f1 	eor.w	r2, r2, r1, ror #19
 8005888:	9901      	ldr	r1, [sp, #4]
 800588a:	4411      	add	r1, r2
 800588c:	ea87 37b1 	eor.w	r7, r7, r1, ror #14
 8005890:	9905      	ldr	r1, [sp, #20]
 8005892:	4431      	add	r1, r6
 8005894:	ea89 6471 	eor.w	r4, r9, r1, ror #25
 8005898:	990c      	ldr	r1, [sp, #48]	; 0x30
 800589a:	eb06 0904 	add.w	r9, r6, r4
 800589e:	ea81 59f9 	eor.w	r9, r1, r9, ror #23
 80058a2:	9905      	ldr	r1, [sp, #20]
 80058a4:	eb04 0b09 	add.w	fp, r4, r9
 80058a8:	ea81 4bfb 	eor.w	fp, r1, fp, ror #19
 80058ac:	eb09 010b 	add.w	r1, r9, fp
 80058b0:	ea86 31b1 	eor.w	r1, r6, r1, ror #14
 80058b4:	9102      	str	r1, [sp, #8]
 80058b6:	9906      	ldr	r1, [sp, #24]
 80058b8:	eb01 0e05 	add.w	lr, r1, r5
 80058bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80058be:	ea81 6e7e 	eor.w	lr, r1, lr, ror #25
 80058c2:	9903      	ldr	r1, [sp, #12]
 80058c4:	eb05 060e 	add.w	r6, r5, lr
 80058c8:	ea81 51f6 	eor.w	r1, r1, r6, ror #23
 80058cc:	9e06      	ldr	r6, [sp, #24]
 80058ce:	9103      	str	r1, [sp, #12]
 80058d0:	4471      	add	r1, lr
 80058d2:	ea86 48f1 	eor.w	r8, r6, r1, ror #19
 80058d6:	9903      	ldr	r1, [sp, #12]
 80058d8:	4441      	add	r1, r8
 80058da:	ea85 35b1 	eor.w	r5, r5, r1, ror #14
 80058de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058e0:	3102      	adds	r1, #2
 80058e2:	e71a      	b.n	800571a <crypto_core_salsa+0x7e>
 80058e4:	6b206574 	.word	0x6b206574
 80058e8:	3320646e 	.word	0x3320646e
 80058ec:	61707865 	.word	0x61707865

080058f0 <crypto_core_salsa20>:
 80058f0:	b513      	push	{r0, r1, r4, lr}
 80058f2:	2414      	movs	r4, #20
 80058f4:	9400      	str	r4, [sp, #0]
 80058f6:	f7ff fed1 	bl	800569c <crypto_core_salsa>
 80058fa:	2000      	movs	r0, #0
 80058fc:	b002      	add	sp, #8
 80058fe:	bd10      	pop	{r4, pc}

08005900 <crypto_core_salsa20_outputbytes>:
 8005900:	2040      	movs	r0, #64	; 0x40
 8005902:	4770      	bx	lr

08005904 <crypto_core_salsa20_inputbytes>:
 8005904:	2010      	movs	r0, #16
 8005906:	4770      	bx	lr

08005908 <crypto_core_salsa20_keybytes>:
 8005908:	2020      	movs	r0, #32
 800590a:	4770      	bx	lr

0800590c <crypto_core_salsa20_constbytes>:
 800590c:	2010      	movs	r0, #16
 800590e:	4770      	bx	lr

08005910 <crypto_core_salsa2012>:
 8005910:	b513      	push	{r0, r1, r4, lr}
 8005912:	240c      	movs	r4, #12
 8005914:	9400      	str	r4, [sp, #0]
 8005916:	f7ff fec1 	bl	800569c <crypto_core_salsa>
 800591a:	2000      	movs	r0, #0
 800591c:	b002      	add	sp, #8
 800591e:	bd10      	pop	{r4, pc}

08005920 <crypto_core_salsa2012_outputbytes>:
 8005920:	2040      	movs	r0, #64	; 0x40
 8005922:	4770      	bx	lr

08005924 <crypto_core_salsa2012_inputbytes>:
 8005924:	2010      	movs	r0, #16
 8005926:	4770      	bx	lr

08005928 <crypto_core_salsa2012_keybytes>:
 8005928:	2020      	movs	r0, #32
 800592a:	4770      	bx	lr

0800592c <crypto_core_salsa2012_constbytes>:
 800592c:	2010      	movs	r0, #16
 800592e:	4770      	bx	lr

08005930 <crypto_core_salsa208>:
 8005930:	b513      	push	{r0, r1, r4, lr}
 8005932:	2408      	movs	r4, #8
 8005934:	9400      	str	r4, [sp, #0]
 8005936:	f7ff feb1 	bl	800569c <crypto_core_salsa>
 800593a:	2000      	movs	r0, #0
 800593c:	b002      	add	sp, #8
 800593e:	bd10      	pop	{r4, pc}

08005940 <crypto_core_salsa208_outputbytes>:
 8005940:	2040      	movs	r0, #64	; 0x40
 8005942:	4770      	bx	lr

08005944 <crypto_core_salsa208_inputbytes>:
 8005944:	2010      	movs	r0, #16
 8005946:	4770      	bx	lr

08005948 <crypto_core_salsa208_keybytes>:
 8005948:	2020      	movs	r0, #32
 800594a:	4770      	bx	lr

0800594c <crypto_core_salsa208_constbytes>:
 800594c:	2010      	movs	r0, #16
 800594e:	4770      	bx	lr

08005950 <crypto_generichash_blake2b__init_param>:
 8005950:	4b16      	ldr	r3, [pc, #88]	; (80059ac <crypto_generichash_blake2b__init_param+0x5c>)
 8005952:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005956:	447b      	add	r3, pc
 8005958:	f1a0 0608 	sub.w	r6, r0, #8
 800595c:	460c      	mov	r4, r1
 800595e:	3b08      	subs	r3, #8
 8005960:	f100 0238 	add.w	r2, r0, #56	; 0x38
 8005964:	4637      	mov	r7, r6
 8005966:	e9f3 8902 	ldrd	r8, r9, [r3, #8]!
 800596a:	e9e7 8902 	strd	r8, r9, [r7, #8]!
 800596e:	4297      	cmp	r7, r2
 8005970:	d1f9      	bne.n	8005966 <crypto_generichash_blake2b__init_param+0x16>
 8005972:	f240 1225 	movw	r2, #293	; 0x125
 8005976:	2100      	movs	r1, #0
 8005978:	3040      	adds	r0, #64	; 0x40
 800597a:	f005 f935 	bl	800abe8 <memset>
 800597e:	4623      	mov	r3, r4
 8005980:	46ee      	mov	lr, sp
 8005982:	6818      	ldr	r0, [r3, #0]
 8005984:	6859      	ldr	r1, [r3, #4]
 8005986:	4672      	mov	r2, lr
 8005988:	c203      	stmia	r2!, {r0, r1}
 800598a:	e9d6 4502 	ldrd	r4, r5, [r6, #8]
 800598e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005992:	4060      	eors	r0, r4
 8005994:	4069      	eors	r1, r5
 8005996:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800599a:	42be      	cmp	r6, r7
 800599c:	f103 0308 	add.w	r3, r3, #8
 80059a0:	d1ef      	bne.n	8005982 <crypto_generichash_blake2b__init_param+0x32>
 80059a2:	2000      	movs	r0, #0
 80059a4:	b003      	add	sp, #12
 80059a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059aa:	bf00      	nop
 80059ac:	0000876e 	.word	0x0000876e

080059b0 <crypto_generichash_blake2b__init>:
 80059b0:	b530      	push	{r4, r5, lr}
 80059b2:	1e4b      	subs	r3, r1, #1
 80059b4:	2b3f      	cmp	r3, #63	; 0x3f
 80059b6:	b093      	sub	sp, #76	; 0x4c
 80059b8:	4605      	mov	r5, r0
 80059ba:	d901      	bls.n	80059c0 <crypto_generichash_blake2b__init+0x10>
 80059bc:	f7ff fa2c 	bl	8004e18 <sodium_misuse>
 80059c0:	2301      	movs	r3, #1
 80059c2:	f88d 300a 	strb.w	r3, [sp, #10]
 80059c6:	f88d 300b 	strb.w	r3, [sp, #11]
 80059ca:	2200      	movs	r2, #0
 80059cc:	2300      	movs	r3, #0
 80059ce:	e9cd 2300 	strd	r2, r3, [sp]
 80059d2:	f88d 1008 	strb.w	r1, [sp, #8]
 80059d6:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80059da:	2400      	movs	r4, #0
 80059dc:	ab04      	add	r3, sp, #16
 80059de:	e883 0003 	stmia.w	r3, {r0, r1}
 80059e2:	220e      	movs	r2, #14
 80059e4:	4621      	mov	r1, r4
 80059e6:	f10d 001a 	add.w	r0, sp, #26
 80059ea:	f88d 4009 	strb.w	r4, [sp, #9]
 80059ee:	9403      	str	r4, [sp, #12]
 80059f0:	f88d 4018 	strb.w	r4, [sp, #24]
 80059f4:	f88d 4019 	strb.w	r4, [sp, #25]
 80059f8:	f005 f8f6 	bl	800abe8 <memset>
 80059fc:	4621      	mov	r1, r4
 80059fe:	2210      	movs	r2, #16
 8005a00:	a80a      	add	r0, sp, #40	; 0x28
 8005a02:	f005 f8f1 	bl	800abe8 <memset>
 8005a06:	2210      	movs	r2, #16
 8005a08:	4621      	mov	r1, r4
 8005a0a:	a80e      	add	r0, sp, #56	; 0x38
 8005a0c:	f005 f8ec 	bl	800abe8 <memset>
 8005a10:	a902      	add	r1, sp, #8
 8005a12:	4628      	mov	r0, r5
 8005a14:	f7ff ff9c 	bl	8005950 <crypto_generichash_blake2b__init_param>
 8005a18:	b013      	add	sp, #76	; 0x4c
 8005a1a:	bd30      	pop	{r4, r5, pc}

08005a1c <crypto_generichash_blake2b__init_salt_personal>:
 8005a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a1e:	461c      	mov	r4, r3
 8005a20:	1e4b      	subs	r3, r1, #1
 8005a22:	2b3f      	cmp	r3, #63	; 0x3f
 8005a24:	b093      	sub	sp, #76	; 0x4c
 8005a26:	4605      	mov	r5, r0
 8005a28:	4616      	mov	r6, r2
 8005a2a:	d901      	bls.n	8005a30 <crypto_generichash_blake2b__init_salt_personal+0x14>
 8005a2c:	f7ff f9f4 	bl	8004e18 <sodium_misuse>
 8005a30:	f88d 1008 	strb.w	r1, [sp, #8]
 8005a34:	2000      	movs	r0, #0
 8005a36:	2100      	movs	r1, #0
 8005a38:	e9cd 0100 	strd	r0, r1, [sp]
 8005a3c:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8005a40:	2201      	movs	r2, #1
 8005a42:	2300      	movs	r3, #0
 8005a44:	f88d 200a 	strb.w	r2, [sp, #10]
 8005a48:	f88d 200b 	strb.w	r2, [sp, #11]
 8005a4c:	aa04      	add	r2, sp, #16
 8005a4e:	e882 0003 	stmia.w	r2, {r0, r1}
 8005a52:	220e      	movs	r2, #14
 8005a54:	4619      	mov	r1, r3
 8005a56:	f10d 001a 	add.w	r0, sp, #26
 8005a5a:	f88d 3009 	strb.w	r3, [sp, #9]
 8005a5e:	9303      	str	r3, [sp, #12]
 8005a60:	f88d 3018 	strb.w	r3, [sp, #24]
 8005a64:	f88d 3019 	strb.w	r3, [sp, #25]
 8005a68:	f005 f8be 	bl	800abe8 <memset>
 8005a6c:	a80a      	add	r0, sp, #40	; 0x28
 8005a6e:	b1fe      	cbz	r6, 8005ab0 <crypto_generichash_blake2b__init_salt_personal+0x94>
 8005a70:	4632      	mov	r2, r6
 8005a72:	4603      	mov	r3, r0
 8005a74:	f106 0710 	add.w	r7, r6, #16
 8005a78:	6810      	ldr	r0, [r2, #0]
 8005a7a:	6851      	ldr	r1, [r2, #4]
 8005a7c:	461e      	mov	r6, r3
 8005a7e:	c603      	stmia	r6!, {r0, r1}
 8005a80:	3208      	adds	r2, #8
 8005a82:	42ba      	cmp	r2, r7
 8005a84:	4633      	mov	r3, r6
 8005a86:	d1f7      	bne.n	8005a78 <crypto_generichash_blake2b__init_salt_personal+0x5c>
 8005a88:	a80e      	add	r0, sp, #56	; 0x38
 8005a8a:	b1b4      	cbz	r4, 8005aba <crypto_generichash_blake2b__init_salt_personal+0x9e>
 8005a8c:	4623      	mov	r3, r4
 8005a8e:	4602      	mov	r2, r0
 8005a90:	f104 0610 	add.w	r6, r4, #16
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	6859      	ldr	r1, [r3, #4]
 8005a98:	4614      	mov	r4, r2
 8005a9a:	c403      	stmia	r4!, {r0, r1}
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	42b3      	cmp	r3, r6
 8005aa0:	4622      	mov	r2, r4
 8005aa2:	d1f7      	bne.n	8005a94 <crypto_generichash_blake2b__init_salt_personal+0x78>
 8005aa4:	a902      	add	r1, sp, #8
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f7ff ff52 	bl	8005950 <crypto_generichash_blake2b__init_param>
 8005aac:	b013      	add	sp, #76	; 0x4c
 8005aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ab0:	2210      	movs	r2, #16
 8005ab2:	4631      	mov	r1, r6
 8005ab4:	f005 f898 	bl	800abe8 <memset>
 8005ab8:	e7e6      	b.n	8005a88 <crypto_generichash_blake2b__init_salt_personal+0x6c>
 8005aba:	2210      	movs	r2, #16
 8005abc:	4621      	mov	r1, r4
 8005abe:	f005 f893 	bl	800abe8 <memset>
 8005ac2:	e7ef      	b.n	8005aa4 <crypto_generichash_blake2b__init_salt_personal+0x88>

08005ac4 <crypto_generichash_blake2b__update>:
 8005ac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8005b8c <crypto_generichash_blake2b__update+0xc8>
 8005acc:	4604      	mov	r4, r0
 8005ace:	460d      	mov	r5, r1
 8005ad0:	4616      	mov	r6, r2
 8005ad2:	461f      	mov	r7, r3
 8005ad4:	f100 0860 	add.w	r8, r0, #96	; 0x60
 8005ad8:	44fa      	add	sl, pc
 8005ada:	f100 0be0 	add.w	fp, r0, #224	; 0xe0
 8005ade:	ea56 0307 	orrs.w	r3, r6, r7
 8005ae2:	d103      	bne.n	8005aec <crypto_generichash_blake2b__update+0x28>
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	b003      	add	sp, #12
 8005ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aec:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 8005af0:	2300      	movs	r3, #0
 8005af2:	f5c0 7980 	rsb	r9, r0, #256	; 0x100
 8005af6:	42bb      	cmp	r3, r7
 8005af8:	464a      	mov	r2, r9
 8005afa:	bf08      	it	eq
 8005afc:	45b1      	cmpeq	r9, r6
 8005afe:	e9cd 2300 	strd	r2, r3, [sp]
 8005b02:	d235      	bcs.n	8005b70 <crypto_generichash_blake2b__update+0xac>
 8005b04:	4629      	mov	r1, r5
 8005b06:	464a      	mov	r2, r9
 8005b08:	4440      	add	r0, r8
 8005b0a:	f004 ff6f 	bl	800a9ec <memcpy>
 8005b0e:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
 8005b12:	444b      	add	r3, r9
 8005b14:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 8005b18:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
 8005b1c:	3280      	adds	r2, #128	; 0x80
 8005b1e:	f143 0300 	adc.w	r3, r3, #0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	bf08      	it	eq
 8005b26:	2a80      	cmpeq	r2, #128	; 0x80
 8005b28:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8005b2c:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
 8005b30:	bf34      	ite	cc
 8005b32:	2101      	movcc	r1, #1
 8005b34:	2100      	movcs	r1, #0
 8005b36:	1852      	adds	r2, r2, r1
 8005b38:	f143 0300 	adc.w	r3, r3, #0
 8005b3c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b40:	4641      	mov	r1, r8
 8005b42:	f8da 3000 	ldr.w	r3, [sl]
 8005b46:	4620      	mov	r0, r4
 8005b48:	4798      	blx	r3
 8005b4a:	2280      	movs	r2, #128	; 0x80
 8005b4c:	4659      	mov	r1, fp
 8005b4e:	4640      	mov	r0, r8
 8005b50:	f004 ff4c 	bl	800a9ec <memcpy>
 8005b54:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
 8005b58:	3b80      	subs	r3, #128	; 0x80
 8005b5a:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 8005b5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b62:	1ab2      	subs	r2, r6, r2
 8005b64:	eb67 0303 	sbc.w	r3, r7, r3
 8005b68:	444d      	add	r5, r9
 8005b6a:	4616      	mov	r6, r2
 8005b6c:	461f      	mov	r7, r3
 8005b6e:	e7b6      	b.n	8005ade <crypto_generichash_blake2b__update+0x1a>
 8005b70:	4632      	mov	r2, r6
 8005b72:	4629      	mov	r1, r5
 8005b74:	4440      	add	r0, r8
 8005b76:	f004 ff39 	bl	800a9ec <memcpy>
 8005b7a:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
 8005b7e:	4433      	add	r3, r6
 8005b80:	4435      	add	r5, r6
 8005b82:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 8005b86:	2600      	movs	r6, #0
 8005b88:	2700      	movs	r7, #0
 8005b8a:	e7a8      	b.n	8005ade <crypto_generichash_blake2b__update+0x1a>
 8005b8c:	17ffa9e0 	.word	0x17ffa9e0

08005b90 <crypto_generichash_blake2b__init_key>:
 8005b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b94:	461e      	mov	r6, r3
 8005b96:	1e4b      	subs	r3, r1, #1
 8005b98:	2b3f      	cmp	r3, #63	; 0x3f
 8005b9a:	b0b2      	sub	sp, #200	; 0xc8
 8005b9c:	4607      	mov	r7, r0
 8005b9e:	4690      	mov	r8, r2
 8005ba0:	d901      	bls.n	8005ba6 <crypto_generichash_blake2b__init_key+0x16>
 8005ba2:	f7ff f939 	bl	8004e18 <sodium_misuse>
 8005ba6:	2a00      	cmp	r2, #0
 8005ba8:	d0fb      	beq.n	8005ba2 <crypto_generichash_blake2b__init_key+0x12>
 8005baa:	1e73      	subs	r3, r6, #1
 8005bac:	2b3f      	cmp	r3, #63	; 0x3f
 8005bae:	d8f8      	bhi.n	8005ba2 <crypto_generichash_blake2b__init_key+0x12>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	f88d 300a 	strb.w	r3, [sp, #10]
 8005bb6:	f88d 300b 	strb.w	r3, [sp, #11]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e9cd 2300 	strd	r2, r3, [sp]
 8005bc2:	f88d 1008 	strb.w	r1, [sp, #8]
 8005bc6:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8005bca:	2400      	movs	r4, #0
 8005bcc:	aa04      	add	r2, sp, #16
 8005bce:	e882 0003 	stmia.w	r2, {r0, r1}
 8005bd2:	220e      	movs	r2, #14
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	f10d 001a 	add.w	r0, sp, #26
 8005bda:	f88d 6009 	strb.w	r6, [sp, #9]
 8005bde:	9403      	str	r4, [sp, #12]
 8005be0:	f88d 4018 	strb.w	r4, [sp, #24]
 8005be4:	f88d 4019 	strb.w	r4, [sp, #25]
 8005be8:	f004 fffe 	bl	800abe8 <memset>
 8005bec:	2210      	movs	r2, #16
 8005bee:	4621      	mov	r1, r4
 8005bf0:	a80a      	add	r0, sp, #40	; 0x28
 8005bf2:	f004 fff9 	bl	800abe8 <memset>
 8005bf6:	2210      	movs	r2, #16
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	a80e      	add	r0, sp, #56	; 0x38
 8005bfc:	f004 fff4 	bl	800abe8 <memset>
 8005c00:	a902      	add	r1, sp, #8
 8005c02:	4638      	mov	r0, r7
 8005c04:	f7ff fea4 	bl	8005950 <crypto_generichash_blake2b__init_param>
 8005c08:	42a0      	cmp	r0, r4
 8005c0a:	dbca      	blt.n	8005ba2 <crypto_generichash_blake2b__init_key+0x12>
 8005c0c:	ad12      	add	r5, sp, #72	; 0x48
 8005c0e:	4621      	mov	r1, r4
 8005c10:	2280      	movs	r2, #128	; 0x80
 8005c12:	4628      	mov	r0, r5
 8005c14:	f004 ffe8 	bl	800abe8 <memset>
 8005c18:	4632      	mov	r2, r6
 8005c1a:	4641      	mov	r1, r8
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f004 fee5 	bl	800a9ec <memcpy>
 8005c22:	2280      	movs	r2, #128	; 0x80
 8005c24:	2300      	movs	r3, #0
 8005c26:	4629      	mov	r1, r5
 8005c28:	4638      	mov	r0, r7
 8005c2a:	f7ff ff4b 	bl	8005ac4 <crypto_generichash_blake2b__update>
 8005c2e:	4628      	mov	r0, r5
 8005c30:	2180      	movs	r1, #128	; 0x80
 8005c32:	f7ff f95a 	bl	8004eea <sodium_memzero>
 8005c36:	4620      	mov	r0, r4
 8005c38:	b032      	add	sp, #200	; 0xc8
 8005c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005c3e <crypto_generichash_blake2b__init_key_salt_personal>:
 8005c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c42:	461d      	mov	r5, r3
 8005c44:	b0b2      	sub	sp, #200	; 0xc8
 8005c46:	1e4b      	subs	r3, r1, #1
 8005c48:	2b3f      	cmp	r3, #63	; 0x3f
 8005c4a:	4606      	mov	r6, r0
 8005c4c:	4617      	mov	r7, r2
 8005c4e:	f8dd 80e0 	ldr.w	r8, [sp, #224]	; 0xe0
 8005c52:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 8005c54:	d901      	bls.n	8005c5a <crypto_generichash_blake2b__init_key_salt_personal+0x1c>
 8005c56:	f7ff f8df 	bl	8004e18 <sodium_misuse>
 8005c5a:	2a00      	cmp	r2, #0
 8005c5c:	d0fb      	beq.n	8005c56 <crypto_generichash_blake2b__init_key_salt_personal+0x18>
 8005c5e:	1e6b      	subs	r3, r5, #1
 8005c60:	2b3f      	cmp	r3, #63	; 0x3f
 8005c62:	d8f8      	bhi.n	8005c56 <crypto_generichash_blake2b__init_key_salt_personal+0x18>
 8005c64:	f88d 1008 	strb.w	r1, [sp, #8]
 8005c68:	2000      	movs	r0, #0
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	e9cd 0100 	strd	r0, r1, [sp]
 8005c70:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8005c74:	2301      	movs	r3, #1
 8005c76:	f88d 300a 	strb.w	r3, [sp, #10]
 8005c7a:	f88d 300b 	strb.w	r3, [sp, #11]
 8005c7e:	aa04      	add	r2, sp, #16
 8005c80:	2300      	movs	r3, #0
 8005c82:	e882 0003 	stmia.w	r2, {r0, r1}
 8005c86:	220e      	movs	r2, #14
 8005c88:	4619      	mov	r1, r3
 8005c8a:	f10d 001a 	add.w	r0, sp, #26
 8005c8e:	f88d 5009 	strb.w	r5, [sp, #9]
 8005c92:	9303      	str	r3, [sp, #12]
 8005c94:	f88d 3018 	strb.w	r3, [sp, #24]
 8005c98:	f88d 3019 	strb.w	r3, [sp, #25]
 8005c9c:	f004 ffa4 	bl	800abe8 <memset>
 8005ca0:	a80a      	add	r0, sp, #40	; 0x28
 8005ca2:	f1b8 0f00 	cmp.w	r8, #0
 8005ca6:	d039      	beq.n	8005d1c <crypto_generichash_blake2b__init_key_salt_personal+0xde>
 8005ca8:	4642      	mov	r2, r8
 8005caa:	4603      	mov	r3, r0
 8005cac:	f108 0c10 	add.w	ip, r8, #16
 8005cb0:	6810      	ldr	r0, [r2, #0]
 8005cb2:	6851      	ldr	r1, [r2, #4]
 8005cb4:	469e      	mov	lr, r3
 8005cb6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8005cba:	3208      	adds	r2, #8
 8005cbc:	4562      	cmp	r2, ip
 8005cbe:	4673      	mov	r3, lr
 8005cc0:	d1f6      	bne.n	8005cb0 <crypto_generichash_blake2b__init_key_salt_personal+0x72>
 8005cc2:	a80e      	add	r0, sp, #56	; 0x38
 8005cc4:	b37c      	cbz	r4, 8005d26 <crypto_generichash_blake2b__init_key_salt_personal+0xe8>
 8005cc6:	4622      	mov	r2, r4
 8005cc8:	4603      	mov	r3, r0
 8005cca:	f104 0e10 	add.w	lr, r4, #16
 8005cce:	6810      	ldr	r0, [r2, #0]
 8005cd0:	6851      	ldr	r1, [r2, #4]
 8005cd2:	461c      	mov	r4, r3
 8005cd4:	c403      	stmia	r4!, {r0, r1}
 8005cd6:	3208      	adds	r2, #8
 8005cd8:	4572      	cmp	r2, lr
 8005cda:	4623      	mov	r3, r4
 8005cdc:	d1f7      	bne.n	8005cce <crypto_generichash_blake2b__init_key_salt_personal+0x90>
 8005cde:	a902      	add	r1, sp, #8
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	f7ff fe35 	bl	8005950 <crypto_generichash_blake2b__init_param>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	dbb5      	blt.n	8005c56 <crypto_generichash_blake2b__init_key_salt_personal+0x18>
 8005cea:	ac12      	add	r4, sp, #72	; 0x48
 8005cec:	2280      	movs	r2, #128	; 0x80
 8005cee:	2100      	movs	r1, #0
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f004 ff79 	bl	800abe8 <memset>
 8005cf6:	462a      	mov	r2, r5
 8005cf8:	4639      	mov	r1, r7
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f004 fe76 	bl	800a9ec <memcpy>
 8005d00:	2280      	movs	r2, #128	; 0x80
 8005d02:	2300      	movs	r3, #0
 8005d04:	4621      	mov	r1, r4
 8005d06:	4630      	mov	r0, r6
 8005d08:	f7ff fedc 	bl	8005ac4 <crypto_generichash_blake2b__update>
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	2180      	movs	r1, #128	; 0x80
 8005d10:	f7ff f8eb 	bl	8004eea <sodium_memzero>
 8005d14:	2000      	movs	r0, #0
 8005d16:	b032      	add	sp, #200	; 0xc8
 8005d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d1c:	2210      	movs	r2, #16
 8005d1e:	4641      	mov	r1, r8
 8005d20:	f004 ff62 	bl	800abe8 <memset>
 8005d24:	e7cd      	b.n	8005cc2 <crypto_generichash_blake2b__init_key_salt_personal+0x84>
 8005d26:	2210      	movs	r2, #16
 8005d28:	4621      	mov	r1, r4
 8005d2a:	f004 ff5d 	bl	800abe8 <memset>
 8005d2e:	e7d6      	b.n	8005cde <crypto_generichash_blake2b__init_key_salt_personal+0xa0>

08005d30 <crypto_generichash_blake2b__final>:
 8005d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d34:	1e53      	subs	r3, r2, #1
 8005d36:	2b3f      	cmp	r3, #63	; 0x3f
 8005d38:	4604      	mov	r4, r0
 8005d3a:	460f      	mov	r7, r1
 8005d3c:	4616      	mov	r6, r2
 8005d3e:	d901      	bls.n	8005d44 <crypto_generichash_blake2b__final+0x14>
 8005d40:	f7ff f86a 	bl	8004e18 <sodium_misuse>
 8005d44:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	d175      	bne.n	8005e38 <crypto_generichash_blake2b__final+0x108>
 8005d4c:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8005d50:	2b80      	cmp	r3, #128	; 0x80
 8005d52:	f100 0560 	add.w	r5, r0, #96	; 0x60
 8005d56:	d92f      	bls.n	8005db8 <crypto_generichash_blake2b__final+0x88>
 8005d58:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
 8005d5c:	3280      	adds	r2, #128	; 0x80
 8005d5e:	f143 0300 	adc.w	r3, r3, #0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	bf08      	it	eq
 8005d66:	2a80      	cmpeq	r2, #128	; 0x80
 8005d68:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
 8005d6c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8005d70:	bf34      	ite	cc
 8005d72:	2101      	movcc	r1, #1
 8005d74:	2100      	movcs	r1, #0
 8005d76:	1852      	adds	r2, r2, r1
 8005d78:	f143 0300 	adc.w	r3, r3, #0
 8005d7c:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 8005d80:	4b2f      	ldr	r3, [pc, #188]	; (8005e40 <crypto_generichash_blake2b__final+0x110>)
 8005d82:	447b      	add	r3, pc
 8005d84:	4629      	mov	r1, r5
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4798      	blx	r3
 8005d8a:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
 8005d8e:	3a80      	subs	r2, #128	; 0x80
 8005d90:	2a80      	cmp	r2, #128	; 0x80
 8005d92:	f8c4 2160 	str.w	r2, [r4, #352]	; 0x160
 8005d96:	d90a      	bls.n	8005dae <crypto_generichash_blake2b__final+0x7e>
 8005d98:	4a2a      	ldr	r2, [pc, #168]	; (8005e44 <crypto_generichash_blake2b__final+0x114>)
 8005d9a:	4b2b      	ldr	r3, [pc, #172]	; (8005e48 <crypto_generichash_blake2b__final+0x118>)
 8005d9c:	482b      	ldr	r0, [pc, #172]	; (8005e4c <crypto_generichash_blake2b__final+0x11c>)
 8005d9e:	447a      	add	r2, pc
 8005da0:	447b      	add	r3, pc
 8005da2:	3240      	adds	r2, #64	; 0x40
 8005da4:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8005da8:	4478      	add	r0, pc
 8005daa:	f004 fabd 	bl	800a328 <__assert_func>
 8005dae:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
 8005db2:	4628      	mov	r0, r5
 8005db4:	f004 fe1a 	bl	800a9ec <memcpy>
 8005db8:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
 8005dbc:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 8005dc0:	f04f 0900 	mov.w	r9, #0
 8005dc4:	1812      	adds	r2, r2, r0
 8005dc6:	eb43 0309 	adc.w	r3, r3, r9
 8005dca:	454b      	cmp	r3, r9
 8005dcc:	bf08      	it	eq
 8005dce:	4282      	cmpeq	r2, r0
 8005dd0:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8005dd4:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
 8005dd8:	bf34      	ite	cc
 8005dda:	2101      	movcc	r1, #1
 8005ddc:	2100      	movcs	r1, #0
 8005dde:	1852      	adds	r2, r2, r1
 8005de0:	f894 1164 	ldrb.w	r1, [r4, #356]	; 0x164
 8005de4:	f143 0300 	adc.w	r3, r3, #0
 8005de8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005df4:	b109      	cbz	r1, 8005dfa <crypto_generichash_blake2b__final+0xca>
 8005df6:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
 8005dfa:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8005dfe:	2100      	movs	r1, #0
 8005e00:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8005e04:	4428      	add	r0, r5
 8005e06:	f004 feef 	bl	800abe8 <memset>
 8005e0a:	4b11      	ldr	r3, [pc, #68]	; (8005e50 <crypto_generichash_blake2b__final+0x120>)
 8005e0c:	447b      	add	r3, pc
 8005e0e:	4629      	mov	r1, r5
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4620      	mov	r0, r4
 8005e14:	4798      	blx	r3
 8005e16:	4632      	mov	r2, r6
 8005e18:	4621      	mov	r1, r4
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	f004 fde6 	bl	800a9ec <memcpy>
 8005e20:	4620      	mov	r0, r4
 8005e22:	2140      	movs	r1, #64	; 0x40
 8005e24:	f7ff f861 	bl	8004eea <sodium_memzero>
 8005e28:	4628      	mov	r0, r5
 8005e2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e2e:	f7ff f85c 	bl	8004eea <sodium_memzero>
 8005e32:	2000      	movs	r0, #0
 8005e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e40:	17ffa736 	.word	0x17ffa736
 8005e44:	00008326 	.word	0x00008326
 8005e48:	00008386 	.word	0x00008386
 8005e4c:	0000839e 	.word	0x0000839e
 8005e50:	17ffa6ac 	.word	0x17ffa6ac

08005e54 <crypto_generichash_blake2b__blake2b>:
 8005e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	b0f0      	sub	sp, #448	; 0x1c0
 8005e5c:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8005e60:	461d      	mov	r5, r3
 8005e62:	4606      	mov	r6, r0
 8005e64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e6c:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8005e70:	468a      	mov	sl, r1
 8005e72:	b921      	cbnz	r1, 8005e7e <crypto_generichash_blake2b__blake2b+0x2a>
 8005e74:	ea58 0109 	orrs.w	r1, r8, r9
 8005e78:	d001      	beq.n	8005e7e <crypto_generichash_blake2b__blake2b+0x2a>
 8005e7a:	f7fe ffcd 	bl	8004e18 <sodium_misuse>
 8005e7e:	2e00      	cmp	r6, #0
 8005e80:	d0fb      	beq.n	8005e7a <crypto_generichash_blake2b__blake2b+0x26>
 8005e82:	1e69      	subs	r1, r5, #1
 8005e84:	293f      	cmp	r1, #63	; 0x3f
 8005e86:	d8f8      	bhi.n	8005e7a <crypto_generichash_blake2b__blake2b+0x26>
 8005e88:	b932      	cbnz	r2, 8005e98 <crypto_generichash_blake2b__blake2b+0x44>
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f5      	bne.n	8005e7a <crypto_generichash_blake2b__blake2b+0x26>
 8005e8e:	4629      	mov	r1, r5
 8005e90:	4620      	mov	r0, r4
 8005e92:	f7ff fd8d 	bl	80059b0 <crypto_generichash_blake2b__init>
 8005e96:	e007      	b.n	8005ea8 <crypto_generichash_blake2b__blake2b+0x54>
 8005e98:	2b40      	cmp	r3, #64	; 0x40
 8005e9a:	d8ee      	bhi.n	8005e7a <crypto_generichash_blake2b__blake2b+0x26>
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0f6      	beq.n	8005e8e <crypto_generichash_blake2b__blake2b+0x3a>
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f7ff fe74 	bl	8005b90 <crypto_generichash_blake2b__init_key>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	dbe6      	blt.n	8005e7a <crypto_generichash_blake2b__blake2b+0x26>
 8005eac:	4642      	mov	r2, r8
 8005eae:	464b      	mov	r3, r9
 8005eb0:	4651      	mov	r1, sl
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f7ff fe06 	bl	8005ac4 <crypto_generichash_blake2b__update>
 8005eb8:	462a      	mov	r2, r5
 8005eba:	4631      	mov	r1, r6
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f7ff ff37 	bl	8005d30 <crypto_generichash_blake2b__final>
 8005ec2:	2000      	movs	r0, #0
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005eca <crypto_generichash_blake2b__blake2b_salt_personal>:
 8005eca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af02      	add	r7, sp, #8
 8005ed2:	b0f0      	sub	sp, #448	; 0x1c0
 8005ed4:	f10d 0447 	add.w	r4, sp, #71	; 0x47
 8005ed8:	4606      	mov	r6, r0
 8005eda:	461d      	mov	r5, r3
 8005edc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ee0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ee4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ee6:	f8d7 e030 	ldr.w	lr, [r7, #48]	; 0x30
 8005eea:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8005eee:	468a      	mov	sl, r1
 8005ef0:	b921      	cbnz	r1, 8005efc <crypto_generichash_blake2b__blake2b_salt_personal+0x32>
 8005ef2:	ea58 0109 	orrs.w	r1, r8, r9
 8005ef6:	d001      	beq.n	8005efc <crypto_generichash_blake2b__blake2b_salt_personal+0x32>
 8005ef8:	f7fe ff8e 	bl	8004e18 <sodium_misuse>
 8005efc:	2e00      	cmp	r6, #0
 8005efe:	d0fb      	beq.n	8005ef8 <crypto_generichash_blake2b__blake2b_salt_personal+0x2e>
 8005f00:	1e69      	subs	r1, r5, #1
 8005f02:	293f      	cmp	r1, #63	; 0x3f
 8005f04:	d8f8      	bhi.n	8005ef8 <crypto_generichash_blake2b__blake2b_salt_personal+0x2e>
 8005f06:	b942      	cbnz	r2, 8005f1a <crypto_generichash_blake2b__blake2b_salt_personal+0x50>
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1f5      	bne.n	8005ef8 <crypto_generichash_blake2b__blake2b_salt_personal+0x2e>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	4673      	mov	r3, lr
 8005f10:	4629      	mov	r1, r5
 8005f12:	4620      	mov	r0, r4
 8005f14:	f7ff fd82 	bl	8005a1c <crypto_generichash_blake2b__init_salt_personal>
 8005f18:	e009      	b.n	8005f2e <crypto_generichash_blake2b__blake2b_salt_personal+0x64>
 8005f1a:	2b40      	cmp	r3, #64	; 0x40
 8005f1c:	d8ec      	bhi.n	8005ef8 <crypto_generichash_blake2b__blake2b_salt_personal+0x2e>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0f4      	beq.n	8005f0c <crypto_generichash_blake2b__blake2b_salt_personal+0x42>
 8005f22:	e88d 4001 	stmia.w	sp, {r0, lr}
 8005f26:	4629      	mov	r1, r5
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f7ff fe88 	bl	8005c3e <crypto_generichash_blake2b__init_key_salt_personal>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	dbe2      	blt.n	8005ef8 <crypto_generichash_blake2b__blake2b_salt_personal+0x2e>
 8005f32:	4642      	mov	r2, r8
 8005f34:	464b      	mov	r3, r9
 8005f36:	4651      	mov	r1, sl
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f7ff fdc3 	bl	8005ac4 <crypto_generichash_blake2b__update>
 8005f3e:	462a      	mov	r2, r5
 8005f40:	4631      	mov	r1, r6
 8005f42:	4620      	mov	r0, r4
 8005f44:	f7ff fef4 	bl	8005d30 <crypto_generichash_blake2b__final>
 8005f48:	2000      	movs	r0, #0
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005f50 <crypto_generichash_blake2b__pick_best_implementation>:
 8005f50:	4b04      	ldr	r3, [pc, #16]	; (8005f64 <crypto_generichash_blake2b__pick_best_implementation+0x14>)
 8005f52:	4a05      	ldr	r2, [pc, #20]	; (8005f68 <crypto_generichash_blake2b__pick_best_implementation+0x18>)
 8005f54:	447b      	add	r3, pc
 8005f56:	2000      	movs	r0, #0
 8005f58:	589a      	ldr	r2, [r3, r2]
 8005f5a:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <crypto_generichash_blake2b__pick_best_implementation+0x1c>)
 8005f5c:	447b      	add	r3, pc
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	17ffaf3c 	.word	0x17ffaf3c
 8005f68:	00000004 	.word	0x00000004
 8005f6c:	17ffa55c 	.word	0x17ffa55c

08005f70 <crypto_onetimeauth_poly1305>:
 8005f70:	b410      	push	{r4}
 8005f72:	4c04      	ldr	r4, [pc, #16]	; (8005f84 <crypto_onetimeauth_poly1305+0x14>)
 8005f74:	447c      	add	r4, pc
 8005f76:	6824      	ldr	r4, [r4, #0]
 8005f78:	6824      	ldr	r4, [r4, #0]
 8005f7a:	46a4      	mov	ip, r4
 8005f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f80:	4760      	bx	ip
 8005f82:	bf00      	nop
 8005f84:	17ffa548 	.word	0x17ffa548

08005f88 <crypto_onetimeauth_poly1305_verify>:
 8005f88:	b410      	push	{r4}
 8005f8a:	4c04      	ldr	r4, [pc, #16]	; (8005f9c <crypto_onetimeauth_poly1305_verify+0x14>)
 8005f8c:	447c      	add	r4, pc
 8005f8e:	6824      	ldr	r4, [r4, #0]
 8005f90:	6864      	ldr	r4, [r4, #4]
 8005f92:	46a4      	mov	ip, r4
 8005f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f98:	4760      	bx	ip
 8005f9a:	bf00      	nop
 8005f9c:	17ffa530 	.word	0x17ffa530

08005fa0 <crypto_onetimeauth_poly1305_init>:
 8005fa0:	4b02      	ldr	r3, [pc, #8]	; (8005fac <crypto_onetimeauth_poly1305_init+0xc>)
 8005fa2:	447b      	add	r3, pc
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	4718      	bx	r3
 8005faa:	bf00      	nop
 8005fac:	17ffa51a 	.word	0x17ffa51a

08005fb0 <crypto_onetimeauth_poly1305_update>:
 8005fb0:	b410      	push	{r4}
 8005fb2:	4c04      	ldr	r4, [pc, #16]	; (8005fc4 <crypto_onetimeauth_poly1305_update+0x14>)
 8005fb4:	447c      	add	r4, pc
 8005fb6:	6824      	ldr	r4, [r4, #0]
 8005fb8:	68e4      	ldr	r4, [r4, #12]
 8005fba:	46a4      	mov	ip, r4
 8005fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fc0:	4760      	bx	ip
 8005fc2:	bf00      	nop
 8005fc4:	17ffa508 	.word	0x17ffa508

08005fc8 <crypto_onetimeauth_poly1305_final>:
 8005fc8:	4b02      	ldr	r3, [pc, #8]	; (8005fd4 <crypto_onetimeauth_poly1305_final+0xc>)
 8005fca:	447b      	add	r3, pc
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	4718      	bx	r3
 8005fd2:	bf00      	nop
 8005fd4:	17ffa4f2 	.word	0x17ffa4f2

08005fd8 <crypto_onetimeauth_poly1305_bytes>:
 8005fd8:	2010      	movs	r0, #16
 8005fda:	4770      	bx	lr

08005fdc <crypto_onetimeauth_poly1305_keybytes>:
 8005fdc:	2020      	movs	r0, #32
 8005fde:	4770      	bx	lr

08005fe0 <crypto_onetimeauth_poly1305_statebytes>:
 8005fe0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005fe4:	4770      	bx	lr

08005fe6 <crypto_onetimeauth_poly1305_keygen>:
 8005fe6:	2120      	movs	r1, #32
 8005fe8:	f7fe be94 	b.w	8004d14 <randombytes_buf>

08005fec <_crypto_onetimeauth_poly1305_pick_best_implementation>:
 8005fec:	4b04      	ldr	r3, [pc, #16]	; (8006000 <_crypto_onetimeauth_poly1305_pick_best_implementation+0x14>)
 8005fee:	4a05      	ldr	r2, [pc, #20]	; (8006004 <_crypto_onetimeauth_poly1305_pick_best_implementation+0x18>)
 8005ff0:	447b      	add	r3, pc
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	589a      	ldr	r2, [r3, r2]
 8005ff6:	4b04      	ldr	r3, [pc, #16]	; (8006008 <_crypto_onetimeauth_poly1305_pick_best_implementation+0x1c>)
 8005ff8:	447b      	add	r3, pc
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	17ffaea0 	.word	0x17ffaea0
 8006004:	00000008 	.word	0x00000008
 8006008:	17ffa4c4 	.word	0x17ffa4c4

0800600c <poly1305_blocks>:
 800600c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006010:	b093      	sub	sp, #76	; 0x4c
 8006012:	e890 4400 	ldmia.w	r0, {sl, lr}
 8006016:	9208      	str	r2, [sp, #32]
 8006018:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 800601c:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8006020:	9111      	str	r1, [sp, #68]	; 0x44
 8006022:	2a00      	cmp	r2, #0
 8006024:	bf14      	ite	ne
 8006026:	2200      	movne	r2, #0
 8006028:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
 800602c:	9209      	str	r2, [sp, #36]	; 0x24
 800602e:	68c2      	ldr	r2, [r0, #12]
 8006030:	9204      	str	r2, [sp, #16]
 8006032:	6902      	ldr	r2, [r0, #16]
 8006034:	9206      	str	r2, [sp, #24]
 8006036:	eb0e 028e 	add.w	r2, lr, lr, lsl #2
 800603a:	9210      	str	r2, [sp, #64]	; 0x40
 800603c:	eb0c 028c 	add.w	r2, ip, ip, lsl #2
 8006040:	9207      	str	r2, [sp, #28]
 8006042:	9a04      	ldr	r2, [sp, #16]
 8006044:	9c08      	ldr	r4, [sp, #32]
 8006046:	6945      	ldr	r5, [r0, #20]
 8006048:	f8d0 8018 	ldr.w	r8, [r0, #24]
 800604c:	9400      	str	r4, [sp, #0]
 800604e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006052:	9205      	str	r2, [sp, #20]
 8006054:	9a06      	ldr	r2, [sp, #24]
 8006056:	9301      	str	r3, [sp, #4]
 8006058:	f100 011c 	add.w	r1, r0, #28
 800605c:	eb02 0b82 	add.w	fp, r2, r2, lsl #2
 8006060:	c946      	ldmia	r1, {r1, r2, r6}
 8006062:	9b08      	ldr	r3, [sp, #32]
 8006064:	9c00      	ldr	r4, [sp, #0]
 8006066:	1b1f      	subs	r7, r3, r4
 8006068:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800606a:	441f      	add	r7, r3
 800606c:	e9dd 3400 	ldrd	r3, r4, [sp]
 8006070:	2c00      	cmp	r4, #0
 8006072:	bf08      	it	eq
 8006074:	2b10      	cmpeq	r3, #16
 8006076:	d208      	bcs.n	800608a <poly1305_blocks+0x7e>
 8006078:	6145      	str	r5, [r0, #20]
 800607a:	f8c0 8018 	str.w	r8, [r0, #24]
 800607e:	61c1      	str	r1, [r0, #28]
 8006080:	6202      	str	r2, [r0, #32]
 8006082:	6246      	str	r6, [r0, #36]	; 0x24
 8006084:	b013      	add	sp, #76	; 0x4c
 8006086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608a:	f8d7 4006 	ldr.w	r4, [r7, #6]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	f3c4 1419 	ubfx	r4, r4, #4, #26
 8006094:	440c      	add	r4, r1
 8006096:	f8d7 1009 	ldr.w	r1, [r7, #9]
 800609a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800609e:	441d      	add	r5, r3
 80060a0:	eb02 1291 	add.w	r2, r2, r1, lsr #6
 80060a4:	f8d7 3003 	ldr.w	r3, [r7, #3]
 80060a8:	68f9      	ldr	r1, [r7, #12]
 80060aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80060ac:	ea47 2111 	orr.w	r1, r7, r1, lsr #8
 80060b0:	4431      	add	r1, r6
 80060b2:	9e07      	ldr	r6, [sp, #28]
 80060b4:	f3c3 0399 	ubfx	r3, r3, #2, #26
 80060b8:	fba2 6706 	umull	r6, r7, r2, r6
 80060bc:	4443      	add	r3, r8
 80060be:	fbea 6705 	umlal	r6, r7, sl, r5
 80060c2:	9302      	str	r3, [sp, #8]
 80060c4:	fbeb 6703 	umlal	r6, r7, fp, r3
 80060c8:	9b05      	ldr	r3, [sp, #20]
 80060ca:	fbe3 6704 	umlal	r6, r7, r3, r4
 80060ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060d0:	fbe3 6701 	umlal	r6, r7, r3, r1
 80060d4:	9b05      	ldr	r3, [sp, #20]
 80060d6:	46b0      	mov	r8, r6
 80060d8:	46b9      	mov	r9, r7
 80060da:	fba2 6703 	umull	r6, r7, r2, r3
 80060de:	9b02      	ldr	r3, [sp, #8]
 80060e0:	fbee 6705 	umlal	r6, r7, lr, r5
 80060e4:	fbe3 670a 	umlal	r6, r7, r3, sl
 80060e8:	9b07      	ldr	r3, [sp, #28]
 80060ea:	fbe4 670b 	umlal	r6, r7, r4, fp
 80060ee:	fbe1 6703 	umlal	r6, r7, r1, r3
 80060f2:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80060f6:	9b02      	ldr	r3, [sp, #8]
 80060f8:	fbab 6702 	umull	r6, r7, fp, r2
 80060fc:	fbec 6705 	umlal	r6, r7, ip, r5
 8006100:	fbee 6703 	umlal	r6, r7, lr, r3
 8006104:	9b05      	ldr	r3, [sp, #20]
 8006106:	fbe4 670a 	umlal	r6, r7, r4, sl
 800610a:	fbe1 6703 	umlal	r6, r7, r1, r3
 800610e:	9b04      	ldr	r3, [sp, #16]
 8006110:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 8006114:	fbaa 6702 	umull	r6, r7, sl, r2
 8006118:	fbe3 6705 	umlal	r6, r7, r3, r5
 800611c:	9b02      	ldr	r3, [sp, #8]
 800611e:	fbec 6703 	umlal	r6, r7, ip, r3
 8006122:	fbee 6704 	umlal	r6, r7, lr, r4
 8006126:	fbe1 670b 	umlal	r6, r7, r1, fp
 800612a:	9b06      	ldr	r3, [sp, #24]
 800612c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8006130:	fba2 670e 	umull	r6, r7, r2, lr
 8006134:	fbe3 6705 	umlal	r6, r7, r3, r5
 8006138:	9a02      	ldr	r2, [sp, #8]
 800613a:	9b04      	ldr	r3, [sp, #16]
 800613c:	fbe3 6702 	umlal	r6, r7, r3, r2
 8006140:	fbec 6704 	umlal	r6, r7, ip, r4
 8006144:	fbe1 670a 	umlal	r6, r7, r1, sl
 8006148:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800614c:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006150:	ea4f 6398 	mov.w	r3, r8, lsr #26
 8006154:	ea43 1389 	orr.w	r3, r3, r9, lsl #6
 8006158:	18f6      	adds	r6, r6, r3
 800615a:	f147 0700 	adc.w	r7, r7, #0
 800615e:	0eb3      	lsrs	r3, r6, #26
 8006160:	f026 447c 	bic.w	r4, r6, #4227858432	; 0xfc000000
 8006164:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8006168:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 800616c:	18f6      	adds	r6, r6, r3
 800616e:	f147 0700 	adc.w	r7, r7, #0
 8006172:	0eb3      	lsrs	r3, r6, #26
 8006174:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8006178:	f026 417c 	bic.w	r1, r6, #4227858432	; 0xfc000000
 800617c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8006180:	f028 457c 	bic.w	r5, r8, #4227858432	; 0xfc000000
 8006184:	18f6      	adds	r6, r6, r3
 8006186:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800618a:	f147 0700 	adc.w	r7, r7, #0
 800618e:	0eb3      	lsrs	r3, r6, #26
 8006190:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8006194:	eb18 0803 	adds.w	r8, r8, r3
 8006198:	f149 0900 	adc.w	r9, r9, #0
 800619c:	ea4f 6398 	mov.w	r3, r8, lsr #26
 80061a0:	ea43 1389 	orr.w	r3, r3, r9, lsl #6
 80061a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80061a8:	442b      	add	r3, r5
 80061aa:	f026 427c 	bic.w	r2, r6, #4227858432	; 0xfc000000
 80061ae:	f023 457c 	bic.w	r5, r3, #4227858432	; 0xfc000000
 80061b2:	f028 467c 	bic.w	r6, r8, #4227858432	; 0xfc000000
 80061b6:	eb04 6893 	add.w	r8, r4, r3, lsr #26
 80061ba:	e9dd 3400 	ldrd	r3, r4, [sp]
 80061be:	3b10      	subs	r3, #16
 80061c0:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
 80061c4:	e9cd 3400 	strd	r3, r4, [sp]
 80061c8:	e74b      	b.n	8006062 <poly1305_blocks+0x56>

080061ca <poly1305_update>:
 80061ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ce:	e9d0 890e 	ldrd	r8, r9, [r0, #56]	; 0x38
 80061d2:	461d      	mov	r5, r3
 80061d4:	ea58 0309 	orrs.w	r3, r8, r9
 80061d8:	4607      	mov	r7, r0
 80061da:	460e      	mov	r6, r1
 80061dc:	4614      	mov	r4, r2
 80061de:	d034      	beq.n	800624a <poly1305_update+0x80>
 80061e0:	2010      	movs	r0, #16
 80061e2:	ebb0 0008 	subs.w	r0, r0, r8
 80061e6:	f04f 0100 	mov.w	r1, #0
 80061ea:	eb61 0109 	sbc.w	r1, r1, r9
 80061ee:	42a9      	cmp	r1, r5
 80061f0:	bf08      	it	eq
 80061f2:	4290      	cmpeq	r0, r2
 80061f4:	bf38      	it	cc
 80061f6:	4602      	movcc	r2, r0
 80061f8:	462b      	mov	r3, r5
 80061fa:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 80061fe:	bf38      	it	cc
 8006200:	460b      	movcc	r3, r1
 8006202:	f108 013f 	add.w	r1, r8, #63	; 0x3f
 8006206:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800620a:	4439      	add	r1, r7
 800620c:	4696      	mov	lr, r2
 800620e:	4430      	add	r0, r6
 8006210:	4584      	cmp	ip, r0
 8006212:	d143      	bne.n	800629c <poly1305_update+0xd2>
 8006214:	eb18 0802 	adds.w	r8, r8, r2
 8006218:	eb49 0903 	adc.w	r9, r9, r3
 800621c:	f1b9 0f00 	cmp.w	r9, #0
 8006220:	bf08      	it	eq
 8006222:	f1b8 0f10 	cmpeq.w	r8, #16
 8006226:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800622a:	d335      	bcc.n	8006298 <poly1305_update+0xce>
 800622c:	1aa4      	subs	r4, r4, r2
 800622e:	eb65 0503 	sbc.w	r5, r5, r3
 8006232:	2210      	movs	r2, #16
 8006234:	2300      	movs	r3, #0
 8006236:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800623a:	4638      	mov	r0, r7
 800623c:	4476      	add	r6, lr
 800623e:	f7ff fee5 	bl	800600c <poly1305_blocks>
 8006242:	2200      	movs	r2, #0
 8006244:	2300      	movs	r3, #0
 8006246:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800624a:	2d00      	cmp	r5, #0
 800624c:	bf08      	it	eq
 800624e:	2c10      	cmpeq	r4, #16
 8006250:	d30c      	bcc.n	800626c <poly1305_update+0xa2>
 8006252:	f024 080f 	bic.w	r8, r4, #15
 8006256:	462b      	mov	r3, r5
 8006258:	4631      	mov	r1, r6
 800625a:	4642      	mov	r2, r8
 800625c:	4638      	mov	r0, r7
 800625e:	f7ff fed5 	bl	800600c <poly1305_blocks>
 8006262:	ebb4 0408 	subs.w	r4, r4, r8
 8006266:	4446      	add	r6, r8
 8006268:	eb65 0505 	sbc.w	r5, r5, r5
 800626c:	ea54 0305 	orrs.w	r3, r4, r5
 8006270:	d012      	beq.n	8006298 <poly1305_update+0xce>
 8006272:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006276:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 800627a:	f100 033f 	add.w	r3, r0, #63	; 0x3f
 800627e:	1e72      	subs	r2, r6, #1
 8006280:	443b      	add	r3, r7
 8006282:	4476      	add	r6, lr
 8006284:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 8006288:	f803 ef01 	strb.w	lr, [r3, #1]!
 800628c:	42b2      	cmp	r2, r6
 800628e:	d1f9      	bne.n	8006284 <poly1305_update+0xba>
 8006290:	1824      	adds	r4, r4, r0
 8006292:	414d      	adcs	r5, r1
 8006294:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 8006298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800629c:	f81c af01 	ldrb.w	sl, [ip, #1]!
 80062a0:	f801 af01 	strb.w	sl, [r1, #1]!
 80062a4:	e7b4      	b.n	8006210 <poly1305_update+0x46>

080062a6 <crypto_onetimeauth_poly1305_donna_update>:
 80062a6:	b508      	push	{r3, lr}
 80062a8:	f7ff ff8f 	bl	80061ca <poly1305_update>
 80062ac:	2000      	movs	r0, #0
 80062ae:	bd08      	pop	{r3, pc}

080062b0 <poly1305_finish>:
 80062b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b4:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
 80062b8:	460d      	mov	r5, r1
 80062ba:	ea52 0103 	orrs.w	r1, r2, r3
 80062be:	b085      	sub	sp, #20
 80062c0:	4604      	mov	r4, r0
 80062c2:	d019      	beq.n	80062f8 <poly1305_finish+0x48>
 80062c4:	1881      	adds	r1, r0, r2
 80062c6:	2001      	movs	r0, #1
 80062c8:	f881 0040 	strb.w	r0, [r1, #64]	; 0x40
 80062cc:	f102 0140 	add.w	r1, r2, #64	; 0x40
 80062d0:	4421      	add	r1, r4
 80062d2:	2000      	movs	r0, #0
 80062d4:	3201      	adds	r2, #1
 80062d6:	f143 0300 	adc.w	r3, r3, #0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	bf08      	it	eq
 80062de:	2a10      	cmpeq	r2, #16
 80062e0:	f0c0 809b 	bcc.w	800641a <poly1305_finish+0x16a>
 80062e4:	2301      	movs	r3, #1
 80062e6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80062ea:	2210      	movs	r2, #16
 80062ec:	2300      	movs	r3, #0
 80062ee:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80062f2:	4620      	mov	r0, r4
 80062f4:	f7ff fe8a 	bl	800600c <poly1305_blocks>
 80062f8:	f104 0018 	add.w	r0, r4, #24
 80062fc:	c80d      	ldmia	r0, {r0, r2, r3}
 80062fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006300:	6966      	ldr	r6, [r4, #20]
 8006302:	eb02 6290 	add.w	r2, r2, r0, lsr #26
 8006306:	eb03 6392 	add.w	r3, r3, r2, lsr #26
 800630a:	eb01 6193 	add.w	r1, r1, r3, lsr #26
 800630e:	f021 477c 	bic.w	r7, r1, #4227858432	; 0xfc000000
 8006312:	0e89      	lsrs	r1, r1, #26
 8006314:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006318:	4431      	add	r1, r6
 800631a:	f020 487c 	bic.w	r8, r0, #4227858432	; 0xfc000000
 800631e:	f021 4b7c 	bic.w	fp, r1, #4227858432	; 0xfc000000
 8006322:	f023 407c 	bic.w	r0, r3, #4227858432	; 0xfc000000
 8006326:	eb08 6191 	add.w	r1, r8, r1, lsr #26
 800632a:	f10b 0305 	add.w	r3, fp, #5
 800632e:	f022 497c 	bic.w	r9, r2, #4227858432	; 0xfc000000
 8006332:	f023 4a7c 	bic.w	sl, r3, #4227858432	; 0xfc000000
 8006336:	eb01 6393 	add.w	r3, r1, r3, lsr #26
 800633a:	f023 487c 	bic.w	r8, r3, #4227858432	; 0xfc000000
 800633e:	eb09 6393 	add.w	r3, r9, r3, lsr #26
 8006342:	f107 427c 	add.w	r2, r7, #4227858432	; 0xfc000000
 8006346:	f023 4e7c 	bic.w	lr, r3, #4227858432	; 0xfc000000
 800634a:	eb00 6393 	add.w	r3, r0, r3, lsr #26
 800634e:	f023 4c7c 	bic.w	ip, r3, #4227858432	; 0xfc000000
 8006352:	eb02 6393 	add.w	r3, r2, r3, lsr #26
 8006356:	0fde      	lsrs	r6, r3, #31
 8006358:	1e72      	subs	r2, r6, #1
 800635a:	4276      	negs	r6, r6
 800635c:	ea06 0b0b 	and.w	fp, r6, fp
 8006360:	4031      	ands	r1, r6
 8006362:	4030      	ands	r0, r6
 8006364:	ea0a 0a02 	and.w	sl, sl, r2
 8006368:	ea08 0802 	and.w	r8, r8, r2
 800636c:	ea0c 0c02 	and.w	ip, ip, r2
 8006370:	ea4a 0a0b 	orr.w	sl, sl, fp
 8006374:	ea48 0801 	orr.w	r8, r8, r1
 8006378:	ea06 0909 	and.w	r9, r6, r9
 800637c:	ea4c 0c00 	orr.w	ip, ip, r0
 8006380:	ea0e 0e02 	and.w	lr, lr, r2
 8006384:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006386:	ea06 0107 	and.w	r1, r6, r7
 800638a:	ea4e 0e09 	orr.w	lr, lr, r9
 800638e:	ea4a 6688 	orr.w	r6, sl, r8, lsl #26
 8006392:	eb10 0a06 	adds.w	sl, r0, r6
 8006396:	ea4f 560e 	mov.w	r6, lr, lsl #20
 800639a:	ea46 1898 	orr.w	r8, r6, r8, lsr #6
 800639e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063a0:	9103      	str	r1, [sp, #12]
 80063a2:	f04f 0100 	mov.w	r1, #0
 80063a6:	f141 0b00 	adc.w	fp, r1, #0
 80063aa:	2700      	movs	r7, #0
 80063ac:	eb16 0608 	adds.w	r6, r6, r8
 80063b0:	f04f 0100 	mov.w	r1, #0
 80063b4:	f147 0700 	adc.w	r7, r7, #0
 80063b8:	eb16 080b 	adds.w	r8, r6, fp
 80063bc:	eb47 0901 	adc.w	r9, r7, r1
 80063c0:	4013      	ands	r3, r2
 80063c2:	9a03      	ldr	r2, [sp, #12]
 80063c4:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80063c6:	e9cd 8900 	strd	r8, r9, [sp]
 80063ca:	ea4f 308c 	mov.w	r0, ip, lsl #14
 80063ce:	ea40 3e1e 	orr.w	lr, r0, lr, lsr #12
 80063d2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80063d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80063d8:	f8c5 a000 	str.w	sl, [r5]
 80063dc:	4313      	orrs	r3, r2
 80063de:	eb16 060e 	adds.w	r6, r6, lr
 80063e2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80063e6:	f04f 0700 	mov.w	r7, #0
 80063ea:	f147 0700 	adc.w	r7, r7, #0
 80063ee:	ea43 4c9c 	orr.w	ip, r3, ip, lsr #18
 80063f2:	eb18 0806 	adds.w	r8, r8, r6
 80063f6:	eb41 0907 	adc.w	r9, r1, r7
 80063fa:	9b00      	ldr	r3, [sp, #0]
 80063fc:	606b      	str	r3, [r5, #4]
 80063fe:	eb10 000c 	adds.w	r0, r0, ip
 8006402:	eb19 0600 	adds.w	r6, r9, r0
 8006406:	2158      	movs	r1, #88	; 0x58
 8006408:	4620      	mov	r0, r4
 800640a:	f8c5 8008 	str.w	r8, [r5, #8]
 800640e:	60ee      	str	r6, [r5, #12]
 8006410:	b005      	add	sp, #20
 8006412:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006416:	f7fe bd68 	b.w	8004eea <sodium_memzero>
 800641a:	f801 0f01 	strb.w	r0, [r1, #1]!
 800641e:	e759      	b.n	80062d4 <poly1305_finish+0x24>

08006420 <crypto_onetimeauth_poly1305_donna_final>:
 8006420:	b508      	push	{r3, lr}
 8006422:	f7ff ff45 	bl	80062b0 <poly1305_finish>
 8006426:	2000      	movs	r0, #0
 8006428:	bd08      	pop	{r3, pc}
	...

0800642c <crypto_onetimeauth_poly1305_donna>:
 800642c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006430:	af00      	add	r7, sp, #0
 8006432:	4606      	mov	r6, r0
 8006434:	6a38      	ldr	r0, [r7, #32]
 8006436:	b0a6      	sub	sp, #152	; 0x98
 8006438:	6805      	ldr	r5, [r0, #0]
 800643a:	f8d0 e003 	ldr.w	lr, [r0, #3]
 800643e:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8006442:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8006446:	f025 457c 	bic.w	r5, r5, #4227858432	; 0xfc000000
 800644a:	6025      	str	r5, [r4, #0]
 800644c:	4d1d      	ldr	r5, [pc, #116]	; (80064c4 <crypto_onetimeauth_poly1305_donna+0x98>)
 800644e:	ea05 059e 	and.w	r5, r5, lr, lsr #2
 8006452:	6065      	str	r5, [r4, #4]
 8006454:	f8d0 e006 	ldr.w	lr, [r0, #6]
 8006458:	4d1b      	ldr	r5, [pc, #108]	; (80064c8 <crypto_onetimeauth_poly1305_donna+0x9c>)
 800645a:	ea05 151e 	and.w	r5, r5, lr, lsr #4
 800645e:	60a5      	str	r5, [r4, #8]
 8006460:	f8d0 e009 	ldr.w	lr, [r0, #9]
 8006464:	4d19      	ldr	r5, [pc, #100]	; (80064cc <crypto_onetimeauth_poly1305_donna+0xa0>)
 8006466:	ea05 159e 	and.w	r5, r5, lr, lsr #6
 800646a:	60e5      	str	r5, [r4, #12]
 800646c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8006470:	68c5      	ldr	r5, [r0, #12]
 8006472:	f8c4 e028 	str.w	lr, [r4, #40]	; 0x28
 8006476:	f8d0 e014 	ldr.w	lr, [r0, #20]
 800647a:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
 800647e:	f3c5 2513 	ubfx	r5, r5, #8, #20
 8006482:	f8d0 e018 	ldr.w	lr, [r0, #24]
 8006486:	69c0      	ldr	r0, [r0, #28]
 8006488:	6125      	str	r5, [r4, #16]
 800648a:	6360      	str	r0, [r4, #52]	; 0x34
 800648c:	2500      	movs	r5, #0
 800648e:	4620      	mov	r0, r4
 8006490:	f04f 0800 	mov.w	r8, #0
 8006494:	f04f 0900 	mov.w	r9, #0
 8006498:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
 800649c:	6165      	str	r5, [r4, #20]
 800649e:	61a5      	str	r5, [r4, #24]
 80064a0:	61e5      	str	r5, [r4, #28]
 80064a2:	6225      	str	r5, [r4, #32]
 80064a4:	6265      	str	r5, [r4, #36]	; 0x24
 80064a6:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
 80064aa:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80064ae:	f7ff fe8c 	bl	80061ca <poly1305_update>
 80064b2:	4620      	mov	r0, r4
 80064b4:	4631      	mov	r1, r6
 80064b6:	f7ff fefb 	bl	80062b0 <poly1305_finish>
 80064ba:	4628      	mov	r0, r5
 80064bc:	46bd      	mov	sp, r7
 80064be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064c2:	bf00      	nop
 80064c4:	03ffff03 	.word	0x03ffff03
 80064c8:	03ffc0ff 	.word	0x03ffc0ff
 80064cc:	03f03fff 	.word	0x03f03fff

080064d0 <crypto_onetimeauth_poly1305_donna_verify>:
 80064d0:	b530      	push	{r4, r5, lr}
 80064d2:	b087      	sub	sp, #28
 80064d4:	4605      	mov	r5, r0
 80064d6:	ac02      	add	r4, sp, #8
 80064d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80064da:	9000      	str	r0, [sp, #0]
 80064dc:	4620      	mov	r0, r4
 80064de:	f7ff ffa5 	bl	800642c <crypto_onetimeauth_poly1305_donna>
 80064e2:	4621      	mov	r1, r4
 80064e4:	4628      	mov	r0, r5
 80064e6:	f000 fb7f 	bl	8006be8 <crypto_verify_16>
 80064ea:	b007      	add	sp, #28
 80064ec:	bd30      	pop	{r4, r5, pc}
	...

080064f0 <crypto_onetimeauth_poly1305_donna_init>:
 80064f0:	680a      	ldr	r2, [r1, #0]
 80064f2:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 80064f6:	b530      	push	{r4, r5, lr}
 80064f8:	6002      	str	r2, [r0, #0]
 80064fa:	4603      	mov	r3, r0
 80064fc:	4a15      	ldr	r2, [pc, #84]	; (8006554 <crypto_onetimeauth_poly1305_donna_init+0x64>)
 80064fe:	f8d1 0003 	ldr.w	r0, [r1, #3]
 8006502:	ea02 0290 	and.w	r2, r2, r0, lsr #2
 8006506:	605a      	str	r2, [r3, #4]
 8006508:	f8d1 0006 	ldr.w	r0, [r1, #6]
 800650c:	4a12      	ldr	r2, [pc, #72]	; (8006558 <crypto_onetimeauth_poly1305_donna_init+0x68>)
 800650e:	ea02 1210 	and.w	r2, r2, r0, lsr #4
 8006512:	609a      	str	r2, [r3, #8]
 8006514:	f8d1 0009 	ldr.w	r0, [r1, #9]
 8006518:	4a10      	ldr	r2, [pc, #64]	; (800655c <crypto_onetimeauth_poly1305_donna_init+0x6c>)
 800651a:	ea02 1290 	and.w	r2, r2, r0, lsr #6
 800651e:	60da      	str	r2, [r3, #12]
 8006520:	68ca      	ldr	r2, [r1, #12]
 8006522:	2000      	movs	r0, #0
 8006524:	f3c2 2213 	ubfx	r2, r2, #8, #20
 8006528:	611a      	str	r2, [r3, #16]
 800652a:	6158      	str	r0, [r3, #20]
 800652c:	6198      	str	r0, [r3, #24]
 800652e:	61d8      	str	r0, [r3, #28]
 8006530:	6218      	str	r0, [r3, #32]
 8006532:	6258      	str	r0, [r3, #36]	; 0x24
 8006534:	690a      	ldr	r2, [r1, #16]
 8006536:	629a      	str	r2, [r3, #40]	; 0x28
 8006538:	694a      	ldr	r2, [r1, #20]
 800653a:	62da      	str	r2, [r3, #44]	; 0x2c
 800653c:	698a      	ldr	r2, [r1, #24]
 800653e:	631a      	str	r2, [r3, #48]	; 0x30
 8006540:	69ca      	ldr	r2, [r1, #28]
 8006542:	635a      	str	r2, [r3, #52]	; 0x34
 8006544:	2400      	movs	r4, #0
 8006546:	2500      	movs	r5, #0
 8006548:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
 800654c:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
 8006550:	bd30      	pop	{r4, r5, pc}
 8006552:	bf00      	nop
 8006554:	03ffff03 	.word	0x03ffff03
 8006558:	03ffc0ff 	.word	0x03ffc0ff
 800655c:	03f03fff 	.word	0x03f03fff

08006560 <crypto_stream_chacha20_keybytes>:
 8006560:	2020      	movs	r0, #32
 8006562:	4770      	bx	lr

08006564 <crypto_stream_chacha20_noncebytes>:
 8006564:	2008      	movs	r0, #8
 8006566:	4770      	bx	lr

08006568 <crypto_stream_chacha20_messagebytes_max>:
 8006568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800656c:	4770      	bx	lr

0800656e <crypto_stream_chacha20_ietf_keybytes>:
 800656e:	2020      	movs	r0, #32
 8006570:	4770      	bx	lr

08006572 <crypto_stream_chacha20_ietf_noncebytes>:
 8006572:	200c      	movs	r0, #12
 8006574:	4770      	bx	lr

08006576 <crypto_stream_chacha20_ietf_messagebytes_max>:
 8006576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800657a:	4770      	bx	lr

0800657c <crypto_stream_chacha20>:
 800657c:	b410      	push	{r4}
 800657e:	4903      	ldr	r1, [pc, #12]	; (800658c <crypto_stream_chacha20+0x10>)
 8006580:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006584:	4479      	add	r1, pc
 8006586:	6809      	ldr	r1, [r1, #0]
 8006588:	6809      	ldr	r1, [r1, #0]
 800658a:	4708      	bx	r1
 800658c:	17ff9f50 	.word	0x17ff9f50

08006590 <crypto_stream_chacha20_ietf>:
 8006590:	b410      	push	{r4}
 8006592:	4903      	ldr	r1, [pc, #12]	; (80065a0 <crypto_stream_chacha20_ietf+0x10>)
 8006594:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006598:	4479      	add	r1, pc
 800659a:	6809      	ldr	r1, [r1, #0]
 800659c:	6849      	ldr	r1, [r1, #4]
 800659e:	4708      	bx	r1
 80065a0:	17ff9f3c 	.word	0x17ff9f3c

080065a4 <crypto_stream_chacha20_xor_ic>:
 80065a4:	b4f0      	push	{r4, r5, r6, r7}
 80065a6:	4c03      	ldr	r4, [pc, #12]	; (80065b4 <crypto_stream_chacha20_xor_ic+0x10>)
 80065a8:	447c      	add	r4, pc
 80065aa:	6824      	ldr	r4, [r4, #0]
 80065ac:	68a4      	ldr	r4, [r4, #8]
 80065ae:	46a4      	mov	ip, r4
 80065b0:	bcf0      	pop	{r4, r5, r6, r7}
 80065b2:	4760      	bx	ip
 80065b4:	17ff9f2c 	.word	0x17ff9f2c

080065b8 <crypto_stream_chacha20_ietf_xor_ic>:
 80065b8:	b430      	push	{r4, r5}
 80065ba:	4c03      	ldr	r4, [pc, #12]	; (80065c8 <crypto_stream_chacha20_ietf_xor_ic+0x10>)
 80065bc:	447c      	add	r4, pc
 80065be:	6824      	ldr	r4, [r4, #0]
 80065c0:	68e4      	ldr	r4, [r4, #12]
 80065c2:	46a4      	mov	ip, r4
 80065c4:	bc30      	pop	{r4, r5}
 80065c6:	4760      	bx	ip
 80065c8:	17ff9f18 	.word	0x17ff9f18

080065cc <crypto_stream_chacha20_xor>:
 80065cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ce:	4c08      	ldr	r4, [pc, #32]	; (80065f0 <crypto_stream_chacha20_xor+0x24>)
 80065d0:	b087      	sub	sp, #28
 80065d2:	447c      	add	r4, pc
 80065d4:	2600      	movs	r6, #0
 80065d6:	2700      	movs	r7, #0
 80065d8:	6824      	ldr	r4, [r4, #0]
 80065da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80065dc:	9504      	str	r5, [sp, #16]
 80065de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80065e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065e4:	9500      	str	r5, [sp, #0]
 80065e6:	68a4      	ldr	r4, [r4, #8]
 80065e8:	47a0      	blx	r4
 80065ea:	b007      	add	sp, #28
 80065ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ee:	bf00      	nop
 80065f0:	17ff9f02 	.word	0x17ff9f02

080065f4 <crypto_stream_chacha20_ietf_xor>:
 80065f4:	b530      	push	{r4, r5, lr}
 80065f6:	4c07      	ldr	r4, [pc, #28]	; (8006614 <crypto_stream_chacha20_ietf_xor+0x20>)
 80065f8:	b085      	sub	sp, #20
 80065fa:	447c      	add	r4, pc
 80065fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80065fe:	6824      	ldr	r4, [r4, #0]
 8006600:	9502      	str	r5, [sp, #8]
 8006602:	2500      	movs	r5, #0
 8006604:	9501      	str	r5, [sp, #4]
 8006606:	9d08      	ldr	r5, [sp, #32]
 8006608:	9500      	str	r5, [sp, #0]
 800660a:	68e4      	ldr	r4, [r4, #12]
 800660c:	47a0      	blx	r4
 800660e:	b005      	add	sp, #20
 8006610:	bd30      	pop	{r4, r5, pc}
 8006612:	bf00      	nop
 8006614:	17ff9eda 	.word	0x17ff9eda

08006618 <crypto_stream_chacha20_keygen>:
 8006618:	2120      	movs	r1, #32
 800661a:	f7fe bb7b 	b.w	8004d14 <randombytes_buf>

0800661e <crypto_stream_chacha20_ietf_keygen>:
 800661e:	f7ff bffb 	b.w	8006618 <crypto_stream_chacha20_keygen>
	...

08006624 <_crypto_stream_chacha20_pick_best_implementation>:
 8006624:	4b04      	ldr	r3, [pc, #16]	; (8006638 <_crypto_stream_chacha20_pick_best_implementation+0x14>)
 8006626:	4a05      	ldr	r2, [pc, #20]	; (800663c <_crypto_stream_chacha20_pick_best_implementation+0x18>)
 8006628:	447b      	add	r3, pc
 800662a:	2000      	movs	r0, #0
 800662c:	589a      	ldr	r2, [r3, r2]
 800662e:	4b04      	ldr	r3, [pc, #16]	; (8006640 <_crypto_stream_chacha20_pick_best_implementation+0x1c>)
 8006630:	447b      	add	r3, pc
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	17ffa868 	.word	0x17ffa868
 800663c:	00000010 	.word	0x00000010
 8006640:	17ff9ea4 	.word	0x17ff9ea4

08006644 <chacha_keysetup>:
 8006644:	4b0e      	ldr	r3, [pc, #56]	; (8006680 <chacha_keysetup+0x3c>)
 8006646:	4a0f      	ldr	r2, [pc, #60]	; (8006684 <chacha_keysetup+0x40>)
 8006648:	e880 000c 	stmia.w	r0, {r2, r3}
 800664c:	4b0e      	ldr	r3, [pc, #56]	; (8006688 <chacha_keysetup+0x44>)
 800664e:	6083      	str	r3, [r0, #8]
 8006650:	f1a3 6364 	sub.w	r3, r3, #239075328	; 0xe400000
 8006654:	f5a3 33e3 	sub.w	r3, r3, #116224	; 0x1c600
 8006658:	f5a3 73df 	sub.w	r3, r3, #446	; 0x1be
 800665c:	60c3      	str	r3, [r0, #12]
 800665e:	680b      	ldr	r3, [r1, #0]
 8006660:	6103      	str	r3, [r0, #16]
 8006662:	684b      	ldr	r3, [r1, #4]
 8006664:	6143      	str	r3, [r0, #20]
 8006666:	688b      	ldr	r3, [r1, #8]
 8006668:	6183      	str	r3, [r0, #24]
 800666a:	68cb      	ldr	r3, [r1, #12]
 800666c:	61c3      	str	r3, [r0, #28]
 800666e:	690b      	ldr	r3, [r1, #16]
 8006670:	6203      	str	r3, [r0, #32]
 8006672:	694b      	ldr	r3, [r1, #20]
 8006674:	6243      	str	r3, [r0, #36]	; 0x24
 8006676:	698b      	ldr	r3, [r1, #24]
 8006678:	6283      	str	r3, [r0, #40]	; 0x28
 800667a:	69cb      	ldr	r3, [r1, #28]
 800667c:	62c3      	str	r3, [r0, #44]	; 0x2c
 800667e:	4770      	bx	lr
 8006680:	3320646e 	.word	0x3320646e
 8006684:	61707865 	.word	0x61707865
 8006688:	79622d32 	.word	0x79622d32

0800668c <chacha20_encrypt_bytes.part.0>:
 800668c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006690:	b0b1      	sub	sp, #196	; 0xc4
 8006692:	4614      	mov	r4, r2
 8006694:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
 8006698:	2b01      	cmp	r3, #1
 800669a:	bf08      	it	eq
 800669c:	2a00      	cmpeq	r2, #0
 800669e:	9001      	str	r0, [sp, #4]
 80066a0:	460d      	mov	r5, r1
 80066a2:	d301      	bcc.n	80066a8 <chacha20_encrypt_bytes.part.0+0x1c>
 80066a4:	f7fe fbb8 	bl	8004e18 <sodium_misuse>
 80066a8:	9b01      	ldr	r3, [sp, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	930a      	str	r3, [sp, #40]	; 0x28
 80066ae:	9b01      	ldr	r3, [sp, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80066b4:	9b01      	ldr	r3, [sp, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	930c      	str	r3, [sp, #48]	; 0x30
 80066ba:	9b01      	ldr	r3, [sp, #4]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	930d      	str	r3, [sp, #52]	; 0x34
 80066c0:	9b01      	ldr	r3, [sp, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	930e      	str	r3, [sp, #56]	; 0x38
 80066c6:	9b01      	ldr	r3, [sp, #4]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80066cc:	9b01      	ldr	r3, [sp, #4]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	9310      	str	r3, [sp, #64]	; 0x40
 80066d2:	9b01      	ldr	r3, [sp, #4]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	9311      	str	r3, [sp, #68]	; 0x44
 80066d8:	9b01      	ldr	r3, [sp, #4]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	9312      	str	r3, [sp, #72]	; 0x48
 80066de:	9b01      	ldr	r3, [sp, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80066e4:	9b01      	ldr	r3, [sp, #4]
 80066e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e8:	9314      	str	r3, [sp, #80]	; 0x50
 80066ea:	9b01      	ldr	r3, [sp, #4]
 80066ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ee:	9315      	str	r3, [sp, #84]	; 0x54
 80066f0:	9b01      	ldr	r3, [sp, #4]
 80066f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f4:	9303      	str	r3, [sp, #12]
 80066f6:	9b01      	ldr	r3, [sp, #4]
 80066f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fa:	9304      	str	r3, [sp, #16]
 80066fc:	9b01      	ldr	r3, [sp, #4]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	9316      	str	r3, [sp, #88]	; 0x58
 8006702:	9b01      	ldr	r3, [sp, #4]
 8006704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006706:	9317      	str	r3, [sp, #92]	; 0x5c
 8006708:	2300      	movs	r3, #0
 800670a:	931d      	str	r3, [sp, #116]	; 0x74
 800670c:	ab20      	add	r3, sp, #128	; 0x80
 800670e:	931f      	str	r3, [sp, #124]	; 0x7c
 8006710:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
 8006714:	2b00      	cmp	r3, #0
 8006716:	bf08      	it	eq
 8006718:	2a40      	cmpeq	r2, #64	; 0x40
 800671a:	d210      	bcs.n	800673e <chacha20_encrypt_bytes.part.0+0xb2>
 800671c:	2240      	movs	r2, #64	; 0x40
 800671e:	2100      	movs	r1, #0
 8006720:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8006722:	f004 fa61 	bl	800abe8 <memset>
 8006726:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8006728:	3a01      	subs	r2, #1
 800672a:	1e6b      	subs	r3, r5, #1
 800672c:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8006730:	4415      	add	r5, r2
 8006732:	429d      	cmp	r5, r3
 8006734:	f040 80bb 	bne.w	80068ae <chacha20_encrypt_bytes.part.0+0x222>
 8006738:	941d      	str	r4, [sp, #116]	; 0x74
 800673a:	ac20      	add	r4, sp, #128	; 0x80
 800673c:	4625      	mov	r5, r4
 800673e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006740:	9307      	str	r3, [sp, #28]
 8006742:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006744:	9309      	str	r3, [sp, #36]	; 0x24
 8006746:	9b04      	ldr	r3, [sp, #16]
 8006748:	9308      	str	r3, [sp, #32]
 800674a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800674c:	9306      	str	r3, [sp, #24]
 800674e:	aa10      	add	r2, sp, #64	; 0x40
 8006750:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006752:	9305      	str	r3, [sp, #20]
 8006754:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006758:	e892 060c 	ldmia.w	r2, {r2, r3, r9, sl}
 800675c:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
 8006760:	260b      	movs	r6, #11
 8006762:	9803      	ldr	r0, [sp, #12]
 8006764:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8006768:	990e      	ldr	r1, [sp, #56]	; 0x38
 800676a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800676c:	9602      	str	r6, [sp, #8]
 800676e:	9e02      	ldr	r6, [sp, #8]
 8006770:	3e01      	subs	r6, #1
 8006772:	9602      	str	r6, [sp, #8]
 8006774:	f040 80a0 	bne.w	80068b8 <chacha20_encrypt_bytes.part.0+0x22c>
 8006778:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800677a:	44b0      	add	r8, r6
 800677c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800677e:	44b4      	add	ip, r6
 8006780:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006782:	44b6      	add	lr, r6
 8006784:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8006786:	4437      	add	r7, r6
 8006788:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800678a:	4431      	add	r1, r6
 800678c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800678e:	44b3      	add	fp, r6
 8006790:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8006792:	4432      	add	r2, r6
 8006794:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8006796:	4433      	add	r3, r6
 8006798:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800679a:	9318      	str	r3, [sp, #96]	; 0x60
 800679c:	44b1      	add	r9, r6
 800679e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80067a0:	44b2      	add	sl, r6
 80067a2:	9e05      	ldr	r6, [sp, #20]
 80067a4:	4633      	mov	r3, r6
 80067a6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80067a8:	4433      	add	r3, r6
 80067aa:	9e06      	ldr	r6, [sp, #24]
 80067ac:	9305      	str	r3, [sp, #20]
 80067ae:	4633      	mov	r3, r6
 80067b0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80067b2:	4433      	add	r3, r6
 80067b4:	9e03      	ldr	r6, [sp, #12]
 80067b6:	9306      	str	r3, [sp, #24]
 80067b8:	4430      	add	r0, r6
 80067ba:	9019      	str	r0, [sp, #100]	; 0x64
 80067bc:	9e04      	ldr	r6, [sp, #16]
 80067be:	9808      	ldr	r0, [sp, #32]
 80067c0:	4430      	add	r0, r6
 80067c2:	9008      	str	r0, [sp, #32]
 80067c4:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80067c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067c8:	4430      	add	r0, r6
 80067ca:	9009      	str	r0, [sp, #36]	; 0x24
 80067cc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80067ce:	9807      	ldr	r0, [sp, #28]
 80067d0:	4430      	add	r0, r6
 80067d2:	4606      	mov	r6, r0
 80067d4:	6828      	ldr	r0, [r5, #0]
 80067d6:	ea80 0008 	eor.w	r0, r0, r8
 80067da:	9007      	str	r0, [sp, #28]
 80067dc:	6868      	ldr	r0, [r5, #4]
 80067de:	ea80 000c 	eor.w	r0, r0, ip
 80067e2:	901a      	str	r0, [sp, #104]	; 0x68
 80067e4:	68a8      	ldr	r0, [r5, #8]
 80067e6:	ea80 000e 	eor.w	r0, r0, lr
 80067ea:	901b      	str	r0, [sp, #108]	; 0x6c
 80067ec:	68e8      	ldr	r0, [r5, #12]
 80067ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80067f0:	f8d5 c028 	ldr.w	ip, [r5, #40]	; 0x28
 80067f4:	f8d5 e034 	ldr.w	lr, [r5, #52]	; 0x34
 80067f8:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38
 80067fc:	4078      	eors	r0, r7
 80067fe:	901c      	str	r0, [sp, #112]	; 0x70
 8006800:	6928      	ldr	r0, [r5, #16]
 8006802:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8006804:	4041      	eors	r1, r0
 8006806:	911e      	str	r1, [sp, #120]	; 0x78
 8006808:	6969      	ldr	r1, [r5, #20]
 800680a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800680c:	ea81 0b0b 	eor.w	fp, r1, fp
 8006810:	69a9      	ldr	r1, [r5, #24]
 8006812:	404a      	eors	r2, r1
 8006814:	69e9      	ldr	r1, [r5, #28]
 8006816:	404b      	eors	r3, r1
 8006818:	6a29      	ldr	r1, [r5, #32]
 800681a:	ea81 0909 	eor.w	r9, r1, r9
 800681e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8006820:	ea81 0a0a 	eor.w	sl, r1, sl
 8006824:	9905      	ldr	r1, [sp, #20]
 8006826:	ea8c 0c01 	eor.w	ip, ip, r1
 800682a:	9906      	ldr	r1, [sp, #24]
 800682c:	404f      	eors	r7, r1
 800682e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006830:	4048      	eors	r0, r1
 8006832:	9908      	ldr	r1, [sp, #32]
 8006834:	ea8e 0e01 	eor.w	lr, lr, r1
 8006838:	9909      	ldr	r1, [sp, #36]	; 0x24
 800683a:	ea88 0801 	eor.w	r8, r8, r1
 800683e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8006840:	4071      	eors	r1, r6
 8006842:	9e03      	ldr	r6, [sp, #12]
 8006844:	3601      	adds	r6, #1
 8006846:	9603      	str	r6, [sp, #12]
 8006848:	bf02      	ittt	eq
 800684a:	9e04      	ldreq	r6, [sp, #16]
 800684c:	3601      	addeq	r6, #1
 800684e:	9604      	streq	r6, [sp, #16]
 8006850:	9e07      	ldr	r6, [sp, #28]
 8006852:	6026      	str	r6, [r4, #0]
 8006854:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8006856:	6066      	str	r6, [r4, #4]
 8006858:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800685a:	60a6      	str	r6, [r4, #8]
 800685c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800685e:	60e6      	str	r6, [r4, #12]
 8006860:	61a2      	str	r2, [r4, #24]
 8006862:	61e3      	str	r3, [r4, #28]
 8006864:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
 8006868:	2b00      	cmp	r3, #0
 800686a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800686c:	6126      	str	r6, [r4, #16]
 800686e:	bf08      	it	eq
 8006870:	2a41      	cmpeq	r2, #65	; 0x41
 8006872:	f8c4 b014 	str.w	fp, [r4, #20]
 8006876:	f8c4 9020 	str.w	r9, [r4, #32]
 800687a:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
 800687e:	f8c4 c028 	str.w	ip, [r4, #40]	; 0x28
 8006882:	62e7      	str	r7, [r4, #44]	; 0x2c
 8006884:	6320      	str	r0, [r4, #48]	; 0x30
 8006886:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
 800688a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800688e:	63e1      	str	r1, [r4, #60]	; 0x3c
 8006890:	f080 80da 	bcs.w	8006a48 <chacha20_encrypt_bytes.part.0+0x3bc>
 8006894:	2b00      	cmp	r3, #0
 8006896:	bf08      	it	eq
 8006898:	2a40      	cmpeq	r2, #64	; 0x40
 800689a:	f040 80d0 	bne.w	8006a3e <chacha20_encrypt_bytes.part.0+0x3b2>
 800689e:	9a01      	ldr	r2, [sp, #4]
 80068a0:	9b03      	ldr	r3, [sp, #12]
 80068a2:	6313      	str	r3, [r2, #48]	; 0x30
 80068a4:	9b04      	ldr	r3, [sp, #16]
 80068a6:	6353      	str	r3, [r2, #52]	; 0x34
 80068a8:	b031      	add	sp, #196	; 0xc4
 80068aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ae:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80068b2:	f801 2f01 	strb.w	r2, [r1, #1]!
 80068b6:	e73c      	b.n	8006732 <chacha20_encrypt_bytes.part.0+0xa6>
 80068b8:	4488      	add	r8, r1
 80068ba:	ea88 0000 	eor.w	r0, r8, r0
 80068be:	ea4f 4030 	mov.w	r0, r0, ror #16
 80068c2:	4481      	add	r9, r0
 80068c4:	ea81 0109 	eor.w	r1, r1, r9
 80068c8:	ea4f 5131 	mov.w	r1, r1, ror #20
 80068cc:	4488      	add	r8, r1
 80068ce:	ea80 0008 	eor.w	r0, r0, r8
 80068d2:	ea4f 6030 	mov.w	r0, r0, ror #24
 80068d6:	9018      	str	r0, [sp, #96]	; 0x60
 80068d8:	4448      	add	r0, r9
 80068da:	4041      	eors	r1, r0
 80068dc:	ea4f 6171 	mov.w	r1, r1, ror #25
 80068e0:	911a      	str	r1, [sp, #104]	; 0x68
 80068e2:	9908      	ldr	r1, [sp, #32]
 80068e4:	9019      	str	r0, [sp, #100]	; 0x64
 80068e6:	44dc      	add	ip, fp
 80068e8:	ea8c 0101 	eor.w	r1, ip, r1
 80068ec:	ea4f 4131 	mov.w	r1, r1, ror #16
 80068f0:	448a      	add	sl, r1
 80068f2:	ea8b 000a 	eor.w	r0, fp, sl
 80068f6:	ea4f 5030 	mov.w	r0, r0, ror #20
 80068fa:	eb0c 0b00 	add.w	fp, ip, r0
 80068fe:	ea81 010b 	eor.w	r1, r1, fp
 8006902:	ea4f 6131 	mov.w	r1, r1, ror #24
 8006906:	9108      	str	r1, [sp, #32]
 8006908:	4451      	add	r1, sl
 800690a:	911b      	str	r1, [sp, #108]	; 0x6c
 800690c:	4048      	eors	r0, r1
 800690e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006910:	9e06      	ldr	r6, [sp, #24]
 8006912:	4496      	add	lr, r2
 8006914:	ea8e 0a01 	eor.w	sl, lr, r1
 8006918:	9905      	ldr	r1, [sp, #20]
 800691a:	ea4f 4a3a 	mov.w	sl, sl, ror #16
 800691e:	4451      	add	r1, sl
 8006920:	468c      	mov	ip, r1
 8006922:	404a      	eors	r2, r1
 8006924:	9907      	ldr	r1, [sp, #28]
 8006926:	441f      	add	r7, r3
 8006928:	4079      	eors	r1, r7
 800692a:	ea4f 4131 	mov.w	r1, r1, ror #16
 800692e:	440e      	add	r6, r1
 8006930:	4073      	eors	r3, r6
 8006932:	ea4f 5333 	mov.w	r3, r3, ror #20
 8006936:	441f      	add	r7, r3
 8006938:	ea4f 5232 	mov.w	r2, r2, ror #20
 800693c:	4496      	add	lr, r2
 800693e:	ea4f 6070 	mov.w	r0, r0, ror #25
 8006942:	4079      	eors	r1, r7
 8006944:	4480      	add	r8, r0
 8006946:	ea8a 0a0e 	eor.w	sl, sl, lr
 800694a:	46b1      	mov	r9, r6
 800694c:	ea4f 6131 	mov.w	r1, r1, ror #24
 8006950:	ea4f 6a3a 	mov.w	sl, sl, ror #24
 8006954:	4489      	add	r9, r1
 8006956:	ea81 0108 	eor.w	r1, r1, r8
 800695a:	44d4      	add	ip, sl
 800695c:	ea4f 4131 	mov.w	r1, r1, ror #16
 8006960:	ea82 020c 	eor.w	r2, r2, ip
 8006964:	448c      	add	ip, r1
 8006966:	ea80 000c 	eor.w	r0, r0, ip
 800696a:	ea4f 5030 	mov.w	r0, r0, ror #20
 800696e:	4480      	add	r8, r0
 8006970:	ea81 0108 	eor.w	r1, r1, r8
 8006974:	ea4f 6131 	mov.w	r1, r1, ror #24
 8006978:	9107      	str	r1, [sp, #28]
 800697a:	4461      	add	r1, ip
 800697c:	ea4f 6272 	mov.w	r2, r2, ror #25
 8006980:	9105      	str	r1, [sp, #20]
 8006982:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006984:	901c      	str	r0, [sp, #112]	; 0x70
 8006986:	eb0b 0c02 	add.w	ip, fp, r2
 800698a:	ea81 000c 	eor.w	r0, r1, ip
 800698e:	ea4f 4030 	mov.w	r0, r0, ror #16
 8006992:	ea83 0309 	eor.w	r3, r3, r9
 8006996:	4481      	add	r9, r0
 8006998:	ea82 0209 	eor.w	r2, r2, r9
 800699c:	ea4f 5232 	mov.w	r2, r2, ror #20
 80069a0:	4494      	add	ip, r2
 80069a2:	ea80 000c 	eor.w	r0, r0, ip
 80069a6:	ea4f 6030 	mov.w	r0, r0, ror #24
 80069aa:	eb09 0100 	add.w	r1, r9, r0
 80069ae:	ea4f 6373 	mov.w	r3, r3, ror #25
 80069b2:	9106      	str	r1, [sp, #24]
 80069b4:	9908      	ldr	r1, [sp, #32]
 80069b6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80069b8:	449e      	add	lr, r3
 80069ba:	ea81 010e 	eor.w	r1, r1, lr
 80069be:	ea4f 4131 	mov.w	r1, r1, ror #16
 80069c2:	eb06 0901 	add.w	r9, r6, r1
 80069c6:	ea83 0309 	eor.w	r3, r3, r9
 80069ca:	ea4f 5333 	mov.w	r3, r3, ror #20
 80069ce:	449e      	add	lr, r3
 80069d0:	ea81 010e 	eor.w	r1, r1, lr
 80069d4:	ea4f 6131 	mov.w	r1, r1, ror #24
 80069d8:	4489      	add	r9, r1
 80069da:	9108      	str	r1, [sp, #32]
 80069dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80069de:	440f      	add	r7, r1
 80069e0:	ea8a 0b07 	eor.w	fp, sl, r7
 80069e4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80069e6:	ea4f 4b3b 	mov.w	fp, fp, ror #16
 80069ea:	eb01 0a0b 	add.w	sl, r1, fp
 80069ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 80069f0:	ea81 010a 	eor.w	r1, r1, sl
 80069f4:	ea4f 5131 	mov.w	r1, r1, ror #20
 80069f8:	440f      	add	r7, r1
 80069fa:	ea8b 0b07 	eor.w	fp, fp, r7
 80069fe:	ea4f 663b 	mov.w	r6, fp, ror #24
 8006a02:	44b2      	add	sl, r6
 8006a04:	9609      	str	r6, [sp, #36]	; 0x24
 8006a06:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8006a08:	46b3      	mov	fp, r6
 8006a0a:	9e05      	ldr	r6, [sp, #20]
 8006a0c:	ea8b 0b06 	eor.w	fp, fp, r6
 8006a10:	9e06      	ldr	r6, [sp, #24]
 8006a12:	ea81 010a 	eor.w	r1, r1, sl
 8006a16:	4072      	eors	r2, r6
 8006a18:	ea83 0309 	eor.w	r3, r3, r9
 8006a1c:	ea4f 6171 	mov.w	r1, r1, ror #25
 8006a20:	ea4f 6b7b 	mov.w	fp, fp, ror #25
 8006a24:	ea4f 6272 	mov.w	r2, r2, ror #25
 8006a28:	ea4f 6373 	mov.w	r3, r3, ror #25
 8006a2c:	e69f      	b.n	800676e <chacha20_encrypt_bytes.part.0+0xe2>
 8006a2e:	9b02      	ldr	r3, [sp, #8]
 8006a30:	9902      	ldr	r1, [sp, #8]
 8006a32:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006a34:	5ce3      	ldrb	r3, [r4, r3]
 8006a36:	5453      	strb	r3, [r2, r1]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	9302      	str	r3, [sp, #8]
 8006a3e:	9b02      	ldr	r3, [sp, #8]
 8006a40:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d3f3      	bcc.n	8006a2e <chacha20_encrypt_bytes.part.0+0x3a2>
 8006a46:	e72a      	b.n	800689e <chacha20_encrypt_bytes.part.0+0x212>
 8006a48:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
 8006a4c:	3a40      	subs	r2, #64	; 0x40
 8006a4e:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8006a52:	e9cd 233a 	strd	r2, r3, [sp, #232]	; 0xe8
 8006a56:	3440      	adds	r4, #64	; 0x40
 8006a58:	3540      	adds	r5, #64	; 0x40
 8006a5a:	e659      	b.n	8006710 <chacha20_encrypt_bytes.part.0+0x84>

08006a5c <stream_ietf_ref>:
 8006a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a60:	4616      	mov	r6, r2
 8006a62:	b092      	sub	sp, #72	; 0x48
 8006a64:	461f      	mov	r7, r3
 8006a66:	ea56 0307 	orrs.w	r3, r6, r7
 8006a6a:	4680      	mov	r8, r0
 8006a6c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8006a6e:	d01b      	beq.n	8006aa8 <stream_ietf_ref+0x4c>
 8006a70:	ac02      	add	r4, sp, #8
 8006a72:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006a74:	4620      	mov	r0, r4
 8006a76:	f7ff fde5 	bl	8006644 <chacha_keysetup>
 8006a7a:	682b      	ldr	r3, [r5, #0]
 8006a7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a7e:	686b      	ldr	r3, [r5, #4]
 8006a80:	9310      	str	r3, [sp, #64]	; 0x40
 8006a82:	2100      	movs	r1, #0
 8006a84:	68ab      	ldr	r3, [r5, #8]
 8006a86:	910e      	str	r1, [sp, #56]	; 0x38
 8006a88:	4632      	mov	r2, r6
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	9311      	str	r3, [sp, #68]	; 0x44
 8006a8e:	f004 f8ab 	bl	800abe8 <memset>
 8006a92:	4641      	mov	r1, r8
 8006a94:	4620      	mov	r0, r4
 8006a96:	e9cd 6700 	strd	r6, r7, [sp]
 8006a9a:	4642      	mov	r2, r8
 8006a9c:	f7ff fdf6 	bl	800668c <chacha20_encrypt_bytes.part.0>
 8006aa0:	2140      	movs	r1, #64	; 0x40
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f7fe fa21 	bl	8004eea <sodium_memzero>
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	b012      	add	sp, #72	; 0x48
 8006aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006ab0 <stream_ref_xor_ic>:
 8006ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab4:	4616      	mov	r6, r2
 8006ab6:	b093      	sub	sp, #76	; 0x4c
 8006ab8:	461f      	mov	r7, r3
 8006aba:	ea56 0307 	orrs.w	r3, r6, r7
 8006abe:	4681      	mov	r9, r0
 8006ac0:	4688      	mov	r8, r1
 8006ac2:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8006ac4:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8006ac8:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 8006acc:	d017      	beq.n	8006afe <stream_ref_xor_ic+0x4e>
 8006ace:	ac02      	add	r4, sp, #8
 8006ad0:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f7ff fdb6 	bl	8006644 <chacha_keysetup>
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	9310      	str	r3, [sp, #64]	; 0x40
 8006adc:	4641      	mov	r1, r8
 8006ade:	686b      	ldr	r3, [r5, #4]
 8006ae0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	e9cd 6700 	strd	r6, r7, [sp]
 8006aea:	464a      	mov	r2, r9
 8006aec:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8006af0:	9311      	str	r3, [sp, #68]	; 0x44
 8006af2:	f7ff fdcb 	bl	800668c <chacha20_encrypt_bytes.part.0>
 8006af6:	2140      	movs	r1, #64	; 0x40
 8006af8:	4620      	mov	r0, r4
 8006afa:	f7fe f9f6 	bl	8004eea <sodium_memzero>
 8006afe:	2000      	movs	r0, #0
 8006b00:	b013      	add	sp, #76	; 0x4c
 8006b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006b06 <stream_ietf_ref_xor_ic>:
 8006b06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b0a:	4616      	mov	r6, r2
 8006b0c:	b093      	sub	sp, #76	; 0x4c
 8006b0e:	461f      	mov	r7, r3
 8006b10:	ea56 0307 	orrs.w	r3, r6, r7
 8006b14:	4681      	mov	r9, r0
 8006b16:	4688      	mov	r8, r1
 8006b18:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006b1a:	d017      	beq.n	8006b4c <stream_ietf_ref_xor_ic+0x46>
 8006b1c:	ac02      	add	r4, sp, #8
 8006b1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006b20:	4620      	mov	r0, r4
 8006b22:	f7ff fd8f 	bl	8006644 <chacha_keysetup>
 8006b26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b28:	930e      	str	r3, [sp, #56]	; 0x38
 8006b2a:	682b      	ldr	r3, [r5, #0]
 8006b2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b2e:	686b      	ldr	r3, [r5, #4]
 8006b30:	9310      	str	r3, [sp, #64]	; 0x40
 8006b32:	4641      	mov	r1, r8
 8006b34:	68ab      	ldr	r3, [r5, #8]
 8006b36:	9311      	str	r3, [sp, #68]	; 0x44
 8006b38:	4620      	mov	r0, r4
 8006b3a:	e9cd 6700 	strd	r6, r7, [sp]
 8006b3e:	464a      	mov	r2, r9
 8006b40:	f7ff fda4 	bl	800668c <chacha20_encrypt_bytes.part.0>
 8006b44:	2140      	movs	r1, #64	; 0x40
 8006b46:	4620      	mov	r0, r4
 8006b48:	f7fe f9cf 	bl	8004eea <sodium_memzero>
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	b013      	add	sp, #76	; 0x4c
 8006b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006b54 <stream_ref>:
 8006b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b58:	4616      	mov	r6, r2
 8006b5a:	b092      	sub	sp, #72	; 0x48
 8006b5c:	461f      	mov	r7, r3
 8006b5e:	ea56 0307 	orrs.w	r3, r6, r7
 8006b62:	4605      	mov	r5, r0
 8006b64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b68:	d01c      	beq.n	8006ba4 <stream_ref+0x50>
 8006b6a:	ac02      	add	r4, sp, #8
 8006b6c:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f7ff fd68 	bl	8006644 <chacha_keysetup>
 8006b74:	f8d8 3000 	ldr.w	r3, [r8]
 8006b78:	9310      	str	r3, [sp, #64]	; 0x40
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006b80:	910e      	str	r1, [sp, #56]	; 0x38
 8006b82:	4632      	mov	r2, r6
 8006b84:	4628      	mov	r0, r5
 8006b86:	910f      	str	r1, [sp, #60]	; 0x3c
 8006b88:	9311      	str	r3, [sp, #68]	; 0x44
 8006b8a:	f004 f82d 	bl	800abe8 <memset>
 8006b8e:	4629      	mov	r1, r5
 8006b90:	4620      	mov	r0, r4
 8006b92:	e9cd 6700 	strd	r6, r7, [sp]
 8006b96:	462a      	mov	r2, r5
 8006b98:	f7ff fd78 	bl	800668c <chacha20_encrypt_bytes.part.0>
 8006b9c:	2140      	movs	r1, #64	; 0x40
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f7fe f9a3 	bl	8004eea <sodium_memzero>
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	b012      	add	sp, #72	; 0x48
 8006ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006bac <crypto_verify_n>:
 8006bac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bae:	2300      	movs	r3, #0
 8006bb0:	9001      	str	r0, [sp, #4]
 8006bb2:	9102      	str	r1, [sp, #8]
 8006bb4:	9303      	str	r3, [sp, #12]
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	db06      	blt.n	8006bc8 <crypto_verify_n+0x1c>
 8006bba:	9803      	ldr	r0, [sp, #12]
 8006bbc:	3801      	subs	r0, #1
 8006bbe:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8006bc2:	3801      	subs	r0, #1
 8006bc4:	b004      	add	sp, #16
 8006bc6:	bd10      	pop	{r4, pc}
 8006bc8:	9901      	ldr	r1, [sp, #4]
 8006bca:	5cc9      	ldrb	r1, [r1, r3]
 8006bcc:	9802      	ldr	r0, [sp, #8]
 8006bce:	5cc4      	ldrb	r4, [r0, r3]
 8006bd0:	9803      	ldr	r0, [sp, #12]
 8006bd2:	4061      	eors	r1, r4
 8006bd4:	4301      	orrs	r1, r0
 8006bd6:	9103      	str	r1, [sp, #12]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	e7ec      	b.n	8006bb6 <crypto_verify_n+0xa>

08006bdc <crypto_verify_16_bytes>:
 8006bdc:	2010      	movs	r0, #16
 8006bde:	4770      	bx	lr

08006be0 <crypto_verify_32_bytes>:
 8006be0:	2020      	movs	r0, #32
 8006be2:	4770      	bx	lr

08006be4 <crypto_verify_64_bytes>:
 8006be4:	2040      	movs	r0, #64	; 0x40
 8006be6:	4770      	bx	lr

08006be8 <crypto_verify_16>:
 8006be8:	2210      	movs	r2, #16
 8006bea:	f7ff bfdf 	b.w	8006bac <crypto_verify_n>

08006bee <crypto_verify_32>:
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f7ff bfdc 	b.w	8006bac <crypto_verify_n>

08006bf4 <crypto_verify_64>:
 8006bf4:	2240      	movs	r2, #64	; 0x40
 8006bf6:	f7ff bfd9 	b.w	8006bac <crypto_verify_n>
 8006bfa:	0000      	movs	r0, r0
 8006bfc:	0000      	movs	r0, r0
	...

08006c00 <blake2b_compress_ref>:
 8006c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c04:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460f      	mov	r7, r1
 8006c0c:	ad40      	add	r5, sp, #256	; 0x100
 8006c0e:	2300      	movs	r3, #0
 8006c10:	ae62      	add	r6, sp, #392	; 0x188
 8006c12:	18f9      	adds	r1, r7, r3
 8006c14:	4634      	mov	r4, r6
 8006c16:	6808      	ldr	r0, [r1, #0]
 8006c18:	6849      	ldr	r1, [r1, #4]
 8006c1a:	c403      	stmia	r4!, {r0, r1}
 8006c1c:	a962      	add	r1, sp, #392	; 0x188
 8006c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c22:	3308      	adds	r3, #8
 8006c24:	2b80      	cmp	r3, #128	; 0x80
 8006c26:	e9e5 0102 	strd	r0, r1, [r5, #8]!
 8006c2a:	d1f2      	bne.n	8006c12 <blake2b_compress_ref+0x12>
 8006c2c:	f1a2 0c08 	sub.w	ip, r2, #8
 8006c30:	ab60      	add	r3, sp, #384	; 0x180
 8006c32:	9330      	str	r3, [sp, #192]	; 0xc0
 8006c34:	f102 0438 	add.w	r4, r2, #56	; 0x38
 8006c38:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
 8006c3c:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8006c3e:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8006c42:	42a5      	cmp	r5, r4
 8006c44:	9531      	str	r5, [sp, #196]	; 0xc4
 8006c46:	e9e3 0102 	strd	r0, r1, [r3, #8]!
 8006c4a:	d1f7      	bne.n	8006c3c <blake2b_compress_ref+0x3c>
 8006c4c:	ab6a      	add	r3, sp, #424	; 0x1a8
 8006c4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c52:	ab42      	add	r3, sp, #264	; 0x108
 8006c54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c58:	e9cd 0100 	strd	r0, r1, [sp]
 8006c5c:	a962      	add	r1, sp, #392	; 0x188
 8006c5e:	e9d1 6700 	ldrd	r6, r7, [r1]
 8006c62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c66:	eb16 0608 	adds.w	r6, r6, r8
 8006c6a:	eb47 0709 	adc.w	r7, r7, r9
 8006c6e:	1980      	adds	r0, r0, r6
 8006c70:	4179      	adcs	r1, r7
 8006c72:	4606      	mov	r6, r0
 8006c74:	460f      	mov	r7, r1
 8006c76:	f60f 3148 	addw	r1, pc, #2888	; 0xb48
 8006c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c7e:	e9d2 4510 	ldrd	r4, r5, [r2, #64]	; 0x40
 8006c82:	f60f 3b44 	addw	fp, pc, #2884	; 0xb44
 8006c86:	e9db ab00 	ldrd	sl, fp, [fp]
 8006c8a:	4079      	eors	r1, r7
 8006c8c:	4069      	eors	r1, r5
 8006c8e:	4070      	eors	r0, r6
 8006c90:	eb1a 0a01 	adds.w	sl, sl, r1
 8006c94:	ea80 0004 	eor.w	r0, r0, r4
 8006c98:	eb4b 0b00 	adc.w	fp, fp, r0
 8006c9c:	ea88 080a 	eor.w	r8, r8, sl
 8006ca0:	ea89 090b 	eor.w	r9, r9, fp
 8006ca4:	ea4f 6e18 	mov.w	lr, r8, lsr #24
 8006ca8:	4605      	mov	r5, r0
 8006caa:	ea4e 2009 	orr.w	r0, lr, r9, lsl #8
 8006cae:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	ea4e 2108 	orr.w	r1, lr, r8, lsl #8
 8006cb8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8006cbc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006cc0:	eb18 0806 	adds.w	r8, r8, r6
 8006cc4:	eb49 0907 	adc.w	r9, r9, r7
 8006cc8:	eb18 0800 	adds.w	r8, r8, r0
 8006ccc:	eb49 0901 	adc.w	r9, r9, r1
 8006cd0:	4646      	mov	r6, r8
 8006cd2:	464f      	mov	r7, r9
 8006cd4:	406f      	eors	r7, r5
 8006cd6:	4066      	eors	r6, r4
 8006cd8:	0c3d      	lsrs	r5, r7, #16
 8006cda:	4634      	mov	r4, r6
 8006cdc:	0c36      	lsrs	r6, r6, #16
 8006cde:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 8006ce2:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8006ce6:	9616      	str	r6, [sp, #88]	; 0x58
 8006ce8:	9417      	str	r4, [sp, #92]	; 0x5c
 8006cea:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 8006cee:	eb14 040a 	adds.w	r4, r4, sl
 8006cf2:	eb45 050b 	adc.w	r5, r5, fp
 8006cf6:	e9cd 452a 	strd	r4, r5, [sp, #168]	; 0xa8
 8006cfa:	404d      	eors	r5, r1
 8006cfc:	4044      	eors	r4, r0
 8006cfe:	4620      	mov	r0, r4
 8006d00:	006c      	lsls	r4, r5, #1
 8006d02:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8006d06:	0040      	lsls	r0, r0, #1
 8006d08:	ea40 71d5 	orr.w	r1, r0, r5, lsr #31
 8006d0c:	911e      	str	r1, [sp, #120]	; 0x78
 8006d0e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006d12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d16:	a964      	add	r1, sp, #400	; 0x190
 8006d18:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006d1c:	e9d1 8900 	ldrd	r8, r9, [r1]
 8006d20:	a96c      	add	r1, sp, #432	; 0x1b0
 8006d22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d26:	eb10 0008 	adds.w	r0, r0, r8
 8006d2a:	eb41 0109 	adc.w	r1, r1, r9
 8006d2e:	4680      	mov	r8, r0
 8006d30:	4689      	mov	r9, r1
 8006d32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d36:	eb10 0008 	adds.w	r0, r0, r8
 8006d3a:	eb41 0109 	adc.w	r1, r1, r9
 8006d3e:	4680      	mov	r8, r0
 8006d40:	4689      	mov	r9, r1
 8006d42:	f60f 218c 	addw	r1, pc, #2700	; 0xa8c
 8006d46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d4a:	941f      	str	r4, [sp, #124]	; 0x7c
 8006d4c:	e9d2 4512 	ldrd	r4, r5, [r2, #72]	; 0x48
 8006d50:	f60f 2784 	addw	r7, pc, #2692	; 0xa84
 8006d54:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006d58:	ea81 0109 	eor.w	r1, r1, r9
 8006d5c:	4069      	eors	r1, r5
 8006d5e:	ea80 0008 	eor.w	r0, r0, r8
 8006d62:	1876      	adds	r6, r6, r1
 8006d64:	ea80 0004 	eor.w	r0, r0, r4
 8006d68:	468a      	mov	sl, r1
 8006d6a:	a96c      	add	r1, sp, #432	; 0x1b0
 8006d6c:	4147      	adcs	r7, r0
 8006d6e:	4683      	mov	fp, r0
 8006d70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d74:	4070      	eors	r0, r6
 8006d76:	4079      	eors	r1, r7
 8006d78:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8006d7c:	ea4e 2401 	orr.w	r4, lr, r1, lsl #8
 8006d80:	0e09      	lsrs	r1, r1, #24
 8006d82:	ea41 2500 	orr.w	r5, r1, r0, lsl #8
 8006d86:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006d8a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d8e:	eb10 0008 	adds.w	r0, r0, r8
 8006d92:	eb41 0109 	adc.w	r1, r1, r9
 8006d96:	1900      	adds	r0, r0, r4
 8006d98:	4169      	adcs	r1, r5
 8006d9a:	e9cd 0126 	strd	r0, r1, [sp, #152]	; 0x98
 8006d9e:	ea80 000a 	eor.w	r0, r0, sl
 8006da2:	ea81 010b 	eor.w	r1, r1, fp
 8006da6:	468b      	mov	fp, r1
 8006da8:	0c01      	lsrs	r1, r0, #16
 8006daa:	ea41 410b 	orr.w	r1, r1, fp, lsl #16
 8006dae:	911a      	str	r1, [sp, #104]	; 0x68
 8006db0:	ea4f 411b 	mov.w	r1, fp, lsr #16
 8006db4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006db8:	911b      	str	r1, [sp, #108]	; 0x6c
 8006dba:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8006dbe:	1980      	adds	r0, r0, r6
 8006dc0:	4179      	adcs	r1, r7
 8006dc2:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
 8006dc6:	4069      	eors	r1, r5
 8006dc8:	4060      	eors	r0, r4
 8006dca:	460d      	mov	r5, r1
 8006dcc:	0049      	lsls	r1, r1, #1
 8006dce:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8006dd2:	9113      	str	r1, [sp, #76]	; 0x4c
 8006dd4:	0041      	lsls	r1, r0, #1
 8006dd6:	ea41 71d5 	orr.w	r1, r1, r5, lsr #31
 8006dda:	9112      	str	r1, [sp, #72]	; 0x48
 8006ddc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006de0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006de4:	a966      	add	r1, sp, #408	; 0x198
 8006de6:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8006dea:	a96e      	add	r1, sp, #440	; 0x1b8
 8006dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006df0:	eb10 000a 	adds.w	r0, r0, sl
 8006df4:	eb41 010b 	adc.w	r1, r1, fp
 8006df8:	4682      	mov	sl, r0
 8006dfa:	468b      	mov	fp, r1
 8006dfc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e00:	eb10 000a 	adds.w	r0, r0, sl
 8006e04:	eb41 010b 	adc.w	r1, r1, fp
 8006e08:	4682      	mov	sl, r0
 8006e0a:	468b      	mov	fp, r1
 8006e0c:	f60f 11d0 	addw	r1, pc, #2512	; 0x9d0
 8006e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e14:	e9d2 4514 	ldrd	r4, r5, [r2, #80]	; 0x50
 8006e18:	f60f 19cc 	addw	r9, pc, #2508	; 0x9cc
 8006e1c:	e9d9 8900 	ldrd	r8, r9, [r9]
 8006e20:	ea81 010b 	eor.w	r1, r1, fp
 8006e24:	4069      	eors	r1, r5
 8006e26:	eb18 0801 	adds.w	r8, r8, r1
 8006e2a:	460e      	mov	r6, r1
 8006e2c:	ea80 000a 	eor.w	r0, r0, sl
 8006e30:	a96e      	add	r1, sp, #440	; 0x1b8
 8006e32:	ea80 0004 	eor.w	r0, r0, r4
 8006e36:	e9d1 4500 	ldrd	r4, r5, [r1]
 8006e3a:	eb49 0900 	adc.w	r9, r9, r0
 8006e3e:	ea84 0408 	eor.w	r4, r4, r8
 8006e42:	ea85 0509 	eor.w	r5, r5, r9
 8006e46:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8006e4a:	4607      	mov	r7, r0
 8006e4c:	ea4e 2005 	orr.w	r0, lr, r5, lsl #8
 8006e50:	0e2d      	lsrs	r5, r5, #24
 8006e52:	ea45 2104 	orr.w	r1, r5, r4, lsl #8
 8006e56:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8006e5a:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8006e5e:	eb14 040a 	adds.w	r4, r4, sl
 8006e62:	eb45 050b 	adc.w	r5, r5, fp
 8006e66:	1824      	adds	r4, r4, r0
 8006e68:	414d      	adcs	r5, r1
 8006e6a:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
 8006e6e:	4074      	eors	r4, r6
 8006e70:	407d      	eors	r5, r7
 8006e72:	4626      	mov	r6, r4
 8006e74:	0c24      	lsrs	r4, r4, #16
 8006e76:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006e7a:	9420      	str	r4, [sp, #128]	; 0x80
 8006e7c:	0c2c      	lsrs	r4, r5, #16
 8006e7e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8006e82:	9421      	str	r4, [sp, #132]	; 0x84
 8006e84:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
 8006e88:	eb14 0408 	adds.w	r4, r4, r8
 8006e8c:	eb45 0509 	adc.w	r5, r5, r9
 8006e90:	e9cd 4522 	strd	r4, r5, [sp, #136]	; 0x88
 8006e94:	404d      	eors	r5, r1
 8006e96:	4044      	eors	r4, r0
 8006e98:	4620      	mov	r0, r4
 8006e9a:	006c      	lsls	r4, r5, #1
 8006e9c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8006ea0:	0040      	lsls	r0, r0, #1
 8006ea2:	ea40 71d5 	orr.w	r1, r0, r5, lsr #31
 8006ea6:	9118      	str	r1, [sp, #96]	; 0x60
 8006ea8:	a970      	add	r1, sp, #448	; 0x1c0
 8006eaa:	e9d1 8900 	ldrd	r8, r9, [r1]
 8006eae:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006eb2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006eb6:	a968      	add	r1, sp, #416	; 0x1a0
 8006eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ebc:	9419      	str	r4, [sp, #100]	; 0x64
 8006ebe:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 8006ec2:	eb10 0008 	adds.w	r0, r0, r8
 8006ec6:	eb41 0109 	adc.w	r1, r1, r9
 8006eca:	1824      	adds	r4, r4, r0
 8006ecc:	414d      	adcs	r5, r1
 8006ece:	4620      	mov	r0, r4
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	f60f 151c 	addw	r5, pc, #2332	; 0x91c
 8006ed6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006eda:	e9d2 6716 	ldrd	r6, r7, [r2, #88]	; 0x58
 8006ede:	4044      	eors	r4, r0
 8006ee0:	404d      	eors	r5, r1
 8006ee2:	4074      	eors	r4, r6
 8006ee4:	407d      	eors	r5, r7
 8006ee6:	f60f 1710 	addw	r7, pc, #2320	; 0x910
 8006eea:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006eee:	1976      	adds	r6, r6, r5
 8006ef0:	4167      	adcs	r7, r4
 8006ef2:	ea88 0806 	eor.w	r8, r8, r6
 8006ef6:	ea89 0907 	eor.w	r9, r9, r7
 8006efa:	ea4f 6218 	mov.w	r2, r8, lsr #24
 8006efe:	46a3      	mov	fp, r4
 8006f00:	ea42 2409 	orr.w	r4, r2, r9, lsl #8
 8006f04:	ea4f 6219 	mov.w	r2, r9, lsr #24
 8006f08:	46aa      	mov	sl, r5
 8006f0a:	ea42 2508 	orr.w	r5, r2, r8, lsl #8
 8006f0e:	e9d3 890e 	ldrd	r8, r9, [r3, #56]	; 0x38
 8006f12:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006f16:	eb18 0800 	adds.w	r8, r8, r0
 8006f1a:	eb49 0901 	adc.w	r9, r9, r1
 8006f1e:	eb18 0804 	adds.w	r8, r8, r4
 8006f22:	eb49 0905 	adc.w	r9, r9, r5
 8006f26:	ea88 010a 	eor.w	r1, r8, sl
 8006f2a:	ea89 020b 	eor.w	r2, r9, fp
 8006f2e:	4693      	mov	fp, r2
 8006f30:	0c0a      	lsrs	r2, r1, #16
 8006f32:	ea42 400b 	orr.w	r0, r2, fp, lsl #16
 8006f36:	ea4f 421b 	mov.w	r2, fp, lsr #16
 8006f3a:	e9cd 8932 	strd	r8, r9, [sp, #200]	; 0xc8
 8006f3e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8006f42:	eb16 0800 	adds.w	r8, r6, r0
 8006f46:	eb47 0901 	adc.w	r9, r7, r1
 8006f4a:	464f      	mov	r7, r9
 8006f4c:	406f      	eors	r7, r5
 8006f4e:	4646      	mov	r6, r8
 8006f50:	4066      	eors	r6, r4
 8006f52:	007a      	lsls	r2, r7, #1
 8006f54:	ea42 72d6 	orr.w	r2, r2, r6, lsr #31
 8006f58:	921d      	str	r2, [sp, #116]	; 0x74
 8006f5a:	0072      	lsls	r2, r6, #1
 8006f5c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8006f60:	ea42 72d7 	orr.w	r2, r2, r7, lsr #31
 8006f64:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 8006f68:	1936      	adds	r6, r6, r4
 8006f6a:	416f      	adcs	r7, r5
 8006f6c:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8006f70:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8006f74:	19a4      	adds	r4, r4, r6
 8006f76:	417d      	adcs	r5, r7
 8006f78:	e9cd 8928 	strd	r8, r9, [sp, #160]	; 0xa0
 8006f7c:	e9dd 8922 	ldrd	r8, r9, [sp, #136]	; 0x88
 8006f80:	4060      	eors	r0, r4
 8006f82:	4069      	eors	r1, r5
 8006f84:	4626      	mov	r6, r4
 8006f86:	462f      	mov	r7, r5
 8006f88:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8006f8c:	eb18 0801 	adds.w	r8, r8, r1
 8006f90:	eb49 0900 	adc.w	r9, r9, r0
 8006f94:	ea84 0408 	eor.w	r4, r4, r8
 8006f98:	ea85 0509 	eor.w	r5, r5, r9
 8006f9c:	921c      	str	r2, [sp, #112]	; 0x70
 8006f9e:	0e22      	lsrs	r2, r4, #24
 8006fa0:	4683      	mov	fp, r0
 8006fa2:	ea42 2005 	orr.w	r0, r2, r5, lsl #8
 8006fa6:	0e2a      	lsrs	r2, r5, #24
 8006fa8:	468a      	mov	sl, r1
 8006faa:	ea42 2104 	orr.w	r1, r2, r4, lsl #8
 8006fae:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8006fb2:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8006fb6:	19a4      	adds	r4, r4, r6
 8006fb8:	417d      	adcs	r5, r7
 8006fba:	1824      	adds	r4, r4, r0
 8006fbc:	414d      	adcs	r5, r1
 8006fbe:	e9cd 4534 	strd	r4, r5, [sp, #208]	; 0xd0
 8006fc2:	ea84 040a 	eor.w	r4, r4, sl
 8006fc6:	ea85 050b 	eor.w	r5, r5, fp
 8006fca:	0c22      	lsrs	r2, r4, #16
 8006fcc:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8006fd0:	9222      	str	r2, [sp, #136]	; 0x88
 8006fd2:	0c2a      	lsrs	r2, r5, #16
 8006fd4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006fd8:	9223      	str	r2, [sp, #140]	; 0x8c
 8006fda:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 8006fde:	eb14 0408 	adds.w	r4, r4, r8
 8006fe2:	eb45 0509 	adc.w	r5, r5, r9
 8006fe6:	e9cd 4536 	strd	r4, r5, [sp, #216]	; 0xd8
 8006fea:	404d      	eors	r5, r1
 8006fec:	4044      	eors	r4, r0
 8006fee:	006a      	lsls	r2, r5, #1
 8006ff0:	ea42 72d4 	orr.w	r2, r2, r4, lsr #31
 8006ff4:	9225      	str	r2, [sp, #148]	; 0x94
 8006ff6:	0062      	lsls	r2, r4, #1
 8006ff8:	ea42 72d5 	orr.w	r2, r2, r5, lsr #31
 8006ffc:	9224      	str	r2, [sp, #144]	; 0x90
 8006ffe:	e9d3 1214 	ldrd	r1, r2, [r3, #80]	; 0x50
 8007002:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
 8007006:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 800700a:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800700e:	1900      	adds	r0, r0, r4
 8007010:	4169      	adcs	r1, r5
 8007012:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 8007016:	1824      	adds	r4, r4, r0
 8007018:	414d      	adcs	r5, r1
 800701a:	4620      	mov	r0, r4
 800701c:	4629      	mov	r1, r5
 800701e:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 8007022:	e9dd 6728 	ldrd	r6, r7, [sp, #160]	; 0xa0
 8007026:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800702a:	404d      	eors	r5, r1
 800702c:	1976      	adds	r6, r6, r5
 800702e:	ea84 0400 	eor.w	r4, r4, r0
 8007032:	4167      	adcs	r7, r4
 8007034:	ea88 0806 	eor.w	r8, r8, r6
 8007038:	ea89 0907 	eor.w	r9, r9, r7
 800703c:	ea4f 6218 	mov.w	r2, r8, lsr #24
 8007040:	46a3      	mov	fp, r4
 8007042:	ea42 2409 	orr.w	r4, r2, r9, lsl #8
 8007046:	ea4f 6219 	mov.w	r2, r9, lsr #24
 800704a:	46aa      	mov	sl, r5
 800704c:	ea42 2508 	orr.w	r5, r2, r8, lsl #8
 8007050:	e9d3 8916 	ldrd	r8, r9, [r3, #88]	; 0x58
 8007054:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 8007058:	eb18 0800 	adds.w	r8, r8, r0
 800705c:	eb49 0901 	adc.w	r9, r9, r1
 8007060:	eb18 0804 	adds.w	r8, r8, r4
 8007064:	eb49 0905 	adc.w	r9, r9, r5
 8007068:	ea88 010a 	eor.w	r1, r8, sl
 800706c:	ea89 020b 	eor.w	r2, r9, fp
 8007070:	4693      	mov	fp, r2
 8007072:	0c0a      	lsrs	r2, r1, #16
 8007074:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8007078:	9226      	str	r2, [sp, #152]	; 0x98
 800707a:	ea4f 421b 	mov.w	r2, fp, lsr #16
 800707e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007082:	9227      	str	r2, [sp, #156]	; 0x9c
 8007084:	e9dd 1226 	ldrd	r1, r2, [sp, #152]	; 0x98
 8007088:	1989      	adds	r1, r1, r6
 800708a:	417a      	adcs	r2, r7
 800708c:	e9cd 123a 	strd	r1, r2, [sp, #232]	; 0xe8
 8007090:	406a      	eors	r2, r5
 8007092:	4061      	eors	r1, r4
 8007094:	4615      	mov	r5, r2
 8007096:	0052      	lsls	r2, r2, #1
 8007098:	ea42 72d1 	orr.w	r2, r2, r1, lsr #31
 800709c:	9229      	str	r2, [sp, #164]	; 0xa4
 800709e:	004a      	lsls	r2, r1, #1
 80070a0:	ea42 72d5 	orr.w	r2, r2, r5, lsr #31
 80070a4:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
 80070a8:	9228      	str	r2, [sp, #160]	; 0xa0
 80070aa:	e9d3 1218 	ldrd	r1, r2, [r3, #96]	; 0x60
 80070ae:	1876      	adds	r6, r6, r1
 80070b0:	4157      	adcs	r7, r2
 80070b2:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
 80070b6:	e9dd 121c 	ldrd	r1, r2, [sp, #112]	; 0x70
 80070ba:	1989      	adds	r1, r1, r6
 80070bc:	460e      	mov	r6, r1
 80070be:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80070c2:	417a      	adcs	r2, r7
 80070c4:	4070      	eors	r0, r6
 80070c6:	4051      	eors	r1, r2
 80070c8:	468a      	mov	sl, r1
 80070ca:	4683      	mov	fp, r0
 80070cc:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 80070d0:	e9cd 8938 	strd	r8, r9, [sp, #224]	; 0xe0
 80070d4:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80070d8:	eb10 000a 	adds.w	r0, r0, sl
 80070dc:	eb41 010b 	adc.w	r1, r1, fp
 80070e0:	ea88 0800 	eor.w	r8, r8, r0
 80070e4:	ea89 0901 	eor.w	r9, r9, r1
 80070e8:	4617      	mov	r7, r2
 80070ea:	ea4f 6218 	mov.w	r2, r8, lsr #24
 80070ee:	ea42 2409 	orr.w	r4, r2, r9, lsl #8
 80070f2:	ea4f 6219 	mov.w	r2, r9, lsr #24
 80070f6:	ea42 2508 	orr.w	r5, r2, r8, lsl #8
 80070fa:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 80070fe:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
 8007102:	eb18 0806 	adds.w	r8, r8, r6
 8007106:	eb49 0907 	adc.w	r9, r9, r7
 800710a:	eb18 0804 	adds.w	r8, r8, r4
 800710e:	eb49 0905 	adc.w	r9, r9, r5
 8007112:	ea88 060a 	eor.w	r6, r8, sl
 8007116:	ea89 070b 	eor.w	r7, r9, fp
 800711a:	0c32      	lsrs	r2, r6, #16
 800711c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8007120:	922a      	str	r2, [sp, #168]	; 0xa8
 8007122:	0c3a      	lsrs	r2, r7, #16
 8007124:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8007128:	922b      	str	r2, [sp, #172]	; 0xac
 800712a:	e9dd 672a 	ldrd	r6, r7, [sp, #168]	; 0xa8
 800712e:	1836      	adds	r6, r6, r0
 8007130:	414f      	adcs	r7, r1
 8007132:	463a      	mov	r2, r7
 8007134:	4631      	mov	r1, r6
 8007136:	406a      	eors	r2, r5
 8007138:	4061      	eors	r1, r4
 800713a:	4615      	mov	r5, r2
 800713c:	0052      	lsls	r2, r2, #1
 800713e:	ea42 72d1 	orr.w	r2, r2, r1, lsr #31
 8007142:	922d      	str	r2, [sp, #180]	; 0xb4
 8007144:	004a      	lsls	r2, r1, #1
 8007146:	ea42 72d5 	orr.w	r2, r2, r5, lsr #31
 800714a:	922c      	str	r2, [sp, #176]	; 0xb0
 800714c:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
 8007150:	e9cd 121c 	strd	r1, r2, [sp, #112]	; 0x70
 8007154:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 8007158:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 800715c:	1900      	adds	r0, r0, r4
 800715e:	4169      	adcs	r1, r5
 8007160:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 8007164:	1824      	adds	r4, r4, r0
 8007166:	414d      	adcs	r5, r1
 8007168:	4620      	mov	r0, r4
 800716a:	4629      	mov	r1, r5
 800716c:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
 8007170:	e9cd 673e 	strd	r6, r7, [sp, #248]	; 0xf8
 8007174:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
 8007178:	e9cd 893c 	strd	r8, r9, [sp, #240]	; 0xf0
 800717c:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8007180:	404d      	eors	r5, r1
 8007182:	1976      	adds	r6, r6, r5
 8007184:	ea84 0400 	eor.w	r4, r4, r0
 8007188:	4167      	adcs	r7, r4
 800718a:	ea88 0806 	eor.w	r8, r8, r6
 800718e:	ea89 0907 	eor.w	r9, r9, r7
 8007192:	ea4f 6218 	mov.w	r2, r8, lsr #24
 8007196:	46a3      	mov	fp, r4
 8007198:	ea42 2409 	orr.w	r4, r2, r9, lsl #8
 800719c:	ea4f 6219 	mov.w	r2, r9, lsr #24
 80071a0:	46aa      	mov	sl, r5
 80071a2:	ea42 2508 	orr.w	r5, r2, r8, lsl #8
 80071a6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80071aa:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 80071ae:	1812      	adds	r2, r2, r0
 80071b0:	414b      	adcs	r3, r1
 80071b2:	1912      	adds	r2, r2, r4
 80071b4:	416b      	adcs	r3, r5
 80071b6:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
 80071ba:	ea82 020a 	eor.w	r2, r2, sl
 80071be:	ea83 030b 	eor.w	r3, r3, fp
 80071c2:	469b      	mov	fp, r3
 80071c4:	0c13      	lsrs	r3, r2, #16
 80071c6:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
 80071ca:	9320      	str	r3, [sp, #128]	; 0x80
 80071cc:	ea4f 431b 	mov.w	r3, fp, lsr #16
 80071d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071d4:	9321      	str	r3, [sp, #132]	; 0x84
 80071d6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80071da:	eb1a 0a06 	adds.w	sl, sl, r6
 80071de:	eb4b 0b07 	adc.w	fp, fp, r7
 80071e2:	ea85 050b 	eor.w	r5, r5, fp
 80071e6:	ea84 040a 	eor.w	r4, r4, sl
 80071ea:	006b      	lsls	r3, r5, #1
 80071ec:	ea43 77d4 	orr.w	r7, r3, r4, lsr #31
 80071f0:	0063      	lsls	r3, r4, #1
 80071f2:	ea43 76d5 	orr.w	r6, r3, r5, lsr #31
 80071f6:	e9dd 4534 	ldrd	r4, r5, [sp, #208]	; 0xd0
 80071fa:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80071fe:	18a4      	adds	r4, r4, r2
 8007200:	415d      	adcs	r5, r3
 8007202:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8007206:	19a4      	adds	r4, r4, r6
 8007208:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 800720c:	417d      	adcs	r5, r7
 800720e:	406b      	eors	r3, r5
 8007210:	18c0      	adds	r0, r0, r3
 8007212:	ea82 0204 	eor.w	r2, r2, r4
 8007216:	4151      	adcs	r1, r2
 8007218:	4046      	eors	r6, r0
 800721a:	404f      	eors	r7, r1
 800721c:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8007220:	4691      	mov	r9, r2
 8007222:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8007226:	0e3f      	lsrs	r7, r7, #24
 8007228:	4698      	mov	r8, r3
 800722a:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 800722e:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 8007232:	1936      	adds	r6, r6, r4
 8007234:	416f      	adcs	r7, r5
 8007236:	18b6      	adds	r6, r6, r2
 8007238:	415f      	adcs	r7, r3
 800723a:	ea86 0408 	eor.w	r4, r6, r8
 800723e:	ea87 0509 	eor.w	r5, r7, r9
 8007242:	46a0      	mov	r8, r4
 8007244:	0c24      	lsrs	r4, r4, #16
 8007246:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800724a:	9426      	str	r4, [sp, #152]	; 0x98
 800724c:	0c2c      	lsrs	r4, r5, #16
 800724e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8007252:	9427      	str	r4, [sp, #156]	; 0x9c
 8007254:	e9cd 6734 	strd	r6, r7, [sp, #208]	; 0xd0
 8007258:	e9dd 4526 	ldrd	r4, r5, [sp, #152]	; 0x98
 800725c:	1824      	adds	r4, r4, r0
 800725e:	414d      	adcs	r5, r1
 8007260:	4620      	mov	r0, r4
 8007262:	4629      	mov	r1, r5
 8007264:	4050      	eors	r0, r2
 8007266:	4059      	eors	r1, r3
 8007268:	0042      	lsls	r2, r0, #1
 800726a:	460b      	mov	r3, r1
 800726c:	0049      	lsls	r1, r1, #1
 800726e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007272:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8007276:	e9cd 453e 	strd	r4, r5, [sp, #248]	; 0xf8
 800727a:	912f      	str	r1, [sp, #188]	; 0xbc
 800727c:	932e      	str	r3, [sp, #184]	; 0xb8
 800727e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007282:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8007286:	18c0      	adds	r0, r0, r3
 8007288:	4161      	adcs	r1, r4
 800728a:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 800728e:	181b      	adds	r3, r3, r0
 8007290:	4618      	mov	r0, r3
 8007292:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8007296:	414c      	adcs	r4, r1
 8007298:	4063      	eors	r3, r4
 800729a:	4621      	mov	r1, r4
 800729c:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 80072a0:	eb1a 0a03 	adds.w	sl, sl, r3
 80072a4:	ea82 0200 	eor.w	r2, r2, r0
 80072a8:	eb4b 0b02 	adc.w	fp, fp, r2
 80072ac:	ea84 040a 	eor.w	r4, r4, sl
 80072b0:	ea85 050b 	eor.w	r5, r5, fp
 80072b4:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80072b8:	4691      	mov	r9, r2
 80072ba:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80072be:	0e2d      	lsrs	r5, r5, #24
 80072c0:	4698      	mov	r8, r3
 80072c2:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80072c6:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 80072ca:	1824      	adds	r4, r4, r0
 80072cc:	414d      	adcs	r5, r1
 80072ce:	18a4      	adds	r4, r4, r2
 80072d0:	415d      	adcs	r5, r3
 80072d2:	ea84 0008 	eor.w	r0, r4, r8
 80072d6:	ea85 0109 	eor.w	r1, r5, r9
 80072da:	4689      	mov	r9, r1
 80072dc:	0c01      	lsrs	r1, r0, #16
 80072de:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80072e2:	9124      	str	r1, [sp, #144]	; 0x90
 80072e4:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80072e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80072ec:	9125      	str	r1, [sp, #148]	; 0x94
 80072ee:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 80072f2:	eb10 000a 	adds.w	r0, r0, sl
 80072f6:	eb41 010b 	adc.w	r1, r1, fp
 80072fa:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 80072fe:	ac40      	add	r4, sp, #256	; 0x100
 8007300:	e9c4 0100 	strd	r0, r1, [r4]
 8007304:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007308:	4050      	eors	r0, r2
 800730a:	4059      	eors	r1, r3
 800730c:	0042      	lsls	r2, r0, #1
 800730e:	460b      	mov	r3, r1
 8007310:	0049      	lsls	r1, r1, #1
 8007312:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007316:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 800731a:	912b      	str	r1, [sp, #172]	; 0xac
 800731c:	932a      	str	r3, [sp, #168]	; 0xa8
 800731e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8007322:	e9dd 343c 	ldrd	r3, r4, [sp, #240]	; 0xf0
 8007326:	18c0      	adds	r0, r0, r3
 8007328:	4161      	adcs	r1, r4
 800732a:	e9dd 3428 	ldrd	r3, r4, [sp, #160]	; 0xa0
 800732e:	181b      	adds	r3, r3, r0
 8007330:	4618      	mov	r0, r3
 8007332:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8007336:	414c      	adcs	r4, r1
 8007338:	e9dd 6736 	ldrd	r6, r7, [sp, #216]	; 0xd8
 800733c:	4063      	eors	r3, r4
 800733e:	4621      	mov	r1, r4
 8007340:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 8007344:	18f6      	adds	r6, r6, r3
 8007346:	ea82 0200 	eor.w	r2, r2, r0
 800734a:	4157      	adcs	r7, r2
 800734c:	4074      	eors	r4, r6
 800734e:	407d      	eors	r5, r7
 8007350:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8007354:	4691      	mov	r9, r2
 8007356:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 800735a:	0e2d      	lsrs	r5, r5, #24
 800735c:	4698      	mov	r8, r3
 800735e:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8007362:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 8007366:	1824      	adds	r4, r4, r0
 8007368:	414d      	adcs	r5, r1
 800736a:	18a4      	adds	r4, r4, r2
 800736c:	415d      	adcs	r5, r3
 800736e:	ea84 0008 	eor.w	r0, r4, r8
 8007372:	ea85 0109 	eor.w	r1, r5, r9
 8007376:	4689      	mov	r9, r1
 8007378:	0c01      	lsrs	r1, r0, #16
 800737a:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800737e:	9120      	str	r1, [sp, #128]	; 0x80
 8007380:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007384:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007388:	9121      	str	r1, [sp, #132]	; 0x84
 800738a:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800738e:	1980      	adds	r0, r0, r6
 8007390:	4179      	adcs	r1, r7
 8007392:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 8007396:	4050      	eors	r0, r2
 8007398:	4059      	eors	r1, r3
 800739a:	460b      	mov	r3, r1
 800739c:	0042      	lsls	r2, r0, #1
 800739e:	0049      	lsls	r1, r1, #1
 80073a0:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 80073a4:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 80073a8:	e9cd 4536 	strd	r4, r5, [sp, #216]	; 0xd8
 80073ac:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80073b0:	e9dd 3432 	ldrd	r3, r4, [sp, #200]	; 0xc8
 80073b4:	18c0      	adds	r0, r0, r3
 80073b6:	4161      	adcs	r1, r4
 80073b8:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 80073bc:	181b      	adds	r3, r3, r0
 80073be:	4618      	mov	r0, r3
 80073c0:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 80073c4:	414c      	adcs	r4, r1
 80073c6:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 80073ca:	4063      	eors	r3, r4
 80073cc:	4621      	mov	r1, r4
 80073ce:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 80073d2:	18f6      	adds	r6, r6, r3
 80073d4:	ea82 0200 	eor.w	r2, r2, r0
 80073d8:	4157      	adcs	r7, r2
 80073da:	4074      	eors	r4, r6
 80073dc:	407d      	eors	r5, r7
 80073de:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80073e2:	4691      	mov	r9, r2
 80073e4:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80073e8:	0e2d      	lsrs	r5, r5, #24
 80073ea:	4698      	mov	r8, r3
 80073ec:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80073f0:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 80073f4:	1824      	adds	r4, r4, r0
 80073f6:	414d      	adcs	r5, r1
 80073f8:	18a4      	adds	r4, r4, r2
 80073fa:	415d      	adcs	r5, r3
 80073fc:	ea84 0008 	eor.w	r0, r4, r8
 8007400:	ea85 0109 	eor.w	r1, r5, r9
 8007404:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
 8007408:	0c04      	lsrs	r4, r0, #16
 800740a:	4680      	mov	r8, r0
 800740c:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8007410:	0c0c      	lsrs	r4, r1, #16
 8007412:	1836      	adds	r6, r6, r0
 8007414:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 8007418:	414f      	adcs	r7, r1
 800741a:	407b      	eors	r3, r7
 800741c:	4072      	eors	r2, r6
 800741e:	005c      	lsls	r4, r3, #1
 8007420:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 8007424:	0052      	lsls	r2, r2, #1
 8007426:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800742a:	9423      	str	r4, [sp, #140]	; 0x8c
 800742c:	9322      	str	r3, [sp, #136]	; 0x88
 800742e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007432:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 8007436:	18a4      	adds	r4, r4, r2
 8007438:	415d      	adcs	r5, r3
 800743a:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 800743e:	1912      	adds	r2, r2, r4
 8007440:	416b      	adcs	r3, r5
 8007442:	4050      	eors	r0, r2
 8007444:	4059      	eors	r1, r3
 8007446:	4614      	mov	r4, r2
 8007448:	461d      	mov	r5, r3
 800744a:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 800744e:	1852      	adds	r2, r2, r1
 8007450:	4143      	adcs	r3, r0
 8007452:	4688      	mov	r8, r1
 8007454:	4681      	mov	r9, r0
 8007456:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800745a:	4050      	eors	r0, r2
 800745c:	4059      	eors	r1, r3
 800745e:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8007462:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
 8007466:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 800746a:	0e09      	lsrs	r1, r1, #24
 800746c:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8007470:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8007474:	1900      	adds	r0, r0, r4
 8007476:	4169      	adcs	r1, r5
 8007478:	1880      	adds	r0, r0, r2
 800747a:	4159      	adcs	r1, r3
 800747c:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8007480:	ea80 0008 	eor.w	r0, r0, r8
 8007484:	ea81 0109 	eor.w	r1, r1, r9
 8007488:	4689      	mov	r9, r1
 800748a:	0c01      	lsrs	r1, r0, #16
 800748c:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8007490:	9128      	str	r1, [sp, #160]	; 0xa0
 8007492:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007496:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800749a:	9129      	str	r1, [sp, #164]	; 0xa4
 800749c:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 80074a0:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 80074a4:	1900      	adds	r0, r0, r4
 80074a6:	4169      	adcs	r1, r5
 80074a8:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 80074ac:	4050      	eors	r0, r2
 80074ae:	4059      	eors	r1, r3
 80074b0:	0042      	lsls	r2, r0, #1
 80074b2:	460b      	mov	r3, r1
 80074b4:	0049      	lsls	r1, r1, #1
 80074b6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80074ba:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80074be:	912b      	str	r1, [sp, #172]	; 0xac
 80074c0:	932a      	str	r3, [sp, #168]	; 0xa8
 80074c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074c6:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 80074ca:	18c0      	adds	r0, r0, r3
 80074cc:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 80074d0:	4161      	adcs	r1, r4
 80074d2:	eb10 000a 	adds.w	r0, r0, sl
 80074d6:	eb41 010b 	adc.w	r1, r1, fp
 80074da:	404b      	eors	r3, r1
 80074dc:	18f6      	adds	r6, r6, r3
 80074de:	ea82 0200 	eor.w	r2, r2, r0
 80074e2:	4157      	adcs	r7, r2
 80074e4:	ea8a 0406 	eor.w	r4, sl, r6
 80074e8:	ea8b 0507 	eor.w	r5, fp, r7
 80074ec:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80074f0:	4691      	mov	r9, r2
 80074f2:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80074f6:	0e2d      	lsrs	r5, r5, #24
 80074f8:	4698      	mov	r8, r3
 80074fa:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80074fe:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007502:	1824      	adds	r4, r4, r0
 8007504:	414d      	adcs	r5, r1
 8007506:	18a4      	adds	r4, r4, r2
 8007508:	415d      	adcs	r5, r3
 800750a:	ea84 0008 	eor.w	r0, r4, r8
 800750e:	ea85 0109 	eor.w	r1, r5, r9
 8007512:	4689      	mov	r9, r1
 8007514:	0c01      	lsrs	r1, r0, #16
 8007516:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800751a:	9126      	str	r1, [sp, #152]	; 0x98
 800751c:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007520:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007524:	9127      	str	r1, [sp, #156]	; 0x9c
 8007526:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800752a:	1980      	adds	r0, r0, r6
 800752c:	4179      	adcs	r1, r7
 800752e:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 8007532:	4050      	eors	r0, r2
 8007534:	4059      	eors	r1, r3
 8007536:	460b      	mov	r3, r1
 8007538:	0042      	lsls	r2, r0, #1
 800753a:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 800753e:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8007542:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 8007546:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 800754a:	18a4      	adds	r4, r4, r2
 800754c:	415d      	adcs	r5, r3
 800754e:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8007552:	1912      	adds	r2, r2, r4
 8007554:	416b      	adcs	r3, r5
 8007556:	4614      	mov	r4, r2
 8007558:	461d      	mov	r5, r3
 800755a:	0049      	lsls	r1, r1, #1
 800755c:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8007560:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8007564:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 8007568:	e9dd 6722 	ldrd	r6, r7, [sp, #136]	; 0x88
 800756c:	406b      	eors	r3, r5
 800756e:	18c0      	adds	r0, r0, r3
 8007570:	ea82 0204 	eor.w	r2, r2, r4
 8007574:	4151      	adcs	r1, r2
 8007576:	4046      	eors	r6, r0
 8007578:	404f      	eors	r7, r1
 800757a:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 800757e:	4691      	mov	r9, r2
 8007580:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8007584:	0e3f      	lsrs	r7, r7, #24
 8007586:	4698      	mov	r8, r3
 8007588:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 800758c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8007590:	1936      	adds	r6, r6, r4
 8007592:	416f      	adcs	r7, r5
 8007594:	18b6      	adds	r6, r6, r2
 8007596:	415f      	adcs	r7, r3
 8007598:	ea86 0408 	eor.w	r4, r6, r8
 800759c:	ea87 0509 	eor.w	r5, r7, r9
 80075a0:	46a0      	mov	r8, r4
 80075a2:	0c24      	lsrs	r4, r4, #16
 80075a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80075a8:	9422      	str	r4, [sp, #136]	; 0x88
 80075aa:	0c2c      	lsrs	r4, r5, #16
 80075ac:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80075b0:	9423      	str	r4, [sp, #140]	; 0x8c
 80075b2:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 80075b6:	1824      	adds	r4, r4, r0
 80075b8:	414d      	adcs	r5, r1
 80075ba:	4620      	mov	r0, r4
 80075bc:	4629      	mov	r1, r5
 80075be:	4050      	eors	r0, r2
 80075c0:	4059      	eors	r1, r3
 80075c2:	0042      	lsls	r2, r0, #1
 80075c4:	460b      	mov	r3, r1
 80075c6:	0049      	lsls	r1, r1, #1
 80075c8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80075cc:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80075d0:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 80075d4:	9125      	str	r1, [sp, #148]	; 0x94
 80075d6:	9324      	str	r3, [sp, #144]	; 0x90
 80075d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80075dc:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 80075e0:	18c0      	adds	r0, r0, r3
 80075e2:	4161      	adcs	r1, r4
 80075e4:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 80075e8:	181b      	adds	r3, r3, r0
 80075ea:	4618      	mov	r0, r3
 80075ec:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 80075f0:	414c      	adcs	r4, r1
 80075f2:	4063      	eors	r3, r4
 80075f4:	4698      	mov	r8, r3
 80075f6:	ab40      	add	r3, sp, #256	; 0x100
 80075f8:	e9cd 6736 	strd	r6, r7, [sp, #216]	; 0xd8
 80075fc:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007600:	4621      	mov	r1, r4
 8007602:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
 8007606:	eb16 0608 	adds.w	r6, r6, r8
 800760a:	ea82 0200 	eor.w	r2, r2, r0
 800760e:	4157      	adcs	r7, r2
 8007610:	4074      	eors	r4, r6
 8007612:	407d      	eors	r5, r7
 8007614:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8007618:	4691      	mov	r9, r2
 800761a:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 800761e:	0e2d      	lsrs	r5, r5, #24
 8007620:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8007624:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007628:	1824      	adds	r4, r4, r0
 800762a:	414d      	adcs	r5, r1
 800762c:	18a4      	adds	r4, r4, r2
 800762e:	415d      	adcs	r5, r3
 8007630:	ea84 0008 	eor.w	r0, r4, r8
 8007634:	ea85 0109 	eor.w	r1, r5, r9
 8007638:	4689      	mov	r9, r1
 800763a:	0c01      	lsrs	r1, r0, #16
 800763c:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8007640:	9120      	str	r1, [sp, #128]	; 0x80
 8007642:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007646:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800764a:	9121      	str	r1, [sp, #132]	; 0x84
 800764c:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8007650:	1980      	adds	r0, r0, r6
 8007652:	4179      	adcs	r1, r7
 8007654:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8007658:	4050      	eors	r0, r2
 800765a:	4059      	eors	r1, r3
 800765c:	460b      	mov	r3, r1
 800765e:	0042      	lsls	r2, r0, #1
 8007660:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 8007664:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8007668:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 800766c:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 8007670:	18a4      	adds	r4, r4, r2
 8007672:	415d      	adcs	r5, r3
 8007674:	0049      	lsls	r1, r1, #1
 8007676:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800767a:	19a4      	adds	r4, r4, r6
 800767c:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 8007680:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8007684:	417d      	adcs	r5, r7
 8007686:	406b      	eors	r3, r5
 8007688:	18c0      	adds	r0, r0, r3
 800768a:	ea82 0204 	eor.w	r2, r2, r4
 800768e:	4151      	adcs	r1, r2
 8007690:	4046      	eors	r6, r0
 8007692:	404f      	eors	r7, r1
 8007694:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8007698:	4691      	mov	r9, r2
 800769a:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 800769e:	0e3f      	lsrs	r7, r7, #24
 80076a0:	4698      	mov	r8, r3
 80076a2:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 80076a6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80076aa:	1936      	adds	r6, r6, r4
 80076ac:	416f      	adcs	r7, r5
 80076ae:	18b6      	adds	r6, r6, r2
 80076b0:	415f      	adcs	r7, r3
 80076b2:	ea86 0408 	eor.w	r4, r6, r8
 80076b6:	ea87 0509 	eor.w	r5, r7, r9
 80076ba:	46a0      	mov	r8, r4
 80076bc:	0c24      	lsrs	r4, r4, #16
 80076be:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80076c2:	e9cd 6734 	strd	r6, r7, [sp, #208]	; 0xd0
 80076c6:	9426      	str	r4, [sp, #152]	; 0x98
 80076c8:	0c2c      	lsrs	r4, r5, #16
 80076ca:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80076ce:	9427      	str	r4, [sp, #156]	; 0x9c
 80076d0:	e9dd 4526 	ldrd	r4, r5, [sp, #152]	; 0x98
 80076d4:	1824      	adds	r4, r4, r0
 80076d6:	414d      	adcs	r5, r1
 80076d8:	4620      	mov	r0, r4
 80076da:	4629      	mov	r1, r5
 80076dc:	4050      	eors	r0, r2
 80076de:	4059      	eors	r1, r3
 80076e0:	0042      	lsls	r2, r0, #1
 80076e2:	460b      	mov	r3, r1
 80076e4:	0049      	lsls	r1, r1, #1
 80076e6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80076ea:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80076ee:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 80076f2:	912d      	str	r1, [sp, #180]	; 0xb4
 80076f4:	932c      	str	r3, [sp, #176]	; 0xb0
 80076f6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80076fa:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 80076fe:	18c0      	adds	r0, r0, r3
 8007700:	4161      	adcs	r1, r4
 8007702:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
 8007706:	181b      	adds	r3, r3, r0
 8007708:	4618      	mov	r0, r3
 800770a:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800770e:	414c      	adcs	r4, r1
 8007710:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8007714:	4063      	eors	r3, r4
 8007716:	4621      	mov	r1, r4
 8007718:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 800771c:	18f6      	adds	r6, r6, r3
 800771e:	ea82 0200 	eor.w	r2, r2, r0
 8007722:	4157      	adcs	r7, r2
 8007724:	4074      	eors	r4, r6
 8007726:	407d      	eors	r5, r7
 8007728:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 800772c:	4691      	mov	r9, r2
 800772e:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8007732:	0e2d      	lsrs	r5, r5, #24
 8007734:	4698      	mov	r8, r3
 8007736:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 800773a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800773e:	1824      	adds	r4, r4, r0
 8007740:	414d      	adcs	r5, r1
 8007742:	18a4      	adds	r4, r4, r2
 8007744:	415d      	adcs	r5, r3
 8007746:	ea84 0008 	eor.w	r0, r4, r8
 800774a:	ea85 0109 	eor.w	r1, r5, r9
 800774e:	4689      	mov	r9, r1
 8007750:	0c01      	lsrs	r1, r0, #16
 8007752:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8007756:	9122      	str	r1, [sp, #136]	; 0x88
 8007758:	ea4f 4119 	mov.w	r1, r9, lsr #16
 800775c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007760:	9123      	str	r1, [sp, #140]	; 0x8c
 8007762:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8007766:	1980      	adds	r0, r0, r6
 8007768:	4179      	adcs	r1, r7
 800776a:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 800776e:	4050      	eors	r0, r2
 8007770:	4059      	eors	r1, r3
 8007772:	0042      	lsls	r2, r0, #1
 8007774:	460b      	mov	r3, r1
 8007776:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800777a:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 800777e:	932a      	str	r3, [sp, #168]	; 0xa8
 8007780:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 8007784:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8007788:	18a4      	adds	r4, r4, r2
 800778a:	415d      	adcs	r5, r3
 800778c:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8007790:	eb14 040a 	adds.w	r4, r4, sl
 8007794:	e9dd 6732 	ldrd	r6, r7, [sp, #200]	; 0xc8
 8007798:	eb45 050b 	adc.w	r5, r5, fp
 800779c:	406b      	eors	r3, r5
 800779e:	18f6      	adds	r6, r6, r3
 80077a0:	ea82 0204 	eor.w	r2, r2, r4
 80077a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80077a8:	4157      	adcs	r7, r2
 80077aa:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80077ae:	ea8a 0006 	eor.w	r0, sl, r6
 80077b2:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 80077b6:	912b      	str	r1, [sp, #172]	; 0xac
 80077b8:	ea8b 0107 	eor.w	r1, fp, r7
 80077bc:	4691      	mov	r9, r2
 80077be:	e01f      	b.n	8007800 <blake2b_compress_ref+0xc00>
 80077c0:	ade682d1 	.word	0xade682d1
 80077c4:	510e527f 	.word	0x510e527f
 80077c8:	f3bcc908 	.word	0xf3bcc908
 80077cc:	6a09e667 	.word	0x6a09e667
 80077d0:	2b3e6c1f 	.word	0x2b3e6c1f
 80077d4:	9b05688c 	.word	0x9b05688c
 80077d8:	84caa73b 	.word	0x84caa73b
 80077dc:	bb67ae85 	.word	0xbb67ae85
 80077e0:	fb41bd6b 	.word	0xfb41bd6b
 80077e4:	1f83d9ab 	.word	0x1f83d9ab
 80077e8:	fe94f82b 	.word	0xfe94f82b
 80077ec:	3c6ef372 	.word	0x3c6ef372
 80077f0:	137e2179 	.word	0x137e2179
 80077f4:	5be0cd19 	.word	0x5be0cd19
 80077f8:	5f1d36f1 	.word	0x5f1d36f1
 80077fc:	a54ff53a 	.word	0xa54ff53a
 8007800:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8007804:	0e09      	lsrs	r1, r1, #24
 8007806:	4698      	mov	r8, r3
 8007808:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 800780c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007810:	1900      	adds	r0, r0, r4
 8007812:	4169      	adcs	r1, r5
 8007814:	1880      	adds	r0, r0, r2
 8007816:	4159      	adcs	r1, r3
 8007818:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 800781c:	ea80 0008 	eor.w	r0, r0, r8
 8007820:	ea81 0109 	eor.w	r1, r1, r9
 8007824:	4689      	mov	r9, r1
 8007826:	0c01      	lsrs	r1, r0, #16
 8007828:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800782c:	9120      	str	r1, [sp, #128]	; 0x80
 800782e:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007832:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007836:	9121      	str	r1, [sp, #132]	; 0x84
 8007838:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800783c:	1980      	adds	r0, r0, r6
 800783e:	4179      	adcs	r1, r7
 8007840:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 8007844:	4050      	eors	r0, r2
 8007846:	4059      	eors	r1, r3
 8007848:	460b      	mov	r3, r1
 800784a:	0042      	lsls	r2, r0, #1
 800784c:	0049      	lsls	r1, r1, #1
 800784e:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 8007852:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8007856:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 800785a:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800785e:	18c0      	adds	r0, r0, r3
 8007860:	4161      	adcs	r1, r4
 8007862:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 8007866:	181b      	adds	r3, r3, r0
 8007868:	4618      	mov	r0, r3
 800786a:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 800786e:	414c      	adcs	r4, r1
 8007870:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 8007874:	4063      	eors	r3, r4
 8007876:	4621      	mov	r1, r4
 8007878:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 800787c:	18f6      	adds	r6, r6, r3
 800787e:	ea82 0200 	eor.w	r2, r2, r0
 8007882:	4157      	adcs	r7, r2
 8007884:	4074      	eors	r4, r6
 8007886:	407d      	eors	r5, r7
 8007888:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 800788c:	4691      	mov	r9, r2
 800788e:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8007892:	0e2d      	lsrs	r5, r5, #24
 8007894:	4698      	mov	r8, r3
 8007896:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 800789a:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 800789e:	1824      	adds	r4, r4, r0
 80078a0:	414d      	adcs	r5, r1
 80078a2:	18a4      	adds	r4, r4, r2
 80078a4:	415d      	adcs	r5, r3
 80078a6:	ea84 0008 	eor.w	r0, r4, r8
 80078aa:	ea85 0109 	eor.w	r1, r5, r9
 80078ae:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 80078b2:	0c04      	lsrs	r4, r0, #16
 80078b4:	4680      	mov	r8, r0
 80078b6:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 80078ba:	0c0c      	lsrs	r4, r1, #16
 80078bc:	1836      	adds	r6, r6, r0
 80078be:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 80078c2:	414f      	adcs	r7, r1
 80078c4:	407b      	eors	r3, r7
 80078c6:	4072      	eors	r2, r6
 80078c8:	005c      	lsls	r4, r3, #1
 80078ca:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 80078ce:	0052      	lsls	r2, r2, #1
 80078d0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80078d4:	9425      	str	r4, [sp, #148]	; 0x94
 80078d6:	9324      	str	r3, [sp, #144]	; 0x90
 80078d8:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 80078dc:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 80078e0:	18a4      	adds	r4, r4, r2
 80078e2:	415d      	adcs	r5, r3
 80078e4:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 80078e8:	1912      	adds	r2, r2, r4
 80078ea:	416b      	adcs	r3, r5
 80078ec:	4050      	eors	r0, r2
 80078ee:	4059      	eors	r1, r3
 80078f0:	4614      	mov	r4, r2
 80078f2:	461d      	mov	r5, r3
 80078f4:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 80078f8:	1852      	adds	r2, r2, r1
 80078fa:	4143      	adcs	r3, r0
 80078fc:	4688      	mov	r8, r1
 80078fe:	4681      	mov	r9, r0
 8007900:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8007904:	4050      	eors	r0, r2
 8007906:	4059      	eors	r1, r3
 8007908:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 800790c:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
 8007910:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8007914:	0e09      	lsrs	r1, r1, #24
 8007916:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 800791a:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800791e:	1900      	adds	r0, r0, r4
 8007920:	4169      	adcs	r1, r5
 8007922:	1880      	adds	r0, r0, r2
 8007924:	4159      	adcs	r1, r3
 8007926:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 800792a:	ea80 0008 	eor.w	r0, r0, r8
 800792e:	ea81 0109 	eor.w	r1, r1, r9
 8007932:	4689      	mov	r9, r1
 8007934:	0c01      	lsrs	r1, r0, #16
 8007936:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800793a:	9128      	str	r1, [sp, #160]	; 0xa0
 800793c:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007940:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007944:	9129      	str	r1, [sp, #164]	; 0xa4
 8007946:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 800794a:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 800794e:	1900      	adds	r0, r0, r4
 8007950:	4169      	adcs	r1, r5
 8007952:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8007956:	4050      	eors	r0, r2
 8007958:	4059      	eors	r1, r3
 800795a:	0042      	lsls	r2, r0, #1
 800795c:	460b      	mov	r3, r1
 800795e:	0049      	lsls	r1, r1, #1
 8007960:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007964:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8007968:	912b      	str	r1, [sp, #172]	; 0xac
 800796a:	932a      	str	r3, [sp, #168]	; 0xa8
 800796c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007970:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8007974:	18c0      	adds	r0, r0, r3
 8007976:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800797a:	4161      	adcs	r1, r4
 800797c:	eb10 000a 	adds.w	r0, r0, sl
 8007980:	eb41 010b 	adc.w	r1, r1, fp
 8007984:	404b      	eors	r3, r1
 8007986:	18f6      	adds	r6, r6, r3
 8007988:	ea82 0200 	eor.w	r2, r2, r0
 800798c:	4157      	adcs	r7, r2
 800798e:	ea8a 0406 	eor.w	r4, sl, r6
 8007992:	ea8b 0507 	eor.w	r5, fp, r7
 8007996:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 800799a:	4691      	mov	r9, r2
 800799c:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80079a0:	0e2d      	lsrs	r5, r5, #24
 80079a2:	4698      	mov	r8, r3
 80079a4:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80079a8:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 80079ac:	1824      	adds	r4, r4, r0
 80079ae:	414d      	adcs	r5, r1
 80079b0:	18a4      	adds	r4, r4, r2
 80079b2:	415d      	adcs	r5, r3
 80079b4:	ea84 0008 	eor.w	r0, r4, r8
 80079b8:	ea85 0109 	eor.w	r1, r5, r9
 80079bc:	4689      	mov	r9, r1
 80079be:	0c01      	lsrs	r1, r0, #16
 80079c0:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80079c4:	9126      	str	r1, [sp, #152]	; 0x98
 80079c6:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80079ca:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80079ce:	9127      	str	r1, [sp, #156]	; 0x9c
 80079d0:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 80079d4:	1980      	adds	r0, r0, r6
 80079d6:	4179      	adcs	r1, r7
 80079d8:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 80079dc:	4050      	eors	r0, r2
 80079de:	4059      	eors	r1, r3
 80079e0:	460b      	mov	r3, r1
 80079e2:	0042      	lsls	r2, r0, #1
 80079e4:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 80079e8:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 80079ec:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 80079f0:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 80079f4:	18a4      	adds	r4, r4, r2
 80079f6:	415d      	adcs	r5, r3
 80079f8:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 80079fc:	1912      	adds	r2, r2, r4
 80079fe:	416b      	adcs	r3, r5
 8007a00:	4614      	mov	r4, r2
 8007a02:	461d      	mov	r5, r3
 8007a04:	0049      	lsls	r1, r1, #1
 8007a06:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8007a0a:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8007a0e:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8007a12:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	; 0x90
 8007a16:	406b      	eors	r3, r5
 8007a18:	18c0      	adds	r0, r0, r3
 8007a1a:	ea82 0204 	eor.w	r2, r2, r4
 8007a1e:	4151      	adcs	r1, r2
 8007a20:	4046      	eors	r6, r0
 8007a22:	404f      	eors	r7, r1
 8007a24:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8007a28:	4691      	mov	r9, r2
 8007a2a:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8007a2e:	0e3f      	lsrs	r7, r7, #24
 8007a30:	4698      	mov	r8, r3
 8007a32:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8007a36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007a3a:	1936      	adds	r6, r6, r4
 8007a3c:	416f      	adcs	r7, r5
 8007a3e:	18b6      	adds	r6, r6, r2
 8007a40:	415f      	adcs	r7, r3
 8007a42:	ea86 0408 	eor.w	r4, r6, r8
 8007a46:	ea87 0509 	eor.w	r5, r7, r9
 8007a4a:	46a0      	mov	r8, r4
 8007a4c:	0c24      	lsrs	r4, r4, #16
 8007a4e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007a52:	9422      	str	r4, [sp, #136]	; 0x88
 8007a54:	0c2c      	lsrs	r4, r5, #16
 8007a56:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8007a5a:	9423      	str	r4, [sp, #140]	; 0x8c
 8007a5c:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 8007a60:	1824      	adds	r4, r4, r0
 8007a62:	414d      	adcs	r5, r1
 8007a64:	4620      	mov	r0, r4
 8007a66:	4629      	mov	r1, r5
 8007a68:	4050      	eors	r0, r2
 8007a6a:	4059      	eors	r1, r3
 8007a6c:	0042      	lsls	r2, r0, #1
 8007a6e:	460b      	mov	r3, r1
 8007a70:	0049      	lsls	r1, r1, #1
 8007a72:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007a76:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8007a7a:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8007a7e:	9125      	str	r1, [sp, #148]	; 0x94
 8007a80:	9324      	str	r3, [sp, #144]	; 0x90
 8007a82:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8007a86:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8007a8a:	18c0      	adds	r0, r0, r3
 8007a8c:	4161      	adcs	r1, r4
 8007a8e:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 8007a92:	181b      	adds	r3, r3, r0
 8007a94:	4618      	mov	r0, r3
 8007a96:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8007a9a:	414c      	adcs	r4, r1
 8007a9c:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
 8007aa0:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8007aa4:	4063      	eors	r3, r4
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 8007aac:	18f6      	adds	r6, r6, r3
 8007aae:	ea82 0200 	eor.w	r2, r2, r0
 8007ab2:	4157      	adcs	r7, r2
 8007ab4:	4074      	eors	r4, r6
 8007ab6:	407d      	eors	r5, r7
 8007ab8:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8007abc:	4691      	mov	r9, r2
 8007abe:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8007ac2:	0e2d      	lsrs	r5, r5, #24
 8007ac4:	4698      	mov	r8, r3
 8007ac6:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8007aca:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8007ace:	1824      	adds	r4, r4, r0
 8007ad0:	414d      	adcs	r5, r1
 8007ad2:	18a4      	adds	r4, r4, r2
 8007ad4:	415d      	adcs	r5, r3
 8007ad6:	ea84 0008 	eor.w	r0, r4, r8
 8007ada:	ea85 0109 	eor.w	r1, r5, r9
 8007ade:	4689      	mov	r9, r1
 8007ae0:	0c01      	lsrs	r1, r0, #16
 8007ae2:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8007ae6:	9120      	str	r1, [sp, #128]	; 0x80
 8007ae8:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007aec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007af0:	9121      	str	r1, [sp, #132]	; 0x84
 8007af2:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8007af6:	1980      	adds	r0, r0, r6
 8007af8:	4179      	adcs	r1, r7
 8007afa:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8007afe:	4050      	eors	r0, r2
 8007b00:	4059      	eors	r1, r3
 8007b02:	460b      	mov	r3, r1
 8007b04:	0042      	lsls	r2, r0, #1
 8007b06:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 8007b0a:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8007b0e:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8007b12:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 8007b16:	18a4      	adds	r4, r4, r2
 8007b18:	415d      	adcs	r5, r3
 8007b1a:	0049      	lsls	r1, r1, #1
 8007b1c:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8007b20:	19a4      	adds	r4, r4, r6
 8007b22:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 8007b26:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8007b2a:	417d      	adcs	r5, r7
 8007b2c:	406b      	eors	r3, r5
 8007b2e:	18c0      	adds	r0, r0, r3
 8007b30:	ea82 0204 	eor.w	r2, r2, r4
 8007b34:	4151      	adcs	r1, r2
 8007b36:	4046      	eors	r6, r0
 8007b38:	404f      	eors	r7, r1
 8007b3a:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8007b3e:	4691      	mov	r9, r2
 8007b40:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8007b44:	0e3f      	lsrs	r7, r7, #24
 8007b46:	4698      	mov	r8, r3
 8007b48:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8007b4c:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007b50:	1936      	adds	r6, r6, r4
 8007b52:	416f      	adcs	r7, r5
 8007b54:	18b6      	adds	r6, r6, r2
 8007b56:	415f      	adcs	r7, r3
 8007b58:	ea86 0408 	eor.w	r4, r6, r8
 8007b5c:	ea87 0509 	eor.w	r5, r7, r9
 8007b60:	46a0      	mov	r8, r4
 8007b62:	0c24      	lsrs	r4, r4, #16
 8007b64:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007b68:	9426      	str	r4, [sp, #152]	; 0x98
 8007b6a:	0c2c      	lsrs	r4, r5, #16
 8007b6c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8007b70:	e9cd 6736 	strd	r6, r7, [sp, #216]	; 0xd8
 8007b74:	9427      	str	r4, [sp, #156]	; 0x9c
 8007b76:	e9dd 4526 	ldrd	r4, r5, [sp, #152]	; 0x98
 8007b7a:	1824      	adds	r4, r4, r0
 8007b7c:	414d      	adcs	r5, r1
 8007b7e:	4620      	mov	r0, r4
 8007b80:	4629      	mov	r1, r5
 8007b82:	4050      	eors	r0, r2
 8007b84:	4059      	eors	r1, r3
 8007b86:	0042      	lsls	r2, r0, #1
 8007b88:	460b      	mov	r3, r1
 8007b8a:	0049      	lsls	r1, r1, #1
 8007b8c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007b90:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8007b94:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8007b98:	912d      	str	r1, [sp, #180]	; 0xb4
 8007b9a:	932c      	str	r3, [sp, #176]	; 0xb0
 8007b9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ba0:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8007ba4:	18c0      	adds	r0, r0, r3
 8007ba6:	4161      	adcs	r1, r4
 8007ba8:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
 8007bac:	181b      	adds	r3, r3, r0
 8007bae:	4618      	mov	r0, r3
 8007bb0:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8007bb4:	414c      	adcs	r4, r1
 8007bb6:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8007bba:	4063      	eors	r3, r4
 8007bbc:	4621      	mov	r1, r4
 8007bbe:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 8007bc2:	18f6      	adds	r6, r6, r3
 8007bc4:	ea82 0200 	eor.w	r2, r2, r0
 8007bc8:	4157      	adcs	r7, r2
 8007bca:	4074      	eors	r4, r6
 8007bcc:	407d      	eors	r5, r7
 8007bce:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8007bd2:	4691      	mov	r9, r2
 8007bd4:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8007bd8:	0e2d      	lsrs	r5, r5, #24
 8007bda:	4698      	mov	r8, r3
 8007bdc:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8007be0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007be4:	1824      	adds	r4, r4, r0
 8007be6:	414d      	adcs	r5, r1
 8007be8:	18a4      	adds	r4, r4, r2
 8007bea:	415d      	adcs	r5, r3
 8007bec:	ea84 0008 	eor.w	r0, r4, r8
 8007bf0:	ea85 0109 	eor.w	r1, r5, r9
 8007bf4:	4689      	mov	r9, r1
 8007bf6:	0c01      	lsrs	r1, r0, #16
 8007bf8:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8007bfc:	9122      	str	r1, [sp, #136]	; 0x88
 8007bfe:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007c02:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007c06:	9123      	str	r1, [sp, #140]	; 0x8c
 8007c08:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8007c0c:	1980      	adds	r0, r0, r6
 8007c0e:	4179      	adcs	r1, r7
 8007c10:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8007c14:	4050      	eors	r0, r2
 8007c16:	4059      	eors	r1, r3
 8007c18:	0042      	lsls	r2, r0, #1
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007c20:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8007c24:	932a      	str	r3, [sp, #168]	; 0xa8
 8007c26:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8007c2a:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8007c2e:	18a4      	adds	r4, r4, r2
 8007c30:	415d      	adcs	r5, r3
 8007c32:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8007c36:	eb14 040a 	adds.w	r4, r4, sl
 8007c3a:	e9dd 6734 	ldrd	r6, r7, [sp, #208]	; 0xd0
 8007c3e:	eb45 050b 	adc.w	r5, r5, fp
 8007c42:	406b      	eors	r3, r5
 8007c44:	18f6      	adds	r6, r6, r3
 8007c46:	ea82 0204 	eor.w	r2, r2, r4
 8007c4a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007c4e:	4157      	adcs	r7, r2
 8007c50:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8007c54:	ea8a 0006 	eor.w	r0, sl, r6
 8007c58:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8007c5c:	912b      	str	r1, [sp, #172]	; 0xac
 8007c5e:	ea8b 0107 	eor.w	r1, fp, r7
 8007c62:	4691      	mov	r9, r2
 8007c64:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8007c68:	0e09      	lsrs	r1, r1, #24
 8007c6a:	4698      	mov	r8, r3
 8007c6c:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8007c70:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8007c74:	1900      	adds	r0, r0, r4
 8007c76:	4169      	adcs	r1, r5
 8007c78:	1880      	adds	r0, r0, r2
 8007c7a:	4159      	adcs	r1, r3
 8007c7c:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 8007c80:	ea80 0008 	eor.w	r0, r0, r8
 8007c84:	ea81 0109 	eor.w	r1, r1, r9
 8007c88:	4689      	mov	r9, r1
 8007c8a:	0c01      	lsrs	r1, r0, #16
 8007c8c:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8007c90:	9120      	str	r1, [sp, #128]	; 0x80
 8007c92:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007c96:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007c9a:	9121      	str	r1, [sp, #132]	; 0x84
 8007c9c:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8007ca0:	1980      	adds	r0, r0, r6
 8007ca2:	4179      	adcs	r1, r7
 8007ca4:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8007ca8:	4050      	eors	r0, r2
 8007caa:	4059      	eors	r1, r3
 8007cac:	460b      	mov	r3, r1
 8007cae:	0042      	lsls	r2, r0, #1
 8007cb0:	0049      	lsls	r1, r1, #1
 8007cb2:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 8007cb6:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8007cba:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8007cbe:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8007cc2:	18c0      	adds	r0, r0, r3
 8007cc4:	4161      	adcs	r1, r4
 8007cc6:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 8007cca:	181b      	adds	r3, r3, r0
 8007ccc:	4618      	mov	r0, r3
 8007cce:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 8007cd2:	414c      	adcs	r4, r1
 8007cd4:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 8007cd8:	4063      	eors	r3, r4
 8007cda:	4621      	mov	r1, r4
 8007cdc:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 8007ce0:	18f6      	adds	r6, r6, r3
 8007ce2:	ea82 0200 	eor.w	r2, r2, r0
 8007ce6:	4157      	adcs	r7, r2
 8007ce8:	4074      	eors	r4, r6
 8007cea:	407d      	eors	r5, r7
 8007cec:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8007cf0:	4691      	mov	r9, r2
 8007cf2:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8007cf6:	0e2d      	lsrs	r5, r5, #24
 8007cf8:	4698      	mov	r8, r3
 8007cfa:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8007cfe:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 8007d02:	1824      	adds	r4, r4, r0
 8007d04:	414d      	adcs	r5, r1
 8007d06:	18a4      	adds	r4, r4, r2
 8007d08:	415d      	adcs	r5, r3
 8007d0a:	ea84 0008 	eor.w	r0, r4, r8
 8007d0e:	ea85 0109 	eor.w	r1, r5, r9
 8007d12:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8007d16:	0c04      	lsrs	r4, r0, #16
 8007d18:	4680      	mov	r8, r0
 8007d1a:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8007d1e:	0c0c      	lsrs	r4, r1, #16
 8007d20:	1836      	adds	r6, r6, r0
 8007d22:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 8007d26:	414f      	adcs	r7, r1
 8007d28:	407b      	eors	r3, r7
 8007d2a:	4072      	eors	r2, r6
 8007d2c:	005c      	lsls	r4, r3, #1
 8007d2e:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 8007d32:	0052      	lsls	r2, r2, #1
 8007d34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007d38:	9425      	str	r4, [sp, #148]	; 0x94
 8007d3a:	9324      	str	r3, [sp, #144]	; 0x90
 8007d3c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007d40:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8007d44:	18a4      	adds	r4, r4, r2
 8007d46:	415d      	adcs	r5, r3
 8007d48:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8007d4c:	1912      	adds	r2, r2, r4
 8007d4e:	416b      	adcs	r3, r5
 8007d50:	4050      	eors	r0, r2
 8007d52:	4059      	eors	r1, r3
 8007d54:	4614      	mov	r4, r2
 8007d56:	461d      	mov	r5, r3
 8007d58:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 8007d5c:	1852      	adds	r2, r2, r1
 8007d5e:	4143      	adcs	r3, r0
 8007d60:	4688      	mov	r8, r1
 8007d62:	4681      	mov	r9, r0
 8007d64:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8007d68:	4050      	eors	r0, r2
 8007d6a:	4059      	eors	r1, r3
 8007d6c:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8007d70:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
 8007d74:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8007d78:	0e09      	lsrs	r1, r1, #24
 8007d7a:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8007d7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d82:	1900      	adds	r0, r0, r4
 8007d84:	4169      	adcs	r1, r5
 8007d86:	1880      	adds	r0, r0, r2
 8007d88:	4159      	adcs	r1, r3
 8007d8a:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 8007d8e:	ea80 0008 	eor.w	r0, r0, r8
 8007d92:	ea81 0109 	eor.w	r1, r1, r9
 8007d96:	4689      	mov	r9, r1
 8007d98:	0c01      	lsrs	r1, r0, #16
 8007d9a:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8007d9e:	9128      	str	r1, [sp, #160]	; 0xa0
 8007da0:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007da4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007da8:	9129      	str	r1, [sp, #164]	; 0xa4
 8007daa:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 8007dae:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 8007db2:	1900      	adds	r0, r0, r4
 8007db4:	4169      	adcs	r1, r5
 8007db6:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8007dba:	4050      	eors	r0, r2
 8007dbc:	4059      	eors	r1, r3
 8007dbe:	0042      	lsls	r2, r0, #1
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	0049      	lsls	r1, r1, #1
 8007dc4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007dc8:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8007dcc:	912b      	str	r1, [sp, #172]	; 0xac
 8007dce:	932a      	str	r3, [sp, #168]	; 0xa8
 8007dd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007dd4:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8007dd8:	18c0      	adds	r0, r0, r3
 8007dda:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8007dde:	4161      	adcs	r1, r4
 8007de0:	eb10 000a 	adds.w	r0, r0, sl
 8007de4:	eb41 010b 	adc.w	r1, r1, fp
 8007de8:	404b      	eors	r3, r1
 8007dea:	18f6      	adds	r6, r6, r3
 8007dec:	ea82 0200 	eor.w	r2, r2, r0
 8007df0:	4157      	adcs	r7, r2
 8007df2:	ea8a 0406 	eor.w	r4, sl, r6
 8007df6:	ea8b 0507 	eor.w	r5, fp, r7
 8007dfa:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8007dfe:	4691      	mov	r9, r2
 8007e00:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8007e04:	0e2d      	lsrs	r5, r5, #24
 8007e06:	4698      	mov	r8, r3
 8007e08:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8007e0c:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 8007e10:	1824      	adds	r4, r4, r0
 8007e12:	414d      	adcs	r5, r1
 8007e14:	18a4      	adds	r4, r4, r2
 8007e16:	415d      	adcs	r5, r3
 8007e18:	ea84 0008 	eor.w	r0, r4, r8
 8007e1c:	ea85 0109 	eor.w	r1, r5, r9
 8007e20:	4689      	mov	r9, r1
 8007e22:	0c01      	lsrs	r1, r0, #16
 8007e24:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8007e28:	9126      	str	r1, [sp, #152]	; 0x98
 8007e2a:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007e2e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e32:	9127      	str	r1, [sp, #156]	; 0x9c
 8007e34:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8007e38:	1980      	adds	r0, r0, r6
 8007e3a:	4179      	adcs	r1, r7
 8007e3c:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 8007e40:	4050      	eors	r0, r2
 8007e42:	4059      	eors	r1, r3
 8007e44:	460b      	mov	r3, r1
 8007e46:	0042      	lsls	r2, r0, #1
 8007e48:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 8007e4c:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8007e50:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8007e54:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8007e58:	18a4      	adds	r4, r4, r2
 8007e5a:	415d      	adcs	r5, r3
 8007e5c:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8007e60:	1912      	adds	r2, r2, r4
 8007e62:	416b      	adcs	r3, r5
 8007e64:	4614      	mov	r4, r2
 8007e66:	461d      	mov	r5, r3
 8007e68:	0049      	lsls	r1, r1, #1
 8007e6a:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8007e6e:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8007e72:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8007e76:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	; 0x90
 8007e7a:	406b      	eors	r3, r5
 8007e7c:	18c0      	adds	r0, r0, r3
 8007e7e:	ea82 0204 	eor.w	r2, r2, r4
 8007e82:	4151      	adcs	r1, r2
 8007e84:	4046      	eors	r6, r0
 8007e86:	404f      	eors	r7, r1
 8007e88:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8007e8c:	4691      	mov	r9, r2
 8007e8e:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8007e92:	0e3f      	lsrs	r7, r7, #24
 8007e94:	4698      	mov	r8, r3
 8007e96:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8007e9a:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007e9e:	1936      	adds	r6, r6, r4
 8007ea0:	416f      	adcs	r7, r5
 8007ea2:	18b6      	adds	r6, r6, r2
 8007ea4:	415f      	adcs	r7, r3
 8007ea6:	ea86 0408 	eor.w	r4, r6, r8
 8007eaa:	ea87 0509 	eor.w	r5, r7, r9
 8007eae:	46a0      	mov	r8, r4
 8007eb0:	0c24      	lsrs	r4, r4, #16
 8007eb2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007eb6:	9422      	str	r4, [sp, #136]	; 0x88
 8007eb8:	0c2c      	lsrs	r4, r5, #16
 8007eba:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8007ebe:	9423      	str	r4, [sp, #140]	; 0x8c
 8007ec0:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 8007ec4:	1824      	adds	r4, r4, r0
 8007ec6:	414d      	adcs	r5, r1
 8007ec8:	4620      	mov	r0, r4
 8007eca:	4629      	mov	r1, r5
 8007ecc:	4050      	eors	r0, r2
 8007ece:	4059      	eors	r1, r3
 8007ed0:	0042      	lsls	r2, r0, #1
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	0049      	lsls	r1, r1, #1
 8007ed6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007eda:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8007ede:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8007ee2:	9125      	str	r1, [sp, #148]	; 0x94
 8007ee4:	9324      	str	r3, [sp, #144]	; 0x90
 8007ee6:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8007eea:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8007eee:	18c0      	adds	r0, r0, r3
 8007ef0:	4161      	adcs	r1, r4
 8007ef2:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 8007ef6:	181b      	adds	r3, r3, r0
 8007ef8:	4618      	mov	r0, r3
 8007efa:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8007efe:	414c      	adcs	r4, r1
 8007f00:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
 8007f04:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8007f08:	4063      	eors	r3, r4
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 8007f10:	18f6      	adds	r6, r6, r3
 8007f12:	ea82 0200 	eor.w	r2, r2, r0
 8007f16:	4157      	adcs	r7, r2
 8007f18:	4074      	eors	r4, r6
 8007f1a:	407d      	eors	r5, r7
 8007f1c:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8007f20:	4691      	mov	r9, r2
 8007f22:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8007f26:	0e2d      	lsrs	r5, r5, #24
 8007f28:	4698      	mov	r8, r3
 8007f2a:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8007f2e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8007f32:	1824      	adds	r4, r4, r0
 8007f34:	414d      	adcs	r5, r1
 8007f36:	18a4      	adds	r4, r4, r2
 8007f38:	415d      	adcs	r5, r3
 8007f3a:	ea84 0008 	eor.w	r0, r4, r8
 8007f3e:	ea85 0109 	eor.w	r1, r5, r9
 8007f42:	4689      	mov	r9, r1
 8007f44:	0c01      	lsrs	r1, r0, #16
 8007f46:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8007f4a:	9120      	str	r1, [sp, #128]	; 0x80
 8007f4c:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8007f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007f54:	9121      	str	r1, [sp, #132]	; 0x84
 8007f56:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8007f5a:	1980      	adds	r0, r0, r6
 8007f5c:	4179      	adcs	r1, r7
 8007f5e:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8007f62:	4050      	eors	r0, r2
 8007f64:	4059      	eors	r1, r3
 8007f66:	460b      	mov	r3, r1
 8007f68:	0042      	lsls	r2, r0, #1
 8007f6a:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 8007f6e:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8007f72:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8007f76:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8007f7a:	18a4      	adds	r4, r4, r2
 8007f7c:	415d      	adcs	r5, r3
 8007f7e:	0049      	lsls	r1, r1, #1
 8007f80:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8007f84:	19a4      	adds	r4, r4, r6
 8007f86:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 8007f8a:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8007f8e:	417d      	adcs	r5, r7
 8007f90:	406b      	eors	r3, r5
 8007f92:	18c0      	adds	r0, r0, r3
 8007f94:	ea82 0204 	eor.w	r2, r2, r4
 8007f98:	4151      	adcs	r1, r2
 8007f9a:	4046      	eors	r6, r0
 8007f9c:	404f      	eors	r7, r1
 8007f9e:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8007fa2:	4691      	mov	r9, r2
 8007fa4:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8007fa8:	0e3f      	lsrs	r7, r7, #24
 8007faa:	4698      	mov	r8, r3
 8007fac:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8007fb0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007fb4:	1936      	adds	r6, r6, r4
 8007fb6:	416f      	adcs	r7, r5
 8007fb8:	18b6      	adds	r6, r6, r2
 8007fba:	415f      	adcs	r7, r3
 8007fbc:	ea86 0408 	eor.w	r4, r6, r8
 8007fc0:	ea87 0509 	eor.w	r5, r7, r9
 8007fc4:	46a0      	mov	r8, r4
 8007fc6:	0c24      	lsrs	r4, r4, #16
 8007fc8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007fcc:	9426      	str	r4, [sp, #152]	; 0x98
 8007fce:	0c2c      	lsrs	r4, r5, #16
 8007fd0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8007fd4:	9427      	str	r4, [sp, #156]	; 0x9c
 8007fd6:	e9cd 6736 	strd	r6, r7, [sp, #216]	; 0xd8
 8007fda:	e9dd 4526 	ldrd	r4, r5, [sp, #152]	; 0x98
 8007fde:	1824      	adds	r4, r4, r0
 8007fe0:	414d      	adcs	r5, r1
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	4050      	eors	r0, r2
 8007fe8:	4059      	eors	r1, r3
 8007fea:	0042      	lsls	r2, r0, #1
 8007fec:	460b      	mov	r3, r1
 8007fee:	0049      	lsls	r1, r1, #1
 8007ff0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007ff4:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8007ff8:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8007ffc:	912d      	str	r1, [sp, #180]	; 0xb4
 8007ffe:	932c      	str	r3, [sp, #176]	; 0xb0
 8008000:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008004:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8008008:	18c0      	adds	r0, r0, r3
 800800a:	4161      	adcs	r1, r4
 800800c:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
 8008010:	181b      	adds	r3, r3, r0
 8008012:	4618      	mov	r0, r3
 8008014:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8008018:	414c      	adcs	r4, r1
 800801a:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 800801e:	4063      	eors	r3, r4
 8008020:	4621      	mov	r1, r4
 8008022:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 8008026:	18f6      	adds	r6, r6, r3
 8008028:	ea82 0200 	eor.w	r2, r2, r0
 800802c:	4157      	adcs	r7, r2
 800802e:	4074      	eors	r4, r6
 8008030:	407d      	eors	r5, r7
 8008032:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008036:	4691      	mov	r9, r2
 8008038:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 800803c:	0e2d      	lsrs	r5, r5, #24
 800803e:	4698      	mov	r8, r3
 8008040:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8008044:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 8008048:	1824      	adds	r4, r4, r0
 800804a:	414d      	adcs	r5, r1
 800804c:	18a4      	adds	r4, r4, r2
 800804e:	415d      	adcs	r5, r3
 8008050:	ea84 0008 	eor.w	r0, r4, r8
 8008054:	ea85 0109 	eor.w	r1, r5, r9
 8008058:	4689      	mov	r9, r1
 800805a:	0c01      	lsrs	r1, r0, #16
 800805c:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008060:	9122      	str	r1, [sp, #136]	; 0x88
 8008062:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008066:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800806a:	9123      	str	r1, [sp, #140]	; 0x8c
 800806c:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8008070:	1980      	adds	r0, r0, r6
 8008072:	4179      	adcs	r1, r7
 8008074:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8008078:	4050      	eors	r0, r2
 800807a:	4059      	eors	r1, r3
 800807c:	0042      	lsls	r2, r0, #1
 800807e:	460b      	mov	r3, r1
 8008080:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008084:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8008088:	932a      	str	r3, [sp, #168]	; 0xa8
 800808a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800808e:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8008092:	18a4      	adds	r4, r4, r2
 8008094:	415d      	adcs	r5, r3
 8008096:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800809a:	eb14 040a 	adds.w	r4, r4, sl
 800809e:	e9dd 6734 	ldrd	r6, r7, [sp, #208]	; 0xd0
 80080a2:	eb45 050b 	adc.w	r5, r5, fp
 80080a6:	406b      	eors	r3, r5
 80080a8:	18f6      	adds	r6, r6, r3
 80080aa:	ea82 0204 	eor.w	r2, r2, r4
 80080ae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80080b2:	4157      	adcs	r7, r2
 80080b4:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80080b8:	ea8a 0006 	eor.w	r0, sl, r6
 80080bc:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 80080c0:	912b      	str	r1, [sp, #172]	; 0xac
 80080c2:	ea8b 0107 	eor.w	r1, fp, r7
 80080c6:	4691      	mov	r9, r2
 80080c8:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 80080cc:	0e09      	lsrs	r1, r1, #24
 80080ce:	4698      	mov	r8, r3
 80080d0:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 80080d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80080d8:	1900      	adds	r0, r0, r4
 80080da:	4169      	adcs	r1, r5
 80080dc:	1880      	adds	r0, r0, r2
 80080de:	4159      	adcs	r1, r3
 80080e0:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 80080e4:	ea80 0008 	eor.w	r0, r0, r8
 80080e8:	ea81 0109 	eor.w	r1, r1, r9
 80080ec:	4689      	mov	r9, r1
 80080ee:	0c01      	lsrs	r1, r0, #16
 80080f0:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80080f4:	9120      	str	r1, [sp, #128]	; 0x80
 80080f6:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80080fa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80080fe:	9121      	str	r1, [sp, #132]	; 0x84
 8008100:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8008104:	1980      	adds	r0, r0, r6
 8008106:	4179      	adcs	r1, r7
 8008108:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 800810c:	4050      	eors	r0, r2
 800810e:	4059      	eors	r1, r3
 8008110:	460b      	mov	r3, r1
 8008112:	0042      	lsls	r2, r0, #1
 8008114:	0049      	lsls	r1, r1, #1
 8008116:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 800811a:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 800811e:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8008122:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8008126:	18c0      	adds	r0, r0, r3
 8008128:	4161      	adcs	r1, r4
 800812a:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 800812e:	181b      	adds	r3, r3, r0
 8008130:	4618      	mov	r0, r3
 8008132:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 8008136:	414c      	adcs	r4, r1
 8008138:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 800813c:	4063      	eors	r3, r4
 800813e:	4621      	mov	r1, r4
 8008140:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 8008144:	18f6      	adds	r6, r6, r3
 8008146:	ea82 0200 	eor.w	r2, r2, r0
 800814a:	4157      	adcs	r7, r2
 800814c:	4074      	eors	r4, r6
 800814e:	407d      	eors	r5, r7
 8008150:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008154:	4691      	mov	r9, r2
 8008156:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 800815a:	0e2d      	lsrs	r5, r5, #24
 800815c:	4698      	mov	r8, r3
 800815e:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8008162:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 8008166:	1824      	adds	r4, r4, r0
 8008168:	414d      	adcs	r5, r1
 800816a:	18a4      	adds	r4, r4, r2
 800816c:	415d      	adcs	r5, r3
 800816e:	ea84 0008 	eor.w	r0, r4, r8
 8008172:	ea85 0109 	eor.w	r1, r5, r9
 8008176:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 800817a:	0c04      	lsrs	r4, r0, #16
 800817c:	4680      	mov	r8, r0
 800817e:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8008182:	0c0c      	lsrs	r4, r1, #16
 8008184:	1836      	adds	r6, r6, r0
 8008186:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 800818a:	414f      	adcs	r7, r1
 800818c:	407b      	eors	r3, r7
 800818e:	4072      	eors	r2, r6
 8008190:	005c      	lsls	r4, r3, #1
 8008192:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 8008196:	0052      	lsls	r2, r2, #1
 8008198:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800819c:	9425      	str	r4, [sp, #148]	; 0x94
 800819e:	9324      	str	r3, [sp, #144]	; 0x90
 80081a0:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 80081a4:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 80081a8:	18a4      	adds	r4, r4, r2
 80081aa:	415d      	adcs	r5, r3
 80081ac:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 80081b0:	1912      	adds	r2, r2, r4
 80081b2:	416b      	adcs	r3, r5
 80081b4:	4050      	eors	r0, r2
 80081b6:	4059      	eors	r1, r3
 80081b8:	4614      	mov	r4, r2
 80081ba:	461d      	mov	r5, r3
 80081bc:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 80081c0:	1852      	adds	r2, r2, r1
 80081c2:	4143      	adcs	r3, r0
 80081c4:	4688      	mov	r8, r1
 80081c6:	4681      	mov	r9, r0
 80081c8:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 80081cc:	4050      	eors	r0, r2
 80081ce:	4059      	eors	r1, r3
 80081d0:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 80081d4:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
 80081d8:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 80081dc:	0e09      	lsrs	r1, r1, #24
 80081de:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 80081e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081e6:	1900      	adds	r0, r0, r4
 80081e8:	4169      	adcs	r1, r5
 80081ea:	1880      	adds	r0, r0, r2
 80081ec:	4159      	adcs	r1, r3
 80081ee:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 80081f2:	ea80 0008 	eor.w	r0, r0, r8
 80081f6:	ea81 0109 	eor.w	r1, r1, r9
 80081fa:	4689      	mov	r9, r1
 80081fc:	0c01      	lsrs	r1, r0, #16
 80081fe:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008202:	9128      	str	r1, [sp, #160]	; 0xa0
 8008204:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008208:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800820c:	9129      	str	r1, [sp, #164]	; 0xa4
 800820e:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 8008212:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 8008216:	1900      	adds	r0, r0, r4
 8008218:	4169      	adcs	r1, r5
 800821a:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 800821e:	4050      	eors	r0, r2
 8008220:	4059      	eors	r1, r3
 8008222:	0042      	lsls	r2, r0, #1
 8008224:	460b      	mov	r3, r1
 8008226:	0049      	lsls	r1, r1, #1
 8008228:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800822c:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008230:	912b      	str	r1, [sp, #172]	; 0xac
 8008232:	932a      	str	r3, [sp, #168]	; 0xa8
 8008234:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8008238:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 800823c:	18c0      	adds	r0, r0, r3
 800823e:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8008242:	4161      	adcs	r1, r4
 8008244:	eb10 000a 	adds.w	r0, r0, sl
 8008248:	eb41 010b 	adc.w	r1, r1, fp
 800824c:	404b      	eors	r3, r1
 800824e:	18f6      	adds	r6, r6, r3
 8008250:	ea82 0200 	eor.w	r2, r2, r0
 8008254:	4157      	adcs	r7, r2
 8008256:	ea8a 0406 	eor.w	r4, sl, r6
 800825a:	ea8b 0507 	eor.w	r5, fp, r7
 800825e:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008262:	4691      	mov	r9, r2
 8008264:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8008268:	0e2d      	lsrs	r5, r5, #24
 800826a:	4698      	mov	r8, r3
 800826c:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8008270:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 8008274:	1824      	adds	r4, r4, r0
 8008276:	414d      	adcs	r5, r1
 8008278:	18a4      	adds	r4, r4, r2
 800827a:	415d      	adcs	r5, r3
 800827c:	ea84 0008 	eor.w	r0, r4, r8
 8008280:	ea85 0109 	eor.w	r1, r5, r9
 8008284:	4689      	mov	r9, r1
 8008286:	0c01      	lsrs	r1, r0, #16
 8008288:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800828c:	9126      	str	r1, [sp, #152]	; 0x98
 800828e:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008292:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008296:	9127      	str	r1, [sp, #156]	; 0x9c
 8008298:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800829c:	1980      	adds	r0, r0, r6
 800829e:	4179      	adcs	r1, r7
 80082a0:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 80082a4:	4050      	eors	r0, r2
 80082a6:	4059      	eors	r1, r3
 80082a8:	460b      	mov	r3, r1
 80082aa:	0042      	lsls	r2, r0, #1
 80082ac:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 80082b0:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 80082b4:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 80082b8:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 80082bc:	18a4      	adds	r4, r4, r2
 80082be:	415d      	adcs	r5, r3
 80082c0:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 80082c4:	1912      	adds	r2, r2, r4
 80082c6:	416b      	adcs	r3, r5
 80082c8:	4614      	mov	r4, r2
 80082ca:	461d      	mov	r5, r3
 80082cc:	0049      	lsls	r1, r1, #1
 80082ce:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 80082d2:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 80082d6:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 80082da:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	; 0x90
 80082de:	406b      	eors	r3, r5
 80082e0:	18c0      	adds	r0, r0, r3
 80082e2:	ea82 0204 	eor.w	r2, r2, r4
 80082e6:	4151      	adcs	r1, r2
 80082e8:	4046      	eors	r6, r0
 80082ea:	404f      	eors	r7, r1
 80082ec:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 80082f0:	4691      	mov	r9, r2
 80082f2:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 80082f6:	0e3f      	lsrs	r7, r7, #24
 80082f8:	4698      	mov	r8, r3
 80082fa:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 80082fe:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008302:	1936      	adds	r6, r6, r4
 8008304:	416f      	adcs	r7, r5
 8008306:	18b6      	adds	r6, r6, r2
 8008308:	415f      	adcs	r7, r3
 800830a:	ea86 0408 	eor.w	r4, r6, r8
 800830e:	ea87 0509 	eor.w	r5, r7, r9
 8008312:	46a0      	mov	r8, r4
 8008314:	0c24      	lsrs	r4, r4, #16
 8008316:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800831a:	9422      	str	r4, [sp, #136]	; 0x88
 800831c:	0c2c      	lsrs	r4, r5, #16
 800831e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8008322:	9423      	str	r4, [sp, #140]	; 0x8c
 8008324:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 8008328:	1824      	adds	r4, r4, r0
 800832a:	414d      	adcs	r5, r1
 800832c:	4620      	mov	r0, r4
 800832e:	4629      	mov	r1, r5
 8008330:	4050      	eors	r0, r2
 8008332:	4059      	eors	r1, r3
 8008334:	0042      	lsls	r2, r0, #1
 8008336:	460b      	mov	r3, r1
 8008338:	0049      	lsls	r1, r1, #1
 800833a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800833e:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008342:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8008346:	9125      	str	r1, [sp, #148]	; 0x94
 8008348:	9324      	str	r3, [sp, #144]	; 0x90
 800834a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800834e:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8008352:	18c0      	adds	r0, r0, r3
 8008354:	4161      	adcs	r1, r4
 8008356:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 800835a:	181b      	adds	r3, r3, r0
 800835c:	4618      	mov	r0, r3
 800835e:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8008362:	414c      	adcs	r4, r1
 8008364:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
 8008368:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 800836c:	4063      	eors	r3, r4
 800836e:	4621      	mov	r1, r4
 8008370:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 8008374:	18f6      	adds	r6, r6, r3
 8008376:	ea82 0200 	eor.w	r2, r2, r0
 800837a:	4157      	adcs	r7, r2
 800837c:	4074      	eors	r4, r6
 800837e:	407d      	eors	r5, r7
 8008380:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008384:	4691      	mov	r9, r2
 8008386:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 800838a:	0e2d      	lsrs	r5, r5, #24
 800838c:	4698      	mov	r8, r3
 800838e:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8008392:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8008396:	1824      	adds	r4, r4, r0
 8008398:	414d      	adcs	r5, r1
 800839a:	18a4      	adds	r4, r4, r2
 800839c:	415d      	adcs	r5, r3
 800839e:	ea84 0008 	eor.w	r0, r4, r8
 80083a2:	ea85 0109 	eor.w	r1, r5, r9
 80083a6:	4689      	mov	r9, r1
 80083a8:	0c01      	lsrs	r1, r0, #16
 80083aa:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80083ae:	9120      	str	r1, [sp, #128]	; 0x80
 80083b0:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80083b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80083b8:	9121      	str	r1, [sp, #132]	; 0x84
 80083ba:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 80083be:	1980      	adds	r0, r0, r6
 80083c0:	4179      	adcs	r1, r7
 80083c2:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 80083c6:	4050      	eors	r0, r2
 80083c8:	4059      	eors	r1, r3
 80083ca:	460b      	mov	r3, r1
 80083cc:	0042      	lsls	r2, r0, #1
 80083ce:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 80083d2:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 80083d6:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 80083da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80083de:	18a4      	adds	r4, r4, r2
 80083e0:	415d      	adcs	r5, r3
 80083e2:	0049      	lsls	r1, r1, #1
 80083e4:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 80083e8:	19a4      	adds	r4, r4, r6
 80083ea:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 80083ee:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 80083f2:	417d      	adcs	r5, r7
 80083f4:	406b      	eors	r3, r5
 80083f6:	18c0      	adds	r0, r0, r3
 80083f8:	ea82 0204 	eor.w	r2, r2, r4
 80083fc:	4151      	adcs	r1, r2
 80083fe:	4046      	eors	r6, r0
 8008400:	404f      	eors	r7, r1
 8008402:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8008406:	4691      	mov	r9, r2
 8008408:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 800840c:	0e3f      	lsrs	r7, r7, #24
 800840e:	4698      	mov	r8, r3
 8008410:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8008414:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8008418:	1936      	adds	r6, r6, r4
 800841a:	416f      	adcs	r7, r5
 800841c:	18b6      	adds	r6, r6, r2
 800841e:	415f      	adcs	r7, r3
 8008420:	ea86 0408 	eor.w	r4, r6, r8
 8008424:	ea87 0509 	eor.w	r5, r7, r9
 8008428:	46a0      	mov	r8, r4
 800842a:	0c24      	lsrs	r4, r4, #16
 800842c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008430:	9426      	str	r4, [sp, #152]	; 0x98
 8008432:	0c2c      	lsrs	r4, r5, #16
 8008434:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8008438:	9427      	str	r4, [sp, #156]	; 0x9c
 800843a:	e9cd 6736 	strd	r6, r7, [sp, #216]	; 0xd8
 800843e:	e9dd 4526 	ldrd	r4, r5, [sp, #152]	; 0x98
 8008442:	1824      	adds	r4, r4, r0
 8008444:	414d      	adcs	r5, r1
 8008446:	4620      	mov	r0, r4
 8008448:	4629      	mov	r1, r5
 800844a:	4050      	eors	r0, r2
 800844c:	4059      	eors	r1, r3
 800844e:	0042      	lsls	r2, r0, #1
 8008450:	460b      	mov	r3, r1
 8008452:	0049      	lsls	r1, r1, #1
 8008454:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008458:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 800845c:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8008460:	912d      	str	r1, [sp, #180]	; 0xb4
 8008462:	932c      	str	r3, [sp, #176]	; 0xb0
 8008464:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008468:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 800846c:	18c0      	adds	r0, r0, r3
 800846e:	4161      	adcs	r1, r4
 8008470:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
 8008474:	181b      	adds	r3, r3, r0
 8008476:	4618      	mov	r0, r3
 8008478:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800847c:	414c      	adcs	r4, r1
 800847e:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8008482:	4063      	eors	r3, r4
 8008484:	4621      	mov	r1, r4
 8008486:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 800848a:	18f6      	adds	r6, r6, r3
 800848c:	ea82 0200 	eor.w	r2, r2, r0
 8008490:	4157      	adcs	r7, r2
 8008492:	4074      	eors	r4, r6
 8008494:	407d      	eors	r5, r7
 8008496:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 800849a:	4691      	mov	r9, r2
 800849c:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80084a0:	0e2d      	lsrs	r5, r5, #24
 80084a2:	4698      	mov	r8, r3
 80084a4:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80084a8:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 80084ac:	1824      	adds	r4, r4, r0
 80084ae:	414d      	adcs	r5, r1
 80084b0:	18a4      	adds	r4, r4, r2
 80084b2:	415d      	adcs	r5, r3
 80084b4:	ea84 0008 	eor.w	r0, r4, r8
 80084b8:	ea85 0109 	eor.w	r1, r5, r9
 80084bc:	4689      	mov	r9, r1
 80084be:	0c01      	lsrs	r1, r0, #16
 80084c0:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80084c4:	9122      	str	r1, [sp, #136]	; 0x88
 80084c6:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80084ca:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80084ce:	9123      	str	r1, [sp, #140]	; 0x8c
 80084d0:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 80084d4:	1980      	adds	r0, r0, r6
 80084d6:	4179      	adcs	r1, r7
 80084d8:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 80084dc:	4050      	eors	r0, r2
 80084de:	4059      	eors	r1, r3
 80084e0:	0042      	lsls	r2, r0, #1
 80084e2:	460b      	mov	r3, r1
 80084e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80084e8:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 80084ec:	932a      	str	r3, [sp, #168]	; 0xa8
 80084ee:	e9dd 4500 	ldrd	r4, r5, [sp]
 80084f2:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 80084f6:	18a4      	adds	r4, r4, r2
 80084f8:	415d      	adcs	r5, r3
 80084fa:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 80084fe:	eb14 040a 	adds.w	r4, r4, sl
 8008502:	e9dd 6734 	ldrd	r6, r7, [sp, #208]	; 0xd0
 8008506:	eb45 050b 	adc.w	r5, r5, fp
 800850a:	406b      	eors	r3, r5
 800850c:	18f6      	adds	r6, r6, r3
 800850e:	ea82 0204 	eor.w	r2, r2, r4
 8008512:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008516:	4157      	adcs	r7, r2
 8008518:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 800851c:	ea8a 0006 	eor.w	r0, sl, r6
 8008520:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8008524:	912b      	str	r1, [sp, #172]	; 0xac
 8008526:	ea8b 0107 	eor.w	r1, fp, r7
 800852a:	4691      	mov	r9, r2
 800852c:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8008530:	0e09      	lsrs	r1, r1, #24
 8008532:	4698      	mov	r8, r3
 8008534:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8008538:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800853c:	1900      	adds	r0, r0, r4
 800853e:	4169      	adcs	r1, r5
 8008540:	1880      	adds	r0, r0, r2
 8008542:	4159      	adcs	r1, r3
 8008544:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 8008548:	ea80 0008 	eor.w	r0, r0, r8
 800854c:	ea81 0109 	eor.w	r1, r1, r9
 8008550:	4689      	mov	r9, r1
 8008552:	0c01      	lsrs	r1, r0, #16
 8008554:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008558:	9120      	str	r1, [sp, #128]	; 0x80
 800855a:	ea4f 4119 	mov.w	r1, r9, lsr #16
 800855e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008562:	9121      	str	r1, [sp, #132]	; 0x84
 8008564:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8008568:	1980      	adds	r0, r0, r6
 800856a:	4179      	adcs	r1, r7
 800856c:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8008570:	4050      	eors	r0, r2
 8008572:	4059      	eors	r1, r3
 8008574:	460b      	mov	r3, r1
 8008576:	0042      	lsls	r2, r0, #1
 8008578:	0049      	lsls	r1, r1, #1
 800857a:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 800857e:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8008582:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8008586:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800858a:	18c0      	adds	r0, r0, r3
 800858c:	4161      	adcs	r1, r4
 800858e:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 8008592:	181b      	adds	r3, r3, r0
 8008594:	4618      	mov	r0, r3
 8008596:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 800859a:	414c      	adcs	r4, r1
 800859c:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 80085a0:	4063      	eors	r3, r4
 80085a2:	4621      	mov	r1, r4
 80085a4:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 80085a8:	18f6      	adds	r6, r6, r3
 80085aa:	ea82 0200 	eor.w	r2, r2, r0
 80085ae:	4157      	adcs	r7, r2
 80085b0:	4074      	eors	r4, r6
 80085b2:	407d      	eors	r5, r7
 80085b4:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80085b8:	4691      	mov	r9, r2
 80085ba:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80085be:	0e2d      	lsrs	r5, r5, #24
 80085c0:	4698      	mov	r8, r3
 80085c2:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80085c6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80085ca:	1824      	adds	r4, r4, r0
 80085cc:	414d      	adcs	r5, r1
 80085ce:	18a4      	adds	r4, r4, r2
 80085d0:	415d      	adcs	r5, r3
 80085d2:	ea84 0008 	eor.w	r0, r4, r8
 80085d6:	ea85 0109 	eor.w	r1, r5, r9
 80085da:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 80085de:	0c04      	lsrs	r4, r0, #16
 80085e0:	4680      	mov	r8, r0
 80085e2:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 80085e6:	0c0c      	lsrs	r4, r1, #16
 80085e8:	1836      	adds	r6, r6, r0
 80085ea:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 80085ee:	414f      	adcs	r7, r1
 80085f0:	407b      	eors	r3, r7
 80085f2:	4072      	eors	r2, r6
 80085f4:	005c      	lsls	r4, r3, #1
 80085f6:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 80085fa:	0052      	lsls	r2, r2, #1
 80085fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008600:	9425      	str	r4, [sp, #148]	; 0x94
 8008602:	9324      	str	r3, [sp, #144]	; 0x90
 8008604:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8008608:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 800860c:	18a4      	adds	r4, r4, r2
 800860e:	415d      	adcs	r5, r3
 8008610:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8008614:	1912      	adds	r2, r2, r4
 8008616:	416b      	adcs	r3, r5
 8008618:	4050      	eors	r0, r2
 800861a:	4059      	eors	r1, r3
 800861c:	4614      	mov	r4, r2
 800861e:	461d      	mov	r5, r3
 8008620:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 8008624:	1852      	adds	r2, r2, r1
 8008626:	4143      	adcs	r3, r0
 8008628:	4688      	mov	r8, r1
 800862a:	4681      	mov	r9, r0
 800862c:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8008630:	4050      	eors	r0, r2
 8008632:	4059      	eors	r1, r3
 8008634:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8008638:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
 800863c:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8008640:	0e09      	lsrs	r1, r1, #24
 8008642:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8008646:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800864a:	1900      	adds	r0, r0, r4
 800864c:	4169      	adcs	r1, r5
 800864e:	1880      	adds	r0, r0, r2
 8008650:	4159      	adcs	r1, r3
 8008652:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 8008656:	ea80 0008 	eor.w	r0, r0, r8
 800865a:	ea81 0109 	eor.w	r1, r1, r9
 800865e:	4689      	mov	r9, r1
 8008660:	0c01      	lsrs	r1, r0, #16
 8008662:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008666:	9128      	str	r1, [sp, #160]	; 0xa0
 8008668:	ea4f 4119 	mov.w	r1, r9, lsr #16
 800866c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008670:	9129      	str	r1, [sp, #164]	; 0xa4
 8008672:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 8008676:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 800867a:	1900      	adds	r0, r0, r4
 800867c:	4169      	adcs	r1, r5
 800867e:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8008682:	4050      	eors	r0, r2
 8008684:	4059      	eors	r1, r3
 8008686:	0042      	lsls	r2, r0, #1
 8008688:	460b      	mov	r3, r1
 800868a:	0049      	lsls	r1, r1, #1
 800868c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008690:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008694:	912b      	str	r1, [sp, #172]	; 0xac
 8008696:	932a      	str	r3, [sp, #168]	; 0xa8
 8008698:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800869c:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 80086a0:	18c0      	adds	r0, r0, r3
 80086a2:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 80086a6:	4161      	adcs	r1, r4
 80086a8:	eb10 000a 	adds.w	r0, r0, sl
 80086ac:	eb41 010b 	adc.w	r1, r1, fp
 80086b0:	404b      	eors	r3, r1
 80086b2:	18f6      	adds	r6, r6, r3
 80086b4:	ea82 0200 	eor.w	r2, r2, r0
 80086b8:	4157      	adcs	r7, r2
 80086ba:	ea8a 0406 	eor.w	r4, sl, r6
 80086be:	ea8b 0507 	eor.w	r5, fp, r7
 80086c2:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80086c6:	4691      	mov	r9, r2
 80086c8:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80086cc:	0e2d      	lsrs	r5, r5, #24
 80086ce:	4698      	mov	r8, r3
 80086d0:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80086d4:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80086d8:	1824      	adds	r4, r4, r0
 80086da:	414d      	adcs	r5, r1
 80086dc:	18a4      	adds	r4, r4, r2
 80086de:	415d      	adcs	r5, r3
 80086e0:	ea84 0008 	eor.w	r0, r4, r8
 80086e4:	ea85 0109 	eor.w	r1, r5, r9
 80086e8:	4689      	mov	r9, r1
 80086ea:	0c01      	lsrs	r1, r0, #16
 80086ec:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80086f0:	9126      	str	r1, [sp, #152]	; 0x98
 80086f2:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80086f6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80086fa:	9127      	str	r1, [sp, #156]	; 0x9c
 80086fc:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8008700:	1980      	adds	r0, r0, r6
 8008702:	4179      	adcs	r1, r7
 8008704:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 8008708:	4050      	eors	r0, r2
 800870a:	4059      	eors	r1, r3
 800870c:	460b      	mov	r3, r1
 800870e:	0042      	lsls	r2, r0, #1
 8008710:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 8008714:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8008718:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 800871c:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 8008720:	18a4      	adds	r4, r4, r2
 8008722:	415d      	adcs	r5, r3
 8008724:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8008728:	1912      	adds	r2, r2, r4
 800872a:	416b      	adcs	r3, r5
 800872c:	4614      	mov	r4, r2
 800872e:	461d      	mov	r5, r3
 8008730:	0049      	lsls	r1, r1, #1
 8008732:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8008736:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 800873a:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 800873e:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	; 0x90
 8008742:	406b      	eors	r3, r5
 8008744:	18c0      	adds	r0, r0, r3
 8008746:	ea82 0204 	eor.w	r2, r2, r4
 800874a:	4151      	adcs	r1, r2
 800874c:	4046      	eors	r6, r0
 800874e:	404f      	eors	r7, r1
 8008750:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8008754:	4691      	mov	r9, r2
 8008756:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 800875a:	0e3f      	lsrs	r7, r7, #24
 800875c:	4698      	mov	r8, r3
 800875e:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8008762:	e9dd 671c 	ldrd	r6, r7, [sp, #112]	; 0x70
 8008766:	1936      	adds	r6, r6, r4
 8008768:	416f      	adcs	r7, r5
 800876a:	18b6      	adds	r6, r6, r2
 800876c:	415f      	adcs	r7, r3
 800876e:	ea86 0408 	eor.w	r4, r6, r8
 8008772:	ea87 0509 	eor.w	r5, r7, r9
 8008776:	46a0      	mov	r8, r4
 8008778:	0c24      	lsrs	r4, r4, #16
 800877a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800877e:	9422      	str	r4, [sp, #136]	; 0x88
 8008780:	0c2c      	lsrs	r4, r5, #16
 8008782:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8008786:	9423      	str	r4, [sp, #140]	; 0x8c
 8008788:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 800878c:	1824      	adds	r4, r4, r0
 800878e:	414d      	adcs	r5, r1
 8008790:	4620      	mov	r0, r4
 8008792:	4629      	mov	r1, r5
 8008794:	4050      	eors	r0, r2
 8008796:	4059      	eors	r1, r3
 8008798:	0042      	lsls	r2, r0, #1
 800879a:	460b      	mov	r3, r1
 800879c:	0049      	lsls	r1, r1, #1
 800879e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80087a2:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80087a6:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 80087aa:	9125      	str	r1, [sp, #148]	; 0x94
 80087ac:	9324      	str	r3, [sp, #144]	; 0x90
 80087ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087b2:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 80087b6:	18c0      	adds	r0, r0, r3
 80087b8:	4161      	adcs	r1, r4
 80087ba:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 80087be:	181b      	adds	r3, r3, r0
 80087c0:	4618      	mov	r0, r3
 80087c2:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 80087c6:	414c      	adcs	r4, r1
 80087c8:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
 80087cc:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 80087d0:	4063      	eors	r3, r4
 80087d2:	4621      	mov	r1, r4
 80087d4:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 80087d8:	18f6      	adds	r6, r6, r3
 80087da:	ea82 0200 	eor.w	r2, r2, r0
 80087de:	4157      	adcs	r7, r2
 80087e0:	4074      	eors	r4, r6
 80087e2:	407d      	eors	r5, r7
 80087e4:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80087e8:	4691      	mov	r9, r2
 80087ea:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80087ee:	0e2d      	lsrs	r5, r5, #24
 80087f0:	4698      	mov	r8, r3
 80087f2:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80087f6:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 80087fa:	1824      	adds	r4, r4, r0
 80087fc:	414d      	adcs	r5, r1
 80087fe:	18a4      	adds	r4, r4, r2
 8008800:	415d      	adcs	r5, r3
 8008802:	ea84 0008 	eor.w	r0, r4, r8
 8008806:	ea85 0109 	eor.w	r1, r5, r9
 800880a:	4689      	mov	r9, r1
 800880c:	0c01      	lsrs	r1, r0, #16
 800880e:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008812:	9120      	str	r1, [sp, #128]	; 0x80
 8008814:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008818:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800881c:	9121      	str	r1, [sp, #132]	; 0x84
 800881e:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8008822:	1980      	adds	r0, r0, r6
 8008824:	4179      	adcs	r1, r7
 8008826:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 800882a:	4050      	eors	r0, r2
 800882c:	4059      	eors	r1, r3
 800882e:	460b      	mov	r3, r1
 8008830:	0042      	lsls	r2, r0, #1
 8008832:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 8008836:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 800883a:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 800883e:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 8008842:	18a4      	adds	r4, r4, r2
 8008844:	415d      	adcs	r5, r3
 8008846:	0049      	lsls	r1, r1, #1
 8008848:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800884c:	19a4      	adds	r4, r4, r6
 800884e:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 8008852:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8008856:	417d      	adcs	r5, r7
 8008858:	406b      	eors	r3, r5
 800885a:	18c0      	adds	r0, r0, r3
 800885c:	ea82 0204 	eor.w	r2, r2, r4
 8008860:	4151      	adcs	r1, r2
 8008862:	4046      	eors	r6, r0
 8008864:	404f      	eors	r7, r1
 8008866:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 800886a:	4691      	mov	r9, r2
 800886c:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8008870:	0e3f      	lsrs	r7, r7, #24
 8008872:	4698      	mov	r8, r3
 8008874:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8008878:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800887c:	1936      	adds	r6, r6, r4
 800887e:	416f      	adcs	r7, r5
 8008880:	18b6      	adds	r6, r6, r2
 8008882:	415f      	adcs	r7, r3
 8008884:	ea86 0408 	eor.w	r4, r6, r8
 8008888:	ea87 0509 	eor.w	r5, r7, r9
 800888c:	46a0      	mov	r8, r4
 800888e:	0c24      	lsrs	r4, r4, #16
 8008890:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008894:	9426      	str	r4, [sp, #152]	; 0x98
 8008896:	0c2c      	lsrs	r4, r5, #16
 8008898:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800889c:	9427      	str	r4, [sp, #156]	; 0x9c
 800889e:	e9cd 6736 	strd	r6, r7, [sp, #216]	; 0xd8
 80088a2:	e9dd 4526 	ldrd	r4, r5, [sp, #152]	; 0x98
 80088a6:	1824      	adds	r4, r4, r0
 80088a8:	414d      	adcs	r5, r1
 80088aa:	4620      	mov	r0, r4
 80088ac:	4629      	mov	r1, r5
 80088ae:	4050      	eors	r0, r2
 80088b0:	4059      	eors	r1, r3
 80088b2:	0042      	lsls	r2, r0, #1
 80088b4:	460b      	mov	r3, r1
 80088b6:	0049      	lsls	r1, r1, #1
 80088b8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80088bc:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80088c0:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 80088c4:	912d      	str	r1, [sp, #180]	; 0xb4
 80088c6:	932c      	str	r3, [sp, #176]	; 0xb0
 80088c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088cc:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 80088d0:	18c0      	adds	r0, r0, r3
 80088d2:	4161      	adcs	r1, r4
 80088d4:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
 80088d8:	181b      	adds	r3, r3, r0
 80088da:	4618      	mov	r0, r3
 80088dc:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 80088e0:	414c      	adcs	r4, r1
 80088e2:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 80088e6:	4063      	eors	r3, r4
 80088e8:	4621      	mov	r1, r4
 80088ea:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 80088ee:	18f6      	adds	r6, r6, r3
 80088f0:	ea82 0200 	eor.w	r2, r2, r0
 80088f4:	4157      	adcs	r7, r2
 80088f6:	4074      	eors	r4, r6
 80088f8:	407d      	eors	r5, r7
 80088fa:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80088fe:	4691      	mov	r9, r2
 8008900:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8008904:	0e2d      	lsrs	r5, r5, #24
 8008906:	4698      	mov	r8, r3
 8008908:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 800890c:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 8008910:	1824      	adds	r4, r4, r0
 8008912:	414d      	adcs	r5, r1
 8008914:	18a4      	adds	r4, r4, r2
 8008916:	415d      	adcs	r5, r3
 8008918:	ea84 0008 	eor.w	r0, r4, r8
 800891c:	ea85 0109 	eor.w	r1, r5, r9
 8008920:	4689      	mov	r9, r1
 8008922:	0c01      	lsrs	r1, r0, #16
 8008924:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008928:	9122      	str	r1, [sp, #136]	; 0x88
 800892a:	ea4f 4119 	mov.w	r1, r9, lsr #16
 800892e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008932:	9123      	str	r1, [sp, #140]	; 0x8c
 8008934:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8008938:	1980      	adds	r0, r0, r6
 800893a:	4179      	adcs	r1, r7
 800893c:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8008940:	4050      	eors	r0, r2
 8008942:	4059      	eors	r1, r3
 8008944:	0042      	lsls	r2, r0, #1
 8008946:	460b      	mov	r3, r1
 8008948:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800894c:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8008950:	932a      	str	r3, [sp, #168]	; 0xa8
 8008952:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 8008956:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 800895a:	18a4      	adds	r4, r4, r2
 800895c:	415d      	adcs	r5, r3
 800895e:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8008962:	eb14 040a 	adds.w	r4, r4, sl
 8008966:	e9dd 6734 	ldrd	r6, r7, [sp, #208]	; 0xd0
 800896a:	eb45 050b 	adc.w	r5, r5, fp
 800896e:	406b      	eors	r3, r5
 8008970:	18f6      	adds	r6, r6, r3
 8008972:	ea82 0204 	eor.w	r2, r2, r4
 8008976:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800897a:	4157      	adcs	r7, r2
 800897c:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008980:	ea8a 0006 	eor.w	r0, sl, r6
 8008984:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8008988:	912b      	str	r1, [sp, #172]	; 0xac
 800898a:	ea8b 0107 	eor.w	r1, fp, r7
 800898e:	4691      	mov	r9, r2
 8008990:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8008994:	0e09      	lsrs	r1, r1, #24
 8008996:	4698      	mov	r8, r3
 8008998:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 800899c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80089a0:	1900      	adds	r0, r0, r4
 80089a2:	4169      	adcs	r1, r5
 80089a4:	1880      	adds	r0, r0, r2
 80089a6:	4159      	adcs	r1, r3
 80089a8:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 80089ac:	ea80 0008 	eor.w	r0, r0, r8
 80089b0:	ea81 0109 	eor.w	r1, r1, r9
 80089b4:	4689      	mov	r9, r1
 80089b6:	0c01      	lsrs	r1, r0, #16
 80089b8:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80089bc:	9120      	str	r1, [sp, #128]	; 0x80
 80089be:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80089c2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80089c6:	9121      	str	r1, [sp, #132]	; 0x84
 80089c8:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 80089cc:	1980      	adds	r0, r0, r6
 80089ce:	4179      	adcs	r1, r7
 80089d0:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 80089d4:	4050      	eors	r0, r2
 80089d6:	4059      	eors	r1, r3
 80089d8:	460b      	mov	r3, r1
 80089da:	0042      	lsls	r2, r0, #1
 80089dc:	0049      	lsls	r1, r1, #1
 80089de:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 80089e2:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 80089e6:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 80089ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80089ee:	18c0      	adds	r0, r0, r3
 80089f0:	4161      	adcs	r1, r4
 80089f2:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 80089f6:	181b      	adds	r3, r3, r0
 80089f8:	4618      	mov	r0, r3
 80089fa:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 80089fe:	414c      	adcs	r4, r1
 8008a00:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 8008a04:	4063      	eors	r3, r4
 8008a06:	4621      	mov	r1, r4
 8008a08:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 8008a0c:	18f6      	adds	r6, r6, r3
 8008a0e:	ea82 0200 	eor.w	r2, r2, r0
 8008a12:	4157      	adcs	r7, r2
 8008a14:	4074      	eors	r4, r6
 8008a16:	407d      	eors	r5, r7
 8008a18:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008a1c:	4691      	mov	r9, r2
 8008a1e:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8008a22:	0e2d      	lsrs	r5, r5, #24
 8008a24:	4698      	mov	r8, r3
 8008a26:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8008a2a:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 8008a2e:	1824      	adds	r4, r4, r0
 8008a30:	414d      	adcs	r5, r1
 8008a32:	18a4      	adds	r4, r4, r2
 8008a34:	415d      	adcs	r5, r3
 8008a36:	ea84 0008 	eor.w	r0, r4, r8
 8008a3a:	ea85 0109 	eor.w	r1, r5, r9
 8008a3e:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8008a42:	0c04      	lsrs	r4, r0, #16
 8008a44:	4680      	mov	r8, r0
 8008a46:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8008a4a:	0c0c      	lsrs	r4, r1, #16
 8008a4c:	1836      	adds	r6, r6, r0
 8008a4e:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 8008a52:	414f      	adcs	r7, r1
 8008a54:	407b      	eors	r3, r7
 8008a56:	4072      	eors	r2, r6
 8008a58:	005c      	lsls	r4, r3, #1
 8008a5a:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 8008a5e:	0052      	lsls	r2, r2, #1
 8008a60:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008a64:	9425      	str	r4, [sp, #148]	; 0x94
 8008a66:	9324      	str	r3, [sp, #144]	; 0x90
 8008a68:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008a6c:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8008a70:	18a4      	adds	r4, r4, r2
 8008a72:	415d      	adcs	r5, r3
 8008a74:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8008a78:	1912      	adds	r2, r2, r4
 8008a7a:	416b      	adcs	r3, r5
 8008a7c:	4050      	eors	r0, r2
 8008a7e:	4059      	eors	r1, r3
 8008a80:	4614      	mov	r4, r2
 8008a82:	461d      	mov	r5, r3
 8008a84:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 8008a88:	1852      	adds	r2, r2, r1
 8008a8a:	4143      	adcs	r3, r0
 8008a8c:	4688      	mov	r8, r1
 8008a8e:	4681      	mov	r9, r0
 8008a90:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8008a94:	4050      	eors	r0, r2
 8008a96:	4059      	eors	r1, r3
 8008a98:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8008a9c:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
 8008aa0:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8008aa4:	0e09      	lsrs	r1, r1, #24
 8008aa6:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8008aaa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008aae:	1900      	adds	r0, r0, r4
 8008ab0:	4169      	adcs	r1, r5
 8008ab2:	1880      	adds	r0, r0, r2
 8008ab4:	4159      	adcs	r1, r3
 8008ab6:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 8008aba:	ea80 0008 	eor.w	r0, r0, r8
 8008abe:	ea81 0109 	eor.w	r1, r1, r9
 8008ac2:	4689      	mov	r9, r1
 8008ac4:	0c01      	lsrs	r1, r0, #16
 8008ac6:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008aca:	9128      	str	r1, [sp, #160]	; 0xa0
 8008acc:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008ad0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ad4:	9129      	str	r1, [sp, #164]	; 0xa4
 8008ad6:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 8008ada:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 8008ade:	1900      	adds	r0, r0, r4
 8008ae0:	4169      	adcs	r1, r5
 8008ae2:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8008ae6:	4050      	eors	r0, r2
 8008ae8:	4059      	eors	r1, r3
 8008aea:	0042      	lsls	r2, r0, #1
 8008aec:	460b      	mov	r3, r1
 8008aee:	0049      	lsls	r1, r1, #1
 8008af0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008af4:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008af8:	912b      	str	r1, [sp, #172]	; 0xac
 8008afa:	932a      	str	r3, [sp, #168]	; 0xa8
 8008afc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b00:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8008b04:	18c0      	adds	r0, r0, r3
 8008b06:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8008b0a:	4161      	adcs	r1, r4
 8008b0c:	eb10 000a 	adds.w	r0, r0, sl
 8008b10:	eb41 010b 	adc.w	r1, r1, fp
 8008b14:	404b      	eors	r3, r1
 8008b16:	18f6      	adds	r6, r6, r3
 8008b18:	ea82 0200 	eor.w	r2, r2, r0
 8008b1c:	4157      	adcs	r7, r2
 8008b1e:	ea8a 0406 	eor.w	r4, sl, r6
 8008b22:	ea8b 0507 	eor.w	r5, fp, r7
 8008b26:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008b2a:	4691      	mov	r9, r2
 8008b2c:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8008b30:	0e2d      	lsrs	r5, r5, #24
 8008b32:	4698      	mov	r8, r3
 8008b34:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8008b38:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008b3c:	1824      	adds	r4, r4, r0
 8008b3e:	414d      	adcs	r5, r1
 8008b40:	18a4      	adds	r4, r4, r2
 8008b42:	415d      	adcs	r5, r3
 8008b44:	ea84 0008 	eor.w	r0, r4, r8
 8008b48:	ea85 0109 	eor.w	r1, r5, r9
 8008b4c:	4689      	mov	r9, r1
 8008b4e:	0c01      	lsrs	r1, r0, #16
 8008b50:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008b54:	9126      	str	r1, [sp, #152]	; 0x98
 8008b56:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008b5a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b5e:	9127      	str	r1, [sp, #156]	; 0x9c
 8008b60:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8008b64:	1980      	adds	r0, r0, r6
 8008b66:	4179      	adcs	r1, r7
 8008b68:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 8008b6c:	4050      	eors	r0, r2
 8008b6e:	4059      	eors	r1, r3
 8008b70:	460b      	mov	r3, r1
 8008b72:	0042      	lsls	r2, r0, #1
 8008b74:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 8008b78:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8008b7c:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8008b80:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8008b84:	18a4      	adds	r4, r4, r2
 8008b86:	415d      	adcs	r5, r3
 8008b88:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8008b8c:	1912      	adds	r2, r2, r4
 8008b8e:	416b      	adcs	r3, r5
 8008b90:	4614      	mov	r4, r2
 8008b92:	461d      	mov	r5, r3
 8008b94:	0049      	lsls	r1, r1, #1
 8008b96:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8008b9a:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8008b9e:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8008ba2:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	; 0x90
 8008ba6:	406b      	eors	r3, r5
 8008ba8:	18c0      	adds	r0, r0, r3
 8008baa:	ea82 0204 	eor.w	r2, r2, r4
 8008bae:	4151      	adcs	r1, r2
 8008bb0:	4046      	eors	r6, r0
 8008bb2:	404f      	eors	r7, r1
 8008bb4:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8008bb8:	4691      	mov	r9, r2
 8008bba:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8008bbe:	0e3f      	lsrs	r7, r7, #24
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8008bc6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8008bca:	1936      	adds	r6, r6, r4
 8008bcc:	416f      	adcs	r7, r5
 8008bce:	18b6      	adds	r6, r6, r2
 8008bd0:	415f      	adcs	r7, r3
 8008bd2:	ea86 0408 	eor.w	r4, r6, r8
 8008bd6:	ea87 0509 	eor.w	r5, r7, r9
 8008bda:	46a0      	mov	r8, r4
 8008bdc:	0c24      	lsrs	r4, r4, #16
 8008bde:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008be2:	9422      	str	r4, [sp, #136]	; 0x88
 8008be4:	0c2c      	lsrs	r4, r5, #16
 8008be6:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8008bea:	9423      	str	r4, [sp, #140]	; 0x8c
 8008bec:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 8008bf0:	1824      	adds	r4, r4, r0
 8008bf2:	414d      	adcs	r5, r1
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	4629      	mov	r1, r5
 8008bf8:	4050      	eors	r0, r2
 8008bfa:	4059      	eors	r1, r3
 8008bfc:	0042      	lsls	r2, r0, #1
 8008bfe:	460b      	mov	r3, r1
 8008c00:	0049      	lsls	r1, r1, #1
 8008c02:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008c06:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008c0a:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8008c0e:	9125      	str	r1, [sp, #148]	; 0x94
 8008c10:	9324      	str	r3, [sp, #144]	; 0x90
 8008c12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c16:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8008c1a:	18c0      	adds	r0, r0, r3
 8008c1c:	4161      	adcs	r1, r4
 8008c1e:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 8008c22:	181b      	adds	r3, r3, r0
 8008c24:	4618      	mov	r0, r3
 8008c26:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8008c2a:	414c      	adcs	r4, r1
 8008c2c:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
 8008c30:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8008c34:	4063      	eors	r3, r4
 8008c36:	4621      	mov	r1, r4
 8008c38:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 8008c3c:	18f6      	adds	r6, r6, r3
 8008c3e:	ea82 0200 	eor.w	r2, r2, r0
 8008c42:	4157      	adcs	r7, r2
 8008c44:	4074      	eors	r4, r6
 8008c46:	407d      	eors	r5, r7
 8008c48:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008c4c:	4691      	mov	r9, r2
 8008c4e:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8008c52:	0e2d      	lsrs	r5, r5, #24
 8008c54:	4698      	mov	r8, r3
 8008c56:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8008c5a:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 8008c5e:	1824      	adds	r4, r4, r0
 8008c60:	414d      	adcs	r5, r1
 8008c62:	18a4      	adds	r4, r4, r2
 8008c64:	415d      	adcs	r5, r3
 8008c66:	ea84 0008 	eor.w	r0, r4, r8
 8008c6a:	ea85 0109 	eor.w	r1, r5, r9
 8008c6e:	4689      	mov	r9, r1
 8008c70:	0c01      	lsrs	r1, r0, #16
 8008c72:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008c76:	9120      	str	r1, [sp, #128]	; 0x80
 8008c78:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008c7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c80:	9121      	str	r1, [sp, #132]	; 0x84
 8008c82:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8008c86:	1980      	adds	r0, r0, r6
 8008c88:	4179      	adcs	r1, r7
 8008c8a:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8008c8e:	4050      	eors	r0, r2
 8008c90:	4059      	eors	r1, r3
 8008c92:	460b      	mov	r3, r1
 8008c94:	0042      	lsls	r2, r0, #1
 8008c96:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 8008c9a:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8008c9e:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8008ca2:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8008ca6:	18a4      	adds	r4, r4, r2
 8008ca8:	415d      	adcs	r5, r3
 8008caa:	0049      	lsls	r1, r1, #1
 8008cac:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8008cb0:	19a4      	adds	r4, r4, r6
 8008cb2:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 8008cb6:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8008cba:	417d      	adcs	r5, r7
 8008cbc:	406b      	eors	r3, r5
 8008cbe:	18c0      	adds	r0, r0, r3
 8008cc0:	ea82 0204 	eor.w	r2, r2, r4
 8008cc4:	4151      	adcs	r1, r2
 8008cc6:	4046      	eors	r6, r0
 8008cc8:	404f      	eors	r7, r1
 8008cca:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8008cce:	4691      	mov	r9, r2
 8008cd0:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8008cd4:	0e3f      	lsrs	r7, r7, #24
 8008cd6:	4698      	mov	r8, r3
 8008cd8:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8008cdc:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8008ce0:	1936      	adds	r6, r6, r4
 8008ce2:	416f      	adcs	r7, r5
 8008ce4:	18b6      	adds	r6, r6, r2
 8008ce6:	415f      	adcs	r7, r3
 8008ce8:	ea86 0408 	eor.w	r4, r6, r8
 8008cec:	ea87 0509 	eor.w	r5, r7, r9
 8008cf0:	46a0      	mov	r8, r4
 8008cf2:	0c24      	lsrs	r4, r4, #16
 8008cf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008cf8:	9426      	str	r4, [sp, #152]	; 0x98
 8008cfa:	0c2c      	lsrs	r4, r5, #16
 8008cfc:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8008d00:	9427      	str	r4, [sp, #156]	; 0x9c
 8008d02:	e9cd 6736 	strd	r6, r7, [sp, #216]	; 0xd8
 8008d06:	e9dd 4526 	ldrd	r4, r5, [sp, #152]	; 0x98
 8008d0a:	1824      	adds	r4, r4, r0
 8008d0c:	414d      	adcs	r5, r1
 8008d0e:	4620      	mov	r0, r4
 8008d10:	4629      	mov	r1, r5
 8008d12:	4050      	eors	r0, r2
 8008d14:	4059      	eors	r1, r3
 8008d16:	0042      	lsls	r2, r0, #1
 8008d18:	460b      	mov	r3, r1
 8008d1a:	0049      	lsls	r1, r1, #1
 8008d1c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008d20:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008d24:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8008d28:	912d      	str	r1, [sp, #180]	; 0xb4
 8008d2a:	932c      	str	r3, [sp, #176]	; 0xb0
 8008d2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008d30:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8008d34:	18c0      	adds	r0, r0, r3
 8008d36:	4161      	adcs	r1, r4
 8008d38:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
 8008d3c:	181b      	adds	r3, r3, r0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8008d44:	414c      	adcs	r4, r1
 8008d46:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8008d4a:	4063      	eors	r3, r4
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 8008d52:	18f6      	adds	r6, r6, r3
 8008d54:	ea82 0200 	eor.w	r2, r2, r0
 8008d58:	4157      	adcs	r7, r2
 8008d5a:	4074      	eors	r4, r6
 8008d5c:	407d      	eors	r5, r7
 8008d5e:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008d62:	4691      	mov	r9, r2
 8008d64:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8008d68:	0e2d      	lsrs	r5, r5, #24
 8008d6a:	4698      	mov	r8, r3
 8008d6c:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8008d70:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 8008d74:	1824      	adds	r4, r4, r0
 8008d76:	414d      	adcs	r5, r1
 8008d78:	18a4      	adds	r4, r4, r2
 8008d7a:	415d      	adcs	r5, r3
 8008d7c:	ea84 0008 	eor.w	r0, r4, r8
 8008d80:	ea85 0109 	eor.w	r1, r5, r9
 8008d84:	4689      	mov	r9, r1
 8008d86:	0c01      	lsrs	r1, r0, #16
 8008d88:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008d8c:	9122      	str	r1, [sp, #136]	; 0x88
 8008d8e:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008d92:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d96:	9123      	str	r1, [sp, #140]	; 0x8c
 8008d98:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8008d9c:	1980      	adds	r0, r0, r6
 8008d9e:	4179      	adcs	r1, r7
 8008da0:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8008da4:	4050      	eors	r0, r2
 8008da6:	4059      	eors	r1, r3
 8008da8:	0042      	lsls	r2, r0, #1
 8008daa:	460b      	mov	r3, r1
 8008dac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008db0:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8008db4:	932a      	str	r3, [sp, #168]	; 0xa8
 8008db6:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 8008dba:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8008dbe:	18a4      	adds	r4, r4, r2
 8008dc0:	415d      	adcs	r5, r3
 8008dc2:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8008dc6:	eb14 040a 	adds.w	r4, r4, sl
 8008dca:	e9dd 6734 	ldrd	r6, r7, [sp, #208]	; 0xd0
 8008dce:	eb45 050b 	adc.w	r5, r5, fp
 8008dd2:	406b      	eors	r3, r5
 8008dd4:	18f6      	adds	r6, r6, r3
 8008dd6:	ea82 0204 	eor.w	r2, r2, r4
 8008dda:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008dde:	4157      	adcs	r7, r2
 8008de0:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008de4:	ea8a 0006 	eor.w	r0, sl, r6
 8008de8:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8008dec:	912b      	str	r1, [sp, #172]	; 0xac
 8008dee:	ea8b 0107 	eor.w	r1, fp, r7
 8008df2:	4691      	mov	r9, r2
 8008df4:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8008df8:	0e09      	lsrs	r1, r1, #24
 8008dfa:	4698      	mov	r8, r3
 8008dfc:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8008e00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e04:	1900      	adds	r0, r0, r4
 8008e06:	4169      	adcs	r1, r5
 8008e08:	1880      	adds	r0, r0, r2
 8008e0a:	4159      	adcs	r1, r3
 8008e0c:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 8008e10:	ea80 0008 	eor.w	r0, r0, r8
 8008e14:	ea81 0109 	eor.w	r1, r1, r9
 8008e18:	4689      	mov	r9, r1
 8008e1a:	0c01      	lsrs	r1, r0, #16
 8008e1c:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008e20:	9120      	str	r1, [sp, #128]	; 0x80
 8008e22:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008e26:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e2a:	9121      	str	r1, [sp, #132]	; 0x84
 8008e2c:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8008e30:	1980      	adds	r0, r0, r6
 8008e32:	4179      	adcs	r1, r7
 8008e34:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8008e38:	4050      	eors	r0, r2
 8008e3a:	4059      	eors	r1, r3
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	0042      	lsls	r2, r0, #1
 8008e40:	0049      	lsls	r1, r1, #1
 8008e42:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 8008e46:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8008e4a:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8008e4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e52:	18c0      	adds	r0, r0, r3
 8008e54:	4161      	adcs	r1, r4
 8008e56:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 8008e5a:	181b      	adds	r3, r3, r0
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 8008e62:	414c      	adcs	r4, r1
 8008e64:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 8008e68:	4063      	eors	r3, r4
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 8008e70:	18f6      	adds	r6, r6, r3
 8008e72:	ea82 0200 	eor.w	r2, r2, r0
 8008e76:	4157      	adcs	r7, r2
 8008e78:	4074      	eors	r4, r6
 8008e7a:	407d      	eors	r5, r7
 8008e7c:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008e80:	4691      	mov	r9, r2
 8008e82:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8008e86:	0e2d      	lsrs	r5, r5, #24
 8008e88:	4698      	mov	r8, r3
 8008e8a:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8008e8e:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8008e92:	1824      	adds	r4, r4, r0
 8008e94:	414d      	adcs	r5, r1
 8008e96:	18a4      	adds	r4, r4, r2
 8008e98:	415d      	adcs	r5, r3
 8008e9a:	ea84 0008 	eor.w	r0, r4, r8
 8008e9e:	ea85 0109 	eor.w	r1, r5, r9
 8008ea2:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8008ea6:	0c04      	lsrs	r4, r0, #16
 8008ea8:	4680      	mov	r8, r0
 8008eaa:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8008eae:	0c0c      	lsrs	r4, r1, #16
 8008eb0:	1836      	adds	r6, r6, r0
 8008eb2:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 8008eb6:	414f      	adcs	r7, r1
 8008eb8:	407b      	eors	r3, r7
 8008eba:	4072      	eors	r2, r6
 8008ebc:	005c      	lsls	r4, r3, #1
 8008ebe:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 8008ec2:	0052      	lsls	r2, r2, #1
 8008ec4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008ec8:	9425      	str	r4, [sp, #148]	; 0x94
 8008eca:	9324      	str	r3, [sp, #144]	; 0x90
 8008ecc:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 8008ed0:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8008ed4:	18a4      	adds	r4, r4, r2
 8008ed6:	415d      	adcs	r5, r3
 8008ed8:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8008edc:	1912      	adds	r2, r2, r4
 8008ede:	416b      	adcs	r3, r5
 8008ee0:	4050      	eors	r0, r2
 8008ee2:	4059      	eors	r1, r3
 8008ee4:	4614      	mov	r4, r2
 8008ee6:	461d      	mov	r5, r3
 8008ee8:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 8008eec:	1852      	adds	r2, r2, r1
 8008eee:	4143      	adcs	r3, r0
 8008ef0:	4688      	mov	r8, r1
 8008ef2:	4681      	mov	r9, r0
 8008ef4:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8008ef8:	4050      	eors	r0, r2
 8008efa:	4059      	eors	r1, r3
 8008efc:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8008f00:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
 8008f04:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8008f08:	0e09      	lsrs	r1, r1, #24
 8008f0a:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8008f0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f12:	1900      	adds	r0, r0, r4
 8008f14:	4169      	adcs	r1, r5
 8008f16:	1880      	adds	r0, r0, r2
 8008f18:	4159      	adcs	r1, r3
 8008f1a:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 8008f1e:	ea80 0008 	eor.w	r0, r0, r8
 8008f22:	ea81 0109 	eor.w	r1, r1, r9
 8008f26:	4689      	mov	r9, r1
 8008f28:	0c01      	lsrs	r1, r0, #16
 8008f2a:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8008f2e:	9128      	str	r1, [sp, #160]	; 0xa0
 8008f30:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008f34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f38:	9129      	str	r1, [sp, #164]	; 0xa4
 8008f3a:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 8008f3e:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 8008f42:	1900      	adds	r0, r0, r4
 8008f44:	4169      	adcs	r1, r5
 8008f46:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8008f4a:	4050      	eors	r0, r2
 8008f4c:	4059      	eors	r1, r3
 8008f4e:	0042      	lsls	r2, r0, #1
 8008f50:	460b      	mov	r3, r1
 8008f52:	0049      	lsls	r1, r1, #1
 8008f54:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008f58:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008f5c:	912b      	str	r1, [sp, #172]	; 0xac
 8008f5e:	932a      	str	r3, [sp, #168]	; 0xa8
 8008f60:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8008f64:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8008f68:	18c0      	adds	r0, r0, r3
 8008f6a:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8008f6e:	4161      	adcs	r1, r4
 8008f70:	eb10 000a 	adds.w	r0, r0, sl
 8008f74:	eb41 010b 	adc.w	r1, r1, fp
 8008f78:	404b      	eors	r3, r1
 8008f7a:	18f6      	adds	r6, r6, r3
 8008f7c:	ea82 0200 	eor.w	r2, r2, r0
 8008f80:	4157      	adcs	r7, r2
 8008f82:	ea8a 0406 	eor.w	r4, sl, r6
 8008f86:	ea8b 0507 	eor.w	r5, fp, r7
 8008f8a:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8008f8e:	4691      	mov	r9, r2
 8008f90:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8008f94:	0e2d      	lsrs	r5, r5, #24
 8008f96:	4698      	mov	r8, r3
 8008f98:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8008f9c:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8008fa0:	1824      	adds	r4, r4, r0
 8008fa2:	414d      	adcs	r5, r1
 8008fa4:	18a4      	adds	r4, r4, r2
 8008fa6:	415d      	adcs	r5, r3
 8008fa8:	ea84 0008 	eor.w	r0, r4, r8
 8008fac:	ea85 0109 	eor.w	r1, r5, r9
 8008fb0:	4689      	mov	r9, r1
 8008fb2:	0c01      	lsrs	r1, r0, #16
 8008fb4:	ea41 4a09 	orr.w	sl, r1, r9, lsl #16
 8008fb8:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8008fbc:	ea41 4b00 	orr.w	fp, r1, r0, lsl #16
 8008fc0:	eb16 000a 	adds.w	r0, r6, sl
 8008fc4:	eb47 010b 	adc.w	r1, r7, fp
 8008fc8:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 8008fcc:	4050      	eors	r0, r2
 8008fce:	4059      	eors	r1, r3
 8008fd0:	0042      	lsls	r2, r0, #1
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008fd8:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8008fdc:	9326      	str	r3, [sp, #152]	; 0x98
 8008fde:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8008fe2:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8008fe6:	18a4      	adds	r4, r4, r2
 8008fe8:	415d      	adcs	r5, r3
 8008fea:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8008fee:	0049      	lsls	r1, r1, #1
 8008ff0:	1912      	adds	r2, r2, r4
 8008ff2:	416b      	adcs	r3, r5
 8008ff4:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8008ff8:	4614      	mov	r4, r2
 8008ffa:	461d      	mov	r5, r3
 8008ffc:	9127      	str	r1, [sp, #156]	; 0x9c
 8008ffe:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8009002:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8009006:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	; 0x90
 800900a:	406b      	eors	r3, r5
 800900c:	18c0      	adds	r0, r0, r3
 800900e:	ea82 0204 	eor.w	r2, r2, r4
 8009012:	4151      	adcs	r1, r2
 8009014:	4046      	eors	r6, r0
 8009016:	404f      	eors	r7, r1
 8009018:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 800901c:	4691      	mov	r9, r2
 800901e:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8009022:	0e3f      	lsrs	r7, r7, #24
 8009024:	4698      	mov	r8, r3
 8009026:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 800902a:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 800902e:	1936      	adds	r6, r6, r4
 8009030:	416f      	adcs	r7, r5
 8009032:	18b6      	adds	r6, r6, r2
 8009034:	415f      	adcs	r7, r3
 8009036:	ea86 0408 	eor.w	r4, r6, r8
 800903a:	ea87 0509 	eor.w	r5, r7, r9
 800903e:	46a0      	mov	r8, r4
 8009040:	0c24      	lsrs	r4, r4, #16
 8009042:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8009046:	9422      	str	r4, [sp, #136]	; 0x88
 8009048:	0c2c      	lsrs	r4, r5, #16
 800904a:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800904e:	9423      	str	r4, [sp, #140]	; 0x8c
 8009050:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 8009054:	1824      	adds	r4, r4, r0
 8009056:	414d      	adcs	r5, r1
 8009058:	4620      	mov	r0, r4
 800905a:	4629      	mov	r1, r5
 800905c:	4050      	eors	r0, r2
 800905e:	4059      	eors	r1, r3
 8009060:	0042      	lsls	r2, r0, #1
 8009062:	460b      	mov	r3, r1
 8009064:	0049      	lsls	r1, r1, #1
 8009066:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800906a:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 800906e:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8009072:	9125      	str	r1, [sp, #148]	; 0x94
 8009074:	9324      	str	r3, [sp, #144]	; 0x90
 8009076:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800907a:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 800907e:	18c0      	adds	r0, r0, r3
 8009080:	4161      	adcs	r1, r4
 8009082:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 8009086:	181b      	adds	r3, r3, r0
 8009088:	4618      	mov	r0, r3
 800908a:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800908e:	414c      	adcs	r4, r1
 8009090:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
 8009094:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8009098:	4063      	eors	r3, r4
 800909a:	4621      	mov	r1, r4
 800909c:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 80090a0:	18f6      	adds	r6, r6, r3
 80090a2:	ea82 0200 	eor.w	r2, r2, r0
 80090a6:	4157      	adcs	r7, r2
 80090a8:	4074      	eors	r4, r6
 80090aa:	407d      	eors	r5, r7
 80090ac:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80090b0:	4691      	mov	r9, r2
 80090b2:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80090b6:	0e2d      	lsrs	r5, r5, #24
 80090b8:	4698      	mov	r8, r3
 80090ba:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80090be:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 80090c2:	1824      	adds	r4, r4, r0
 80090c4:	414d      	adcs	r5, r1
 80090c6:	18a4      	adds	r4, r4, r2
 80090c8:	415d      	adcs	r5, r3
 80090ca:	ea84 0008 	eor.w	r0, r4, r8
 80090ce:	ea85 0109 	eor.w	r1, r5, r9
 80090d2:	4689      	mov	r9, r1
 80090d4:	0c01      	lsrs	r1, r0, #16
 80090d6:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80090da:	9120      	str	r1, [sp, #128]	; 0x80
 80090dc:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80090e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80090e4:	9121      	str	r1, [sp, #132]	; 0x84
 80090e6:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 80090ea:	1980      	adds	r0, r0, r6
 80090ec:	4179      	adcs	r1, r7
 80090ee:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 80090f2:	4050      	eors	r0, r2
 80090f4:	4059      	eors	r1, r3
 80090f6:	460b      	mov	r3, r1
 80090f8:	0042      	lsls	r2, r0, #1
 80090fa:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 80090fe:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8009102:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8009106:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 800910a:	0049      	lsls	r1, r1, #1
 800910c:	18a4      	adds	r4, r4, r2
 800910e:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 8009112:	415d      	adcs	r5, r3
 8009114:	19a4      	adds	r4, r4, r6
 8009116:	417d      	adcs	r5, r7
 8009118:	ea8a 0204 	eor.w	r2, sl, r4
 800911c:	ea8b 0305 	eor.w	r3, fp, r5
 8009120:	e9dd ab3c 	ldrd	sl, fp, [sp, #240]	; 0xf0
 8009124:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8009128:	eb1a 0a03 	adds.w	sl, sl, r3
 800912c:	eb4b 0b02 	adc.w	fp, fp, r2
 8009130:	ea86 060a 	eor.w	r6, r6, sl
 8009134:	ea87 070b 	eor.w	r7, r7, fp
 8009138:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 800913c:	4691      	mov	r9, r2
 800913e:	1900      	adds	r0, r0, r4
 8009140:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8009144:	ea4f 6717 	mov.w	r7, r7, lsr #24
 8009148:	4698      	mov	r8, r3
 800914a:	4169      	adcs	r1, r5
 800914c:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8009150:	1880      	adds	r0, r0, r2
 8009152:	4159      	adcs	r1, r3
 8009154:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 8009158:	ea80 0008 	eor.w	r0, r0, r8
 800915c:	ea81 0109 	eor.w	r1, r1, r9
 8009160:	4689      	mov	r9, r1
 8009162:	0c04      	lsrs	r4, r0, #16
 8009164:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8009168:	ea4f 4419 	mov.w	r4, r9, lsr #16
 800916c:	912c      	str	r1, [sp, #176]	; 0xb0
 800916e:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8009172:	912d      	str	r1, [sp, #180]	; 0xb4
 8009174:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 8009178:	eb10 000a 	adds.w	r0, r0, sl
 800917c:	eb41 010b 	adc.w	r1, r1, fp
 8009180:	e9cd 013c 	strd	r0, r1, [sp, #240]	; 0xf0
 8009184:	4050      	eors	r0, r2
 8009186:	4059      	eors	r1, r3
 8009188:	460b      	mov	r3, r1
 800918a:	0042      	lsls	r2, r0, #1
 800918c:	0049      	lsls	r1, r1, #1
 800918e:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 8009192:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8009196:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800919a:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 800919e:	18c0      	adds	r0, r0, r3
 80091a0:	4161      	adcs	r1, r4
 80091a2:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
 80091a6:	181b      	adds	r3, r3, r0
 80091a8:	4618      	mov	r0, r3
 80091aa:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 80091ae:	414c      	adcs	r4, r1
 80091b0:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 80091b4:	4063      	eors	r3, r4
 80091b6:	4621      	mov	r1, r4
 80091b8:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 80091bc:	18f6      	adds	r6, r6, r3
 80091be:	ea82 0200 	eor.w	r2, r2, r0
 80091c2:	4157      	adcs	r7, r2
 80091c4:	4074      	eors	r4, r6
 80091c6:	407d      	eors	r5, r7
 80091c8:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80091cc:	4691      	mov	r9, r2
 80091ce:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80091d2:	0e2d      	lsrs	r5, r5, #24
 80091d4:	4698      	mov	r8, r3
 80091d6:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80091da:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 80091de:	1824      	adds	r4, r4, r0
 80091e0:	414d      	adcs	r5, r1
 80091e2:	18a4      	adds	r4, r4, r2
 80091e4:	415d      	adcs	r5, r3
 80091e6:	ea84 0008 	eor.w	r0, r4, r8
 80091ea:	ea85 0109 	eor.w	r1, r5, r9
 80091ee:	4689      	mov	r9, r1
 80091f0:	0c01      	lsrs	r1, r0, #16
 80091f2:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80091f6:	9122      	str	r1, [sp, #136]	; 0x88
 80091f8:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80091fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009200:	9123      	str	r1, [sp, #140]	; 0x8c
 8009202:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8009206:	1980      	adds	r0, r0, r6
 8009208:	4179      	adcs	r1, r7
 800920a:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 800920e:	4050      	eors	r0, r2
 8009210:	4059      	eors	r1, r3
 8009212:	0042      	lsls	r2, r0, #1
 8009214:	460b      	mov	r3, r1
 8009216:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800921a:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 800921e:	932a      	str	r3, [sp, #168]	; 0xa8
 8009220:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 8009224:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8009228:	18a4      	adds	r4, r4, r2
 800922a:	415d      	adcs	r5, r3
 800922c:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8009230:	1912      	adds	r2, r2, r4
 8009232:	416b      	adcs	r3, r5
 8009234:	4614      	mov	r4, r2
 8009236:	461d      	mov	r5, r3
 8009238:	0049      	lsls	r1, r1, #1
 800923a:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800923e:	e9dd 6734 	ldrd	r6, r7, [sp, #208]	; 0xd0
 8009242:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8009246:	912b      	str	r1, [sp, #172]	; 0xac
 8009248:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800924c:	406b      	eors	r3, r5
 800924e:	18f6      	adds	r6, r6, r3
 8009250:	ea82 0204 	eor.w	r2, r2, r4
 8009254:	4157      	adcs	r7, r2
 8009256:	4070      	eors	r0, r6
 8009258:	4079      	eors	r1, r7
 800925a:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 800925e:	4691      	mov	r9, r2
 8009260:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8009264:	0e09      	lsrs	r1, r1, #24
 8009266:	4698      	mov	r8, r3
 8009268:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 800926c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009270:	1900      	adds	r0, r0, r4
 8009272:	4169      	adcs	r1, r5
 8009274:	1880      	adds	r0, r0, r2
 8009276:	4159      	adcs	r1, r3
 8009278:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 800927c:	ea80 0008 	eor.w	r0, r0, r8
 8009280:	ea81 0109 	eor.w	r1, r1, r9
 8009284:	4689      	mov	r9, r1
 8009286:	0c01      	lsrs	r1, r0, #16
 8009288:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800928c:	9120      	str	r1, [sp, #128]	; 0x80
 800928e:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009292:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009296:	9121      	str	r1, [sp, #132]	; 0x84
 8009298:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800929c:	1980      	adds	r0, r0, r6
 800929e:	4179      	adcs	r1, r7
 80092a0:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 80092a4:	4050      	eors	r0, r2
 80092a6:	4059      	eors	r1, r3
 80092a8:	0042      	lsls	r2, r0, #1
 80092aa:	460b      	mov	r3, r1
 80092ac:	0049      	lsls	r1, r1, #1
 80092ae:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80092b2:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80092b6:	9127      	str	r1, [sp, #156]	; 0x9c
 80092b8:	9326      	str	r3, [sp, #152]	; 0x98
 80092ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092be:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 80092c2:	18c0      	adds	r0, r0, r3
 80092c4:	4161      	adcs	r1, r4
 80092c6:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 80092ca:	181b      	adds	r3, r3, r0
 80092cc:	4618      	mov	r0, r3
 80092ce:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 80092d2:	414c      	adcs	r4, r1
 80092d4:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 80092d8:	4063      	eors	r3, r4
 80092da:	4621      	mov	r1, r4
 80092dc:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 80092e0:	18f6      	adds	r6, r6, r3
 80092e2:	ea82 0200 	eor.w	r2, r2, r0
 80092e6:	4157      	adcs	r7, r2
 80092e8:	4074      	eors	r4, r6
 80092ea:	407d      	eors	r5, r7
 80092ec:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80092f0:	4691      	mov	r9, r2
 80092f2:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80092f6:	0e2d      	lsrs	r5, r5, #24
 80092f8:	4698      	mov	r8, r3
 80092fa:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80092fe:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8009302:	1824      	adds	r4, r4, r0
 8009304:	414d      	adcs	r5, r1
 8009306:	18a4      	adds	r4, r4, r2
 8009308:	415d      	adcs	r5, r3
 800930a:	ea84 0008 	eor.w	r0, r4, r8
 800930e:	ea85 0109 	eor.w	r1, r5, r9
 8009312:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8009316:	0c04      	lsrs	r4, r0, #16
 8009318:	4680      	mov	r8, r0
 800931a:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 800931e:	0c0c      	lsrs	r4, r1, #16
 8009320:	1836      	adds	r6, r6, r0
 8009322:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 8009326:	414f      	adcs	r7, r1
 8009328:	407b      	eors	r3, r7
 800932a:	4072      	eors	r2, r6
 800932c:	005c      	lsls	r4, r3, #1
 800932e:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 8009332:	0052      	lsls	r2, r2, #1
 8009334:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009338:	9425      	str	r4, [sp, #148]	; 0x94
 800933a:	9324      	str	r3, [sp, #144]	; 0x90
 800933c:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 8009340:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8009344:	18a4      	adds	r4, r4, r2
 8009346:	415d      	adcs	r5, r3
 8009348:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 800934c:	1912      	adds	r2, r2, r4
 800934e:	416b      	adcs	r3, r5
 8009350:	4050      	eors	r0, r2
 8009352:	4059      	eors	r1, r3
 8009354:	4614      	mov	r4, r2
 8009356:	461d      	mov	r5, r3
 8009358:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 800935c:	1852      	adds	r2, r2, r1
 800935e:	4143      	adcs	r3, r0
 8009360:	4688      	mov	r8, r1
 8009362:	4681      	mov	r9, r0
 8009364:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8009368:	4050      	eors	r0, r2
 800936a:	4059      	eors	r1, r3
 800936c:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8009370:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
 8009374:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8009378:	0e09      	lsrs	r1, r1, #24
 800937a:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 800937e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009382:	1900      	adds	r0, r0, r4
 8009384:	4169      	adcs	r1, r5
 8009386:	1880      	adds	r0, r0, r2
 8009388:	4159      	adcs	r1, r3
 800938a:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 800938e:	ea80 0008 	eor.w	r0, r0, r8
 8009392:	ea81 0109 	eor.w	r1, r1, r9
 8009396:	4689      	mov	r9, r1
 8009398:	0c01      	lsrs	r1, r0, #16
 800939a:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800939e:	9128      	str	r1, [sp, #160]	; 0xa0
 80093a0:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80093a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80093a8:	9129      	str	r1, [sp, #164]	; 0xa4
 80093aa:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 80093ae:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 80093b2:	1900      	adds	r0, r0, r4
 80093b4:	4169      	adcs	r1, r5
 80093b6:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 80093ba:	4050      	eors	r0, r2
 80093bc:	4059      	eors	r1, r3
 80093be:	0042      	lsls	r2, r0, #1
 80093c0:	460b      	mov	r3, r1
 80093c2:	0049      	lsls	r1, r1, #1
 80093c4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80093c8:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80093cc:	912b      	str	r1, [sp, #172]	; 0xac
 80093ce:	932a      	str	r3, [sp, #168]	; 0xa8
 80093d0:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80093d4:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 80093d8:	18c0      	adds	r0, r0, r3
 80093da:	4161      	adcs	r1, r4
 80093dc:	e9dd 3426 	ldrd	r3, r4, [sp, #152]	; 0x98
 80093e0:	181b      	adds	r3, r3, r0
 80093e2:	4618      	mov	r0, r3
 80093e4:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 80093e8:	414c      	adcs	r4, r1
 80093ea:	4063      	eors	r3, r4
 80093ec:	4621      	mov	r1, r4
 80093ee:	e9dd 4526 	ldrd	r4, r5, [sp, #152]	; 0x98
 80093f2:	18f6      	adds	r6, r6, r3
 80093f4:	ea82 0200 	eor.w	r2, r2, r0
 80093f8:	4157      	adcs	r7, r2
 80093fa:	4074      	eors	r4, r6
 80093fc:	407d      	eors	r5, r7
 80093fe:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8009402:	4691      	mov	r9, r2
 8009404:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8009408:	0e2d      	lsrs	r5, r5, #24
 800940a:	4698      	mov	r8, r3
 800940c:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009410:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 8009414:	1824      	adds	r4, r4, r0
 8009416:	414d      	adcs	r5, r1
 8009418:	18a4      	adds	r4, r4, r2
 800941a:	415d      	adcs	r5, r3
 800941c:	ea84 0008 	eor.w	r0, r4, r8
 8009420:	ea85 0109 	eor.w	r1, r5, r9
 8009424:	4689      	mov	r9, r1
 8009426:	0c01      	lsrs	r1, r0, #16
 8009428:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800942c:	9126      	str	r1, [sp, #152]	; 0x98
 800942e:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009432:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009436:	9127      	str	r1, [sp, #156]	; 0x9c
 8009438:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800943c:	1980      	adds	r0, r0, r6
 800943e:	4179      	adcs	r1, r7
 8009440:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 8009444:	4050      	eors	r0, r2
 8009446:	4059      	eors	r1, r3
 8009448:	0042      	lsls	r2, r0, #1
 800944a:	460b      	mov	r3, r1
 800944c:	0049      	lsls	r1, r1, #1
 800944e:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8009452:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009456:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 800945a:	912d      	str	r1, [sp, #180]	; 0xb4
 800945c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009460:	932c      	str	r3, [sp, #176]	; 0xb0
 8009462:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8009466:	18a4      	adds	r4, r4, r2
 8009468:	415d      	adcs	r5, r3
 800946a:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800946e:	1912      	adds	r2, r2, r4
 8009470:	416b      	adcs	r3, r5
 8009472:	4614      	mov	r4, r2
 8009474:	461d      	mov	r5, r3
 8009476:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800947a:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 800947e:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	; 0x90
 8009482:	406b      	eors	r3, r5
 8009484:	18c0      	adds	r0, r0, r3
 8009486:	ea82 0204 	eor.w	r2, r2, r4
 800948a:	4151      	adcs	r1, r2
 800948c:	4046      	eors	r6, r0
 800948e:	404f      	eors	r7, r1
 8009490:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8009494:	4691      	mov	r9, r2
 8009496:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 800949a:	0e3f      	lsrs	r7, r7, #24
 800949c:	4698      	mov	r8, r3
 800949e:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 80094a2:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 80094a6:	1936      	adds	r6, r6, r4
 80094a8:	416f      	adcs	r7, r5
 80094aa:	18b6      	adds	r6, r6, r2
 80094ac:	415f      	adcs	r7, r3
 80094ae:	ea86 0408 	eor.w	r4, r6, r8
 80094b2:	ea87 0509 	eor.w	r5, r7, r9
 80094b6:	46a0      	mov	r8, r4
 80094b8:	0c24      	lsrs	r4, r4, #16
 80094ba:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80094be:	9422      	str	r4, [sp, #136]	; 0x88
 80094c0:	0c2c      	lsrs	r4, r5, #16
 80094c2:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80094c6:	9423      	str	r4, [sp, #140]	; 0x8c
 80094c8:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 80094cc:	1824      	adds	r4, r4, r0
 80094ce:	414d      	adcs	r5, r1
 80094d0:	4620      	mov	r0, r4
 80094d2:	4629      	mov	r1, r5
 80094d4:	4050      	eors	r0, r2
 80094d6:	4059      	eors	r1, r3
 80094d8:	0042      	lsls	r2, r0, #1
 80094da:	460b      	mov	r3, r1
 80094dc:	0049      	lsls	r1, r1, #1
 80094de:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80094e2:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80094e6:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 80094ea:	9125      	str	r1, [sp, #148]	; 0x94
 80094ec:	9324      	str	r3, [sp, #144]	; 0x90
 80094ee:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80094f2:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 80094f6:	18c0      	adds	r0, r0, r3
 80094f8:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 80094fc:	4161      	adcs	r1, r4
 80094fe:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
 8009502:	eb10 000a 	adds.w	r0, r0, sl
 8009506:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 800950a:	eb41 010b 	adc.w	r1, r1, fp
 800950e:	404b      	eors	r3, r1
 8009510:	18f6      	adds	r6, r6, r3
 8009512:	ea82 0200 	eor.w	r2, r2, r0
 8009516:	4157      	adcs	r7, r2
 8009518:	ea8a 0406 	eor.w	r4, sl, r6
 800951c:	ea8b 0507 	eor.w	r5, fp, r7
 8009520:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8009524:	4691      	mov	r9, r2
 8009526:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 800952a:	0e2d      	lsrs	r5, r5, #24
 800952c:	4698      	mov	r8, r3
 800952e:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009532:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 8009536:	1824      	adds	r4, r4, r0
 8009538:	414d      	adcs	r5, r1
 800953a:	18a4      	adds	r4, r4, r2
 800953c:	415d      	adcs	r5, r3
 800953e:	ea84 0008 	eor.w	r0, r4, r8
 8009542:	ea85 0109 	eor.w	r1, r5, r9
 8009546:	4689      	mov	r9, r1
 8009548:	0c01      	lsrs	r1, r0, #16
 800954a:	ea41 4a09 	orr.w	sl, r1, r9, lsl #16
 800954e:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009552:	ea41 4b00 	orr.w	fp, r1, r0, lsl #16
 8009556:	eb16 000a 	adds.w	r0, r6, sl
 800955a:	eb47 010b 	adc.w	r1, r7, fp
 800955e:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
 8009562:	4050      	eors	r0, r2
 8009564:	4059      	eors	r1, r3
 8009566:	460b      	mov	r3, r1
 8009568:	0042      	lsls	r2, r0, #1
 800956a:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 800956e:	e9cd 453e 	strd	r4, r5, [sp, #248]	; 0xf8
 8009572:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8009576:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 800957a:	18a4      	adds	r4, r4, r2
 800957c:	415d      	adcs	r5, r3
 800957e:	0049      	lsls	r1, r1, #1
 8009580:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8009584:	19a4      	adds	r4, r4, r6
 8009586:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 800958a:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 800958e:	417d      	adcs	r5, r7
 8009590:	406b      	eors	r3, r5
 8009592:	18c0      	adds	r0, r0, r3
 8009594:	ea82 0204 	eor.w	r2, r2, r4
 8009598:	4151      	adcs	r1, r2
 800959a:	4046      	eors	r6, r0
 800959c:	404f      	eors	r7, r1
 800959e:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 80095a2:	4691      	mov	r9, r2
 80095a4:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 80095a8:	0e3f      	lsrs	r7, r7, #24
 80095aa:	4698      	mov	r8, r3
 80095ac:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 80095b0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80095b4:	1936      	adds	r6, r6, r4
 80095b6:	416f      	adcs	r7, r5
 80095b8:	18b6      	adds	r6, r6, r2
 80095ba:	415f      	adcs	r7, r3
 80095bc:	ea86 0408 	eor.w	r4, r6, r8
 80095c0:	ea87 0509 	eor.w	r5, r7, r9
 80095c4:	46a0      	mov	r8, r4
 80095c6:	0c24      	lsrs	r4, r4, #16
 80095c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80095cc:	9420      	str	r4, [sp, #128]	; 0x80
 80095ce:	0c2c      	lsrs	r4, r5, #16
 80095d0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80095d4:	9421      	str	r4, [sp, #132]	; 0x84
 80095d6:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
 80095da:	1824      	adds	r4, r4, r0
 80095dc:	414d      	adcs	r5, r1
 80095de:	4620      	mov	r0, r4
 80095e0:	4629      	mov	r1, r5
 80095e2:	4050      	eors	r0, r2
 80095e4:	4059      	eors	r1, r3
 80095e6:	0042      	lsls	r2, r0, #1
 80095e8:	460b      	mov	r3, r1
 80095ea:	0049      	lsls	r1, r1, #1
 80095ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80095f0:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80095f4:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 80095f8:	e9cd 6736 	strd	r6, r7, [sp, #216]	; 0xd8
 80095fc:	9127      	str	r1, [sp, #156]	; 0x9c
 80095fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009602:	9326      	str	r3, [sp, #152]	; 0x98
 8009604:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8009608:	18c0      	adds	r0, r0, r3
 800960a:	4161      	adcs	r1, r4
 800960c:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
 8009610:	181b      	adds	r3, r3, r0
 8009612:	4618      	mov	r0, r3
 8009614:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8009618:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
 800961c:	414c      	adcs	r4, r1
 800961e:	4063      	eors	r3, r4
 8009620:	4621      	mov	r1, r4
 8009622:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 8009626:	18f6      	adds	r6, r6, r3
 8009628:	ea82 0200 	eor.w	r2, r2, r0
 800962c:	4157      	adcs	r7, r2
 800962e:	4074      	eors	r4, r6
 8009630:	407d      	eors	r5, r7
 8009632:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8009636:	4691      	mov	r9, r2
 8009638:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 800963c:	0e2d      	lsrs	r5, r5, #24
 800963e:	4698      	mov	r8, r3
 8009640:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009644:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8009648:	1824      	adds	r4, r4, r0
 800964a:	414d      	adcs	r5, r1
 800964c:	18a4      	adds	r4, r4, r2
 800964e:	415d      	adcs	r5, r3
 8009650:	ea84 0008 	eor.w	r0, r4, r8
 8009654:	ea85 0109 	eor.w	r1, r5, r9
 8009658:	4689      	mov	r9, r1
 800965a:	0c01      	lsrs	r1, r0, #16
 800965c:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8009660:	9122      	str	r1, [sp, #136]	; 0x88
 8009662:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009666:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800966a:	9123      	str	r1, [sp, #140]	; 0x8c
 800966c:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8009670:	1980      	adds	r0, r0, r6
 8009672:	4179      	adcs	r1, r7
 8009674:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
 8009678:	ac40      	add	r4, sp, #256	; 0x100
 800967a:	e9c4 0100 	strd	r0, r1, [r4]
 800967e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009682:	4050      	eors	r0, r2
 8009684:	4059      	eors	r1, r3
 8009686:	0042      	lsls	r2, r0, #1
 8009688:	460b      	mov	r3, r1
 800968a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800968e:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 8009692:	932a      	str	r3, [sp, #168]	; 0xa8
 8009694:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8009698:	18a4      	adds	r4, r4, r2
 800969a:	415d      	adcs	r5, r3
 800969c:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 80096a0:	1912      	adds	r2, r2, r4
 80096a2:	416b      	adcs	r3, r5
 80096a4:	0049      	lsls	r1, r1, #1
 80096a6:	4614      	mov	r4, r2
 80096a8:	461d      	mov	r5, r3
 80096aa:	ea8a 0202 	eor.w	r2, sl, r2
 80096ae:	ea8b 0303 	eor.w	r3, fp, r3
 80096b2:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80096b6:	e9dd ab34 	ldrd	sl, fp, [sp, #208]	; 0xd0
 80096ba:	912b      	str	r1, [sp, #172]	; 0xac
 80096bc:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 80096c0:	eb1a 0a03 	adds.w	sl, sl, r3
 80096c4:	eb4b 0b02 	adc.w	fp, fp, r2
 80096c8:	ea80 000a 	eor.w	r0, r0, sl
 80096cc:	ea81 010b 	eor.w	r1, r1, fp
 80096d0:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 80096d4:	4691      	mov	r9, r2
 80096d6:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 80096da:	0e09      	lsrs	r1, r1, #24
 80096dc:	4698      	mov	r8, r3
 80096de:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 80096e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80096e6:	1900      	adds	r0, r0, r4
 80096e8:	4169      	adcs	r1, r5
 80096ea:	1880      	adds	r0, r0, r2
 80096ec:	4159      	adcs	r1, r3
 80096ee:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 80096f2:	ea80 0008 	eor.w	r0, r0, r8
 80096f6:	ea81 0109 	eor.w	r1, r1, r9
 80096fa:	4689      	mov	r9, r1
 80096fc:	0c01      	lsrs	r1, r0, #16
 80096fe:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8009702:	912c      	str	r1, [sp, #176]	; 0xb0
 8009704:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009708:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800970c:	912d      	str	r1, [sp, #180]	; 0xb4
 800970e:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 8009712:	eb10 000a 	adds.w	r0, r0, sl
 8009716:	eb41 010b 	adc.w	r1, r1, fp
 800971a:	404b      	eors	r3, r1
 800971c:	4042      	eors	r2, r0
 800971e:	468b      	mov	fp, r1
 8009720:	0059      	lsls	r1, r3, #1
 8009722:	ea41 71d2 	orr.w	r1, r1, r2, lsr #31
 8009726:	0052      	lsls	r2, r2, #1
 8009728:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800972c:	4682      	mov	sl, r0
 800972e:	912f      	str	r1, [sp, #188]	; 0xbc
 8009730:	932e      	str	r3, [sp, #184]	; 0xb8
 8009732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009736:	e9dd 343e 	ldrd	r3, r4, [sp, #248]	; 0xf8
 800973a:	18c0      	adds	r0, r0, r3
 800973c:	4161      	adcs	r1, r4
 800973e:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 8009742:	181b      	adds	r3, r3, r0
 8009744:	4618      	mov	r0, r3
 8009746:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 800974a:	414c      	adcs	r4, r1
 800974c:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 8009750:	4063      	eors	r3, r4
 8009752:	4621      	mov	r1, r4
 8009754:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 8009758:	18f6      	adds	r6, r6, r3
 800975a:	ea82 0200 	eor.w	r2, r2, r0
 800975e:	4157      	adcs	r7, r2
 8009760:	4074      	eors	r4, r6
 8009762:	407d      	eors	r5, r7
 8009764:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8009768:	4691      	mov	r9, r2
 800976a:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 800976e:	0e2d      	lsrs	r5, r5, #24
 8009770:	4698      	mov	r8, r3
 8009772:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009776:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 800977a:	1824      	adds	r4, r4, r0
 800977c:	414d      	adcs	r5, r1
 800977e:	18a4      	adds	r4, r4, r2
 8009780:	415d      	adcs	r5, r3
 8009782:	ea84 0008 	eor.w	r0, r4, r8
 8009786:	ea85 0109 	eor.w	r1, r5, r9
 800978a:	e9cd 4534 	strd	r4, r5, [sp, #208]	; 0xd0
 800978e:	0c04      	lsrs	r4, r0, #16
 8009790:	4680      	mov	r8, r0
 8009792:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8009796:	0c0c      	lsrs	r4, r1, #16
 8009798:	1836      	adds	r6, r6, r0
 800979a:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 800979e:	414f      	adcs	r7, r1
 80097a0:	407b      	eors	r3, r7
 80097a2:	4072      	eors	r2, r6
 80097a4:	005c      	lsls	r4, r3, #1
 80097a6:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 80097aa:	0052      	lsls	r2, r2, #1
 80097ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80097b0:	9425      	str	r4, [sp, #148]	; 0x94
 80097b2:	9324      	str	r3, [sp, #144]	; 0x90
 80097b4:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 80097b8:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 80097bc:	18a4      	adds	r4, r4, r2
 80097be:	415d      	adcs	r5, r3
 80097c0:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 80097c4:	1912      	adds	r2, r2, r4
 80097c6:	416b      	adcs	r3, r5
 80097c8:	4059      	eors	r1, r3
 80097ca:	eb1a 0a01 	adds.w	sl, sl, r1
 80097ce:	ea80 0002 	eor.w	r0, r0, r2
 80097d2:	eb4b 0b00 	adc.w	fp, fp, r0
 80097d6:	4688      	mov	r8, r1
 80097d8:	4681      	mov	r9, r0
 80097da:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 80097de:	ea80 000a 	eor.w	r0, r0, sl
 80097e2:	ea81 010b 	eor.w	r1, r1, fp
 80097e6:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 80097ea:	4614      	mov	r4, r2
 80097ec:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 80097f0:	0e09      	lsrs	r1, r1, #24
 80097f2:	461d      	mov	r5, r3
 80097f4:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 80097f8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80097fc:	1900      	adds	r0, r0, r4
 80097fe:	4169      	adcs	r1, r5
 8009800:	1880      	adds	r0, r0, r2
 8009802:	4159      	adcs	r1, r3
 8009804:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 8009808:	ea80 0008 	eor.w	r0, r0, r8
 800980c:	ea81 0109 	eor.w	r1, r1, r9
 8009810:	4689      	mov	r9, r1
 8009812:	0c01      	lsrs	r1, r0, #16
 8009814:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8009818:	9128      	str	r1, [sp, #160]	; 0xa0
 800981a:	ea4f 4119 	mov.w	r1, r9, lsr #16
 800981e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009822:	9129      	str	r1, [sp, #164]	; 0xa4
 8009824:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 8009828:	eb10 000a 	adds.w	r0, r0, sl
 800982c:	eb41 010b 	adc.w	r1, r1, fp
 8009830:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 8009834:	4050      	eors	r0, r2
 8009836:	4059      	eors	r1, r3
 8009838:	460b      	mov	r3, r1
 800983a:	0042      	lsls	r2, r0, #1
 800983c:	0049      	lsls	r1, r1, #1
 800983e:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 8009842:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8009846:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 800984a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800984e:	18c0      	adds	r0, r0, r3
 8009850:	4161      	adcs	r1, r4
 8009852:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8009856:	181b      	adds	r3, r3, r0
 8009858:	4618      	mov	r0, r3
 800985a:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800985e:	414c      	adcs	r4, r1
 8009860:	4063      	eors	r3, r4
 8009862:	4621      	mov	r1, r4
 8009864:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
 8009868:	18f6      	adds	r6, r6, r3
 800986a:	ea82 0200 	eor.w	r2, r2, r0
 800986e:	4157      	adcs	r7, r2
 8009870:	4074      	eors	r4, r6
 8009872:	407d      	eors	r5, r7
 8009874:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8009878:	4691      	mov	r9, r2
 800987a:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 800987e:	0e2d      	lsrs	r5, r5, #24
 8009880:	4698      	mov	r8, r3
 8009882:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009886:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 800988a:	1824      	adds	r4, r4, r0
 800988c:	414d      	adcs	r5, r1
 800988e:	18a4      	adds	r4, r4, r2
 8009890:	415d      	adcs	r5, r3
 8009892:	ea84 0008 	eor.w	r0, r4, r8
 8009896:	ea85 0109 	eor.w	r1, r5, r9
 800989a:	4689      	mov	r9, r1
 800989c:	0c01      	lsrs	r1, r0, #16
 800989e:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80098a2:	9120      	str	r1, [sp, #128]	; 0x80
 80098a4:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80098a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80098ac:	9121      	str	r1, [sp, #132]	; 0x84
 80098ae:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 80098b2:	1980      	adds	r0, r0, r6
 80098b4:	4179      	adcs	r1, r7
 80098b6:	e9cd 0138 	strd	r0, r1, [sp, #224]	; 0xe0
 80098ba:	4050      	eors	r0, r2
 80098bc:	4059      	eors	r1, r3
 80098be:	0042      	lsls	r2, r0, #1
 80098c0:	460b      	mov	r3, r1
 80098c2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80098c6:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 80098ca:	932a      	str	r3, [sp, #168]	; 0xa8
 80098cc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80098d0:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 80098d4:	18a4      	adds	r4, r4, r2
 80098d6:	415d      	adcs	r5, r3
 80098d8:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 80098dc:	0049      	lsls	r1, r1, #1
 80098de:	1912      	adds	r2, r2, r4
 80098e0:	416b      	adcs	r3, r5
 80098e2:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 80098e6:	4614      	mov	r4, r2
 80098e8:	461d      	mov	r5, r3
 80098ea:	912b      	str	r1, [sp, #172]	; 0xac
 80098ec:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 80098f0:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 80098f4:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	; 0x90
 80098f8:	406b      	eors	r3, r5
 80098fa:	18c0      	adds	r0, r0, r3
 80098fc:	ea82 0204 	eor.w	r2, r2, r4
 8009900:	4151      	adcs	r1, r2
 8009902:	4046      	eors	r6, r0
 8009904:	404f      	eors	r7, r1
 8009906:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 800990a:	4691      	mov	r9, r2
 800990c:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8009910:	0e3f      	lsrs	r7, r7, #24
 8009912:	4698      	mov	r8, r3
 8009914:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8009918:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800991c:	1936      	adds	r6, r6, r4
 800991e:	416f      	adcs	r7, r5
 8009920:	18b6      	adds	r6, r6, r2
 8009922:	415f      	adcs	r7, r3
 8009924:	ea86 0408 	eor.w	r4, r6, r8
 8009928:	ea87 0509 	eor.w	r5, r7, r9
 800992c:	46a0      	mov	r8, r4
 800992e:	0c24      	lsrs	r4, r4, #16
 8009930:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8009934:	9422      	str	r4, [sp, #136]	; 0x88
 8009936:	0c2c      	lsrs	r4, r5, #16
 8009938:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800993c:	9423      	str	r4, [sp, #140]	; 0x8c
 800993e:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 8009942:	1824      	adds	r4, r4, r0
 8009944:	414d      	adcs	r5, r1
 8009946:	4620      	mov	r0, r4
 8009948:	4629      	mov	r1, r5
 800994a:	4050      	eors	r0, r2
 800994c:	4059      	eors	r1, r3
 800994e:	0042      	lsls	r2, r0, #1
 8009950:	460b      	mov	r3, r1
 8009952:	0049      	lsls	r1, r1, #1
 8009954:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009958:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 800995c:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8009960:	9125      	str	r1, [sp, #148]	; 0x94
 8009962:	9324      	str	r3, [sp, #144]	; 0x90
 8009964:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8009968:	e9dd 3434 	ldrd	r3, r4, [sp, #208]	; 0xd0
 800996c:	18c0      	adds	r0, r0, r3
 800996e:	4161      	adcs	r1, r4
 8009970:	e9dd 3426 	ldrd	r3, r4, [sp, #152]	; 0x98
 8009974:	181b      	adds	r3, r3, r0
 8009976:	4618      	mov	r0, r3
 8009978:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 800997c:	414c      	adcs	r4, r1
 800997e:	4063      	eors	r3, r4
 8009980:	4698      	mov	r8, r3
 8009982:	ab40      	add	r3, sp, #256	; 0x100
 8009984:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
 8009988:	e9d3 6700 	ldrd	r6, r7, [r3]
 800998c:	4621      	mov	r1, r4
 800998e:	e9dd 4526 	ldrd	r4, r5, [sp, #152]	; 0x98
 8009992:	eb16 0608 	adds.w	r6, r6, r8
 8009996:	ea82 0200 	eor.w	r2, r2, r0
 800999a:	4157      	adcs	r7, r2
 800999c:	4074      	eors	r4, r6
 800999e:	407d      	eors	r5, r7
 80099a0:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80099a4:	4691      	mov	r9, r2
 80099a6:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 80099aa:	0e2d      	lsrs	r5, r5, #24
 80099ac:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 80099b0:	e9dd 4500 	ldrd	r4, r5, [sp]
 80099b4:	1824      	adds	r4, r4, r0
 80099b6:	414d      	adcs	r5, r1
 80099b8:	18a4      	adds	r4, r4, r2
 80099ba:	415d      	adcs	r5, r3
 80099bc:	ea84 0008 	eor.w	r0, r4, r8
 80099c0:	ea85 0109 	eor.w	r1, r5, r9
 80099c4:	4689      	mov	r9, r1
 80099c6:	0c01      	lsrs	r1, r0, #16
 80099c8:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80099cc:	9126      	str	r1, [sp, #152]	; 0x98
 80099ce:	ea4f 4119 	mov.w	r1, r9, lsr #16
 80099d2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80099d6:	9127      	str	r1, [sp, #156]	; 0x9c
 80099d8:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 80099dc:	1980      	adds	r0, r0, r6
 80099de:	4179      	adcs	r1, r7
 80099e0:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 80099e4:	4050      	eors	r0, r2
 80099e6:	4059      	eors	r1, r3
 80099e8:	460b      	mov	r3, r1
 80099ea:	0042      	lsls	r2, r0, #1
 80099ec:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 80099f0:	e9cd 4534 	strd	r4, r5, [sp, #208]	; 0xd0
 80099f4:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 80099f8:	e9dd 4500 	ldrd	r4, r5, [sp]
 80099fc:	18a4      	adds	r4, r4, r2
 80099fe:	415d      	adcs	r5, r3
 8009a00:	0049      	lsls	r1, r1, #1
 8009a02:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8009a06:	19a4      	adds	r4, r4, r6
 8009a08:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 8009a0c:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8009a10:	417d      	adcs	r5, r7
 8009a12:	406b      	eors	r3, r5
 8009a14:	18c0      	adds	r0, r0, r3
 8009a16:	ea82 0204 	eor.w	r2, r2, r4
 8009a1a:	4151      	adcs	r1, r2
 8009a1c:	4046      	eors	r6, r0
 8009a1e:	404f      	eors	r7, r1
 8009a20:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8009a24:	4691      	mov	r9, r2
 8009a26:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8009a2a:	0e3f      	lsrs	r7, r7, #24
 8009a2c:	4698      	mov	r8, r3
 8009a2e:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8009a32:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009a36:	1936      	adds	r6, r6, r4
 8009a38:	416f      	adcs	r7, r5
 8009a3a:	18b6      	adds	r6, r6, r2
 8009a3c:	415f      	adcs	r7, r3
 8009a3e:	ea86 0408 	eor.w	r4, r6, r8
 8009a42:	ea87 0509 	eor.w	r5, r7, r9
 8009a46:	46a0      	mov	r8, r4
 8009a48:	0c24      	lsrs	r4, r4, #16
 8009a4a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8009a4e:	9420      	str	r4, [sp, #128]	; 0x80
 8009a50:	0c2c      	lsrs	r4, r5, #16
 8009a52:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8009a56:	9421      	str	r4, [sp, #132]	; 0x84
 8009a58:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
 8009a5c:	1824      	adds	r4, r4, r0
 8009a5e:	414d      	adcs	r5, r1
 8009a60:	4620      	mov	r0, r4
 8009a62:	4629      	mov	r1, r5
 8009a64:	4050      	eors	r0, r2
 8009a66:	4059      	eors	r1, r3
 8009a68:	0042      	lsls	r2, r0, #1
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	0049      	lsls	r1, r1, #1
 8009a6e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009a72:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8009a76:	e9cd 6736 	strd	r6, r7, [sp, #216]	; 0xd8
 8009a7a:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8009a7e:	912d      	str	r1, [sp, #180]	; 0xb4
 8009a80:	932c      	str	r3, [sp, #176]	; 0xb0
 8009a82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a86:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8009a8a:	18c0      	adds	r0, r0, r3
 8009a8c:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8009a90:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8009a94:	4161      	adcs	r1, r4
 8009a96:	eb10 000a 	adds.w	r0, r0, sl
 8009a9a:	eb41 010b 	adc.w	r1, r1, fp
 8009a9e:	404b      	eors	r3, r1
 8009aa0:	18f6      	adds	r6, r6, r3
 8009aa2:	ea82 0200 	eor.w	r2, r2, r0
 8009aa6:	4157      	adcs	r7, r2
 8009aa8:	ea8a 0406 	eor.w	r4, sl, r6
 8009aac:	ea8b 0507 	eor.w	r5, fp, r7
 8009ab0:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8009ab4:	4691      	mov	r9, r2
 8009ab6:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8009aba:	0e2d      	lsrs	r5, r5, #24
 8009abc:	4698      	mov	r8, r3
 8009abe:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009ac2:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009ac6:	1824      	adds	r4, r4, r0
 8009ac8:	414d      	adcs	r5, r1
 8009aca:	18a4      	adds	r4, r4, r2
 8009acc:	415d      	adcs	r5, r3
 8009ace:	ea84 0008 	eor.w	r0, r4, r8
 8009ad2:	ea85 0109 	eor.w	r1, r5, r9
 8009ad6:	4689      	mov	r9, r1
 8009ad8:	0c01      	lsrs	r1, r0, #16
 8009ada:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8009ade:	9122      	str	r1, [sp, #136]	; 0x88
 8009ae0:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009ae4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ae8:	9123      	str	r1, [sp, #140]	; 0x8c
 8009aea:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8009aee:	1980      	adds	r0, r0, r6
 8009af0:	4179      	adcs	r1, r7
 8009af2:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 8009af6:	4050      	eors	r0, r2
 8009af8:	4059      	eors	r1, r3
 8009afa:	460b      	mov	r3, r1
 8009afc:	0042      	lsls	r2, r0, #1
 8009afe:	ea42 7ad3 	orr.w	sl, r2, r3, lsr #31
 8009b02:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8009b06:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8009b0a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8009b0e:	18a4      	adds	r4, r4, r2
 8009b10:	415d      	adcs	r5, r3
 8009b12:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8009b16:	1912      	adds	r2, r2, r4
 8009b18:	416b      	adcs	r3, r5
 8009b1a:	4614      	mov	r4, r2
 8009b1c:	461d      	mov	r5, r3
 8009b1e:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8009b22:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 8009b26:	0049      	lsls	r1, r1, #1
 8009b28:	ea41 7bd0 	orr.w	fp, r1, r0, lsr #31
 8009b2c:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8009b30:	406b      	eors	r3, r5
 8009b32:	18f6      	adds	r6, r6, r3
 8009b34:	ea82 0204 	eor.w	r2, r2, r4
 8009b38:	4157      	adcs	r7, r2
 8009b3a:	4070      	eors	r0, r6
 8009b3c:	4079      	eors	r1, r7
 8009b3e:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8009b42:	4691      	mov	r9, r2
 8009b44:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8009b48:	0e09      	lsrs	r1, r1, #24
 8009b4a:	4698      	mov	r8, r3
 8009b4c:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8009b50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b54:	1900      	adds	r0, r0, r4
 8009b56:	4169      	adcs	r1, r5
 8009b58:	1880      	adds	r0, r0, r2
 8009b5a:	4159      	adcs	r1, r3
 8009b5c:	e9cd 0132 	strd	r0, r1, [sp, #200]	; 0xc8
 8009b60:	ea80 0008 	eor.w	r0, r0, r8
 8009b64:	ea81 0109 	eor.w	r1, r1, r9
 8009b68:	4689      	mov	r9, r1
 8009b6a:	0c01      	lsrs	r1, r0, #16
 8009b6c:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8009b70:	9126      	str	r1, [sp, #152]	; 0x98
 8009b72:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009b76:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009b7a:	9127      	str	r1, [sp, #156]	; 0x9c
 8009b7c:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8009b80:	1980      	adds	r0, r0, r6
 8009b82:	4179      	adcs	r1, r7
 8009b84:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 8009b88:	4050      	eors	r0, r2
 8009b8a:	4059      	eors	r1, r3
 8009b8c:	0042      	lsls	r2, r0, #1
 8009b8e:	460b      	mov	r3, r1
 8009b90:	0049      	lsls	r1, r1, #1
 8009b92:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009b96:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8009b9a:	912b      	str	r1, [sp, #172]	; 0xac
 8009b9c:	932a      	str	r3, [sp, #168]	; 0xa8
 8009b9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ba2:	e9dd 3434 	ldrd	r3, r4, [sp, #208]	; 0xd0
 8009ba6:	18c0      	adds	r0, r0, r3
 8009ba8:	4161      	adcs	r1, r4
 8009baa:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 8009bae:	181b      	adds	r3, r3, r0
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 8009bb6:	414c      	adcs	r4, r1
 8009bb8:	e9dd 6738 	ldrd	r6, r7, [sp, #224]	; 0xe0
 8009bbc:	4063      	eors	r3, r4
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 8009bc4:	18f6      	adds	r6, r6, r3
 8009bc6:	ea82 0200 	eor.w	r2, r2, r0
 8009bca:	4157      	adcs	r7, r2
 8009bcc:	4074      	eors	r4, r6
 8009bce:	407d      	eors	r5, r7
 8009bd0:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8009bd4:	4691      	mov	r9, r2
 8009bd6:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8009bda:	0e2d      	lsrs	r5, r5, #24
 8009bdc:	4698      	mov	r8, r3
 8009bde:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009be2:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 8009be6:	1824      	adds	r4, r4, r0
 8009be8:	414d      	adcs	r5, r1
 8009bea:	18a4      	adds	r4, r4, r2
 8009bec:	415d      	adcs	r5, r3
 8009bee:	ea84 0008 	eor.w	r0, r4, r8
 8009bf2:	ea85 0109 	eor.w	r1, r5, r9
 8009bf6:	e9cd 4534 	strd	r4, r5, [sp, #208]	; 0xd0
 8009bfa:	0c04      	lsrs	r4, r0, #16
 8009bfc:	4680      	mov	r8, r0
 8009bfe:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8009c02:	0c0c      	lsrs	r4, r1, #16
 8009c04:	1836      	adds	r6, r6, r0
 8009c06:	ea44 4108 	orr.w	r1, r4, r8, lsl #16
 8009c0a:	414f      	adcs	r7, r1
 8009c0c:	407b      	eors	r3, r7
 8009c0e:	4072      	eors	r2, r6
 8009c10:	005c      	lsls	r4, r3, #1
 8009c12:	ea44 74d2 	orr.w	r4, r4, r2, lsr #31
 8009c16:	0052      	lsls	r2, r2, #1
 8009c18:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009c1c:	9425      	str	r4, [sp, #148]	; 0x94
 8009c1e:	9324      	str	r3, [sp, #144]	; 0x90
 8009c20:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8009c24:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8009c28:	18a4      	adds	r4, r4, r2
 8009c2a:	415d      	adcs	r5, r3
 8009c2c:	eb14 040a 	adds.w	r4, r4, sl
 8009c30:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
 8009c34:	eb45 050b 	adc.w	r5, r5, fp
 8009c38:	4069      	eors	r1, r5
 8009c3a:	1852      	adds	r2, r2, r1
 8009c3c:	ea80 0004 	eor.w	r0, r0, r4
 8009c40:	4143      	adcs	r3, r0
 8009c42:	4681      	mov	r9, r0
 8009c44:	ea82 000a 	eor.w	r0, r2, sl
 8009c48:	4688      	mov	r8, r1
 8009c4a:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8009c4e:	ea83 010b 	eor.w	r1, r3, fp
 8009c52:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 8009c56:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8009c5a:	0e09      	lsrs	r1, r1, #24
 8009c5c:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8009c60:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8009c64:	1900      	adds	r0, r0, r4
 8009c66:	4169      	adcs	r1, r5
 8009c68:	1880      	adds	r0, r0, r2
 8009c6a:	4159      	adcs	r1, r3
 8009c6c:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 8009c70:	ea80 0008 	eor.w	r0, r0, r8
 8009c74:	ea81 0109 	eor.w	r1, r1, r9
 8009c78:	4689      	mov	r9, r1
 8009c7a:	0c01      	lsrs	r1, r0, #16
 8009c7c:	ea41 4a09 	orr.w	sl, r1, r9, lsl #16
 8009c80:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009c84:	ea41 4b00 	orr.w	fp, r1, r0, lsl #16
 8009c88:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 8009c8c:	eb10 000a 	adds.w	r0, r0, sl
 8009c90:	eb41 010b 	adc.w	r1, r1, fp
 8009c94:	e9cd 0138 	strd	r0, r1, [sp, #224]	; 0xe0
 8009c98:	4050      	eors	r0, r2
 8009c9a:	4059      	eors	r1, r3
 8009c9c:	0042      	lsls	r2, r0, #1
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	0049      	lsls	r1, r1, #1
 8009ca2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009ca6:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8009caa:	9129      	str	r1, [sp, #164]	; 0xa4
 8009cac:	9328      	str	r3, [sp, #160]	; 0xa0
 8009cae:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8009cb2:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8009cb6:	18c0      	adds	r0, r0, r3
 8009cb8:	4161      	adcs	r1, r4
 8009cba:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
 8009cbe:	181b      	adds	r3, r3, r0
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8009cc6:	414c      	adcs	r4, r1
 8009cc8:	4063      	eors	r3, r4
 8009cca:	4621      	mov	r1, r4
 8009ccc:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 8009cd0:	18f6      	adds	r6, r6, r3
 8009cd2:	ea82 0200 	eor.w	r2, r2, r0
 8009cd6:	4157      	adcs	r7, r2
 8009cd8:	4074      	eors	r4, r6
 8009cda:	407d      	eors	r5, r7
 8009cdc:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8009ce0:	4691      	mov	r9, r2
 8009ce2:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8009ce6:	0e2d      	lsrs	r5, r5, #24
 8009ce8:	4698      	mov	r8, r3
 8009cea:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009cee:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 8009cf2:	1824      	adds	r4, r4, r0
 8009cf4:	414d      	adcs	r5, r1
 8009cf6:	18a4      	adds	r4, r4, r2
 8009cf8:	415d      	adcs	r5, r3
 8009cfa:	ea84 0008 	eor.w	r0, r4, r8
 8009cfe:	ea85 0109 	eor.w	r1, r5, r9
 8009d02:	4689      	mov	r9, r1
 8009d04:	0c01      	lsrs	r1, r0, #16
 8009d06:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8009d0a:	9120      	str	r1, [sp, #128]	; 0x80
 8009d0c:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009d10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009d14:	9121      	str	r1, [sp, #132]	; 0x84
 8009d16:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8009d1a:	1980      	adds	r0, r0, r6
 8009d1c:	4179      	adcs	r1, r7
 8009d1e:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
 8009d22:	4050      	eors	r0, r2
 8009d24:	4059      	eors	r1, r3
 8009d26:	0042      	lsls	r2, r0, #1
 8009d28:	460b      	mov	r3, r1
 8009d2a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009d2e:	e9cd 452e 	strd	r4, r5, [sp, #184]	; 0xb8
 8009d32:	932a      	str	r3, [sp, #168]	; 0xa8
 8009d34:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 8009d38:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8009d3c:	18a4      	adds	r4, r4, r2
 8009d3e:	415d      	adcs	r5, r3
 8009d40:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8009d44:	1912      	adds	r2, r2, r4
 8009d46:	416b      	adcs	r3, r5
 8009d48:	0049      	lsls	r1, r1, #1
 8009d4a:	4614      	mov	r4, r2
 8009d4c:	461d      	mov	r5, r3
 8009d4e:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8009d52:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8009d56:	912b      	str	r1, [sp, #172]	; 0xac
 8009d58:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8009d5c:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	; 0x90
 8009d60:	406b      	eors	r3, r5
 8009d62:	18c0      	adds	r0, r0, r3
 8009d64:	ea82 0204 	eor.w	r2, r2, r4
 8009d68:	4151      	adcs	r1, r2
 8009d6a:	4046      	eors	r6, r0
 8009d6c:	404f      	eors	r7, r1
 8009d6e:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8009d72:	4691      	mov	r9, r2
 8009d74:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8009d78:	0e3f      	lsrs	r7, r7, #24
 8009d7a:	4698      	mov	r8, r3
 8009d7c:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8009d80:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
 8009d84:	1936      	adds	r6, r6, r4
 8009d86:	416f      	adcs	r7, r5
 8009d88:	18b6      	adds	r6, r6, r2
 8009d8a:	415f      	adcs	r7, r3
 8009d8c:	ea86 0408 	eor.w	r4, r6, r8
 8009d90:	ea87 0509 	eor.w	r5, r7, r9
 8009d94:	46a0      	mov	r8, r4
 8009d96:	0c24      	lsrs	r4, r4, #16
 8009d98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8009d9c:	9422      	str	r4, [sp, #136]	; 0x88
 8009d9e:	0c2c      	lsrs	r4, r5, #16
 8009da0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8009da4:	9423      	str	r4, [sp, #140]	; 0x8c
 8009da6:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	; 0x88
 8009daa:	1824      	adds	r4, r4, r0
 8009dac:	414d      	adcs	r5, r1
 8009dae:	4620      	mov	r0, r4
 8009db0:	4629      	mov	r1, r5
 8009db2:	4050      	eors	r0, r2
 8009db4:	4059      	eors	r1, r3
 8009db6:	0042      	lsls	r2, r0, #1
 8009db8:	460b      	mov	r3, r1
 8009dba:	0049      	lsls	r1, r1, #1
 8009dbc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009dc0:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8009dc4:	e9cd 453c 	strd	r4, r5, [sp, #240]	; 0xf0
 8009dc8:	9125      	str	r1, [sp, #148]	; 0x94
 8009dca:	9324      	str	r3, [sp, #144]	; 0x90
 8009dcc:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8009dd0:	e9dd 3434 	ldrd	r3, r4, [sp, #208]	; 0xd0
 8009dd4:	18c0      	adds	r0, r0, r3
 8009dd6:	4161      	adcs	r1, r4
 8009dd8:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 8009ddc:	181b      	adds	r3, r3, r0
 8009dde:	4618      	mov	r0, r3
 8009de0:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8009de4:	414c      	adcs	r4, r1
 8009de6:	e9cd 6732 	strd	r6, r7, [sp, #200]	; 0xc8
 8009dea:	e9dd 673e 	ldrd	r6, r7, [sp, #248]	; 0xf8
 8009dee:	4063      	eors	r3, r4
 8009df0:	4621      	mov	r1, r4
 8009df2:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 8009df6:	18f6      	adds	r6, r6, r3
 8009df8:	ea82 0200 	eor.w	r2, r2, r0
 8009dfc:	4157      	adcs	r7, r2
 8009dfe:	4074      	eors	r4, r6
 8009e00:	407d      	eors	r5, r7
 8009e02:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 8009e06:	4691      	mov	r9, r2
 8009e08:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 8009e0c:	0e2d      	lsrs	r5, r5, #24
 8009e0e:	4698      	mov	r8, r3
 8009e10:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 8009e14:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 8009e18:	1824      	adds	r4, r4, r0
 8009e1a:	414d      	adcs	r5, r1
 8009e1c:	18a4      	adds	r4, r4, r2
 8009e1e:	415d      	adcs	r5, r3
 8009e20:	ea84 0008 	eor.w	r0, r4, r8
 8009e24:	ea85 0109 	eor.w	r1, r5, r9
 8009e28:	4689      	mov	r9, r1
 8009e2a:	0c01      	lsrs	r1, r0, #16
 8009e2c:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8009e30:	9126      	str	r1, [sp, #152]	; 0x98
 8009e32:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009e36:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e3a:	9127      	str	r1, [sp, #156]	; 0x9c
 8009e3c:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8009e40:	1980      	adds	r0, r0, r6
 8009e42:	4179      	adcs	r1, r7
 8009e44:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 8009e48:	4050      	eors	r0, r2
 8009e4a:	4059      	eors	r1, r3
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	0042      	lsls	r2, r0, #1
 8009e50:	ea42 76d3 	orr.w	r6, r2, r3, lsr #31
 8009e54:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
 8009e58:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8009e5c:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 8009e60:	18a4      	adds	r4, r4, r2
 8009e62:	415d      	adcs	r5, r3
 8009e64:	0049      	lsls	r1, r1, #1
 8009e66:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8009e6a:	19a4      	adds	r4, r4, r6
 8009e6c:	ea41 77d0 	orr.w	r7, r1, r0, lsr #31
 8009e70:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8009e74:	417d      	adcs	r5, r7
 8009e76:	406b      	eors	r3, r5
 8009e78:	18c0      	adds	r0, r0, r3
 8009e7a:	ea82 0204 	eor.w	r2, r2, r4
 8009e7e:	4151      	adcs	r1, r2
 8009e80:	4046      	eors	r6, r0
 8009e82:	404f      	eors	r7, r1
 8009e84:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8009e88:	4691      	mov	r9, r2
 8009e8a:	ea4e 2207 	orr.w	r2, lr, r7, lsl #8
 8009e8e:	0e3f      	lsrs	r7, r7, #24
 8009e90:	4698      	mov	r8, r3
 8009e92:	ea47 2306 	orr.w	r3, r7, r6, lsl #8
 8009e96:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 8009e9a:	1936      	adds	r6, r6, r4
 8009e9c:	416f      	adcs	r7, r5
 8009e9e:	18b6      	adds	r6, r6, r2
 8009ea0:	415f      	adcs	r7, r3
 8009ea2:	ea86 0408 	eor.w	r4, r6, r8
 8009ea6:	ea87 0509 	eor.w	r5, r7, r9
 8009eaa:	46a0      	mov	r8, r4
 8009eac:	0c24      	lsrs	r4, r4, #16
 8009eae:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8009eb2:	9414      	str	r4, [sp, #80]	; 0x50
 8009eb4:	0c2c      	lsrs	r4, r5, #16
 8009eb6:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8009eba:	9415      	str	r4, [sp, #84]	; 0x54
 8009ebc:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 8009ec0:	1824      	adds	r4, r4, r0
 8009ec2:	414d      	adcs	r5, r1
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	4050      	eors	r0, r2
 8009eca:	4059      	eors	r1, r3
 8009ecc:	0042      	lsls	r2, r0, #1
 8009ece:	460b      	mov	r3, r1
 8009ed0:	0049      	lsls	r1, r1, #1
 8009ed2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009ed6:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8009eda:	e9cd 4536 	strd	r4, r5, [sp, #216]	; 0xd8
 8009ede:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
 8009ee2:	911d      	str	r1, [sp, #116]	; 0x74
 8009ee4:	931c      	str	r3, [sp, #112]	; 0x70
 8009ee6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009eea:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
 8009eee:	18c0      	adds	r0, r0, r3
 8009ef0:	4161      	adcs	r1, r4
 8009ef2:	e9dd 3428 	ldrd	r3, r4, [sp, #160]	; 0xa0
 8009ef6:	181b      	adds	r3, r3, r0
 8009ef8:	4618      	mov	r0, r3
 8009efa:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8009efe:	e9dd 6734 	ldrd	r6, r7, [sp, #208]	; 0xd0
 8009f02:	414c      	adcs	r4, r1
 8009f04:	e9dd 8928 	ldrd	r8, r9, [sp, #160]	; 0xa0
 8009f08:	4063      	eors	r3, r4
 8009f0a:	18f6      	adds	r6, r6, r3
 8009f0c:	ea82 0200 	eor.w	r2, r2, r0
 8009f10:	4157      	adcs	r7, r2
 8009f12:	ea88 0806 	eor.w	r8, r8, r6
 8009f16:	ea89 0907 	eor.w	r9, r9, r7
 8009f1a:	ea4f 6e18 	mov.w	lr, r8, lsr #24
 8009f1e:	4615      	mov	r5, r2
 8009f20:	ea4e 2209 	orr.w	r2, lr, r9, lsl #8
 8009f24:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 8009f28:	4621      	mov	r1, r4
 8009f2a:	461c      	mov	r4, r3
 8009f2c:	ea4e 2308 	orr.w	r3, lr, r8, lsl #8
 8009f30:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8009f34:	eb18 0800 	adds.w	r8, r8, r0
 8009f38:	eb49 0901 	adc.w	r9, r9, r1
 8009f3c:	eb18 0802 	adds.w	r8, r8, r2
 8009f40:	eb49 0903 	adc.w	r9, r9, r3
 8009f44:	4640      	mov	r0, r8
 8009f46:	4649      	mov	r1, r9
 8009f48:	4060      	eors	r0, r4
 8009f4a:	4069      	eors	r1, r5
 8009f4c:	460d      	mov	r5, r1
 8009f4e:	0c01      	lsrs	r1, r0, #16
 8009f50:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8009f54:	9108      	str	r1, [sp, #32]
 8009f56:	0c29      	lsrs	r1, r5, #16
 8009f58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009f5c:	9109      	str	r1, [sp, #36]	; 0x24
 8009f5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f62:	1980      	adds	r0, r0, r6
 8009f64:	4179      	adcs	r1, r7
 8009f66:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 8009f6a:	4050      	eors	r0, r2
 8009f6c:	4059      	eors	r1, r3
 8009f6e:	0042      	lsls	r2, r0, #1
 8009f70:	460b      	mov	r3, r1
 8009f72:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009f76:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8009f7a:	9310      	str	r3, [sp, #64]	; 0x40
 8009f7c:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 8009f80:	18a4      	adds	r4, r4, r2
 8009f82:	415d      	adcs	r5, r3
 8009f84:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8009f88:	1912      	adds	r2, r2, r4
 8009f8a:	416b      	adcs	r3, r5
 8009f8c:	4614      	mov	r4, r2
 8009f8e:	461d      	mov	r5, r3
 8009f90:	0049      	lsls	r1, r1, #1
 8009f92:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8009f96:	e9dd 6738 	ldrd	r6, r7, [sp, #224]	; 0xe0
 8009f9a:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8009f9e:	9111      	str	r1, [sp, #68]	; 0x44
 8009fa0:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8009fa4:	406b      	eors	r3, r5
 8009fa6:	18f6      	adds	r6, r6, r3
 8009fa8:	ea82 0204 	eor.w	r2, r2, r4
 8009fac:	4157      	adcs	r7, r2
 8009fae:	4070      	eors	r0, r6
 8009fb0:	4079      	eors	r1, r7
 8009fb2:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8009fb6:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
 8009fba:	4691      	mov	r9, r2
 8009fbc:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 8009fc0:	0e09      	lsrs	r1, r1, #24
 8009fc2:	4698      	mov	r8, r3
 8009fc4:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8009fc8:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8009fcc:	1900      	adds	r0, r0, r4
 8009fce:	4169      	adcs	r1, r5
 8009fd0:	1880      	adds	r0, r0, r2
 8009fd2:	4159      	adcs	r1, r3
 8009fd4:	e9cd 0126 	strd	r0, r1, [sp, #152]	; 0x98
 8009fd8:	ea80 0008 	eor.w	r0, r0, r8
 8009fdc:	ea81 0109 	eor.w	r1, r1, r9
 8009fe0:	4689      	mov	r9, r1
 8009fe2:	0c01      	lsrs	r1, r0, #16
 8009fe4:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8009fe8:	9112      	str	r1, [sp, #72]	; 0x48
 8009fea:	ea4f 4119 	mov.w	r1, r9, lsr #16
 8009fee:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ff2:	9113      	str	r1, [sp, #76]	; 0x4c
 8009ff4:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
 8009ff8:	eb18 0806 	adds.w	r8, r8, r6
 8009ffc:	eb49 0907 	adc.w	r9, r9, r7
 800a000:	ea83 0309 	eor.w	r3, r3, r9
 800a004:	ea82 0208 	eor.w	r2, r2, r8
 800a008:	0059      	lsls	r1, r3, #1
 800a00a:	ea41 71d2 	orr.w	r1, r1, r2, lsr #31
 800a00e:	0052      	lsls	r2, r2, #1
 800a010:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a014:	911f      	str	r1, [sp, #124]	; 0x7c
 800a016:	931e      	str	r3, [sp, #120]	; 0x78
 800a018:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a01c:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
 800a020:	18c0      	adds	r0, r0, r3
 800a022:	4161      	adcs	r1, r4
 800a024:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 800a028:	181b      	adds	r3, r3, r0
 800a02a:	414c      	adcs	r4, r1
 800a02c:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 800a030:	ea8a 0203 	eor.w	r2, sl, r3
 800a034:	4618      	mov	r0, r3
 800a036:	4621      	mov	r1, r4
 800a038:	ea8b 0304 	eor.w	r3, fp, r4
 800a03c:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 800a040:	18f6      	adds	r6, r6, r3
 800a042:	4157      	adcs	r7, r2
 800a044:	4074      	eors	r4, r6
 800a046:	407d      	eors	r5, r7
 800a048:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 800a04c:	4693      	mov	fp, r2
 800a04e:	ea4e 2205 	orr.w	r2, lr, r5, lsl #8
 800a052:	0e2d      	lsrs	r5, r5, #24
 800a054:	469a      	mov	sl, r3
 800a056:	ea45 2304 	orr.w	r3, r5, r4, lsl #8
 800a05a:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 800a05e:	1824      	adds	r4, r4, r0
 800a060:	414d      	adcs	r5, r1
 800a062:	18a4      	adds	r4, r4, r2
 800a064:	415d      	adcs	r5, r3
 800a066:	ea84 000a 	eor.w	r0, r4, sl
 800a06a:	ea85 010b 	eor.w	r1, r5, fp
 800a06e:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 800a072:	0c04      	lsrs	r4, r0, #16
 800a074:	4682      	mov	sl, r0
 800a076:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 800a07a:	0c0c      	lsrs	r4, r1, #16
 800a07c:	ea44 410a 	orr.w	r1, r4, sl, lsl #16
 800a080:	1834      	adds	r4, r6, r0
 800a082:	eb47 0501 	adc.w	r5, r7, r1
 800a086:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
 800a08a:	405d      	eors	r5, r3
 800a08c:	4054      	eors	r4, r2
 800a08e:	4622      	mov	r2, r4
 800a090:	006c      	lsls	r4, r5, #1
 800a092:	ea44 7bd2 	orr.w	fp, r4, r2, lsr #31
 800a096:	0052      	lsls	r2, r2, #1
 800a098:	ea42 7ad5 	orr.w	sl, r2, r5, lsr #31
 800a09c:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800a0a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a0a4:	18a4      	adds	r4, r4, r2
 800a0a6:	415d      	adcs	r5, r3
 800a0a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a0ac:	1912      	adds	r2, r2, r4
 800a0ae:	416b      	adcs	r3, r5
 800a0b0:	461d      	mov	r5, r3
 800a0b2:	404b      	eors	r3, r1
 800a0b4:	eb18 0603 	adds.w	r6, r8, r3
 800a0b8:	4614      	mov	r4, r2
 800a0ba:	ea80 0202 	eor.w	r2, r0, r2
 800a0be:	eb49 0702 	adc.w	r7, r9, r2
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a0ca:	4072      	eors	r2, r6
 800a0cc:	407b      	eors	r3, r7
 800a0ce:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 800a0d2:	ea4e 2803 	orr.w	r8, lr, r3, lsl #8
 800a0d6:	0e1b      	lsrs	r3, r3, #24
 800a0d8:	ea43 2902 	orr.w	r9, r3, r2, lsl #8
 800a0dc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a0e0:	1912      	adds	r2, r2, r4
 800a0e2:	416b      	adcs	r3, r5
 800a0e4:	eb12 0408 	adds.w	r4, r2, r8
 800a0e8:	eb43 0509 	adc.w	r5, r3, r9
 800a0ec:	4060      	eors	r0, r4
 800a0ee:	ab62      	add	r3, sp, #392	; 0x188
 800a0f0:	e9c3 4500 	strd	r4, r5, [r3]
 800a0f4:	4069      	eors	r1, r5
 800a0f6:	0c04      	lsrs	r4, r0, #16
 800a0f8:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
 800a0fc:	0c09      	lsrs	r1, r1, #16
 800a0fe:	ea41 4300 	orr.w	r3, r1, r0, lsl #16
 800a102:	18b6      	adds	r6, r6, r2
 800a104:	a980      	add	r1, sp, #512	; 0x200
 800a106:	e9c1 2300 	strd	r2, r3, [r1]
 800a10a:	415f      	adcs	r7, r3
 800a10c:	ab76      	add	r3, sp, #472	; 0x1d8
 800a10e:	e9c3 6700 	strd	r6, r7, [r3]
 800a112:	ea87 0709 	eor.w	r7, r7, r9
 800a116:	ea86 0608 	eor.w	r6, r6, r8
 800a11a:	007b      	lsls	r3, r7, #1
 800a11c:	ea43 73d6 	orr.w	r3, r3, r6, lsr #31
 800a120:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a124:	936d      	str	r3, [sp, #436]	; 0x1b4
 800a126:	e9dd 3422 	ldrd	r3, r4, [sp, #136]	; 0x88
 800a12a:	18c0      	adds	r0, r0, r3
 800a12c:	4161      	adcs	r1, r4
 800a12e:	e9dd 341e 	ldrd	r3, r4, [sp, #120]	; 0x78
 800a132:	0072      	lsls	r2, r6, #1
 800a134:	181b      	adds	r3, r3, r0
 800a136:	ea42 72d7 	orr.w	r2, r2, r7, lsr #31
 800a13a:	4618      	mov	r0, r3
 800a13c:	926c      	str	r2, [sp, #432]	; 0x1b0
 800a13e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a142:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
 800a146:	414c      	adcs	r4, r1
 800a148:	4063      	eors	r3, r4
 800a14a:	18f6      	adds	r6, r6, r3
 800a14c:	ea82 0200 	eor.w	r2, r2, r0
 800a150:	4157      	adcs	r7, r2
 800a152:	4621      	mov	r1, r4
 800a154:	4615      	mov	r5, r2
 800a156:	461c      	mov	r4, r3
 800a158:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800a15c:	4072      	eors	r2, r6
 800a15e:	407b      	eors	r3, r7
 800a160:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 800a164:	ea4e 2803 	orr.w	r8, lr, r3, lsl #8
 800a168:	0e1b      	lsrs	r3, r3, #24
 800a16a:	ea43 2902 	orr.w	r9, r3, r2, lsl #8
 800a16e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a172:	1812      	adds	r2, r2, r0
 800a174:	414b      	adcs	r3, r1
 800a176:	eb12 0008 	adds.w	r0, r2, r8
 800a17a:	eb43 0109 	adc.w	r1, r3, r9
 800a17e:	4044      	eors	r4, r0
 800a180:	ab64      	add	r3, sp, #400	; 0x190
 800a182:	e9c3 0100 	strd	r0, r1, [r3]
 800a186:	404d      	eors	r5, r1
 800a188:	0c21      	lsrs	r1, r4, #16
 800a18a:	ea41 4205 	orr.w	r2, r1, r5, lsl #16
 800a18e:	0c29      	lsrs	r1, r5, #16
 800a190:	ea41 4304 	orr.w	r3, r1, r4, lsl #16
 800a194:	18b6      	adds	r6, r6, r2
 800a196:	a97a      	add	r1, sp, #488	; 0x1e8
 800a198:	e9c1 2300 	strd	r2, r3, [r1]
 800a19c:	415f      	adcs	r7, r3
 800a19e:	ab78      	add	r3, sp, #480	; 0x1e0
 800a1a0:	e9c3 6700 	strd	r6, r7, [r3]
 800a1a4:	ea86 0608 	eor.w	r6, r6, r8
 800a1a8:	ea87 0709 	eor.w	r7, r7, r9
 800a1ac:	007b      	lsls	r3, r7, #1
 800a1ae:	0072      	lsls	r2, r6, #1
 800a1b0:	ea43 73d6 	orr.w	r3, r3, r6, lsr #31
 800a1b4:	ea42 72d7 	orr.w	r2, r2, r7, lsr #31
 800a1b8:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 800a1bc:	926e      	str	r2, [sp, #440]	; 0x1b8
 800a1be:	936f      	str	r3, [sp, #444]	; 0x1bc
 800a1c0:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800a1c4:	18a4      	adds	r4, r4, r2
 800a1c6:	415d      	adcs	r5, r3
 800a1c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a1cc:	eb14 040a 	adds.w	r4, r4, sl
 800a1d0:	e9dd 0136 	ldrd	r0, r1, [sp, #216]	; 0xd8
 800a1d4:	eb45 050b 	adc.w	r5, r5, fp
 800a1d8:	406b      	eors	r3, r5
 800a1da:	18c0      	adds	r0, r0, r3
 800a1dc:	ea82 0204 	eor.w	r2, r2, r4
 800a1e0:	4151      	adcs	r1, r2
 800a1e2:	4617      	mov	r7, r2
 800a1e4:	ea8a 0200 	eor.w	r2, sl, r0
 800a1e8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 800a1ec:	461e      	mov	r6, r3
 800a1ee:	ea8b 0301 	eor.w	r3, fp, r1
 800a1f2:	ea4e 2803 	orr.w	r8, lr, r3, lsl #8
 800a1f6:	0e1b      	lsrs	r3, r3, #24
 800a1f8:	ea43 2902 	orr.w	r9, r3, r2, lsl #8
 800a1fc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a200:	1912      	adds	r2, r2, r4
 800a202:	416b      	adcs	r3, r5
 800a204:	eb12 0408 	adds.w	r4, r2, r8
 800a208:	eb43 0509 	adc.w	r5, r3, r9
 800a20c:	4066      	eors	r6, r4
 800a20e:	ab66      	add	r3, sp, #408	; 0x198
 800a210:	e9c3 4500 	strd	r4, r5, [r3]
 800a214:	406f      	eors	r7, r5
 800a216:	0c34      	lsrs	r4, r6, #16
 800a218:	ea44 4207 	orr.w	r2, r4, r7, lsl #16
 800a21c:	0c3c      	lsrs	r4, r7, #16
 800a21e:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800a222:	1880      	adds	r0, r0, r2
 800a224:	ac7c      	add	r4, sp, #496	; 0x1f0
 800a226:	e9c4 2300 	strd	r2, r3, [r4]
 800a22a:	4159      	adcs	r1, r3
 800a22c:	ab72      	add	r3, sp, #456	; 0x1c8
 800a22e:	e9c3 0100 	strd	r0, r1, [r3]
 800a232:	ea81 0109 	eor.w	r1, r1, r9
 800a236:	ea80 0008 	eor.w	r0, r0, r8
 800a23a:	004b      	lsls	r3, r1, #1
 800a23c:	ea43 73d0 	orr.w	r3, r3, r0, lsr #31
 800a240:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 800a244:	9371      	str	r3, [sp, #452]	; 0x1c4
 800a246:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a24a:	eb18 0803 	adds.w	r8, r8, r3
 800a24e:	eb49 0904 	adc.w	r9, r9, r4
 800a252:	e9dd 341c 	ldrd	r3, r4, [sp, #112]	; 0x70
 800a256:	0042      	lsls	r2, r0, #1
 800a258:	eb13 0308 	adds.w	r3, r3, r8
 800a25c:	ea42 72d1 	orr.w	r2, r2, r1, lsr #31
 800a260:	4698      	mov	r8, r3
 800a262:	9270      	str	r2, [sp, #448]	; 0x1c0
 800a264:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a268:	eb44 0409 	adc.w	r4, r4, r9
 800a26c:	4063      	eors	r3, r4
 800a26e:	46a1      	mov	r9, r4
 800a270:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 800a274:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800a278:	18e4      	adds	r4, r4, r3
 800a27a:	ea82 0208 	eor.w	r2, r2, r8
 800a27e:	4155      	adcs	r5, r2
 800a280:	4060      	eors	r0, r4
 800a282:	4069      	eors	r1, r5
 800a284:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 800a288:	4617      	mov	r7, r2
 800a28a:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
 800a28e:	0e09      	lsrs	r1, r1, #24
 800a290:	461e      	mov	r6, r3
 800a292:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 800a296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a29a:	eb10 0008 	adds.w	r0, r0, r8
 800a29e:	eb41 0109 	adc.w	r1, r1, r9
 800a2a2:	eb10 0802 	adds.w	r8, r0, r2
 800a2a6:	eb41 0903 	adc.w	r9, r1, r3
 800a2aa:	ea86 0608 	eor.w	r6, r6, r8
 800a2ae:	ea87 0709 	eor.w	r7, r7, r9
 800a2b2:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800a2b6:	ea4e 4007 	orr.w	r0, lr, r7, lsl #16
 800a2ba:	a968      	add	r1, sp, #416	; 0x1a0
 800a2bc:	0c3f      	lsrs	r7, r7, #16
 800a2be:	1824      	adds	r4, r4, r0
 800a2c0:	e9c1 8900 	strd	r8, r9, [r1]
 800a2c4:	ea47 4106 	orr.w	r1, r7, r6, lsl #16
 800a2c8:	414d      	adcs	r5, r1
 800a2ca:	ae7e      	add	r6, sp, #504	; 0x1f8
 800a2cc:	406b      	eors	r3, r5
 800a2ce:	e9c6 0100 	strd	r0, r1, [r6]
 800a2d2:	a974      	add	r1, sp, #464	; 0x1d0
 800a2d4:	4062      	eors	r2, r4
 800a2d6:	e9c1 4500 	strd	r4, r5, [r1]
 800a2da:	0059      	lsls	r1, r3, #1
 800a2dc:	ea41 71d2 	orr.w	r1, r1, r2, lsr #31
 800a2e0:	0052      	lsls	r2, r2, #1
 800a2e2:	ea42 72d3 	orr.w	r2, r2, r3, lsr #31
 800a2e6:	926a      	str	r2, [sp, #424]	; 0x1a8
 800a2e8:	916b      	str	r1, [sp, #428]	; 0x1ac
 800a2ea:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800a2ec:	e9f3 0102 	ldrd	r0, r1, [r3, #8]!
 800a2f0:	9330      	str	r3, [sp, #192]	; 0xc0
 800a2f2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800a2f6:	4050      	eors	r0, r2
 800a2f8:	4059      	eors	r1, r3
 800a2fa:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
 800a2fe:	404b      	eors	r3, r1
 800a300:	4042      	eors	r2, r0
 800a302:	e9ec 2302 	strd	r2, r3, [ip, #8]!
 800a306:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800a308:	459c      	cmp	ip, r3
 800a30a:	d1ee      	bne.n	800a2ea <blake2b_compress_ref+0x36ea>
 800a30c:	2000      	movs	r0, #0
 800a30e:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 800a312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a316:	bf00      	nop

0800a318 <abort>:
 800a318:	b508      	push	{r3, lr}
 800a31a:	2006      	movs	r0, #6
 800a31c:	f000 fd5a 	bl	800add4 <raise>
 800a320:	2001      	movs	r0, #1
 800a322:	f003 fc75 	bl	800dc10 <_exit>
 800a326:	bf00      	nop

0800a328 <__assert_func>:
 800a328:	b500      	push	{lr}
 800a32a:	4c0a      	ldr	r4, [pc, #40]	; (800a354 <__assert_func+0x2c>)
 800a32c:	6826      	ldr	r6, [r4, #0]
 800a32e:	4605      	mov	r5, r0
 800a330:	b085      	sub	sp, #20
 800a332:	461c      	mov	r4, r3
 800a334:	68f0      	ldr	r0, [r6, #12]
 800a336:	b152      	cbz	r2, 800a34e <__assert_func+0x26>
 800a338:	4b07      	ldr	r3, [pc, #28]	; (800a358 <__assert_func+0x30>)
 800a33a:	9100      	str	r1, [sp, #0]
 800a33c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a340:	4906      	ldr	r1, [pc, #24]	; (800a35c <__assert_func+0x34>)
 800a342:	462b      	mov	r3, r5
 800a344:	4622      	mov	r2, r4
 800a346:	f000 f865 	bl	800a414 <fiprintf>
 800a34a:	f7ff ffe5 	bl	800a318 <abort>
 800a34e:	4b04      	ldr	r3, [pc, #16]	; (800a360 <__assert_func+0x38>)
 800a350:	461a      	mov	r2, r3
 800a352:	e7f2      	b.n	800a33a <__assert_func+0x12>
 800a354:	200004ec 	.word	0x200004ec
 800a358:	0800e178 	.word	0x0800e178
 800a35c:	0800e188 	.word	0x0800e188
 800a360:	0800e184 	.word	0x0800e184

0800a364 <__assert>:
 800a364:	b508      	push	{r3, lr}
 800a366:	4613      	mov	r3, r2
 800a368:	2200      	movs	r2, #0
 800a36a:	f7ff ffdd 	bl	800a328 <__assert_func>
 800a36e:	bf00      	nop

0800a370 <calloc>:
 800a370:	4b02      	ldr	r3, [pc, #8]	; (800a37c <calloc+0xc>)
 800a372:	460a      	mov	r2, r1
 800a374:	4601      	mov	r1, r0
 800a376:	6818      	ldr	r0, [r3, #0]
 800a378:	f000 b802 	b.w	800a380 <_calloc_r>
 800a37c:	200004ec 	.word	0x200004ec

0800a380 <_calloc_r>:
 800a380:	b510      	push	{r4, lr}
 800a382:	fb02 f101 	mul.w	r1, r2, r1
 800a386:	f000 f88d 	bl	800a4a4 <_malloc_r>
 800a38a:	4604      	mov	r4, r0
 800a38c:	b1d8      	cbz	r0, 800a3c6 <_calloc_r+0x46>
 800a38e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a392:	f022 0203 	bic.w	r2, r2, #3
 800a396:	3a04      	subs	r2, #4
 800a398:	2a24      	cmp	r2, #36	; 0x24
 800a39a:	d81d      	bhi.n	800a3d8 <_calloc_r+0x58>
 800a39c:	2a13      	cmp	r2, #19
 800a39e:	d914      	bls.n	800a3ca <_calloc_r+0x4a>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	2a1b      	cmp	r2, #27
 800a3a4:	e9c0 3300 	strd	r3, r3, [r0]
 800a3a8:	d91b      	bls.n	800a3e2 <_calloc_r+0x62>
 800a3aa:	2a24      	cmp	r2, #36	; 0x24
 800a3ac:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800a3b0:	bf0a      	itet	eq
 800a3b2:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
 800a3b6:	f100 0210 	addne.w	r2, r0, #16
 800a3ba:	f100 0218 	addeq.w	r2, r0, #24
 800a3be:	2300      	movs	r3, #0
 800a3c0:	e9c2 3300 	strd	r3, r3, [r2]
 800a3c4:	6093      	str	r3, [r2, #8]
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	bd10      	pop	{r4, pc}
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	e9c2 3300 	strd	r3, r3, [r2]
 800a3d2:	6093      	str	r3, [r2, #8]
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	bd10      	pop	{r4, pc}
 800a3d8:	2100      	movs	r1, #0
 800a3da:	f000 fc05 	bl	800abe8 <memset>
 800a3de:	4620      	mov	r0, r4
 800a3e0:	bd10      	pop	{r4, pc}
 800a3e2:	f100 0208 	add.w	r2, r0, #8
 800a3e6:	e7f1      	b.n	800a3cc <_calloc_r+0x4c>

0800a3e8 <__errno>:
 800a3e8:	4b01      	ldr	r3, [pc, #4]	; (800a3f0 <__errno+0x8>)
 800a3ea:	6818      	ldr	r0, [r3, #0]
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	200004ec 	.word	0x200004ec

0800a3f4 <explicit_bzero>:
 800a3f4:	f001 bd56 	b.w	800bea4 <bzero>

0800a3f8 <_fiprintf_r>:
 800a3f8:	b40c      	push	{r2, r3}
 800a3fa:	b500      	push	{lr}
 800a3fc:	b083      	sub	sp, #12
 800a3fe:	ab04      	add	r3, sp, #16
 800a400:	f853 2b04 	ldr.w	r2, [r3], #4
 800a404:	9301      	str	r3, [sp, #4]
 800a406:	f000 fe27 	bl	800b058 <_vfiprintf_r>
 800a40a:	b003      	add	sp, #12
 800a40c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a410:	b002      	add	sp, #8
 800a412:	4770      	bx	lr

0800a414 <fiprintf>:
 800a414:	b40e      	push	{r1, r2, r3}
 800a416:	b510      	push	{r4, lr}
 800a418:	b083      	sub	sp, #12
 800a41a:	ab05      	add	r3, sp, #20
 800a41c:	4c06      	ldr	r4, [pc, #24]	; (800a438 <fiprintf+0x24>)
 800a41e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a422:	9301      	str	r3, [sp, #4]
 800a424:	4601      	mov	r1, r0
 800a426:	6820      	ldr	r0, [r4, #0]
 800a428:	f000 fe16 	bl	800b058 <_vfiprintf_r>
 800a42c:	b003      	add	sp, #12
 800a42e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a432:	b003      	add	sp, #12
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	200004ec 	.word	0x200004ec

0800a43c <__libc_init_array>:
 800a43c:	b570      	push	{r4, r5, r6, lr}
 800a43e:	4e0d      	ldr	r6, [pc, #52]	; (800a474 <__libc_init_array+0x38>)
 800a440:	4d0d      	ldr	r5, [pc, #52]	; (800a478 <__libc_init_array+0x3c>)
 800a442:	1b76      	subs	r6, r6, r5
 800a444:	10b6      	asrs	r6, r6, #2
 800a446:	d006      	beq.n	800a456 <__libc_init_array+0x1a>
 800a448:	2400      	movs	r4, #0
 800a44a:	3401      	adds	r4, #1
 800a44c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a450:	4798      	blx	r3
 800a452:	42a6      	cmp	r6, r4
 800a454:	d1f9      	bne.n	800a44a <__libc_init_array+0xe>
 800a456:	4e09      	ldr	r6, [pc, #36]	; (800a47c <__libc_init_array+0x40>)
 800a458:	4d09      	ldr	r5, [pc, #36]	; (800a480 <__libc_init_array+0x44>)
 800a45a:	1b76      	subs	r6, r6, r5
 800a45c:	f7fa f990 	bl	8004780 <_init>
 800a460:	10b6      	asrs	r6, r6, #2
 800a462:	d006      	beq.n	800a472 <__libc_init_array+0x36>
 800a464:	2400      	movs	r4, #0
 800a466:	3401      	adds	r4, #1
 800a468:	f855 3b04 	ldr.w	r3, [r5], #4
 800a46c:	4798      	blx	r3
 800a46e:	42a6      	cmp	r6, r4
 800a470:	d1f9      	bne.n	800a466 <__libc_init_array+0x2a>
 800a472:	bd70      	pop	{r4, r5, r6, pc}
 800a474:	20000e94 	.word	0x20000e94
 800a478:	20000e94 	.word	0x20000e94
 800a47c:	20000e94 	.word	0x20000e94
 800a480:	20000e94 	.word	0x20000e94

0800a484 <malloc>:
 800a484:	4b02      	ldr	r3, [pc, #8]	; (800a490 <malloc+0xc>)
 800a486:	4601      	mov	r1, r0
 800a488:	6818      	ldr	r0, [r3, #0]
 800a48a:	f000 b80b 	b.w	800a4a4 <_malloc_r>
 800a48e:	bf00      	nop
 800a490:	200004ec 	.word	0x200004ec

0800a494 <free>:
 800a494:	4b02      	ldr	r3, [pc, #8]	; (800a4a0 <free+0xc>)
 800a496:	4601      	mov	r1, r0
 800a498:	6818      	ldr	r0, [r3, #0]
 800a49a:	f002 b817 	b.w	800c4cc <_free_r>
 800a49e:	bf00      	nop
 800a4a0:	200004ec 	.word	0x200004ec

0800a4a4 <_malloc_r>:
 800a4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a8:	f101 050b 	add.w	r5, r1, #11
 800a4ac:	2d16      	cmp	r5, #22
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	d823      	bhi.n	800a4fc <_malloc_r+0x58>
 800a4b4:	2910      	cmp	r1, #16
 800a4b6:	f200 80b9 	bhi.w	800a62c <_malloc_r+0x188>
 800a4ba:	f000 fbdf 	bl	800ac7c <__malloc_lock>
 800a4be:	2510      	movs	r5, #16
 800a4c0:	2318      	movs	r3, #24
 800a4c2:	2002      	movs	r0, #2
 800a4c4:	4fc5      	ldr	r7, [pc, #788]	; (800a7dc <_malloc_r+0x338>)
 800a4c6:	443b      	add	r3, r7
 800a4c8:	f1a3 0208 	sub.w	r2, r3, #8
 800a4cc:	685c      	ldr	r4, [r3, #4]
 800a4ce:	4294      	cmp	r4, r2
 800a4d0:	f000 8166 	beq.w	800a7a0 <_malloc_r+0x2fc>
 800a4d4:	6863      	ldr	r3, [r4, #4]
 800a4d6:	f023 0303 	bic.w	r3, r3, #3
 800a4da:	4423      	add	r3, r4
 800a4dc:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
 800a4e0:	685a      	ldr	r2, [r3, #4]
 800a4e2:	60e9      	str	r1, [r5, #12]
 800a4e4:	f042 0201 	orr.w	r2, r2, #1
 800a4e8:	608d      	str	r5, [r1, #8]
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	605a      	str	r2, [r3, #4]
 800a4ee:	f000 fbcb 	bl	800ac88 <__malloc_unlock>
 800a4f2:	3408      	adds	r4, #8
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	b003      	add	sp, #12
 800a4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4fc:	f035 0507 	bics.w	r5, r5, #7
 800a500:	f100 8094 	bmi.w	800a62c <_malloc_r+0x188>
 800a504:	42a9      	cmp	r1, r5
 800a506:	f200 8091 	bhi.w	800a62c <_malloc_r+0x188>
 800a50a:	f000 fbb7 	bl	800ac7c <__malloc_lock>
 800a50e:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800a512:	f0c0 8183 	bcc.w	800a81c <_malloc_r+0x378>
 800a516:	0a6b      	lsrs	r3, r5, #9
 800a518:	f000 808f 	beq.w	800a63a <_malloc_r+0x196>
 800a51c:	2b04      	cmp	r3, #4
 800a51e:	f200 8146 	bhi.w	800a7ae <_malloc_r+0x30a>
 800a522:	09ab      	lsrs	r3, r5, #6
 800a524:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800a528:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 800a52c:	00c3      	lsls	r3, r0, #3
 800a52e:	4fab      	ldr	r7, [pc, #684]	; (800a7dc <_malloc_r+0x338>)
 800a530:	443b      	add	r3, r7
 800a532:	f1a3 0108 	sub.w	r1, r3, #8
 800a536:	685c      	ldr	r4, [r3, #4]
 800a538:	42a1      	cmp	r1, r4
 800a53a:	d106      	bne.n	800a54a <_malloc_r+0xa6>
 800a53c:	e00c      	b.n	800a558 <_malloc_r+0xb4>
 800a53e:	2a00      	cmp	r2, #0
 800a540:	f280 811d 	bge.w	800a77e <_malloc_r+0x2da>
 800a544:	68e4      	ldr	r4, [r4, #12]
 800a546:	42a1      	cmp	r1, r4
 800a548:	d006      	beq.n	800a558 <_malloc_r+0xb4>
 800a54a:	6863      	ldr	r3, [r4, #4]
 800a54c:	f023 0303 	bic.w	r3, r3, #3
 800a550:	1b5a      	subs	r2, r3, r5
 800a552:	2a0f      	cmp	r2, #15
 800a554:	ddf3      	ble.n	800a53e <_malloc_r+0x9a>
 800a556:	4660      	mov	r0, ip
 800a558:	693c      	ldr	r4, [r7, #16]
 800a55a:	f8df c294 	ldr.w	ip, [pc, #660]	; 800a7f0 <_malloc_r+0x34c>
 800a55e:	4564      	cmp	r4, ip
 800a560:	d071      	beq.n	800a646 <_malloc_r+0x1a2>
 800a562:	6863      	ldr	r3, [r4, #4]
 800a564:	f023 0303 	bic.w	r3, r3, #3
 800a568:	1b5a      	subs	r2, r3, r5
 800a56a:	2a0f      	cmp	r2, #15
 800a56c:	f300 8144 	bgt.w	800a7f8 <_malloc_r+0x354>
 800a570:	2a00      	cmp	r2, #0
 800a572:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 800a576:	f280 8126 	bge.w	800a7c6 <_malloc_r+0x322>
 800a57a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a57e:	f080 8169 	bcs.w	800a854 <_malloc_r+0x3b0>
 800a582:	08db      	lsrs	r3, r3, #3
 800a584:	1c59      	adds	r1, r3, #1
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
 800a58c:	f8c4 8008 	str.w	r8, [r4, #8]
 800a590:	f04f 0e01 	mov.w	lr, #1
 800a594:	109b      	asrs	r3, r3, #2
 800a596:	fa0e f303 	lsl.w	r3, lr, r3
 800a59a:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	f1ae 0208 	sub.w	r2, lr, #8
 800a5a4:	60e2      	str	r2, [r4, #12]
 800a5a6:	607b      	str	r3, [r7, #4]
 800a5a8:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
 800a5ac:	f8c8 400c 	str.w	r4, [r8, #12]
 800a5b0:	1082      	asrs	r2, r0, #2
 800a5b2:	2401      	movs	r4, #1
 800a5b4:	4094      	lsls	r4, r2
 800a5b6:	429c      	cmp	r4, r3
 800a5b8:	d84b      	bhi.n	800a652 <_malloc_r+0x1ae>
 800a5ba:	421c      	tst	r4, r3
 800a5bc:	d106      	bne.n	800a5cc <_malloc_r+0x128>
 800a5be:	f020 0003 	bic.w	r0, r0, #3
 800a5c2:	0064      	lsls	r4, r4, #1
 800a5c4:	421c      	tst	r4, r3
 800a5c6:	f100 0004 	add.w	r0, r0, #4
 800a5ca:	d0fa      	beq.n	800a5c2 <_malloc_r+0x11e>
 800a5cc:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800a5d0:	46ce      	mov	lr, r9
 800a5d2:	4680      	mov	r8, r0
 800a5d4:	f8de 300c 	ldr.w	r3, [lr, #12]
 800a5d8:	459e      	cmp	lr, r3
 800a5da:	d107      	bne.n	800a5ec <_malloc_r+0x148>
 800a5dc:	e122      	b.n	800a824 <_malloc_r+0x380>
 800a5de:	2a00      	cmp	r2, #0
 800a5e0:	f280 8129 	bge.w	800a836 <_malloc_r+0x392>
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	459e      	cmp	lr, r3
 800a5e8:	f000 811c 	beq.w	800a824 <_malloc_r+0x380>
 800a5ec:	6859      	ldr	r1, [r3, #4]
 800a5ee:	f021 0103 	bic.w	r1, r1, #3
 800a5f2:	1b4a      	subs	r2, r1, r5
 800a5f4:	2a0f      	cmp	r2, #15
 800a5f6:	ddf2      	ble.n	800a5de <_malloc_r+0x13a>
 800a5f8:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
 800a5fc:	195c      	adds	r4, r3, r5
 800a5fe:	f045 0501 	orr.w	r5, r5, #1
 800a602:	605d      	str	r5, [r3, #4]
 800a604:	f042 0501 	orr.w	r5, r2, #1
 800a608:	f8c8 e00c 	str.w	lr, [r8, #12]
 800a60c:	4630      	mov	r0, r6
 800a60e:	f8ce 8008 	str.w	r8, [lr, #8]
 800a612:	e9c7 4404 	strd	r4, r4, [r7, #16]
 800a616:	e9c4 cc02 	strd	ip, ip, [r4, #8]
 800a61a:	6065      	str	r5, [r4, #4]
 800a61c:	505a      	str	r2, [r3, r1]
 800a61e:	9301      	str	r3, [sp, #4]
 800a620:	f000 fb32 	bl	800ac88 <__malloc_unlock>
 800a624:	9b01      	ldr	r3, [sp, #4]
 800a626:	f103 0408 	add.w	r4, r3, #8
 800a62a:	e763      	b.n	800a4f4 <_malloc_r+0x50>
 800a62c:	2400      	movs	r4, #0
 800a62e:	230c      	movs	r3, #12
 800a630:	4620      	mov	r0, r4
 800a632:	6033      	str	r3, [r6, #0]
 800a634:	b003      	add	sp, #12
 800a636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a63a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a63e:	2040      	movs	r0, #64	; 0x40
 800a640:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 800a644:	e773      	b.n	800a52e <_malloc_r+0x8a>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	1082      	asrs	r2, r0, #2
 800a64a:	2401      	movs	r4, #1
 800a64c:	4094      	lsls	r4, r2
 800a64e:	429c      	cmp	r4, r3
 800a650:	d9b3      	bls.n	800a5ba <_malloc_r+0x116>
 800a652:	68bc      	ldr	r4, [r7, #8]
 800a654:	6863      	ldr	r3, [r4, #4]
 800a656:	f023 0903 	bic.w	r9, r3, #3
 800a65a:	45a9      	cmp	r9, r5
 800a65c:	d303      	bcc.n	800a666 <_malloc_r+0x1c2>
 800a65e:	eba9 0305 	sub.w	r3, r9, r5
 800a662:	2b0f      	cmp	r3, #15
 800a664:	dc7b      	bgt.n	800a75e <_malloc_r+0x2ba>
 800a666:	4b5e      	ldr	r3, [pc, #376]	; (800a7e0 <_malloc_r+0x33c>)
 800a668:	f8df a188 	ldr.w	sl, [pc, #392]	; 800a7f4 <_malloc_r+0x350>
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	f8da 3000 	ldr.w	r3, [sl]
 800a672:	3301      	adds	r3, #1
 800a674:	eb05 0802 	add.w	r8, r5, r2
 800a678:	f000 8148 	beq.w	800a90c <_malloc_r+0x468>
 800a67c:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
 800a680:	f108 080f 	add.w	r8, r8, #15
 800a684:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
 800a688:	f028 080f 	bic.w	r8, r8, #15
 800a68c:	4641      	mov	r1, r8
 800a68e:	4630      	mov	r0, r6
 800a690:	f000 fb00 	bl	800ac94 <_sbrk_r>
 800a694:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a698:	4683      	mov	fp, r0
 800a69a:	f000 8104 	beq.w	800a8a6 <_malloc_r+0x402>
 800a69e:	eb04 0009 	add.w	r0, r4, r9
 800a6a2:	4558      	cmp	r0, fp
 800a6a4:	f200 80fd 	bhi.w	800a8a2 <_malloc_r+0x3fe>
 800a6a8:	4a4e      	ldr	r2, [pc, #312]	; (800a7e4 <_malloc_r+0x340>)
 800a6aa:	6813      	ldr	r3, [r2, #0]
 800a6ac:	4443      	add	r3, r8
 800a6ae:	6013      	str	r3, [r2, #0]
 800a6b0:	f000 814d 	beq.w	800a94e <_malloc_r+0x4aa>
 800a6b4:	f8da 1000 	ldr.w	r1, [sl]
 800a6b8:	3101      	adds	r1, #1
 800a6ba:	bf1b      	ittet	ne
 800a6bc:	ebab 0000 	subne.w	r0, fp, r0
 800a6c0:	181b      	addne	r3, r3, r0
 800a6c2:	f8ca b000 	streq.w	fp, [sl]
 800a6c6:	6013      	strne	r3, [r2, #0]
 800a6c8:	f01b 0307 	ands.w	r3, fp, #7
 800a6cc:	f000 8134 	beq.w	800a938 <_malloc_r+0x494>
 800a6d0:	f1c3 0108 	rsb	r1, r3, #8
 800a6d4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800a6d8:	448b      	add	fp, r1
 800a6da:	3308      	adds	r3, #8
 800a6dc:	44d8      	add	r8, fp
 800a6de:	f3c8 080b 	ubfx	r8, r8, #0, #12
 800a6e2:	eba3 0808 	sub.w	r8, r3, r8
 800a6e6:	4641      	mov	r1, r8
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	9201      	str	r2, [sp, #4]
 800a6ec:	f000 fad2 	bl	800ac94 <_sbrk_r>
 800a6f0:	1c43      	adds	r3, r0, #1
 800a6f2:	9a01      	ldr	r2, [sp, #4]
 800a6f4:	f000 8146 	beq.w	800a984 <_malloc_r+0x4e0>
 800a6f8:	eba0 010b 	sub.w	r1, r0, fp
 800a6fc:	4441      	add	r1, r8
 800a6fe:	f041 0101 	orr.w	r1, r1, #1
 800a702:	6813      	ldr	r3, [r2, #0]
 800a704:	f8c7 b008 	str.w	fp, [r7, #8]
 800a708:	4443      	add	r3, r8
 800a70a:	42bc      	cmp	r4, r7
 800a70c:	f8cb 1004 	str.w	r1, [fp, #4]
 800a710:	6013      	str	r3, [r2, #0]
 800a712:	d015      	beq.n	800a740 <_malloc_r+0x29c>
 800a714:	f1b9 0f0f 	cmp.w	r9, #15
 800a718:	f240 8130 	bls.w	800a97c <_malloc_r+0x4d8>
 800a71c:	6860      	ldr	r0, [r4, #4]
 800a71e:	f1a9 010c 	sub.w	r1, r9, #12
 800a722:	f021 0107 	bic.w	r1, r1, #7
 800a726:	f000 0001 	and.w	r0, r0, #1
 800a72a:	eb04 0c01 	add.w	ip, r4, r1
 800a72e:	4308      	orrs	r0, r1
 800a730:	f04f 0e05 	mov.w	lr, #5
 800a734:	290f      	cmp	r1, #15
 800a736:	6060      	str	r0, [r4, #4]
 800a738:	e9cc ee01 	strd	lr, lr, [ip, #4]
 800a73c:	f200 813a 	bhi.w	800a9b4 <_malloc_r+0x510>
 800a740:	4a29      	ldr	r2, [pc, #164]	; (800a7e8 <_malloc_r+0x344>)
 800a742:	482a      	ldr	r0, [pc, #168]	; (800a7ec <_malloc_r+0x348>)
 800a744:	6811      	ldr	r1, [r2, #0]
 800a746:	68bc      	ldr	r4, [r7, #8]
 800a748:	428b      	cmp	r3, r1
 800a74a:	6801      	ldr	r1, [r0, #0]
 800a74c:	bf88      	it	hi
 800a74e:	6013      	strhi	r3, [r2, #0]
 800a750:	6862      	ldr	r2, [r4, #4]
 800a752:	428b      	cmp	r3, r1
 800a754:	f022 0203 	bic.w	r2, r2, #3
 800a758:	bf88      	it	hi
 800a75a:	6003      	strhi	r3, [r0, #0]
 800a75c:	e0a7      	b.n	800a8ae <_malloc_r+0x40a>
 800a75e:	1962      	adds	r2, r4, r5
 800a760:	f043 0301 	orr.w	r3, r3, #1
 800a764:	f045 0501 	orr.w	r5, r5, #1
 800a768:	6065      	str	r5, [r4, #4]
 800a76a:	4630      	mov	r0, r6
 800a76c:	60ba      	str	r2, [r7, #8]
 800a76e:	6053      	str	r3, [r2, #4]
 800a770:	f000 fa8a 	bl	800ac88 <__malloc_unlock>
 800a774:	3408      	adds	r4, #8
 800a776:	4620      	mov	r0, r4
 800a778:	b003      	add	sp, #12
 800a77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77e:	4423      	add	r3, r4
 800a780:	68e1      	ldr	r1, [r4, #12]
 800a782:	685a      	ldr	r2, [r3, #4]
 800a784:	68a5      	ldr	r5, [r4, #8]
 800a786:	f042 0201 	orr.w	r2, r2, #1
 800a78a:	60e9      	str	r1, [r5, #12]
 800a78c:	4630      	mov	r0, r6
 800a78e:	608d      	str	r5, [r1, #8]
 800a790:	605a      	str	r2, [r3, #4]
 800a792:	f000 fa79 	bl	800ac88 <__malloc_unlock>
 800a796:	3408      	adds	r4, #8
 800a798:	4620      	mov	r0, r4
 800a79a:	b003      	add	sp, #12
 800a79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a0:	68dc      	ldr	r4, [r3, #12]
 800a7a2:	42a3      	cmp	r3, r4
 800a7a4:	bf08      	it	eq
 800a7a6:	3002      	addeq	r0, #2
 800a7a8:	f43f aed6 	beq.w	800a558 <_malloc_r+0xb4>
 800a7ac:	e692      	b.n	800a4d4 <_malloc_r+0x30>
 800a7ae:	2b14      	cmp	r3, #20
 800a7b0:	d971      	bls.n	800a896 <_malloc_r+0x3f2>
 800a7b2:	2b54      	cmp	r3, #84	; 0x54
 800a7b4:	f200 80ad 	bhi.w	800a912 <_malloc_r+0x46e>
 800a7b8:	0b2b      	lsrs	r3, r5, #12
 800a7ba:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800a7be:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 800a7c2:	00c3      	lsls	r3, r0, #3
 800a7c4:	e6b3      	b.n	800a52e <_malloc_r+0x8a>
 800a7c6:	4423      	add	r3, r4
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	f042 0201 	orr.w	r2, r2, #1
 800a7d0:	605a      	str	r2, [r3, #4]
 800a7d2:	3408      	adds	r4, #8
 800a7d4:	f000 fa58 	bl	800ac88 <__malloc_unlock>
 800a7d8:	e68c      	b.n	800a4f4 <_malloc_r+0x50>
 800a7da:	bf00      	nop
 800a7dc:	20000918 	.word	0x20000918
 800a7e0:	20000f74 	.word	0x20000f74
 800a7e4:	20000f44 	.word	0x20000f44
 800a7e8:	20000f6c 	.word	0x20000f6c
 800a7ec:	20000f70 	.word	0x20000f70
 800a7f0:	20000920 	.word	0x20000920
 800a7f4:	20000d20 	.word	0x20000d20
 800a7f8:	1961      	adds	r1, r4, r5
 800a7fa:	f045 0e01 	orr.w	lr, r5, #1
 800a7fe:	f042 0501 	orr.w	r5, r2, #1
 800a802:	f8c4 e004 	str.w	lr, [r4, #4]
 800a806:	4630      	mov	r0, r6
 800a808:	e9c7 1104 	strd	r1, r1, [r7, #16]
 800a80c:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 800a810:	604d      	str	r5, [r1, #4]
 800a812:	50e2      	str	r2, [r4, r3]
 800a814:	f000 fa38 	bl	800ac88 <__malloc_unlock>
 800a818:	3408      	adds	r4, #8
 800a81a:	e66b      	b.n	800a4f4 <_malloc_r+0x50>
 800a81c:	08e8      	lsrs	r0, r5, #3
 800a81e:	f105 0308 	add.w	r3, r5, #8
 800a822:	e64f      	b.n	800a4c4 <_malloc_r+0x20>
 800a824:	f108 0801 	add.w	r8, r8, #1
 800a828:	f018 0f03 	tst.w	r8, #3
 800a82c:	f10e 0e08 	add.w	lr, lr, #8
 800a830:	f47f aed0 	bne.w	800a5d4 <_malloc_r+0x130>
 800a834:	e052      	b.n	800a8dc <_malloc_r+0x438>
 800a836:	4419      	add	r1, r3
 800a838:	461c      	mov	r4, r3
 800a83a:	684a      	ldr	r2, [r1, #4]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800a842:	f042 0201 	orr.w	r2, r2, #1
 800a846:	604a      	str	r2, [r1, #4]
 800a848:	4630      	mov	r0, r6
 800a84a:	60eb      	str	r3, [r5, #12]
 800a84c:	609d      	str	r5, [r3, #8]
 800a84e:	f000 fa1b 	bl	800ac88 <__malloc_unlock>
 800a852:	e64f      	b.n	800a4f4 <_malloc_r+0x50>
 800a854:	0a5a      	lsrs	r2, r3, #9
 800a856:	2a04      	cmp	r2, #4
 800a858:	d935      	bls.n	800a8c6 <_malloc_r+0x422>
 800a85a:	2a14      	cmp	r2, #20
 800a85c:	d86f      	bhi.n	800a93e <_malloc_r+0x49a>
 800a85e:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800a862:	00c9      	lsls	r1, r1, #3
 800a864:	325b      	adds	r2, #91	; 0x5b
 800a866:	eb07 0e01 	add.w	lr, r7, r1
 800a86a:	5879      	ldr	r1, [r7, r1]
 800a86c:	f1ae 0e08 	sub.w	lr, lr, #8
 800a870:	458e      	cmp	lr, r1
 800a872:	d058      	beq.n	800a926 <_malloc_r+0x482>
 800a874:	684a      	ldr	r2, [r1, #4]
 800a876:	f022 0203 	bic.w	r2, r2, #3
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d902      	bls.n	800a884 <_malloc_r+0x3e0>
 800a87e:	6889      	ldr	r1, [r1, #8]
 800a880:	458e      	cmp	lr, r1
 800a882:	d1f7      	bne.n	800a874 <_malloc_r+0x3d0>
 800a884:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	e9c4 1e02 	strd	r1, lr, [r4, #8]
 800a88e:	f8ce 4008 	str.w	r4, [lr, #8]
 800a892:	60cc      	str	r4, [r1, #12]
 800a894:	e68c      	b.n	800a5b0 <_malloc_r+0x10c>
 800a896:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800a89a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 800a89e:	00c3      	lsls	r3, r0, #3
 800a8a0:	e645      	b.n	800a52e <_malloc_r+0x8a>
 800a8a2:	42bc      	cmp	r4, r7
 800a8a4:	d072      	beq.n	800a98c <_malloc_r+0x4e8>
 800a8a6:	68bc      	ldr	r4, [r7, #8]
 800a8a8:	6862      	ldr	r2, [r4, #4]
 800a8aa:	f022 0203 	bic.w	r2, r2, #3
 800a8ae:	4295      	cmp	r5, r2
 800a8b0:	eba2 0305 	sub.w	r3, r2, r5
 800a8b4:	d802      	bhi.n	800a8bc <_malloc_r+0x418>
 800a8b6:	2b0f      	cmp	r3, #15
 800a8b8:	f73f af51 	bgt.w	800a75e <_malloc_r+0x2ba>
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f000 f9e3 	bl	800ac88 <__malloc_unlock>
 800a8c2:	2400      	movs	r4, #0
 800a8c4:	e616      	b.n	800a4f4 <_malloc_r+0x50>
 800a8c6:	099a      	lsrs	r2, r3, #6
 800a8c8:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800a8cc:	00c9      	lsls	r1, r1, #3
 800a8ce:	3238      	adds	r2, #56	; 0x38
 800a8d0:	e7c9      	b.n	800a866 <_malloc_r+0x3c2>
 800a8d2:	f8d9 9000 	ldr.w	r9, [r9]
 800a8d6:	4599      	cmp	r9, r3
 800a8d8:	f040 8083 	bne.w	800a9e2 <_malloc_r+0x53e>
 800a8dc:	f010 0f03 	tst.w	r0, #3
 800a8e0:	f1a9 0308 	sub.w	r3, r9, #8
 800a8e4:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800a8e8:	d1f3      	bne.n	800a8d2 <_malloc_r+0x42e>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	ea23 0304 	bic.w	r3, r3, r4
 800a8f0:	607b      	str	r3, [r7, #4]
 800a8f2:	0064      	lsls	r4, r4, #1
 800a8f4:	429c      	cmp	r4, r3
 800a8f6:	f63f aeac 	bhi.w	800a652 <_malloc_r+0x1ae>
 800a8fa:	b91c      	cbnz	r4, 800a904 <_malloc_r+0x460>
 800a8fc:	e6a9      	b.n	800a652 <_malloc_r+0x1ae>
 800a8fe:	0064      	lsls	r4, r4, #1
 800a900:	f108 0804 	add.w	r8, r8, #4
 800a904:	421c      	tst	r4, r3
 800a906:	d0fa      	beq.n	800a8fe <_malloc_r+0x45a>
 800a908:	4640      	mov	r0, r8
 800a90a:	e65f      	b.n	800a5cc <_malloc_r+0x128>
 800a90c:	f108 0810 	add.w	r8, r8, #16
 800a910:	e6bc      	b.n	800a68c <_malloc_r+0x1e8>
 800a912:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a916:	d826      	bhi.n	800a966 <_malloc_r+0x4c2>
 800a918:	0beb      	lsrs	r3, r5, #15
 800a91a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800a91e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 800a922:	00c3      	lsls	r3, r0, #3
 800a924:	e603      	b.n	800a52e <_malloc_r+0x8a>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	1092      	asrs	r2, r2, #2
 800a92a:	f04f 0801 	mov.w	r8, #1
 800a92e:	fa08 f202 	lsl.w	r2, r8, r2
 800a932:	4313      	orrs	r3, r2
 800a934:	607b      	str	r3, [r7, #4]
 800a936:	e7a8      	b.n	800a88a <_malloc_r+0x3e6>
 800a938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a93c:	e6ce      	b.n	800a6dc <_malloc_r+0x238>
 800a93e:	2a54      	cmp	r2, #84	; 0x54
 800a940:	d829      	bhi.n	800a996 <_malloc_r+0x4f2>
 800a942:	0b1a      	lsrs	r2, r3, #12
 800a944:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800a948:	00c9      	lsls	r1, r1, #3
 800a94a:	326e      	adds	r2, #110	; 0x6e
 800a94c:	e78b      	b.n	800a866 <_malloc_r+0x3c2>
 800a94e:	f3c0 010b 	ubfx	r1, r0, #0, #12
 800a952:	2900      	cmp	r1, #0
 800a954:	f47f aeae 	bne.w	800a6b4 <_malloc_r+0x210>
 800a958:	eb09 0208 	add.w	r2, r9, r8
 800a95c:	68b9      	ldr	r1, [r7, #8]
 800a95e:	f042 0201 	orr.w	r2, r2, #1
 800a962:	604a      	str	r2, [r1, #4]
 800a964:	e6ec      	b.n	800a740 <_malloc_r+0x29c>
 800a966:	f240 5254 	movw	r2, #1364	; 0x554
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d81c      	bhi.n	800a9a8 <_malloc_r+0x504>
 800a96e:	0cab      	lsrs	r3, r5, #18
 800a970:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800a974:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 800a978:	00c3      	lsls	r3, r0, #3
 800a97a:	e5d8      	b.n	800a52e <_malloc_r+0x8a>
 800a97c:	2301      	movs	r3, #1
 800a97e:	f8cb 3004 	str.w	r3, [fp, #4]
 800a982:	e79b      	b.n	800a8bc <_malloc_r+0x418>
 800a984:	2101      	movs	r1, #1
 800a986:	f04f 0800 	mov.w	r8, #0
 800a98a:	e6ba      	b.n	800a702 <_malloc_r+0x25e>
 800a98c:	4a16      	ldr	r2, [pc, #88]	; (800a9e8 <_malloc_r+0x544>)
 800a98e:	6813      	ldr	r3, [r2, #0]
 800a990:	4443      	add	r3, r8
 800a992:	6013      	str	r3, [r2, #0]
 800a994:	e68e      	b.n	800a6b4 <_malloc_r+0x210>
 800a996:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a99a:	d814      	bhi.n	800a9c6 <_malloc_r+0x522>
 800a99c:	0bda      	lsrs	r2, r3, #15
 800a99e:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800a9a2:	00c9      	lsls	r1, r1, #3
 800a9a4:	3277      	adds	r2, #119	; 0x77
 800a9a6:	e75e      	b.n	800a866 <_malloc_r+0x3c2>
 800a9a8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800a9ac:	207f      	movs	r0, #127	; 0x7f
 800a9ae:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 800a9b2:	e5bc      	b.n	800a52e <_malloc_r+0x8a>
 800a9b4:	f104 0108 	add.w	r1, r4, #8
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	9201      	str	r2, [sp, #4]
 800a9bc:	f001 fd86 	bl	800c4cc <_free_r>
 800a9c0:	9a01      	ldr	r2, [sp, #4]
 800a9c2:	6813      	ldr	r3, [r2, #0]
 800a9c4:	e6bc      	b.n	800a740 <_malloc_r+0x29c>
 800a9c6:	f240 5154 	movw	r1, #1364	; 0x554
 800a9ca:	428a      	cmp	r2, r1
 800a9cc:	d805      	bhi.n	800a9da <_malloc_r+0x536>
 800a9ce:	0c9a      	lsrs	r2, r3, #18
 800a9d0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 800a9d4:	00c9      	lsls	r1, r1, #3
 800a9d6:	327c      	adds	r2, #124	; 0x7c
 800a9d8:	e745      	b.n	800a866 <_malloc_r+0x3c2>
 800a9da:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800a9de:	227e      	movs	r2, #126	; 0x7e
 800a9e0:	e741      	b.n	800a866 <_malloc_r+0x3c2>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	e785      	b.n	800a8f2 <_malloc_r+0x44e>
 800a9e6:	bf00      	nop
 800a9e8:	20000f44 	.word	0x20000f44

0800a9ec <memcpy>:
 800a9ec:	4684      	mov	ip, r0
 800a9ee:	ea41 0300 	orr.w	r3, r1, r0
 800a9f2:	f013 0303 	ands.w	r3, r3, #3
 800a9f6:	d16d      	bne.n	800aad4 <memcpy+0xe8>
 800a9f8:	3a40      	subs	r2, #64	; 0x40
 800a9fa:	d341      	bcc.n	800aa80 <memcpy+0x94>
 800a9fc:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa00:	f840 3b04 	str.w	r3, [r0], #4
 800aa04:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa08:	f840 3b04 	str.w	r3, [r0], #4
 800aa0c:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa10:	f840 3b04 	str.w	r3, [r0], #4
 800aa14:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa18:	f840 3b04 	str.w	r3, [r0], #4
 800aa1c:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa20:	f840 3b04 	str.w	r3, [r0], #4
 800aa24:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa28:	f840 3b04 	str.w	r3, [r0], #4
 800aa2c:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa30:	f840 3b04 	str.w	r3, [r0], #4
 800aa34:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa38:	f840 3b04 	str.w	r3, [r0], #4
 800aa3c:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa40:	f840 3b04 	str.w	r3, [r0], #4
 800aa44:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa48:	f840 3b04 	str.w	r3, [r0], #4
 800aa4c:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa50:	f840 3b04 	str.w	r3, [r0], #4
 800aa54:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa58:	f840 3b04 	str.w	r3, [r0], #4
 800aa5c:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa60:	f840 3b04 	str.w	r3, [r0], #4
 800aa64:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa68:	f840 3b04 	str.w	r3, [r0], #4
 800aa6c:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa70:	f840 3b04 	str.w	r3, [r0], #4
 800aa74:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa78:	f840 3b04 	str.w	r3, [r0], #4
 800aa7c:	3a40      	subs	r2, #64	; 0x40
 800aa7e:	d2bd      	bcs.n	800a9fc <memcpy+0x10>
 800aa80:	3230      	adds	r2, #48	; 0x30
 800aa82:	d311      	bcc.n	800aaa8 <memcpy+0xbc>
 800aa84:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa88:	f840 3b04 	str.w	r3, [r0], #4
 800aa8c:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa90:	f840 3b04 	str.w	r3, [r0], #4
 800aa94:	f851 3b04 	ldr.w	r3, [r1], #4
 800aa98:	f840 3b04 	str.w	r3, [r0], #4
 800aa9c:	f851 3b04 	ldr.w	r3, [r1], #4
 800aaa0:	f840 3b04 	str.w	r3, [r0], #4
 800aaa4:	3a10      	subs	r2, #16
 800aaa6:	d2ed      	bcs.n	800aa84 <memcpy+0x98>
 800aaa8:	320c      	adds	r2, #12
 800aaaa:	d305      	bcc.n	800aab8 <memcpy+0xcc>
 800aaac:	f851 3b04 	ldr.w	r3, [r1], #4
 800aab0:	f840 3b04 	str.w	r3, [r0], #4
 800aab4:	3a04      	subs	r2, #4
 800aab6:	d2f9      	bcs.n	800aaac <memcpy+0xc0>
 800aab8:	3204      	adds	r2, #4
 800aaba:	d008      	beq.n	800aace <memcpy+0xe2>
 800aabc:	07d2      	lsls	r2, r2, #31
 800aabe:	bf1c      	itt	ne
 800aac0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800aac4:	f800 3b01 	strbne.w	r3, [r0], #1
 800aac8:	d301      	bcc.n	800aace <memcpy+0xe2>
 800aaca:	880b      	ldrh	r3, [r1, #0]
 800aacc:	8003      	strh	r3, [r0, #0]
 800aace:	4660      	mov	r0, ip
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	2a08      	cmp	r2, #8
 800aad6:	d313      	bcc.n	800ab00 <memcpy+0x114>
 800aad8:	078b      	lsls	r3, r1, #30
 800aada:	d08d      	beq.n	800a9f8 <memcpy+0xc>
 800aadc:	f010 0303 	ands.w	r3, r0, #3
 800aae0:	d08a      	beq.n	800a9f8 <memcpy+0xc>
 800aae2:	f1c3 0304 	rsb	r3, r3, #4
 800aae6:	1ad2      	subs	r2, r2, r3
 800aae8:	07db      	lsls	r3, r3, #31
 800aaea:	bf1c      	itt	ne
 800aaec:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800aaf0:	f800 3b01 	strbne.w	r3, [r0], #1
 800aaf4:	d380      	bcc.n	800a9f8 <memcpy+0xc>
 800aaf6:	f831 3b02 	ldrh.w	r3, [r1], #2
 800aafa:	f820 3b02 	strh.w	r3, [r0], #2
 800aafe:	e77b      	b.n	800a9f8 <memcpy+0xc>
 800ab00:	3a04      	subs	r2, #4
 800ab02:	d3d9      	bcc.n	800aab8 <memcpy+0xcc>
 800ab04:	3a01      	subs	r2, #1
 800ab06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab0a:	f800 3b01 	strb.w	r3, [r0], #1
 800ab0e:	d2f9      	bcs.n	800ab04 <memcpy+0x118>
 800ab10:	780b      	ldrb	r3, [r1, #0]
 800ab12:	7003      	strb	r3, [r0, #0]
 800ab14:	784b      	ldrb	r3, [r1, #1]
 800ab16:	7043      	strb	r3, [r0, #1]
 800ab18:	788b      	ldrb	r3, [r1, #2]
 800ab1a:	7083      	strb	r3, [r0, #2]
 800ab1c:	4660      	mov	r0, ip
 800ab1e:	4770      	bx	lr

0800ab20 <memmove>:
 800ab20:	4288      	cmp	r0, r1
 800ab22:	b4f0      	push	{r4, r5, r6, r7}
 800ab24:	d90d      	bls.n	800ab42 <memmove+0x22>
 800ab26:	188b      	adds	r3, r1, r2
 800ab28:	4283      	cmp	r3, r0
 800ab2a:	d90a      	bls.n	800ab42 <memmove+0x22>
 800ab2c:	1884      	adds	r4, r0, r2
 800ab2e:	b132      	cbz	r2, 800ab3e <memmove+0x1e>
 800ab30:	4622      	mov	r2, r4
 800ab32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab3a:	4299      	cmp	r1, r3
 800ab3c:	d1f9      	bne.n	800ab32 <memmove+0x12>
 800ab3e:	bcf0      	pop	{r4, r5, r6, r7}
 800ab40:	4770      	bx	lr
 800ab42:	2a0f      	cmp	r2, #15
 800ab44:	d949      	bls.n	800abda <memmove+0xba>
 800ab46:	ea40 0301 	orr.w	r3, r0, r1
 800ab4a:	079b      	lsls	r3, r3, #30
 800ab4c:	d147      	bne.n	800abde <memmove+0xbe>
 800ab4e:	f1a2 0310 	sub.w	r3, r2, #16
 800ab52:	091b      	lsrs	r3, r3, #4
 800ab54:	f101 0720 	add.w	r7, r1, #32
 800ab58:	eb07 1703 	add.w	r7, r7, r3, lsl #4
 800ab5c:	f101 0410 	add.w	r4, r1, #16
 800ab60:	f100 0510 	add.w	r5, r0, #16
 800ab64:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800ab68:	f845 6c10 	str.w	r6, [r5, #-16]
 800ab6c:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 800ab70:	f845 6c0c 	str.w	r6, [r5, #-12]
 800ab74:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800ab78:	f845 6c08 	str.w	r6, [r5, #-8]
 800ab7c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800ab80:	f845 6c04 	str.w	r6, [r5, #-4]
 800ab84:	3410      	adds	r4, #16
 800ab86:	42bc      	cmp	r4, r7
 800ab88:	f105 0510 	add.w	r5, r5, #16
 800ab8c:	d1ea      	bne.n	800ab64 <memmove+0x44>
 800ab8e:	3301      	adds	r3, #1
 800ab90:	f002 050f 	and.w	r5, r2, #15
 800ab94:	011b      	lsls	r3, r3, #4
 800ab96:	2d03      	cmp	r5, #3
 800ab98:	4419      	add	r1, r3
 800ab9a:	4403      	add	r3, r0
 800ab9c:	d921      	bls.n	800abe2 <memmove+0xc2>
 800ab9e:	1f1f      	subs	r7, r3, #4
 800aba0:	460e      	mov	r6, r1
 800aba2:	462c      	mov	r4, r5
 800aba4:	3c04      	subs	r4, #4
 800aba6:	f856 cb04 	ldr.w	ip, [r6], #4
 800abaa:	f847 cf04 	str.w	ip, [r7, #4]!
 800abae:	2c03      	cmp	r4, #3
 800abb0:	d8f8      	bhi.n	800aba4 <memmove+0x84>
 800abb2:	1f2c      	subs	r4, r5, #4
 800abb4:	f024 0403 	bic.w	r4, r4, #3
 800abb8:	3404      	adds	r4, #4
 800abba:	4423      	add	r3, r4
 800abbc:	4421      	add	r1, r4
 800abbe:	f002 0203 	and.w	r2, r2, #3
 800abc2:	2a00      	cmp	r2, #0
 800abc4:	d0bb      	beq.n	800ab3e <memmove+0x1e>
 800abc6:	3b01      	subs	r3, #1
 800abc8:	440a      	add	r2, r1
 800abca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abd2:	4291      	cmp	r1, r2
 800abd4:	d1f9      	bne.n	800abca <memmove+0xaa>
 800abd6:	bcf0      	pop	{r4, r5, r6, r7}
 800abd8:	4770      	bx	lr
 800abda:	4603      	mov	r3, r0
 800abdc:	e7f1      	b.n	800abc2 <memmove+0xa2>
 800abde:	4603      	mov	r3, r0
 800abe0:	e7f1      	b.n	800abc6 <memmove+0xa6>
 800abe2:	462a      	mov	r2, r5
 800abe4:	e7ed      	b.n	800abc2 <memmove+0xa2>
 800abe6:	bf00      	nop

0800abe8 <memset>:
 800abe8:	b4f0      	push	{r4, r5, r6, r7}
 800abea:	0786      	lsls	r6, r0, #30
 800abec:	d043      	beq.n	800ac76 <memset+0x8e>
 800abee:	1e54      	subs	r4, r2, #1
 800abf0:	2a00      	cmp	r2, #0
 800abf2:	d03e      	beq.n	800ac72 <memset+0x8a>
 800abf4:	b2ca      	uxtb	r2, r1
 800abf6:	4603      	mov	r3, r0
 800abf8:	e002      	b.n	800ac00 <memset+0x18>
 800abfa:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800abfe:	d338      	bcc.n	800ac72 <memset+0x8a>
 800ac00:	f803 2b01 	strb.w	r2, [r3], #1
 800ac04:	079d      	lsls	r5, r3, #30
 800ac06:	d1f8      	bne.n	800abfa <memset+0x12>
 800ac08:	2c03      	cmp	r4, #3
 800ac0a:	d92b      	bls.n	800ac64 <memset+0x7c>
 800ac0c:	b2cd      	uxtb	r5, r1
 800ac0e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800ac12:	2c0f      	cmp	r4, #15
 800ac14:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800ac18:	d916      	bls.n	800ac48 <memset+0x60>
 800ac1a:	f1a4 0710 	sub.w	r7, r4, #16
 800ac1e:	093f      	lsrs	r7, r7, #4
 800ac20:	f103 0620 	add.w	r6, r3, #32
 800ac24:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800ac28:	f103 0210 	add.w	r2, r3, #16
 800ac2c:	e942 5504 	strd	r5, r5, [r2, #-16]
 800ac30:	e942 5502 	strd	r5, r5, [r2, #-8]
 800ac34:	3210      	adds	r2, #16
 800ac36:	42b2      	cmp	r2, r6
 800ac38:	d1f8      	bne.n	800ac2c <memset+0x44>
 800ac3a:	f004 040f 	and.w	r4, r4, #15
 800ac3e:	3701      	adds	r7, #1
 800ac40:	2c03      	cmp	r4, #3
 800ac42:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800ac46:	d90d      	bls.n	800ac64 <memset+0x7c>
 800ac48:	461e      	mov	r6, r3
 800ac4a:	4622      	mov	r2, r4
 800ac4c:	3a04      	subs	r2, #4
 800ac4e:	2a03      	cmp	r2, #3
 800ac50:	f846 5b04 	str.w	r5, [r6], #4
 800ac54:	d8fa      	bhi.n	800ac4c <memset+0x64>
 800ac56:	1f22      	subs	r2, r4, #4
 800ac58:	f022 0203 	bic.w	r2, r2, #3
 800ac5c:	3204      	adds	r2, #4
 800ac5e:	4413      	add	r3, r2
 800ac60:	f004 0403 	and.w	r4, r4, #3
 800ac64:	b12c      	cbz	r4, 800ac72 <memset+0x8a>
 800ac66:	b2c9      	uxtb	r1, r1
 800ac68:	441c      	add	r4, r3
 800ac6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac6e:	429c      	cmp	r4, r3
 800ac70:	d1fb      	bne.n	800ac6a <memset+0x82>
 800ac72:	bcf0      	pop	{r4, r5, r6, r7}
 800ac74:	4770      	bx	lr
 800ac76:	4614      	mov	r4, r2
 800ac78:	4603      	mov	r3, r0
 800ac7a:	e7c5      	b.n	800ac08 <memset+0x20>

0800ac7c <__malloc_lock>:
 800ac7c:	4801      	ldr	r0, [pc, #4]	; (800ac84 <__malloc_lock+0x8>)
 800ac7e:	f001 bf6b 	b.w	800cb58 <__retarget_lock_acquire_recursive>
 800ac82:	bf00      	nop
 800ac84:	20001624 	.word	0x20001624

0800ac88 <__malloc_unlock>:
 800ac88:	4801      	ldr	r0, [pc, #4]	; (800ac90 <__malloc_unlock+0x8>)
 800ac8a:	f001 bf6d 	b.w	800cb68 <__retarget_lock_release_recursive>
 800ac8e:	bf00      	nop
 800ac90:	20001624 	.word	0x20001624

0800ac94 <_sbrk_r>:
 800ac94:	b538      	push	{r3, r4, r5, lr}
 800ac96:	4c07      	ldr	r4, [pc, #28]	; (800acb4 <_sbrk_r+0x20>)
 800ac98:	2300      	movs	r3, #0
 800ac9a:	4605      	mov	r5, r0
 800ac9c:	4608      	mov	r0, r1
 800ac9e:	6023      	str	r3, [r4, #0]
 800aca0:	f7f9 fd4c 	bl	800473c <_sbrk>
 800aca4:	1c43      	adds	r3, r0, #1
 800aca6:	d000      	beq.n	800acaa <_sbrk_r+0x16>
 800aca8:	bd38      	pop	{r3, r4, r5, pc}
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d0fb      	beq.n	800aca8 <_sbrk_r+0x14>
 800acb0:	602b      	str	r3, [r5, #0]
 800acb2:	bd38      	pop	{r3, r4, r5, pc}
 800acb4:	20001638 	.word	0x20001638

0800acb8 <_init_signal_r.part.0>:
 800acb8:	b510      	push	{r4, lr}
 800acba:	2180      	movs	r1, #128	; 0x80
 800acbc:	4604      	mov	r4, r0
 800acbe:	f7ff fbf1 	bl	800a4a4 <_malloc_r>
 800acc2:	f8c4 02dc 	str.w	r0, [r4, #732]	; 0x2dc
 800acc6:	b140      	cbz	r0, 800acda <_init_signal_r.part.0+0x22>
 800acc8:	1f03      	subs	r3, r0, #4
 800acca:	2200      	movs	r2, #0
 800accc:	307c      	adds	r0, #124	; 0x7c
 800acce:	f843 2f04 	str.w	r2, [r3, #4]!
 800acd2:	4283      	cmp	r3, r0
 800acd4:	d1fb      	bne.n	800acce <_init_signal_r.part.0+0x16>
 800acd6:	2000      	movs	r0, #0
 800acd8:	bd10      	pop	{r4, pc}
 800acda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acde:	bd10      	pop	{r4, pc}

0800ace0 <_init_signal_r>:
 800ace0:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 800ace4:	b10b      	cbz	r3, 800acea <_init_signal_r+0xa>
 800ace6:	2000      	movs	r0, #0
 800ace8:	4770      	bx	lr
 800acea:	f7ff bfe5 	b.w	800acb8 <_init_signal_r.part.0>
 800acee:	bf00      	nop

0800acf0 <_signal_r>:
 800acf0:	291f      	cmp	r1, #31
 800acf2:	b570      	push	{r4, r5, r6, lr}
 800acf4:	4605      	mov	r5, r0
 800acf6:	d809      	bhi.n	800ad0c <_signal_r+0x1c>
 800acf8:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 800acfc:	4616      	mov	r6, r2
 800acfe:	460c      	mov	r4, r1
 800ad00:	b14b      	cbz	r3, 800ad16 <_signal_r+0x26>
 800ad02:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ad06:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800ad0a:	bd70      	pop	{r4, r5, r6, pc}
 800ad0c:	2216      	movs	r2, #22
 800ad0e:	6002      	str	r2, [r0, #0]
 800ad10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad14:	bd70      	pop	{r4, r5, r6, pc}
 800ad16:	f7ff ffcf 	bl	800acb8 <_init_signal_r.part.0>
 800ad1a:	b910      	cbnz	r0, 800ad22 <_signal_r+0x32>
 800ad1c:	f8d5 32dc 	ldr.w	r3, [r5, #732]	; 0x2dc
 800ad20:	e7ef      	b.n	800ad02 <_signal_r+0x12>
 800ad22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad26:	bd70      	pop	{r4, r5, r6, pc}

0800ad28 <_raise_r>:
 800ad28:	291f      	cmp	r1, #31
 800ad2a:	b538      	push	{r3, r4, r5, lr}
 800ad2c:	d822      	bhi.n	800ad74 <_raise_r+0x4c>
 800ad2e:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 800ad32:	4605      	mov	r5, r0
 800ad34:	460c      	mov	r4, r1
 800ad36:	b16b      	cbz	r3, 800ad54 <_raise_r+0x2c>
 800ad38:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800ad3c:	b152      	cbz	r2, 800ad54 <_raise_r+0x2c>
 800ad3e:	2a01      	cmp	r2, #1
 800ad40:	d012      	beq.n	800ad68 <_raise_r+0x40>
 800ad42:	1c51      	adds	r1, r2, #1
 800ad44:	d012      	beq.n	800ad6c <_raise_r+0x44>
 800ad46:	2500      	movs	r5, #0
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 800ad4e:	4790      	blx	r2
 800ad50:	4628      	mov	r0, r5
 800ad52:	bd38      	pop	{r3, r4, r5, pc}
 800ad54:	4628      	mov	r0, r5
 800ad56:	f000 f875 	bl	800ae44 <_getpid_r>
 800ad5a:	4622      	mov	r2, r4
 800ad5c:	4601      	mov	r1, r0
 800ad5e:	4628      	mov	r0, r5
 800ad60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad64:	f000 b85a 	b.w	800ae1c <_kill_r>
 800ad68:	2000      	movs	r0, #0
 800ad6a:	bd38      	pop	{r3, r4, r5, pc}
 800ad6c:	2316      	movs	r3, #22
 800ad6e:	6003      	str	r3, [r0, #0]
 800ad70:	2001      	movs	r0, #1
 800ad72:	bd38      	pop	{r3, r4, r5, pc}
 800ad74:	2316      	movs	r3, #22
 800ad76:	6003      	str	r3, [r0, #0]
 800ad78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad7c:	bd38      	pop	{r3, r4, r5, pc}
 800ad7e:	bf00      	nop

0800ad80 <__sigtramp_r>:
 800ad80:	291f      	cmp	r1, #31
 800ad82:	d823      	bhi.n	800adcc <__sigtramp_r+0x4c>
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 800ad8a:	4605      	mov	r5, r0
 800ad8c:	460c      	mov	r4, r1
 800ad8e:	b183      	cbz	r3, 800adb2 <__sigtramp_r+0x32>
 800ad90:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800ad94:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ad98:	b14a      	cbz	r2, 800adae <__sigtramp_r+0x2e>
 800ad9a:	1c51      	adds	r1, r2, #1
 800ad9c:	d00f      	beq.n	800adbe <__sigtramp_r+0x3e>
 800ad9e:	2a01      	cmp	r2, #1
 800ada0:	d012      	beq.n	800adc8 <__sigtramp_r+0x48>
 800ada2:	2500      	movs	r5, #0
 800ada4:	4620      	mov	r0, r4
 800ada6:	601d      	str	r5, [r3, #0]
 800ada8:	4790      	blx	r2
 800adaa:	4628      	mov	r0, r5
 800adac:	bd38      	pop	{r3, r4, r5, pc}
 800adae:	2001      	movs	r0, #1
 800adb0:	bd38      	pop	{r3, r4, r5, pc}
 800adb2:	f7ff ff81 	bl	800acb8 <_init_signal_r.part.0>
 800adb6:	b920      	cbnz	r0, 800adc2 <__sigtramp_r+0x42>
 800adb8:	f8d5 32dc 	ldr.w	r3, [r5, #732]	; 0x2dc
 800adbc:	e7e8      	b.n	800ad90 <__sigtramp_r+0x10>
 800adbe:	2002      	movs	r0, #2
 800adc0:	bd38      	pop	{r3, r4, r5, pc}
 800adc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	2003      	movs	r0, #3
 800adca:	bd38      	pop	{r3, r4, r5, pc}
 800adcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop

0800add4 <raise>:
 800add4:	4b02      	ldr	r3, [pc, #8]	; (800ade0 <raise+0xc>)
 800add6:	4601      	mov	r1, r0
 800add8:	6818      	ldr	r0, [r3, #0]
 800adda:	f7ff bfa5 	b.w	800ad28 <_raise_r>
 800adde:	bf00      	nop
 800ade0:	200004ec 	.word	0x200004ec

0800ade4 <signal>:
 800ade4:	4b02      	ldr	r3, [pc, #8]	; (800adf0 <signal+0xc>)
 800ade6:	460a      	mov	r2, r1
 800ade8:	4601      	mov	r1, r0
 800adea:	6818      	ldr	r0, [r3, #0]
 800adec:	f7ff bf80 	b.w	800acf0 <_signal_r>
 800adf0:	200004ec 	.word	0x200004ec

0800adf4 <_init_signal>:
 800adf4:	4b04      	ldr	r3, [pc, #16]	; (800ae08 <_init_signal+0x14>)
 800adf6:	6818      	ldr	r0, [r3, #0]
 800adf8:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 800adfc:	b10b      	cbz	r3, 800ae02 <_init_signal+0xe>
 800adfe:	2000      	movs	r0, #0
 800ae00:	4770      	bx	lr
 800ae02:	f7ff bf59 	b.w	800acb8 <_init_signal_r.part.0>
 800ae06:	bf00      	nop
 800ae08:	200004ec 	.word	0x200004ec

0800ae0c <__sigtramp>:
 800ae0c:	4b02      	ldr	r3, [pc, #8]	; (800ae18 <__sigtramp+0xc>)
 800ae0e:	4601      	mov	r1, r0
 800ae10:	6818      	ldr	r0, [r3, #0]
 800ae12:	f7ff bfb5 	b.w	800ad80 <__sigtramp_r>
 800ae16:	bf00      	nop
 800ae18:	200004ec 	.word	0x200004ec

0800ae1c <_kill_r>:
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	460b      	mov	r3, r1
 800ae20:	4c07      	ldr	r4, [pc, #28]	; (800ae40 <_kill_r+0x24>)
 800ae22:	4605      	mov	r5, r0
 800ae24:	4611      	mov	r1, r2
 800ae26:	4618      	mov	r0, r3
 800ae28:	2300      	movs	r3, #0
 800ae2a:	6023      	str	r3, [r4, #0]
 800ae2c:	f002 fec8 	bl	800dbc0 <_kill>
 800ae30:	1c43      	adds	r3, r0, #1
 800ae32:	d000      	beq.n	800ae36 <_kill_r+0x1a>
 800ae34:	bd38      	pop	{r3, r4, r5, pc}
 800ae36:	6823      	ldr	r3, [r4, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d0fb      	beq.n	800ae34 <_kill_r+0x18>
 800ae3c:	602b      	str	r3, [r5, #0]
 800ae3e:	bd38      	pop	{r3, r4, r5, pc}
 800ae40:	20001638 	.word	0x20001638

0800ae44 <_getpid_r>:
 800ae44:	f002 beac 	b.w	800dba0 <_getpid>
	...

0800ae80 <strlen>:
 800ae80:	f890 f000 	pld	[r0]
 800ae84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 800ae88:	f020 0107 	bic.w	r1, r0, #7
 800ae8c:	f06f 0c00 	mvn.w	ip, #0
 800ae90:	f010 0407 	ands.w	r4, r0, #7
 800ae94:	f891 f020 	pld	[r1, #32]
 800ae98:	f040 8049 	bne.w	800af2e <strlen+0xae>
 800ae9c:	f04f 0400 	mov.w	r4, #0
 800aea0:	f06f 0007 	mvn.w	r0, #7
 800aea4:	e9d1 2300 	ldrd	r2, r3, [r1]
 800aea8:	f891 f040 	pld	[r1, #64]	; 0x40
 800aeac:	f100 0008 	add.w	r0, r0, #8
 800aeb0:	fa82 f24c 	uadd8	r2, r2, ip
 800aeb4:	faa4 f28c 	sel	r2, r4, ip
 800aeb8:	fa83 f34c 	uadd8	r3, r3, ip
 800aebc:	faa2 f38c 	sel	r3, r2, ip
 800aec0:	bb4b      	cbnz	r3, 800af16 <strlen+0x96>
 800aec2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800aec6:	fa82 f24c 	uadd8	r2, r2, ip
 800aeca:	f100 0008 	add.w	r0, r0, #8
 800aece:	faa4 f28c 	sel	r2, r4, ip
 800aed2:	fa83 f34c 	uadd8	r3, r3, ip
 800aed6:	faa2 f38c 	sel	r3, r2, ip
 800aeda:	b9e3      	cbnz	r3, 800af16 <strlen+0x96>
 800aedc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 800aee0:	fa82 f24c 	uadd8	r2, r2, ip
 800aee4:	f100 0008 	add.w	r0, r0, #8
 800aee8:	faa4 f28c 	sel	r2, r4, ip
 800aeec:	fa83 f34c 	uadd8	r3, r3, ip
 800aef0:	faa2 f38c 	sel	r3, r2, ip
 800aef4:	b97b      	cbnz	r3, 800af16 <strlen+0x96>
 800aef6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800aefa:	f101 0120 	add.w	r1, r1, #32
 800aefe:	fa82 f24c 	uadd8	r2, r2, ip
 800af02:	f100 0008 	add.w	r0, r0, #8
 800af06:	faa4 f28c 	sel	r2, r4, ip
 800af0a:	fa83 f34c 	uadd8	r3, r3, ip
 800af0e:	faa2 f38c 	sel	r3, r2, ip
 800af12:	2b00      	cmp	r3, #0
 800af14:	d0c6      	beq.n	800aea4 <strlen+0x24>
 800af16:	2a00      	cmp	r2, #0
 800af18:	bf04      	itt	eq
 800af1a:	3004      	addeq	r0, #4
 800af1c:	461a      	moveq	r2, r3
 800af1e:	ba12      	rev	r2, r2
 800af20:	fab2 f282 	clz	r2, r2
 800af24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 800af28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800af2c:	4770      	bx	lr
 800af2e:	e9d1 2300 	ldrd	r2, r3, [r1]
 800af32:	f004 0503 	and.w	r5, r4, #3
 800af36:	f1c4 0000 	rsb	r0, r4, #0
 800af3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800af3e:	f014 0f04 	tst.w	r4, #4
 800af42:	f891 f040 	pld	[r1, #64]	; 0x40
 800af46:	fa0c f505 	lsl.w	r5, ip, r5
 800af4a:	ea62 0205 	orn	r2, r2, r5
 800af4e:	bf1c      	itt	ne
 800af50:	ea63 0305 	ornne	r3, r3, r5
 800af54:	4662      	movne	r2, ip
 800af56:	f04f 0400 	mov.w	r4, #0
 800af5a:	e7a9      	b.n	800aeb0 <strlen+0x30>

0800af5c <close>:
 800af5c:	4b02      	ldr	r3, [pc, #8]	; (800af68 <close+0xc>)
 800af5e:	4601      	mov	r1, r0
 800af60:	6818      	ldr	r0, [r3, #0]
 800af62:	f000 bfa3 	b.w	800beac <_close_r>
 800af66:	bf00      	nop
 800af68:	200004ec 	.word	0x200004ec

0800af6c <fcntl>:
 800af6c:	b508      	push	{r3, lr}
 800af6e:	f7ff fa3b 	bl	800a3e8 <__errno>
 800af72:	2358      	movs	r3, #88	; 0x58
 800af74:	6003      	str	r3, [r0, #0]
 800af76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af7a:	bd08      	pop	{r3, pc}

0800af7c <fstat>:
 800af7c:	4b02      	ldr	r3, [pc, #8]	; (800af88 <fstat+0xc>)
 800af7e:	460a      	mov	r2, r1
 800af80:	4601      	mov	r1, r0
 800af82:	6818      	ldr	r0, [r3, #0]
 800af84:	f001 bb96 	b.w	800c6b4 <_fstat_r>
 800af88:	200004ec 	.word	0x200004ec

0800af8c <open>:
 800af8c:	b40e      	push	{r1, r2, r3}
 800af8e:	b510      	push	{r4, lr}
 800af90:	b083      	sub	sp, #12
 800af92:	a905      	add	r1, sp, #20
 800af94:	4c06      	ldr	r4, [pc, #24]	; (800afb0 <open+0x24>)
 800af96:	f851 2b04 	ldr.w	r2, [r1], #4
 800af9a:	9101      	str	r1, [sp, #4]
 800af9c:	9b06      	ldr	r3, [sp, #24]
 800af9e:	4601      	mov	r1, r0
 800afa0:	6820      	ldr	r0, [r4, #0]
 800afa2:	f001 fed5 	bl	800cd50 <_open_r>
 800afa6:	b003      	add	sp, #12
 800afa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afac:	b003      	add	sp, #12
 800afae:	4770      	bx	lr
 800afb0:	200004ec 	.word	0x200004ec

0800afb4 <read>:
 800afb4:	b410      	push	{r4}
 800afb6:	4c04      	ldr	r4, [pc, #16]	; (800afc8 <read+0x14>)
 800afb8:	4613      	mov	r3, r2
 800afba:	460a      	mov	r2, r1
 800afbc:	4601      	mov	r1, r0
 800afbe:	6820      	ldr	r0, [r4, #0]
 800afc0:	bc10      	pop	{r4}
 800afc2:	f001 bedb 	b.w	800cd7c <_read_r>
 800afc6:	bf00      	nop
 800afc8:	200004ec 	.word	0x200004ec

0800afcc <__sprint_r.part.0>:
 800afcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800afd2:	049c      	lsls	r4, r3, #18
 800afd4:	4692      	mov	sl, r2
 800afd6:	d52d      	bpl.n	800b034 <__sprint_r.part.0+0x68>
 800afd8:	6893      	ldr	r3, [r2, #8]
 800afda:	6812      	ldr	r2, [r2, #0]
 800afdc:	b343      	cbz	r3, 800b030 <__sprint_r.part.0+0x64>
 800afde:	460e      	mov	r6, r1
 800afe0:	4607      	mov	r7, r0
 800afe2:	f102 0908 	add.w	r9, r2, #8
 800afe6:	e959 5b02 	ldrd	r5, fp, [r9, #-8]
 800afea:	ea5f 089b 	movs.w	r8, fp, lsr #2
 800afee:	d015      	beq.n	800b01c <__sprint_r.part.0+0x50>
 800aff0:	3d04      	subs	r5, #4
 800aff2:	2400      	movs	r4, #0
 800aff4:	e001      	b.n	800affa <__sprint_r.part.0+0x2e>
 800aff6:	45a0      	cmp	r8, r4
 800aff8:	d00e      	beq.n	800b018 <__sprint_r.part.0+0x4c>
 800affa:	4632      	mov	r2, r6
 800affc:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800b000:	4638      	mov	r0, r7
 800b002:	f001 f9c5 	bl	800c390 <_fputwc_r>
 800b006:	1c43      	adds	r3, r0, #1
 800b008:	f104 0401 	add.w	r4, r4, #1
 800b00c:	d1f3      	bne.n	800aff6 <__sprint_r.part.0+0x2a>
 800b00e:	2300      	movs	r3, #0
 800b010:	e9ca 3301 	strd	r3, r3, [sl, #4]
 800b014:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b018:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b01c:	f02b 0b03 	bic.w	fp, fp, #3
 800b020:	eba3 030b 	sub.w	r3, r3, fp
 800b024:	f8ca 3008 	str.w	r3, [sl, #8]
 800b028:	f109 0908 	add.w	r9, r9, #8
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1da      	bne.n	800afe6 <__sprint_r.part.0+0x1a>
 800b030:	2000      	movs	r0, #0
 800b032:	e7ec      	b.n	800b00e <__sprint_r.part.0+0x42>
 800b034:	f001 fb52 	bl	800c6dc <__sfvwrite_r>
 800b038:	2300      	movs	r3, #0
 800b03a:	e9ca 3301 	strd	r3, r3, [sl, #4]
 800b03e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b042:	bf00      	nop

0800b044 <__sprint_r>:
 800b044:	6893      	ldr	r3, [r2, #8]
 800b046:	b10b      	cbz	r3, 800b04c <__sprint_r+0x8>
 800b048:	f7ff bfc0 	b.w	800afcc <__sprint_r.part.0>
 800b04c:	b410      	push	{r4}
 800b04e:	4618      	mov	r0, r3
 800b050:	6053      	str	r3, [r2, #4]
 800b052:	bc10      	pop	{r4}
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop

0800b058 <_vfiprintf_r>:
 800b058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b05c:	b0bd      	sub	sp, #244	; 0xf4
 800b05e:	461c      	mov	r4, r3
 800b060:	9101      	str	r1, [sp, #4]
 800b062:	4690      	mov	r8, r2
 800b064:	e9cd 0305 	strd	r0, r3, [sp, #20]
 800b068:	b118      	cbz	r0, 800b072 <_vfiprintf_r+0x1a>
 800b06a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f000 83ce 	beq.w	800b80e <_vfiprintf_r+0x7b6>
 800b072:	9b01      	ldr	r3, [sp, #4]
 800b074:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800b078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b07a:	07db      	lsls	r3, r3, #31
 800b07c:	b28a      	uxth	r2, r1
 800b07e:	d402      	bmi.n	800b086 <_vfiprintf_r+0x2e>
 800b080:	0597      	lsls	r7, r2, #22
 800b082:	f140 853b 	bpl.w	800bafc <_vfiprintf_r+0xaa4>
 800b086:	0496      	lsls	r6, r2, #18
 800b088:	d408      	bmi.n	800b09c <_vfiprintf_r+0x44>
 800b08a:	9801      	ldr	r0, [sp, #4]
 800b08c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800b08e:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 800b092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b096:	8182      	strh	r2, [r0, #12]
 800b098:	6643      	str	r3, [r0, #100]	; 0x64
 800b09a:	b292      	uxth	r2, r2
 800b09c:	0715      	lsls	r5, r2, #28
 800b09e:	f140 80c7 	bpl.w	800b230 <_vfiprintf_r+0x1d8>
 800b0a2:	9b01      	ldr	r3, [sp, #4]
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f000 80c2 	beq.w	800b230 <_vfiprintf_r+0x1d8>
 800b0ac:	f002 031a 	and.w	r3, r2, #26
 800b0b0:	2b0a      	cmp	r3, #10
 800b0b2:	f000 8393 	beq.w	800b7dc <_vfiprintf_r+0x784>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 800b0bc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800b0c0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b0c4:	930a      	str	r3, [sp, #40]	; 0x28
 800b0c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0c8:	9302      	str	r3, [sp, #8]
 800b0ca:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800b0ce:	46cb      	mov	fp, r9
 800b0d0:	f898 3000 	ldrb.w	r3, [r8]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f000 8445 	beq.w	800b964 <_vfiprintf_r+0x90c>
 800b0da:	2b25      	cmp	r3, #37	; 0x25
 800b0dc:	4644      	mov	r4, r8
 800b0de:	d102      	bne.n	800b0e6 <_vfiprintf_r+0x8e>
 800b0e0:	e01e      	b.n	800b120 <_vfiprintf_r+0xc8>
 800b0e2:	2b25      	cmp	r3, #37	; 0x25
 800b0e4:	d003      	beq.n	800b0ee <_vfiprintf_r+0x96>
 800b0e6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1f9      	bne.n	800b0e2 <_vfiprintf_r+0x8a>
 800b0ee:	eba4 0508 	sub.w	r5, r4, r8
 800b0f2:	b18d      	cbz	r5, 800b118 <_vfiprintf_r+0xc0>
 800b0f4:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	442a      	add	r2, r5
 800b0fc:	2b07      	cmp	r3, #7
 800b0fe:	f8cb 8000 	str.w	r8, [fp]
 800b102:	f8cb 5004 	str.w	r5, [fp, #4]
 800b106:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
 800b10a:	f300 80a6 	bgt.w	800b25a <_vfiprintf_r+0x202>
 800b10e:	f10b 0b08 	add.w	fp, fp, #8
 800b112:	9b02      	ldr	r3, [sp, #8]
 800b114:	442b      	add	r3, r5
 800b116:	9302      	str	r3, [sp, #8]
 800b118:	7823      	ldrb	r3, [r4, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f000 8422 	beq.w	800b964 <_vfiprintf_r+0x90c>
 800b120:	2300      	movs	r3, #0
 800b122:	9304      	str	r3, [sp, #16]
 800b124:	f04f 0200 	mov.w	r2, #0
 800b128:	461f      	mov	r7, r3
 800b12a:	7863      	ldrb	r3, [r4, #1]
 800b12c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800b130:	f104 0801 	add.w	r8, r4, #1
 800b134:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b138:	252b      	movs	r5, #43	; 0x2b
 800b13a:	f108 0801 	add.w	r8, r8, #1
 800b13e:	f1a3 0220 	sub.w	r2, r3, #32
 800b142:	2a5a      	cmp	r2, #90	; 0x5a
 800b144:	f200 8366 	bhi.w	800b814 <_vfiprintf_r+0x7bc>
 800b148:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b14c:	036402db 	.word	0x036402db
 800b150:	02d60364 	.word	0x02d60364
 800b154:	03640364 	.word	0x03640364
 800b158:	02fc0364 	.word	0x02fc0364
 800b15c:	03640364 	.word	0x03640364
 800b160:	02eb02f0 	.word	0x02eb02f0
 800b164:	02e60364 	.word	0x02e60364
 800b168:	03640320 	.word	0x03640320
 800b16c:	0136031b 	.word	0x0136031b
 800b170:	01360136 	.word	0x01360136
 800b174:	01360136 	.word	0x01360136
 800b178:	01360136 	.word	0x01360136
 800b17c:	01360136 	.word	0x01360136
 800b180:	03640364 	.word	0x03640364
 800b184:	03640364 	.word	0x03640364
 800b188:	03640364 	.word	0x03640364
 800b18c:	03640364 	.word	0x03640364
 800b190:	01450364 	.word	0x01450364
 800b194:	036402a6 	.word	0x036402a6
 800b198:	03640364 	.word	0x03640364
 800b19c:	03640364 	.word	0x03640364
 800b1a0:	03640364 	.word	0x03640364
 800b1a4:	03640364 	.word	0x03640364
 800b1a8:	00600364 	.word	0x00600364
 800b1ac:	03640364 	.word	0x03640364
 800b1b0:	028a0364 	.word	0x028a0364
 800b1b4:	02760364 	.word	0x02760364
 800b1b8:	03640364 	.word	0x03640364
 800b1bc:	03640238 	.word	0x03640238
 800b1c0:	03640364 	.word	0x03640364
 800b1c4:	03640364 	.word	0x03640364
 800b1c8:	03640364 	.word	0x03640364
 800b1cc:	03640364 	.word	0x03640364
 800b1d0:	01450364 	.word	0x01450364
 800b1d4:	036400e9 	.word	0x036400e9
 800b1d8:	03640364 	.word	0x03640364
 800b1dc:	00e902c9 	.word	0x00e902c9
 800b1e0:	0364005b 	.word	0x0364005b
 800b1e4:	036402bc 	.word	0x036402bc
 800b1e8:	00620263 	.word	0x00620263
 800b1ec:	005b0254 	.word	0x005b0254
 800b1f0:	028a0364 	.word	0x028a0364
 800b1f4:	0094005d 	.word	0x0094005d
 800b1f8:	03640364 	.word	0x03640364
 800b1fc:	036400cb 	.word	0x036400cb
 800b200:	005d      	.short	0x005d
 800b202:	f047 0720 	orr.w	r7, r7, #32
 800b206:	f898 3000 	ldrb.w	r3, [r8]
 800b20a:	e796      	b.n	800b13a <_vfiprintf_r+0xe2>
 800b20c:	f047 0710 	orr.w	r7, r7, #16
 800b210:	06bc      	lsls	r4, r7, #26
 800b212:	f140 82d5 	bpl.w	800b7c0 <_vfiprintf_r+0x768>
 800b216:	9b06      	ldr	r3, [sp, #24]
 800b218:	3307      	adds	r3, #7
 800b21a:	f023 0307 	bic.w	r3, r3, #7
 800b21e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b222:	f103 0208 	add.w	r2, r3, #8
 800b226:	9206      	str	r2, [sp, #24]
 800b228:	f427 6380 	bic.w	r3, r7, #1024	; 0x400
 800b22c:	2200      	movs	r2, #0
 800b22e:	e02f      	b.n	800b290 <_vfiprintf_r+0x238>
 800b230:	9d01      	ldr	r5, [sp, #4]
 800b232:	9805      	ldr	r0, [sp, #20]
 800b234:	4629      	mov	r1, r5
 800b236:	f000 fdcf 	bl	800bdd8 <__swsetup_r>
 800b23a:	b1a0      	cbz	r0, 800b266 <_vfiprintf_r+0x20e>
 800b23c:	9a01      	ldr	r2, [sp, #4]
 800b23e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800b240:	07d8      	lsls	r0, r3, #31
 800b242:	d403      	bmi.n	800b24c <_vfiprintf_r+0x1f4>
 800b244:	8993      	ldrh	r3, [r2, #12]
 800b246:	0599      	lsls	r1, r3, #22
 800b248:	f140 84ad 	bpl.w	800bba6 <_vfiprintf_r+0xb4e>
 800b24c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b250:	9302      	str	r3, [sp, #8]
 800b252:	9802      	ldr	r0, [sp, #8]
 800b254:	b03d      	add	sp, #244	; 0xf4
 800b256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b25a:	2a00      	cmp	r2, #0
 800b25c:	f040 841d 	bne.w	800ba9a <_vfiprintf_r+0xa42>
 800b260:	9211      	str	r2, [sp, #68]	; 0x44
 800b262:	46cb      	mov	fp, r9
 800b264:	e755      	b.n	800b112 <_vfiprintf_r+0xba>
 800b266:	89aa      	ldrh	r2, [r5, #12]
 800b268:	f002 031a 	and.w	r3, r2, #26
 800b26c:	2b0a      	cmp	r3, #10
 800b26e:	f47f af22 	bne.w	800b0b6 <_vfiprintf_r+0x5e>
 800b272:	e2b3      	b.n	800b7dc <_vfiprintf_r+0x784>
 800b274:	463b      	mov	r3, r7
 800b276:	069d      	lsls	r5, r3, #26
 800b278:	9a06      	ldr	r2, [sp, #24]
 800b27a:	f140 81e3 	bpl.w	800b644 <_vfiprintf_r+0x5ec>
 800b27e:	3207      	adds	r2, #7
 800b280:	f022 0207 	bic.w	r2, r2, #7
 800b284:	f102 0108 	add.w	r1, r2, #8
 800b288:	e9d2 4500 	ldrd	r4, r5, [r2]
 800b28c:	9106      	str	r1, [sp, #24]
 800b28e:	2201      	movs	r2, #1
 800b290:	f04f 0100 	mov.w	r1, #0
 800b294:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
 800b298:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800b29c:	a93c      	add	r1, sp, #240	; 0xf0
 800b29e:	9100      	str	r1, [sp, #0]
 800b2a0:	f000 83c8 	beq.w	800ba34 <_vfiprintf_r+0x9dc>
 800b2a4:	ea54 0105 	orrs.w	r1, r4, r5
 800b2a8:	f023 0780 	bic.w	r7, r3, #128	; 0x80
 800b2ac:	d15c      	bne.n	800b368 <_vfiprintf_r+0x310>
 800b2ae:	f1ba 0f00 	cmp.w	sl, #0
 800b2b2:	f040 84da 	bne.w	800bc6a <_vfiprintf_r+0xc12>
 800b2b6:	2a00      	cmp	r2, #0
 800b2b8:	f040 83eb 	bne.w	800ba92 <_vfiprintf_r+0xa3a>
 800b2bc:	f013 0301 	ands.w	r3, r3, #1
 800b2c0:	ae3c      	add	r6, sp, #240	; 0xf0
 800b2c2:	9303      	str	r3, [sp, #12]
 800b2c4:	f040 8423 	bne.w	800bb0e <_vfiprintf_r+0xab6>
 800b2c8:	9a03      	ldr	r2, [sp, #12]
 800b2ca:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 800b2ce:	4552      	cmp	r2, sl
 800b2d0:	bfb8      	it	lt
 800b2d2:	4652      	movlt	r2, sl
 800b2d4:	9200      	str	r2, [sp, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	f000 808d 	beq.w	800b3f6 <_vfiprintf_r+0x39e>
 800b2dc:	3201      	adds	r2, #1
 800b2de:	9200      	str	r2, [sp, #0]
 800b2e0:	e089      	b.n	800b3f6 <_vfiprintf_r+0x39e>
 800b2e2:	4ac0      	ldr	r2, [pc, #768]	; (800b5e4 <_vfiprintf_r+0x58c>)
 800b2e4:	920a      	str	r2, [sp, #40]	; 0x28
 800b2e6:	06be      	lsls	r6, r7, #26
 800b2e8:	f140 816d 	bpl.w	800b5c6 <_vfiprintf_r+0x56e>
 800b2ec:	9a06      	ldr	r2, [sp, #24]
 800b2ee:	3207      	adds	r2, #7
 800b2f0:	f022 0207 	bic.w	r2, r2, #7
 800b2f4:	e9d2 4500 	ldrd	r4, r5, [r2]
 800b2f8:	f102 0108 	add.w	r1, r2, #8
 800b2fc:	9106      	str	r1, [sp, #24]
 800b2fe:	07fe      	lsls	r6, r7, #31
 800b300:	d509      	bpl.n	800b316 <_vfiprintf_r+0x2be>
 800b302:	ea54 0205 	orrs.w	r2, r4, r5
 800b306:	d006      	beq.n	800b316 <_vfiprintf_r+0x2be>
 800b308:	2230      	movs	r2, #48	; 0x30
 800b30a:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 800b30e:	f047 0702 	orr.w	r7, r7, #2
 800b312:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
 800b316:	f427 6380 	bic.w	r3, r7, #1024	; 0x400
 800b31a:	2202      	movs	r2, #2
 800b31c:	e7b8      	b.n	800b290 <_vfiprintf_r+0x238>
 800b31e:	463b      	mov	r3, r7
 800b320:	069e      	lsls	r6, r3, #26
 800b322:	f140 81be 	bpl.w	800b6a2 <_vfiprintf_r+0x64a>
 800b326:	9a06      	ldr	r2, [sp, #24]
 800b328:	3207      	adds	r2, #7
 800b32a:	f022 0207 	bic.w	r2, r2, #7
 800b32e:	e9d2 0100 	ldrd	r0, r1, [r2]
 800b332:	3208      	adds	r2, #8
 800b334:	9206      	str	r2, [sp, #24]
 800b336:	4604      	mov	r4, r0
 800b338:	460d      	mov	r5, r1
 800b33a:	2800      	cmp	r0, #0
 800b33c:	f171 0200 	sbcs.w	r2, r1, #0
 800b340:	da05      	bge.n	800b34e <_vfiprintf_r+0x2f6>
 800b342:	222d      	movs	r2, #45	; 0x2d
 800b344:	4264      	negs	r4, r4
 800b346:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800b34a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800b34e:	aa3c      	add	r2, sp, #240	; 0xf0
 800b350:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800b354:	9200      	str	r2, [sp, #0]
 800b356:	f000 8445 	beq.w	800bbe4 <_vfiprintf_r+0xb8c>
 800b35a:	ea54 0105 	orrs.w	r1, r4, r5
 800b35e:	f04f 0201 	mov.w	r2, #1
 800b362:	f023 0780 	bic.w	r7, r3, #128	; 0x80
 800b366:	d0a2      	beq.n	800b2ae <_vfiprintf_r+0x256>
 800b368:	2a01      	cmp	r2, #1
 800b36a:	f000 8367 	beq.w	800ba3c <_vfiprintf_r+0x9e4>
 800b36e:	2a02      	cmp	r2, #2
 800b370:	f000 837b 	beq.w	800ba6a <_vfiprintf_r+0xa12>
 800b374:	a93c      	add	r1, sp, #240	; 0xf0
 800b376:	e000      	b.n	800b37a <_vfiprintf_r+0x322>
 800b378:	4631      	mov	r1, r6
 800b37a:	08e2      	lsrs	r2, r4, #3
 800b37c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800b380:	08e8      	lsrs	r0, r5, #3
 800b382:	f004 0307 	and.w	r3, r4, #7
 800b386:	4605      	mov	r5, r0
 800b388:	4614      	mov	r4, r2
 800b38a:	3330      	adds	r3, #48	; 0x30
 800b38c:	ea54 0205 	orrs.w	r2, r4, r5
 800b390:	f801 3c01 	strb.w	r3, [r1, #-1]
 800b394:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 800b398:	d1ee      	bne.n	800b378 <_vfiprintf_r+0x320>
 800b39a:	07fd      	lsls	r5, r7, #31
 800b39c:	f140 82fa 	bpl.w	800b994 <_vfiprintf_r+0x93c>
 800b3a0:	2b30      	cmp	r3, #48	; 0x30
 800b3a2:	f000 82f7 	beq.w	800b994 <_vfiprintf_r+0x93c>
 800b3a6:	9a00      	ldr	r2, [sp, #0]
 800b3a8:	3902      	subs	r1, #2
 800b3aa:	2330      	movs	r3, #48	; 0x30
 800b3ac:	1a52      	subs	r2, r2, r1
 800b3ae:	f806 3c01 	strb.w	r3, [r6, #-1]
 800b3b2:	9203      	str	r2, [sp, #12]
 800b3b4:	460e      	mov	r6, r1
 800b3b6:	e787      	b.n	800b2c8 <_vfiprintf_r+0x270>
 800b3b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b3bc:	2100      	movs	r1, #0
 800b3be:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b3c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b3c6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b3ca:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b3ce:	2a09      	cmp	r2, #9
 800b3d0:	d9f5      	bls.n	800b3be <_vfiprintf_r+0x366>
 800b3d2:	9104      	str	r1, [sp, #16]
 800b3d4:	e6b3      	b.n	800b13e <_vfiprintf_r+0xe6>
 800b3d6:	9a06      	ldr	r2, [sp, #24]
 800b3d8:	f04f 0100 	mov.w	r1, #0
 800b3dc:	6813      	ldr	r3, [r2, #0]
 800b3de:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
 800b3e2:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 800b3e6:	2101      	movs	r1, #1
 800b3e8:	1d13      	adds	r3, r2, #4
 800b3ea:	9100      	str	r1, [sp, #0]
 800b3ec:	9306      	str	r3, [sp, #24]
 800b3ee:	9103      	str	r1, [sp, #12]
 800b3f0:	ae23      	add	r6, sp, #140	; 0x8c
 800b3f2:	f04f 0a00 	mov.w	sl, #0
 800b3f6:	f017 0302 	ands.w	r3, r7, #2
 800b3fa:	9308      	str	r3, [sp, #32]
 800b3fc:	d002      	beq.n	800b404 <_vfiprintf_r+0x3ac>
 800b3fe:	9b00      	ldr	r3, [sp, #0]
 800b400:	3302      	adds	r3, #2
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800b408:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 800b40c:	f101 0c01 	add.w	ip, r1, #1
 800b410:	4660      	mov	r0, ip
 800b412:	9307      	str	r3, [sp, #28]
 800b414:	d133      	bne.n	800b47e <_vfiprintf_r+0x426>
 800b416:	9b04      	ldr	r3, [sp, #16]
 800b418:	9c00      	ldr	r4, [sp, #0]
 800b41a:	1b1c      	subs	r4, r3, r4
 800b41c:	2c00      	cmp	r4, #0
 800b41e:	dd2e      	ble.n	800b47e <_vfiprintf_r+0x426>
 800b420:	2c10      	cmp	r4, #16
 800b422:	4d71      	ldr	r5, [pc, #452]	; (800b5e8 <_vfiprintf_r+0x590>)
 800b424:	f340 844a 	ble.w	800bcbc <_vfiprintf_r+0xc64>
 800b428:	2310      	movs	r3, #16
 800b42a:	e008      	b.n	800b43e <_vfiprintf_r+0x3e6>
 800b42c:	f101 0e02 	add.w	lr, r1, #2
 800b430:	f10b 0b08 	add.w	fp, fp, #8
 800b434:	4601      	mov	r1, r0
 800b436:	3c10      	subs	r4, #16
 800b438:	2c10      	cmp	r4, #16
 800b43a:	dd11      	ble.n	800b460 <_vfiprintf_r+0x408>
 800b43c:	1c48      	adds	r0, r1, #1
 800b43e:	3210      	adds	r2, #16
 800b440:	2807      	cmp	r0, #7
 800b442:	9212      	str	r2, [sp, #72]	; 0x48
 800b444:	e9cb 5300 	strd	r5, r3, [fp]
 800b448:	9011      	str	r0, [sp, #68]	; 0x44
 800b44a:	ddef      	ble.n	800b42c <_vfiprintf_r+0x3d4>
 800b44c:	2a00      	cmp	r2, #0
 800b44e:	f040 82a5 	bne.w	800b99c <_vfiprintf_r+0x944>
 800b452:	3c10      	subs	r4, #16
 800b454:	2c10      	cmp	r4, #16
 800b456:	4611      	mov	r1, r2
 800b458:	f04f 0e01 	mov.w	lr, #1
 800b45c:	46cb      	mov	fp, r9
 800b45e:	dced      	bgt.n	800b43c <_vfiprintf_r+0x3e4>
 800b460:	4422      	add	r2, r4
 800b462:	f1be 0f07 	cmp.w	lr, #7
 800b466:	9212      	str	r2, [sp, #72]	; 0x48
 800b468:	e9cb 5400 	strd	r5, r4, [fp]
 800b46c:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 800b470:	f300 82bc 	bgt.w	800b9ec <_vfiprintf_r+0x994>
 800b474:	f10b 0b08 	add.w	fp, fp, #8
 800b478:	f10e 0001 	add.w	r0, lr, #1
 800b47c:	4671      	mov	r1, lr
 800b47e:	f89d 403b 	ldrb.w	r4, [sp, #59]	; 0x3b
 800b482:	f10b 0c08 	add.w	ip, fp, #8
 800b486:	2c00      	cmp	r4, #0
 800b488:	f000 81ed 	beq.w	800b866 <_vfiprintf_r+0x80e>
 800b48c:	3201      	adds	r2, #1
 800b48e:	f10d 043b 	add.w	r4, sp, #59	; 0x3b
 800b492:	2101      	movs	r1, #1
 800b494:	2807      	cmp	r0, #7
 800b496:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
 800b49a:	e9cb 4100 	strd	r4, r1, [fp]
 800b49e:	f340 82b6 	ble.w	800ba0e <_vfiprintf_r+0x9b6>
 800b4a2:	2a00      	cmp	r2, #0
 800b4a4:	f040 81d1 	bne.w	800b84a <_vfiprintf_r+0x7f2>
 800b4a8:	9b08      	ldr	r3, [sp, #32]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f040 82b5 	bne.w	800ba1a <_vfiprintf_r+0x9c2>
 800b4b0:	4608      	mov	r0, r1
 800b4b2:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800b4b6:	4611      	mov	r1, r2
 800b4b8:	46cb      	mov	fp, r9
 800b4ba:	9b07      	ldr	r3, [sp, #28]
 800b4bc:	2b80      	cmp	r3, #128	; 0x80
 800b4be:	f000 81ed 	beq.w	800b89c <_vfiprintf_r+0x844>
 800b4c2:	9b03      	ldr	r3, [sp, #12]
 800b4c4:	ebaa 0403 	sub.w	r4, sl, r3
 800b4c8:	2c00      	cmp	r4, #0
 800b4ca:	dd2d      	ble.n	800b528 <_vfiprintf_r+0x4d0>
 800b4cc:	2c10      	cmp	r4, #16
 800b4ce:	4d47      	ldr	r5, [pc, #284]	; (800b5ec <_vfiprintf_r+0x594>)
 800b4d0:	f340 83cf 	ble.w	800bc72 <_vfiprintf_r+0xc1a>
 800b4d4:	f04f 0a10 	mov.w	sl, #16
 800b4d8:	e006      	b.n	800b4e8 <_vfiprintf_r+0x490>
 800b4da:	1c88      	adds	r0, r1, #2
 800b4dc:	f10b 0b08 	add.w	fp, fp, #8
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	3c10      	subs	r4, #16
 800b4e4:	2c10      	cmp	r4, #16
 800b4e6:	dd11      	ble.n	800b50c <_vfiprintf_r+0x4b4>
 800b4e8:	1c4b      	adds	r3, r1, #1
 800b4ea:	3210      	adds	r2, #16
 800b4ec:	2b07      	cmp	r3, #7
 800b4ee:	9212      	str	r2, [sp, #72]	; 0x48
 800b4f0:	e9cb 5a00 	strd	r5, sl, [fp]
 800b4f4:	9311      	str	r3, [sp, #68]	; 0x44
 800b4f6:	ddf0      	ble.n	800b4da <_vfiprintf_r+0x482>
 800b4f8:	2a00      	cmp	r2, #0
 800b4fa:	f040 8199 	bne.w	800b830 <_vfiprintf_r+0x7d8>
 800b4fe:	3c10      	subs	r4, #16
 800b500:	2c10      	cmp	r4, #16
 800b502:	f04f 0001 	mov.w	r0, #1
 800b506:	4611      	mov	r1, r2
 800b508:	46cb      	mov	fp, r9
 800b50a:	dced      	bgt.n	800b4e8 <_vfiprintf_r+0x490>
 800b50c:	f10b 0308 	add.w	r3, fp, #8
 800b510:	4422      	add	r2, r4
 800b512:	2807      	cmp	r0, #7
 800b514:	9212      	str	r2, [sp, #72]	; 0x48
 800b516:	e9cb 5400 	strd	r5, r4, [fp]
 800b51a:	9011      	str	r0, [sp, #68]	; 0x44
 800b51c:	f300 829a 	bgt.w	800ba54 <_vfiprintf_r+0x9fc>
 800b520:	3001      	adds	r0, #1
 800b522:	f103 0c08 	add.w	ip, r3, #8
 800b526:	469b      	mov	fp, r3
 800b528:	9b03      	ldr	r3, [sp, #12]
 800b52a:	9011      	str	r0, [sp, #68]	; 0x44
 800b52c:	441a      	add	r2, r3
 800b52e:	2807      	cmp	r0, #7
 800b530:	9212      	str	r2, [sp, #72]	; 0x48
 800b532:	e9cb 6300 	strd	r6, r3, [fp]
 800b536:	f340 81f6 	ble.w	800b926 <_vfiprintf_r+0x8ce>
 800b53a:	2a00      	cmp	r2, #0
 800b53c:	f040 81eb 	bne.w	800b916 <_vfiprintf_r+0x8be>
 800b540:	077c      	lsls	r4, r7, #29
 800b542:	9211      	str	r2, [sp, #68]	; 0x44
 800b544:	d531      	bpl.n	800b5aa <_vfiprintf_r+0x552>
 800b546:	9b04      	ldr	r3, [sp, #16]
 800b548:	9900      	ldr	r1, [sp, #0]
 800b54a:	1a5c      	subs	r4, r3, r1
 800b54c:	2c00      	cmp	r4, #0
 800b54e:	dd2c      	ble.n	800b5aa <_vfiprintf_r+0x552>
 800b550:	46cc      	mov	ip, r9
 800b552:	2c10      	cmp	r4, #16
 800b554:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b556:	4d24      	ldr	r5, [pc, #144]	; (800b5e8 <_vfiprintf_r+0x590>)
 800b558:	f340 83b3 	ble.w	800bcc2 <_vfiprintf_r+0xc6a>
 800b55c:	2610      	movs	r6, #16
 800b55e:	9f05      	ldr	r7, [sp, #20]
 800b560:	e006      	b.n	800b570 <_vfiprintf_r+0x518>
 800b562:	1c88      	adds	r0, r1, #2
 800b564:	f10c 0c08 	add.w	ip, ip, #8
 800b568:	4619      	mov	r1, r3
 800b56a:	3c10      	subs	r4, #16
 800b56c:	2c10      	cmp	r4, #16
 800b56e:	dd11      	ble.n	800b594 <_vfiprintf_r+0x53c>
 800b570:	1c4b      	adds	r3, r1, #1
 800b572:	3210      	adds	r2, #16
 800b574:	2b07      	cmp	r3, #7
 800b576:	9212      	str	r2, [sp, #72]	; 0x48
 800b578:	e9cc 5600 	strd	r5, r6, [ip]
 800b57c:	9311      	str	r3, [sp, #68]	; 0x44
 800b57e:	ddf0      	ble.n	800b562 <_vfiprintf_r+0x50a>
 800b580:	2a00      	cmp	r2, #0
 800b582:	f040 821a 	bne.w	800b9ba <_vfiprintf_r+0x962>
 800b586:	3c10      	subs	r4, #16
 800b588:	2c10      	cmp	r4, #16
 800b58a:	f04f 0001 	mov.w	r0, #1
 800b58e:	4611      	mov	r1, r2
 800b590:	46cc      	mov	ip, r9
 800b592:	dced      	bgt.n	800b570 <_vfiprintf_r+0x518>
 800b594:	4422      	add	r2, r4
 800b596:	2807      	cmp	r0, #7
 800b598:	9212      	str	r2, [sp, #72]	; 0x48
 800b59a:	e9cc 5400 	strd	r5, r4, [ip]
 800b59e:	9011      	str	r0, [sp, #68]	; 0x44
 800b5a0:	f340 81c9 	ble.w	800b936 <_vfiprintf_r+0x8de>
 800b5a4:	2a00      	cmp	r2, #0
 800b5a6:	f040 82f4 	bne.w	800bb92 <_vfiprintf_r+0xb3a>
 800b5aa:	9b02      	ldr	r3, [sp, #8]
 800b5ac:	9a04      	ldr	r2, [sp, #16]
 800b5ae:	9900      	ldr	r1, [sp, #0]
 800b5b0:	428a      	cmp	r2, r1
 800b5b2:	bfac      	ite	ge
 800b5b4:	189b      	addge	r3, r3, r2
 800b5b6:	185b      	addlt	r3, r3, r1
 800b5b8:	9302      	str	r3, [sp, #8]
 800b5ba:	e1cb      	b.n	800b954 <_vfiprintf_r+0x8fc>
 800b5bc:	4a0c      	ldr	r2, [pc, #48]	; (800b5f0 <_vfiprintf_r+0x598>)
 800b5be:	920a      	str	r2, [sp, #40]	; 0x28
 800b5c0:	06be      	lsls	r6, r7, #26
 800b5c2:	f53f ae93 	bmi.w	800b2ec <_vfiprintf_r+0x294>
 800b5c6:	9906      	ldr	r1, [sp, #24]
 800b5c8:	06fd      	lsls	r5, r7, #27
 800b5ca:	f101 0204 	add.w	r2, r1, #4
 800b5ce:	f100 82b8 	bmi.w	800bb42 <_vfiprintf_r+0xaea>
 800b5d2:	067c      	lsls	r4, r7, #25
 800b5d4:	9906      	ldr	r1, [sp, #24]
 800b5d6:	f140 82b1 	bpl.w	800bb3c <_vfiprintf_r+0xae4>
 800b5da:	880c      	ldrh	r4, [r1, #0]
 800b5dc:	9206      	str	r2, [sp, #24]
 800b5de:	2500      	movs	r5, #0
 800b5e0:	e68d      	b.n	800b2fe <_vfiprintf_r+0x2a6>
 800b5e2:	bf00      	nop
 800b5e4:	0800e1d0 	.word	0x0800e1d0
 800b5e8:	0800e1ec 	.word	0x0800e1ec
 800b5ec:	0800e1fc 	.word	0x0800e1fc
 800b5f0:	0800e1bc 	.word	0x0800e1bc
 800b5f4:	9906      	ldr	r1, [sp, #24]
 800b5f6:	4bae      	ldr	r3, [pc, #696]	; (800b8b0 <_vfiprintf_r+0x858>)
 800b5f8:	680c      	ldr	r4, [r1, #0]
 800b5fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b5fc:	f647 0230 	movw	r2, #30768	; 0x7830
 800b600:	3104      	adds	r1, #4
 800b602:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 800b606:	f047 0302 	orr.w	r3, r7, #2
 800b60a:	9106      	str	r1, [sp, #24]
 800b60c:	2500      	movs	r5, #0
 800b60e:	2202      	movs	r2, #2
 800b610:	e63e      	b.n	800b290 <_vfiprintf_r+0x238>
 800b612:	9a06      	ldr	r2, [sp, #24]
 800b614:	06b9      	lsls	r1, r7, #26
 800b616:	f852 3b04 	ldr.w	r3, [r2], #4
 800b61a:	9206      	str	r2, [sp, #24]
 800b61c:	f100 829e 	bmi.w	800bb5c <_vfiprintf_r+0xb04>
 800b620:	06fa      	lsls	r2, r7, #27
 800b622:	f100 8336 	bmi.w	800bc92 <_vfiprintf_r+0xc3a>
 800b626:	067e      	lsls	r6, r7, #25
 800b628:	f100 834d 	bmi.w	800bcc6 <_vfiprintf_r+0xc6e>
 800b62c:	05bd      	lsls	r5, r7, #22
 800b62e:	f140 8330 	bpl.w	800bc92 <_vfiprintf_r+0xc3a>
 800b632:	9a02      	ldr	r2, [sp, #8]
 800b634:	701a      	strb	r2, [r3, #0]
 800b636:	e54b      	b.n	800b0d0 <_vfiprintf_r+0x78>
 800b638:	f047 0310 	orr.w	r3, r7, #16
 800b63c:	069d      	lsls	r5, r3, #26
 800b63e:	9a06      	ldr	r2, [sp, #24]
 800b640:	f53f ae1d 	bmi.w	800b27e <_vfiprintf_r+0x226>
 800b644:	06dc      	lsls	r4, r3, #27
 800b646:	f102 0104 	add.w	r1, r2, #4
 800b64a:	f100 8271 	bmi.w	800bb30 <_vfiprintf_r+0xad8>
 800b64e:	0658      	lsls	r0, r3, #25
 800b650:	9a06      	ldr	r2, [sp, #24]
 800b652:	f140 826a 	bpl.w	800bb2a <_vfiprintf_r+0xad2>
 800b656:	8814      	ldrh	r4, [r2, #0]
 800b658:	9106      	str	r1, [sp, #24]
 800b65a:	2500      	movs	r5, #0
 800b65c:	2201      	movs	r2, #1
 800b65e:	e617      	b.n	800b290 <_vfiprintf_r+0x238>
 800b660:	9b06      	ldr	r3, [sp, #24]
 800b662:	681e      	ldr	r6, [r3, #0]
 800b664:	f04f 0200 	mov.w	r2, #0
 800b668:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800b66c:	1d1c      	adds	r4, r3, #4
 800b66e:	2e00      	cmp	r6, #0
 800b670:	f000 82a0 	beq.w	800bbb4 <_vfiprintf_r+0xb5c>
 800b674:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800b678:	f000 830f 	beq.w	800bc9a <_vfiprintf_r+0xc42>
 800b67c:	4652      	mov	r2, sl
 800b67e:	2100      	movs	r1, #0
 800b680:	4630      	mov	r0, r6
 800b682:	f001 fb15 	bl	800ccb0 <memchr>
 800b686:	2800      	cmp	r0, #0
 800b688:	f000 8339 	beq.w	800bcfe <_vfiprintf_r+0xca6>
 800b68c:	1b83      	subs	r3, r0, r6
 800b68e:	9303      	str	r3, [sp, #12]
 800b690:	9406      	str	r4, [sp, #24]
 800b692:	f04f 0a00 	mov.w	sl, #0
 800b696:	e617      	b.n	800b2c8 <_vfiprintf_r+0x270>
 800b698:	f047 0310 	orr.w	r3, r7, #16
 800b69c:	069e      	lsls	r6, r3, #26
 800b69e:	f53f ae42 	bmi.w	800b326 <_vfiprintf_r+0x2ce>
 800b6a2:	9906      	ldr	r1, [sp, #24]
 800b6a4:	06dd      	lsls	r5, r3, #27
 800b6a6:	f101 0204 	add.w	r2, r1, #4
 800b6aa:	f100 8238 	bmi.w	800bb1e <_vfiprintf_r+0xac6>
 800b6ae:	065c      	lsls	r4, r3, #25
 800b6b0:	9906      	ldr	r1, [sp, #24]
 800b6b2:	f140 8231 	bpl.w	800bb18 <_vfiprintf_r+0xac0>
 800b6b6:	f9b1 4000 	ldrsh.w	r4, [r1]
 800b6ba:	9206      	str	r2, [sp, #24]
 800b6bc:	17e5      	asrs	r5, r4, #31
 800b6be:	4620      	mov	r0, r4
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	e63a      	b.n	800b33a <_vfiprintf_r+0x2e2>
 800b6c4:	f898 3000 	ldrb.w	r3, [r8]
 800b6c8:	2b6c      	cmp	r3, #108	; 0x6c
 800b6ca:	bf03      	ittte	eq
 800b6cc:	f898 3001 	ldrbeq.w	r3, [r8, #1]
 800b6d0:	f047 0720 	orreq.w	r7, r7, #32
 800b6d4:	f108 0801 	addeq.w	r8, r8, #1
 800b6d8:	f047 0710 	orrne.w	r7, r7, #16
 800b6dc:	e52d      	b.n	800b13a <_vfiprintf_r+0xe2>
 800b6de:	f898 3000 	ldrb.w	r3, [r8]
 800b6e2:	2b68      	cmp	r3, #104	; 0x68
 800b6e4:	bf03      	ittte	eq
 800b6e6:	f898 3001 	ldrbeq.w	r3, [r8, #1]
 800b6ea:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
 800b6ee:	f108 0801 	addeq.w	r8, r8, #1
 800b6f2:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
 800b6f6:	e520      	b.n	800b13a <_vfiprintf_r+0xe2>
 800b6f8:	f047 0701 	orr.w	r7, r7, #1
 800b6fc:	f898 3000 	ldrb.w	r3, [r8]
 800b700:	e51b      	b.n	800b13a <_vfiprintf_r+0xe2>
 800b702:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800b706:	f898 3000 	ldrb.w	r3, [r8]
 800b70a:	2a00      	cmp	r2, #0
 800b70c:	f47f ad15 	bne.w	800b13a <_vfiprintf_r+0xe2>
 800b710:	2220      	movs	r2, #32
 800b712:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800b716:	e510      	b.n	800b13a <_vfiprintf_r+0xe2>
 800b718:	f898 3000 	ldrb.w	r3, [r8]
 800b71c:	f047 0704 	orr.w	r7, r7, #4
 800b720:	e50b      	b.n	800b13a <_vfiprintf_r+0xe2>
 800b722:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
 800b726:	f898 3000 	ldrb.w	r3, [r8]
 800b72a:	e506      	b.n	800b13a <_vfiprintf_r+0xe2>
 800b72c:	9a06      	ldr	r2, [sp, #24]
 800b72e:	f898 3000 	ldrb.w	r3, [r8]
 800b732:	6811      	ldr	r1, [r2, #0]
 800b734:	9104      	str	r1, [sp, #16]
 800b736:	2900      	cmp	r1, #0
 800b738:	f102 0204 	add.w	r2, r2, #4
 800b73c:	f2c0 821f 	blt.w	800bb7e <_vfiprintf_r+0xb26>
 800b740:	9206      	str	r2, [sp, #24]
 800b742:	e4fa      	b.n	800b13a <_vfiprintf_r+0xe2>
 800b744:	9e05      	ldr	r6, [sp, #20]
 800b746:	4630      	mov	r0, r6
 800b748:	f001 f9e0 	bl	800cb0c <_localeconv_r>
 800b74c:	6843      	ldr	r3, [r0, #4]
 800b74e:	930c      	str	r3, [sp, #48]	; 0x30
 800b750:	4618      	mov	r0, r3
 800b752:	f7ff fb95 	bl	800ae80 <strlen>
 800b756:	900d      	str	r0, [sp, #52]	; 0x34
 800b758:	4604      	mov	r4, r0
 800b75a:	4630      	mov	r0, r6
 800b75c:	f001 f9d6 	bl	800cb0c <_localeconv_r>
 800b760:	6882      	ldr	r2, [r0, #8]
 800b762:	920b      	str	r2, [sp, #44]	; 0x2c
 800b764:	2c00      	cmp	r4, #0
 800b766:	f43f ad4e 	beq.w	800b206 <_vfiprintf_r+0x1ae>
 800b76a:	f898 3000 	ldrb.w	r3, [r8]
 800b76e:	2a00      	cmp	r2, #0
 800b770:	f43f ace3 	beq.w	800b13a <_vfiprintf_r+0xe2>
 800b774:	7812      	ldrb	r2, [r2, #0]
 800b776:	2a00      	cmp	r2, #0
 800b778:	f43f acdf 	beq.w	800b13a <_vfiprintf_r+0xe2>
 800b77c:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
 800b780:	e4db      	b.n	800b13a <_vfiprintf_r+0xe2>
 800b782:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 800b786:	f898 3000 	ldrb.w	r3, [r8]
 800b78a:	e4d6      	b.n	800b13a <_vfiprintf_r+0xe2>
 800b78c:	f898 3000 	ldrb.w	r3, [r8]
 800b790:	2b2a      	cmp	r3, #42	; 0x2a
 800b792:	f108 0101 	add.w	r1, r8, #1
 800b796:	f000 82c4 	beq.w	800bd22 <_vfiprintf_r+0xcca>
 800b79a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b79e:	2a09      	cmp	r2, #9
 800b7a0:	4688      	mov	r8, r1
 800b7a2:	f04f 0a00 	mov.w	sl, #0
 800b7a6:	f63f acca 	bhi.w	800b13e <_vfiprintf_r+0xe6>
 800b7aa:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b7ae:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 800b7b2:	eb02 0a4a 	add.w	sl, r2, sl, lsl #1
 800b7b6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b7ba:	2a09      	cmp	r2, #9
 800b7bc:	d9f5      	bls.n	800b7aa <_vfiprintf_r+0x752>
 800b7be:	e4be      	b.n	800b13e <_vfiprintf_r+0xe6>
 800b7c0:	9a06      	ldr	r2, [sp, #24]
 800b7c2:	06f8      	lsls	r0, r7, #27
 800b7c4:	f102 0304 	add.w	r3, r2, #4
 800b7c8:	f100 81c3 	bmi.w	800bb52 <_vfiprintf_r+0xafa>
 800b7cc:	0679      	lsls	r1, r7, #25
 800b7ce:	9a06      	ldr	r2, [sp, #24]
 800b7d0:	f140 81bc 	bpl.w	800bb4c <_vfiprintf_r+0xaf4>
 800b7d4:	8814      	ldrh	r4, [r2, #0]
 800b7d6:	9306      	str	r3, [sp, #24]
 800b7d8:	2500      	movs	r5, #0
 800b7da:	e525      	b.n	800b228 <_vfiprintf_r+0x1d0>
 800b7dc:	9901      	ldr	r1, [sp, #4]
 800b7de:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	f6ff ac67 	blt.w	800b0b6 <_vfiprintf_r+0x5e>
 800b7e8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b7ea:	07db      	lsls	r3, r3, #31
 800b7ec:	d404      	bmi.n	800b7f8 <_vfiprintf_r+0x7a0>
 800b7ee:	0597      	lsls	r7, r2, #22
 800b7f0:	d402      	bmi.n	800b7f8 <_vfiprintf_r+0x7a0>
 800b7f2:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800b7f4:	f001 f9b8 	bl	800cb68 <__retarget_lock_release_recursive>
 800b7f8:	4623      	mov	r3, r4
 800b7fa:	4642      	mov	r2, r8
 800b7fc:	9901      	ldr	r1, [sp, #4]
 800b7fe:	9805      	ldr	r0, [sp, #20]
 800b800:	f000 faa8 	bl	800bd54 <__sbprintf>
 800b804:	9002      	str	r0, [sp, #8]
 800b806:	9802      	ldr	r0, [sp, #8]
 800b808:	b03d      	add	sp, #244	; 0xf4
 800b80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80e:	f000 fcb5 	bl	800c17c <__sinit>
 800b812:	e42e      	b.n	800b072 <_vfiprintf_r+0x1a>
 800b814:	2b00      	cmp	r3, #0
 800b816:	f000 80a5 	beq.w	800b964 <_vfiprintf_r+0x90c>
 800b81a:	2201      	movs	r2, #1
 800b81c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 800b820:	f04f 0300 	mov.w	r3, #0
 800b824:	9200      	str	r2, [sp, #0]
 800b826:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 800b82a:	9203      	str	r2, [sp, #12]
 800b82c:	ae23      	add	r6, sp, #140	; 0x8c
 800b82e:	e5e0      	b.n	800b3f2 <_vfiprintf_r+0x39a>
 800b830:	aa10      	add	r2, sp, #64	; 0x40
 800b832:	9901      	ldr	r1, [sp, #4]
 800b834:	9805      	ldr	r0, [sp, #20]
 800b836:	f7ff fbc9 	bl	800afcc <__sprint_r.part.0>
 800b83a:	2800      	cmp	r0, #0
 800b83c:	f040 8098 	bne.w	800b970 <_vfiprintf_r+0x918>
 800b840:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800b844:	46cb      	mov	fp, r9
 800b846:	1c48      	adds	r0, r1, #1
 800b848:	e64b      	b.n	800b4e2 <_vfiprintf_r+0x48a>
 800b84a:	aa10      	add	r2, sp, #64	; 0x40
 800b84c:	9901      	ldr	r1, [sp, #4]
 800b84e:	9805      	ldr	r0, [sp, #20]
 800b850:	f7ff fbbc 	bl	800afcc <__sprint_r.part.0>
 800b854:	2800      	cmp	r0, #0
 800b856:	f040 808b 	bne.w	800b970 <_vfiprintf_r+0x918>
 800b85a:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800b85e:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800b862:	1c48      	adds	r0, r1, #1
 800b864:	46cb      	mov	fp, r9
 800b866:	9b08      	ldr	r3, [sp, #32]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f43f ae26 	beq.w	800b4ba <_vfiprintf_r+0x462>
 800b86e:	3202      	adds	r2, #2
 800b870:	a90f      	add	r1, sp, #60	; 0x3c
 800b872:	2302      	movs	r3, #2
 800b874:	2807      	cmp	r0, #7
 800b876:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
 800b87a:	e9cb 1300 	strd	r1, r3, [fp]
 800b87e:	f340 80d3 	ble.w	800ba28 <_vfiprintf_r+0x9d0>
 800b882:	2a00      	cmp	r2, #0
 800b884:	f040 8114 	bne.w	800bab0 <_vfiprintf_r+0xa58>
 800b888:	9b07      	ldr	r3, [sp, #28]
 800b88a:	2b80      	cmp	r3, #128	; 0x80
 800b88c:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800b890:	f04f 0001 	mov.w	r0, #1
 800b894:	4611      	mov	r1, r2
 800b896:	46cb      	mov	fp, r9
 800b898:	f47f ae13 	bne.w	800b4c2 <_vfiprintf_r+0x46a>
 800b89c:	9b04      	ldr	r3, [sp, #16]
 800b89e:	9c00      	ldr	r4, [sp, #0]
 800b8a0:	1b1c      	subs	r4, r3, r4
 800b8a2:	2c00      	cmp	r4, #0
 800b8a4:	f77f ae0d 	ble.w	800b4c2 <_vfiprintf_r+0x46a>
 800b8a8:	2c10      	cmp	r4, #16
 800b8aa:	4d02      	ldr	r5, [pc, #8]	; (800b8b4 <_vfiprintf_r+0x85c>)
 800b8ac:	dc0c      	bgt.n	800b8c8 <_vfiprintf_r+0x870>
 800b8ae:	e22c      	b.n	800bd0a <_vfiprintf_r+0xcb2>
 800b8b0:	0800e1d0 	.word	0x0800e1d0
 800b8b4:	0800e1fc 	.word	0x0800e1fc
 800b8b8:	f101 0c02 	add.w	ip, r1, #2
 800b8bc:	f10b 0b08 	add.w	fp, fp, #8
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	3c10      	subs	r4, #16
 800b8c4:	2c10      	cmp	r4, #16
 800b8c6:	dd13      	ble.n	800b8f0 <_vfiprintf_r+0x898>
 800b8c8:	1c4b      	adds	r3, r1, #1
 800b8ca:	3210      	adds	r2, #16
 800b8cc:	2010      	movs	r0, #16
 800b8ce:	2b07      	cmp	r3, #7
 800b8d0:	9212      	str	r2, [sp, #72]	; 0x48
 800b8d2:	f8cb 5000 	str.w	r5, [fp]
 800b8d6:	f8cb 0004 	str.w	r0, [fp, #4]
 800b8da:	9311      	str	r3, [sp, #68]	; 0x44
 800b8dc:	ddec      	ble.n	800b8b8 <_vfiprintf_r+0x860>
 800b8de:	2a00      	cmp	r2, #0
 800b8e0:	d177      	bne.n	800b9d2 <_vfiprintf_r+0x97a>
 800b8e2:	3c10      	subs	r4, #16
 800b8e4:	2c10      	cmp	r4, #16
 800b8e6:	f04f 0c01 	mov.w	ip, #1
 800b8ea:	4611      	mov	r1, r2
 800b8ec:	46cb      	mov	fp, r9
 800b8ee:	dceb      	bgt.n	800b8c8 <_vfiprintf_r+0x870>
 800b8f0:	f10b 0308 	add.w	r3, fp, #8
 800b8f4:	4422      	add	r2, r4
 800b8f6:	f1bc 0f07 	cmp.w	ip, #7
 800b8fa:	9212      	str	r2, [sp, #72]	; 0x48
 800b8fc:	e9cb 5400 	strd	r5, r4, [fp]
 800b900:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 800b904:	f300 80e3 	bgt.w	800bace <_vfiprintf_r+0xa76>
 800b908:	f10c 0001 	add.w	r0, ip, #1
 800b90c:	4661      	mov	r1, ip
 800b90e:	469b      	mov	fp, r3
 800b910:	f103 0c08 	add.w	ip, r3, #8
 800b914:	e5d5      	b.n	800b4c2 <_vfiprintf_r+0x46a>
 800b916:	aa10      	add	r2, sp, #64	; 0x40
 800b918:	9901      	ldr	r1, [sp, #4]
 800b91a:	9805      	ldr	r0, [sp, #20]
 800b91c:	f7ff fb56 	bl	800afcc <__sprint_r.part.0>
 800b920:	bb30      	cbnz	r0, 800b970 <_vfiprintf_r+0x918>
 800b922:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b924:	46cc      	mov	ip, r9
 800b926:	0778      	lsls	r0, r7, #29
 800b928:	d505      	bpl.n	800b936 <_vfiprintf_r+0x8de>
 800b92a:	9b04      	ldr	r3, [sp, #16]
 800b92c:	9900      	ldr	r1, [sp, #0]
 800b92e:	1a5c      	subs	r4, r3, r1
 800b930:	2c00      	cmp	r4, #0
 800b932:	f73f ae0e 	bgt.w	800b552 <_vfiprintf_r+0x4fa>
 800b936:	9b02      	ldr	r3, [sp, #8]
 800b938:	9904      	ldr	r1, [sp, #16]
 800b93a:	9800      	ldr	r0, [sp, #0]
 800b93c:	4281      	cmp	r1, r0
 800b93e:	bfac      	ite	ge
 800b940:	185b      	addge	r3, r3, r1
 800b942:	181b      	addlt	r3, r3, r0
 800b944:	9302      	str	r3, [sp, #8]
 800b946:	b12a      	cbz	r2, 800b954 <_vfiprintf_r+0x8fc>
 800b948:	aa10      	add	r2, sp, #64	; 0x40
 800b94a:	9901      	ldr	r1, [sp, #4]
 800b94c:	9805      	ldr	r0, [sp, #20]
 800b94e:	f7ff fb3d 	bl	800afcc <__sprint_r.part.0>
 800b952:	b968      	cbnz	r0, 800b970 <_vfiprintf_r+0x918>
 800b954:	2300      	movs	r3, #0
 800b956:	9311      	str	r3, [sp, #68]	; 0x44
 800b958:	f898 3000 	ldrb.w	r3, [r8]
 800b95c:	46cb      	mov	fp, r9
 800b95e:	2b00      	cmp	r3, #0
 800b960:	f47f abbb 	bne.w	800b0da <_vfiprintf_r+0x82>
 800b964:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b966:	2b00      	cmp	r3, #0
 800b968:	f040 81d2 	bne.w	800bd10 <_vfiprintf_r+0xcb8>
 800b96c:	2300      	movs	r3, #0
 800b96e:	9311      	str	r3, [sp, #68]	; 0x44
 800b970:	9b01      	ldr	r3, [sp, #4]
 800b972:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b974:	899b      	ldrh	r3, [r3, #12]
 800b976:	07d1      	lsls	r1, r2, #31
 800b978:	d402      	bmi.n	800b980 <_vfiprintf_r+0x928>
 800b97a:	059a      	lsls	r2, r3, #22
 800b97c:	f140 8103 	bpl.w	800bb86 <_vfiprintf_r+0xb2e>
 800b980:	065b      	lsls	r3, r3, #25
 800b982:	f53f ac63 	bmi.w	800b24c <_vfiprintf_r+0x1f4>
 800b986:	9802      	ldr	r0, [sp, #8]
 800b988:	b03d      	add	sp, #244	; 0xf4
 800b98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b98e:	9f03      	ldr	r7, [sp, #12]
 800b990:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800b994:	9b00      	ldr	r3, [sp, #0]
 800b996:	1b9b      	subs	r3, r3, r6
 800b998:	9303      	str	r3, [sp, #12]
 800b99a:	e495      	b.n	800b2c8 <_vfiprintf_r+0x270>
 800b99c:	aa10      	add	r2, sp, #64	; 0x40
 800b99e:	9901      	ldr	r1, [sp, #4]
 800b9a0:	9805      	ldr	r0, [sp, #20]
 800b9a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b9a4:	f7ff fb12 	bl	800afcc <__sprint_r.part.0>
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	d1e1      	bne.n	800b970 <_vfiprintf_r+0x918>
 800b9ac:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800b9b0:	46cb      	mov	fp, r9
 800b9b2:	f101 0e01 	add.w	lr, r1, #1
 800b9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9b8:	e53d      	b.n	800b436 <_vfiprintf_r+0x3de>
 800b9ba:	aa10      	add	r2, sp, #64	; 0x40
 800b9bc:	9901      	ldr	r1, [sp, #4]
 800b9be:	4638      	mov	r0, r7
 800b9c0:	f7ff fb04 	bl	800afcc <__sprint_r.part.0>
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	d1d3      	bne.n	800b970 <_vfiprintf_r+0x918>
 800b9c8:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800b9cc:	46cc      	mov	ip, r9
 800b9ce:	1c48      	adds	r0, r1, #1
 800b9d0:	e5cb      	b.n	800b56a <_vfiprintf_r+0x512>
 800b9d2:	aa10      	add	r2, sp, #64	; 0x40
 800b9d4:	9901      	ldr	r1, [sp, #4]
 800b9d6:	9805      	ldr	r0, [sp, #20]
 800b9d8:	f7ff faf8 	bl	800afcc <__sprint_r.part.0>
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	d1c7      	bne.n	800b970 <_vfiprintf_r+0x918>
 800b9e0:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800b9e4:	46cb      	mov	fp, r9
 800b9e6:	f101 0c01 	add.w	ip, r1, #1
 800b9ea:	e76a      	b.n	800b8c2 <_vfiprintf_r+0x86a>
 800b9ec:	2a00      	cmp	r2, #0
 800b9ee:	f040 8142 	bne.w	800bc76 <_vfiprintf_r+0xc1e>
 800b9f2:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
 800b9f6:	2900      	cmp	r1, #0
 800b9f8:	f000 80b7 	beq.w	800bb6a <_vfiprintf_r+0xb12>
 800b9fc:	2101      	movs	r1, #1
 800b9fe:	f10d 043b 	add.w	r4, sp, #59	; 0x3b
 800ba02:	460a      	mov	r2, r1
 800ba04:	9114      	str	r1, [sp, #80]	; 0x50
 800ba06:	4608      	mov	r0, r1
 800ba08:	9413      	str	r4, [sp, #76]	; 0x4c
 800ba0a:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800ba0e:	4601      	mov	r1, r0
 800ba10:	46e3      	mov	fp, ip
 800ba12:	3001      	adds	r0, #1
 800ba14:	f10c 0c08 	add.w	ip, ip, #8
 800ba18:	e725      	b.n	800b866 <_vfiprintf_r+0x80e>
 800ba1a:	ab0f      	add	r3, sp, #60	; 0x3c
 800ba1c:	2202      	movs	r2, #2
 800ba1e:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
 800ba22:	4608      	mov	r0, r1
 800ba24:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800ba28:	4601      	mov	r1, r0
 800ba2a:	46e3      	mov	fp, ip
 800ba2c:	3001      	adds	r0, #1
 800ba2e:	f10c 0c08 	add.w	ip, ip, #8
 800ba32:	e542      	b.n	800b4ba <_vfiprintf_r+0x462>
 800ba34:	2a01      	cmp	r2, #1
 800ba36:	461f      	mov	r7, r3
 800ba38:	f47f ac99 	bne.w	800b36e <_vfiprintf_r+0x316>
 800ba3c:	2d00      	cmp	r5, #0
 800ba3e:	bf08      	it	eq
 800ba40:	2c0a      	cmpeq	r4, #10
 800ba42:	f080 80d5 	bcs.w	800bbf0 <_vfiprintf_r+0xb98>
 800ba46:	ae3c      	add	r6, sp, #240	; 0xf0
 800ba48:	3430      	adds	r4, #48	; 0x30
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	f806 4d01 	strb.w	r4, [r6, #-1]!
 800ba50:	9303      	str	r3, [sp, #12]
 800ba52:	e439      	b.n	800b2c8 <_vfiprintf_r+0x270>
 800ba54:	2a00      	cmp	r2, #0
 800ba56:	d142      	bne.n	800bade <_vfiprintf_r+0xa86>
 800ba58:	9a03      	ldr	r2, [sp, #12]
 800ba5a:	9214      	str	r2, [sp, #80]	; 0x50
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e9cd 2612 	strd	r2, r6, [sp, #72]	; 0x48
 800ba62:	9311      	str	r3, [sp, #68]	; 0x44
 800ba64:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800ba68:	e75d      	b.n	800b926 <_vfiprintf_r+0x8ce>
 800ba6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ba6c:	ae3c      	add	r6, sp, #240	; 0xf0
 800ba6e:	0923      	lsrs	r3, r4, #4
 800ba70:	f004 010f 	and.w	r1, r4, #15
 800ba74:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800ba78:	092a      	lsrs	r2, r5, #4
 800ba7a:	461c      	mov	r4, r3
 800ba7c:	4615      	mov	r5, r2
 800ba7e:	5c43      	ldrb	r3, [r0, r1]
 800ba80:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800ba84:	ea54 0305 	orrs.w	r3, r4, r5
 800ba88:	d1f1      	bne.n	800ba6e <_vfiprintf_r+0xa16>
 800ba8a:	9b00      	ldr	r3, [sp, #0]
 800ba8c:	1b9b      	subs	r3, r3, r6
 800ba8e:	9303      	str	r3, [sp, #12]
 800ba90:	e41a      	b.n	800b2c8 <_vfiprintf_r+0x270>
 800ba92:	f8cd a00c 	str.w	sl, [sp, #12]
 800ba96:	ae3c      	add	r6, sp, #240	; 0xf0
 800ba98:	e416      	b.n	800b2c8 <_vfiprintf_r+0x270>
 800ba9a:	aa10      	add	r2, sp, #64	; 0x40
 800ba9c:	9901      	ldr	r1, [sp, #4]
 800ba9e:	9805      	ldr	r0, [sp, #20]
 800baa0:	f7ff fa94 	bl	800afcc <__sprint_r.part.0>
 800baa4:	2800      	cmp	r0, #0
 800baa6:	f47f af63 	bne.w	800b970 <_vfiprintf_r+0x918>
 800baaa:	46cb      	mov	fp, r9
 800baac:	f7ff bb31 	b.w	800b112 <_vfiprintf_r+0xba>
 800bab0:	aa10      	add	r2, sp, #64	; 0x40
 800bab2:	9901      	ldr	r1, [sp, #4]
 800bab4:	9805      	ldr	r0, [sp, #20]
 800bab6:	f7ff fa89 	bl	800afcc <__sprint_r.part.0>
 800baba:	2800      	cmp	r0, #0
 800babc:	f47f af58 	bne.w	800b970 <_vfiprintf_r+0x918>
 800bac0:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800bac4:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800bac8:	1c48      	adds	r0, r1, #1
 800baca:	46cb      	mov	fp, r9
 800bacc:	e4f5      	b.n	800b4ba <_vfiprintf_r+0x462>
 800bace:	2a00      	cmp	r2, #0
 800bad0:	d179      	bne.n	800bbc6 <_vfiprintf_r+0xb6e>
 800bad2:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800bad6:	2001      	movs	r0, #1
 800bad8:	4611      	mov	r1, r2
 800bada:	46cb      	mov	fp, r9
 800badc:	e4f1      	b.n	800b4c2 <_vfiprintf_r+0x46a>
 800bade:	aa10      	add	r2, sp, #64	; 0x40
 800bae0:	9901      	ldr	r1, [sp, #4]
 800bae2:	9805      	ldr	r0, [sp, #20]
 800bae4:	f7ff fa72 	bl	800afcc <__sprint_r.part.0>
 800bae8:	2800      	cmp	r0, #0
 800baea:	f47f af41 	bne.w	800b970 <_vfiprintf_r+0x918>
 800baee:	e9dd 0211 	ldrd	r0, r2, [sp, #68]	; 0x44
 800baf2:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800baf6:	3001      	adds	r0, #1
 800baf8:	46cb      	mov	fp, r9
 800bafa:	e515      	b.n	800b528 <_vfiprintf_r+0x4d0>
 800bafc:	9d01      	ldr	r5, [sp, #4]
 800bafe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb00:	f001 f82a 	bl	800cb58 <__retarget_lock_acquire_recursive>
 800bb04:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
 800bb08:	b28a      	uxth	r2, r1
 800bb0a:	f7ff babc 	b.w	800b086 <_vfiprintf_r+0x2e>
 800bb0e:	2330      	movs	r3, #48	; 0x30
 800bb10:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800bb14:	f7ff bbd8 	b.w	800b2c8 <_vfiprintf_r+0x270>
 800bb18:	0598      	lsls	r0, r3, #22
 800bb1a:	f100 80d8 	bmi.w	800bcce <_vfiprintf_r+0xc76>
 800bb1e:	680c      	ldr	r4, [r1, #0]
 800bb20:	9206      	str	r2, [sp, #24]
 800bb22:	17e5      	asrs	r5, r4, #31
 800bb24:	4620      	mov	r0, r4
 800bb26:	4629      	mov	r1, r5
 800bb28:	e407      	b.n	800b33a <_vfiprintf_r+0x2e2>
 800bb2a:	059f      	lsls	r7, r3, #22
 800bb2c:	f100 80dc 	bmi.w	800bce8 <_vfiprintf_r+0xc90>
 800bb30:	6814      	ldr	r4, [r2, #0]
 800bb32:	9106      	str	r1, [sp, #24]
 800bb34:	2201      	movs	r2, #1
 800bb36:	2500      	movs	r5, #0
 800bb38:	f7ff bbaa 	b.w	800b290 <_vfiprintf_r+0x238>
 800bb3c:	05b8      	lsls	r0, r7, #22
 800bb3e:	f100 80d9 	bmi.w	800bcf4 <_vfiprintf_r+0xc9c>
 800bb42:	680c      	ldr	r4, [r1, #0]
 800bb44:	9206      	str	r2, [sp, #24]
 800bb46:	2500      	movs	r5, #0
 800bb48:	f7ff bbd9 	b.w	800b2fe <_vfiprintf_r+0x2a6>
 800bb4c:	05be      	lsls	r6, r7, #22
 800bb4e:	f100 80c6 	bmi.w	800bcde <_vfiprintf_r+0xc86>
 800bb52:	6814      	ldr	r4, [r2, #0]
 800bb54:	9306      	str	r3, [sp, #24]
 800bb56:	2500      	movs	r5, #0
 800bb58:	f7ff bb66 	b.w	800b228 <_vfiprintf_r+0x1d0>
 800bb5c:	9a02      	ldr	r2, [sp, #8]
 800bb5e:	4610      	mov	r0, r2
 800bb60:	17d1      	asrs	r1, r2, #31
 800bb62:	e9c3 0100 	strd	r0, r1, [r3]
 800bb66:	f7ff bab3 	b.w	800b0d0 <_vfiprintf_r+0x78>
 800bb6a:	9b08      	ldr	r3, [sp, #32]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	f040 809d 	bne.w	800bcac <_vfiprintf_r+0xc54>
 800bb72:	4611      	mov	r1, r2
 800bb74:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800bb78:	2001      	movs	r0, #1
 800bb7a:	46cb      	mov	fp, r9
 800bb7c:	e4a1      	b.n	800b4c2 <_vfiprintf_r+0x46a>
 800bb7e:	4249      	negs	r1, r1
 800bb80:	9104      	str	r1, [sp, #16]
 800bb82:	9206      	str	r2, [sp, #24]
 800bb84:	e5ca      	b.n	800b71c <_vfiprintf_r+0x6c4>
 800bb86:	9c01      	ldr	r4, [sp, #4]
 800bb88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb8a:	f000 ffed 	bl	800cb68 <__retarget_lock_release_recursive>
 800bb8e:	89a3      	ldrh	r3, [r4, #12]
 800bb90:	e6f6      	b.n	800b980 <_vfiprintf_r+0x928>
 800bb92:	aa10      	add	r2, sp, #64	; 0x40
 800bb94:	9901      	ldr	r1, [sp, #4]
 800bb96:	9805      	ldr	r0, [sp, #20]
 800bb98:	f7ff fa18 	bl	800afcc <__sprint_r.part.0>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	f47f aee7 	bne.w	800b970 <_vfiprintf_r+0x918>
 800bba2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bba4:	e6c7      	b.n	800b936 <_vfiprintf_r+0x8de>
 800bba6:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800bba8:	f000 ffde 	bl	800cb68 <__retarget_lock_release_recursive>
 800bbac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbb0:	9302      	str	r3, [sp, #8]
 800bbb2:	e6e8      	b.n	800b986 <_vfiprintf_r+0x92e>
 800bbb4:	4653      	mov	r3, sl
 800bbb6:	2b06      	cmp	r3, #6
 800bbb8:	bf28      	it	cs
 800bbba:	2306      	movcs	r3, #6
 800bbbc:	9303      	str	r3, [sp, #12]
 800bbbe:	9406      	str	r4, [sp, #24]
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	4e5d      	ldr	r6, [pc, #372]	; (800bd38 <_vfiprintf_r+0xce0>)
 800bbc4:	e415      	b.n	800b3f2 <_vfiprintf_r+0x39a>
 800bbc6:	aa10      	add	r2, sp, #64	; 0x40
 800bbc8:	9901      	ldr	r1, [sp, #4]
 800bbca:	9805      	ldr	r0, [sp, #20]
 800bbcc:	f7ff f9fe 	bl	800afcc <__sprint_r.part.0>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	f47f aecd 	bne.w	800b970 <_vfiprintf_r+0x918>
 800bbd6:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800bbda:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800bbde:	1c48      	adds	r0, r1, #1
 800bbe0:	46cb      	mov	fp, r9
 800bbe2:	e46e      	b.n	800b4c2 <_vfiprintf_r+0x46a>
 800bbe4:	2d00      	cmp	r5, #0
 800bbe6:	bf08      	it	eq
 800bbe8:	2c0a      	cmpeq	r4, #10
 800bbea:	461f      	mov	r7, r3
 800bbec:	f4ff af2b 	bcc.w	800ba46 <_vfiprintf_r+0x9ee>
 800bbf0:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	9703      	str	r7, [sp, #12]
 800bbf8:	f8cd 801c 	str.w	r8, [sp, #28]
 800bbfc:	ae3c      	add	r6, sp, #240	; 0xf0
 800bbfe:	4617      	mov	r7, r2
 800bc00:	4698      	mov	r8, r3
 800bc02:	e00b      	b.n	800bc1c <_vfiprintf_r+0xbc4>
 800bc04:	2300      	movs	r3, #0
 800bc06:	4620      	mov	r0, r4
 800bc08:	4629      	mov	r1, r5
 800bc0a:	220a      	movs	r2, #10
 800bc0c:	f001 fe38 	bl	800d880 <__aeabi_uldivmod>
 800bc10:	4604      	mov	r4, r0
 800bc12:	460d      	mov	r5, r1
 800bc14:	ea54 0305 	orrs.w	r3, r4, r5
 800bc18:	f43f aeb9 	beq.w	800b98e <_vfiprintf_r+0x936>
 800bc1c:	220a      	movs	r2, #10
 800bc1e:	2300      	movs	r3, #0
 800bc20:	4620      	mov	r0, r4
 800bc22:	4629      	mov	r1, r5
 800bc24:	f001 fe2c 	bl	800d880 <__aeabi_uldivmod>
 800bc28:	3230      	adds	r2, #48	; 0x30
 800bc2a:	f806 2c01 	strb.w	r2, [r6, #-1]
 800bc2e:	3701      	adds	r7, #1
 800bc30:	3e01      	subs	r6, #1
 800bc32:	f1b8 0f00 	cmp.w	r8, #0
 800bc36:	d0e5      	beq.n	800bc04 <_vfiprintf_r+0xbac>
 800bc38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	42bb      	cmp	r3, r7
 800bc3e:	d1e1      	bne.n	800bc04 <_vfiprintf_r+0xbac>
 800bc40:	2fff      	cmp	r7, #255	; 0xff
 800bc42:	d0df      	beq.n	800bc04 <_vfiprintf_r+0xbac>
 800bc44:	2d00      	cmp	r5, #0
 800bc46:	bf08      	it	eq
 800bc48:	2c0a      	cmpeq	r4, #10
 800bc4a:	d3db      	bcc.n	800bc04 <_vfiprintf_r+0xbac>
 800bc4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bc50:	1af6      	subs	r6, r6, r3
 800bc52:	461a      	mov	r2, r3
 800bc54:	4630      	mov	r0, r6
 800bc56:	f001 fc61 	bl	800d51c <strncpy>
 800bc5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc5c:	785f      	ldrb	r7, [r3, #1]
 800bc5e:	2f00      	cmp	r7, #0
 800bc60:	d0d0      	beq.n	800bc04 <_vfiprintf_r+0xbac>
 800bc62:	3301      	adds	r3, #1
 800bc64:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc66:	2700      	movs	r7, #0
 800bc68:	e7cc      	b.n	800bc04 <_vfiprintf_r+0xbac>
 800bc6a:	2a01      	cmp	r2, #1
 800bc6c:	f47f ab7f 	bne.w	800b36e <_vfiprintf_r+0x316>
 800bc70:	e6e9      	b.n	800ba46 <_vfiprintf_r+0x9ee>
 800bc72:	4663      	mov	r3, ip
 800bc74:	e44c      	b.n	800b510 <_vfiprintf_r+0x4b8>
 800bc76:	aa10      	add	r2, sp, #64	; 0x40
 800bc78:	9901      	ldr	r1, [sp, #4]
 800bc7a:	9805      	ldr	r0, [sp, #20]
 800bc7c:	f7ff f9a6 	bl	800afcc <__sprint_r.part.0>
 800bc80:	2800      	cmp	r0, #0
 800bc82:	f47f ae75 	bne.w	800b970 <_vfiprintf_r+0x918>
 800bc86:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800bc8a:	46cb      	mov	fp, r9
 800bc8c:	1c48      	adds	r0, r1, #1
 800bc8e:	f7ff bbf6 	b.w	800b47e <_vfiprintf_r+0x426>
 800bc92:	9a02      	ldr	r2, [sp, #8]
 800bc94:	601a      	str	r2, [r3, #0]
 800bc96:	f7ff ba1b 	b.w	800b0d0 <_vfiprintf_r+0x78>
 800bc9a:	4630      	mov	r0, r6
 800bc9c:	9406      	str	r4, [sp, #24]
 800bc9e:	f7ff f8ef 	bl	800ae80 <strlen>
 800bca2:	f04f 0a00 	mov.w	sl, #0
 800bca6:	9003      	str	r0, [sp, #12]
 800bca8:	f7ff bb0e 	b.w	800b2c8 <_vfiprintf_r+0x270>
 800bcac:	ab0f      	add	r3, sp, #60	; 0x3c
 800bcae:	2202      	movs	r2, #2
 800bcb0:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
 800bcb4:	2001      	movs	r0, #1
 800bcb6:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800bcba:	e6b5      	b.n	800ba28 <_vfiprintf_r+0x9d0>
 800bcbc:	46e6      	mov	lr, ip
 800bcbe:	f7ff bbcf 	b.w	800b460 <_vfiprintf_r+0x408>
 800bcc2:	1c48      	adds	r0, r1, #1
 800bcc4:	e466      	b.n	800b594 <_vfiprintf_r+0x53c>
 800bcc6:	9a02      	ldr	r2, [sp, #8]
 800bcc8:	801a      	strh	r2, [r3, #0]
 800bcca:	f7ff ba01 	b.w	800b0d0 <_vfiprintf_r+0x78>
 800bcce:	f991 4000 	ldrsb.w	r4, [r1]
 800bcd2:	9206      	str	r2, [sp, #24]
 800bcd4:	17e5      	asrs	r5, r4, #31
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	4629      	mov	r1, r5
 800bcda:	f7ff bb2e 	b.w	800b33a <_vfiprintf_r+0x2e2>
 800bcde:	7814      	ldrb	r4, [r2, #0]
 800bce0:	9306      	str	r3, [sp, #24]
 800bce2:	2500      	movs	r5, #0
 800bce4:	f7ff baa0 	b.w	800b228 <_vfiprintf_r+0x1d0>
 800bce8:	7814      	ldrb	r4, [r2, #0]
 800bcea:	9106      	str	r1, [sp, #24]
 800bcec:	2500      	movs	r5, #0
 800bcee:	2201      	movs	r2, #1
 800bcf0:	f7ff bace 	b.w	800b290 <_vfiprintf_r+0x238>
 800bcf4:	780c      	ldrb	r4, [r1, #0]
 800bcf6:	9206      	str	r2, [sp, #24]
 800bcf8:	2500      	movs	r5, #0
 800bcfa:	f7ff bb00 	b.w	800b2fe <_vfiprintf_r+0x2a6>
 800bcfe:	f8cd a00c 	str.w	sl, [sp, #12]
 800bd02:	9406      	str	r4, [sp, #24]
 800bd04:	4682      	mov	sl, r0
 800bd06:	f7ff badf 	b.w	800b2c8 <_vfiprintf_r+0x270>
 800bd0a:	4663      	mov	r3, ip
 800bd0c:	4684      	mov	ip, r0
 800bd0e:	e5f1      	b.n	800b8f4 <_vfiprintf_r+0x89c>
 800bd10:	9805      	ldr	r0, [sp, #20]
 800bd12:	9901      	ldr	r1, [sp, #4]
 800bd14:	aa10      	add	r2, sp, #64	; 0x40
 800bd16:	f7ff f959 	bl	800afcc <__sprint_r.part.0>
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	f43f ae26 	beq.w	800b96c <_vfiprintf_r+0x914>
 800bd20:	e626      	b.n	800b970 <_vfiprintf_r+0x918>
 800bd22:	9806      	ldr	r0, [sp, #24]
 800bd24:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bd28:	6802      	ldr	r2, [r0, #0]
 800bd2a:	ea42 7ae2 	orr.w	sl, r2, r2, asr #31
 800bd2e:	1d02      	adds	r2, r0, #4
 800bd30:	4688      	mov	r8, r1
 800bd32:	9206      	str	r2, [sp, #24]
 800bd34:	f7ff ba01 	b.w	800b13a <_vfiprintf_r+0xe2>
 800bd38:	0800e1e4 	.word	0x0800e1e4

0800bd3c <vfiprintf>:
 800bd3c:	b410      	push	{r4}
 800bd3e:	4c04      	ldr	r4, [pc, #16]	; (800bd50 <vfiprintf+0x14>)
 800bd40:	4613      	mov	r3, r2
 800bd42:	460a      	mov	r2, r1
 800bd44:	4601      	mov	r1, r0
 800bd46:	6820      	ldr	r0, [r4, #0]
 800bd48:	bc10      	pop	{r4}
 800bd4a:	f7ff b985 	b.w	800b058 <_vfiprintf_r>
 800bd4e:	bf00      	nop
 800bd50:	200004ec 	.word	0x200004ec

0800bd54 <__sbprintf>:
 800bd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd58:	460c      	mov	r4, r1
 800bd5a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 800bd5e:	8989      	ldrh	r1, [r1, #12]
 800bd60:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800bd62:	89e5      	ldrh	r5, [r4, #14]
 800bd64:	9619      	str	r6, [sp, #100]	; 0x64
 800bd66:	f021 0102 	bic.w	r1, r1, #2
 800bd6a:	4606      	mov	r6, r0
 800bd6c:	69e0      	ldr	r0, [r4, #28]
 800bd6e:	f8ad 100c 	strh.w	r1, [sp, #12]
 800bd72:	4617      	mov	r7, r2
 800bd74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bd78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bd7a:	f8ad 500e 	strh.w	r5, [sp, #14]
 800bd7e:	4698      	mov	r8, r3
 800bd80:	ad1a      	add	r5, sp, #104	; 0x68
 800bd82:	2300      	movs	r3, #0
 800bd84:	9007      	str	r0, [sp, #28]
 800bd86:	a816      	add	r0, sp, #88	; 0x58
 800bd88:	9209      	str	r2, [sp, #36]	; 0x24
 800bd8a:	9306      	str	r3, [sp, #24]
 800bd8c:	9500      	str	r5, [sp, #0]
 800bd8e:	9504      	str	r5, [sp, #16]
 800bd90:	9102      	str	r1, [sp, #8]
 800bd92:	9105      	str	r1, [sp, #20]
 800bd94:	f000 fed8 	bl	800cb48 <__retarget_lock_init_recursive>
 800bd98:	4643      	mov	r3, r8
 800bd9a:	463a      	mov	r2, r7
 800bd9c:	4669      	mov	r1, sp
 800bd9e:	4630      	mov	r0, r6
 800bda0:	f7ff f95a 	bl	800b058 <_vfiprintf_r>
 800bda4:	1e05      	subs	r5, r0, #0
 800bda6:	db07      	blt.n	800bdb8 <__sbprintf+0x64>
 800bda8:	4630      	mov	r0, r6
 800bdaa:	4669      	mov	r1, sp
 800bdac:	f000 f93a 	bl	800c024 <_fflush_r>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	bf18      	it	ne
 800bdb4:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800bdb8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800bdbc:	065b      	lsls	r3, r3, #25
 800bdbe:	d503      	bpl.n	800bdc8 <__sbprintf+0x74>
 800bdc0:	89a3      	ldrh	r3, [r4, #12]
 800bdc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdc6:	81a3      	strh	r3, [r4, #12]
 800bdc8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800bdca:	f000 fec1 	bl	800cb50 <__retarget_lock_close_recursive>
 800bdce:	4628      	mov	r0, r5
 800bdd0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 800bdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bdd8 <__swsetup_r>:
 800bdd8:	b538      	push	{r3, r4, r5, lr}
 800bdda:	4b31      	ldr	r3, [pc, #196]	; (800bea0 <__swsetup_r+0xc8>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4605      	mov	r5, r0
 800bde0:	460c      	mov	r4, r1
 800bde2:	b113      	cbz	r3, 800bdea <__swsetup_r+0x12>
 800bde4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bde6:	2a00      	cmp	r2, #0
 800bde8:	d03a      	beq.n	800be60 <__swsetup_r+0x88>
 800bdea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bdee:	b293      	uxth	r3, r2
 800bdf0:	0718      	lsls	r0, r3, #28
 800bdf2:	d50c      	bpl.n	800be0e <__swsetup_r+0x36>
 800bdf4:	6920      	ldr	r0, [r4, #16]
 800bdf6:	b1a8      	cbz	r0, 800be24 <__swsetup_r+0x4c>
 800bdf8:	f013 0201 	ands.w	r2, r3, #1
 800bdfc:	d020      	beq.n	800be40 <__swsetup_r+0x68>
 800bdfe:	6963      	ldr	r3, [r4, #20]
 800be00:	2200      	movs	r2, #0
 800be02:	425b      	negs	r3, r3
 800be04:	61a3      	str	r3, [r4, #24]
 800be06:	60a2      	str	r2, [r4, #8]
 800be08:	b300      	cbz	r0, 800be4c <__swsetup_r+0x74>
 800be0a:	2000      	movs	r0, #0
 800be0c:	bd38      	pop	{r3, r4, r5, pc}
 800be0e:	06d9      	lsls	r1, r3, #27
 800be10:	d53e      	bpl.n	800be90 <__swsetup_r+0xb8>
 800be12:	0758      	lsls	r0, r3, #29
 800be14:	d428      	bmi.n	800be68 <__swsetup_r+0x90>
 800be16:	6920      	ldr	r0, [r4, #16]
 800be18:	f042 0308 	orr.w	r3, r2, #8
 800be1c:	81a3      	strh	r3, [r4, #12]
 800be1e:	b29b      	uxth	r3, r3
 800be20:	2800      	cmp	r0, #0
 800be22:	d1e9      	bne.n	800bdf8 <__swsetup_r+0x20>
 800be24:	f403 7220 	and.w	r2, r3, #640	; 0x280
 800be28:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800be2c:	d0e4      	beq.n	800bdf8 <__swsetup_r+0x20>
 800be2e:	4628      	mov	r0, r5
 800be30:	4621      	mov	r1, r4
 800be32:	f000 fec9 	bl	800cbc8 <__smakebuf_r>
 800be36:	89a3      	ldrh	r3, [r4, #12]
 800be38:	6920      	ldr	r0, [r4, #16]
 800be3a:	f013 0201 	ands.w	r2, r3, #1
 800be3e:	d1de      	bne.n	800bdfe <__swsetup_r+0x26>
 800be40:	0799      	lsls	r1, r3, #30
 800be42:	bf58      	it	pl
 800be44:	6962      	ldrpl	r2, [r4, #20]
 800be46:	60a2      	str	r2, [r4, #8]
 800be48:	2800      	cmp	r0, #0
 800be4a:	d1de      	bne.n	800be0a <__swsetup_r+0x32>
 800be4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be50:	061a      	lsls	r2, r3, #24
 800be52:	d5db      	bpl.n	800be0c <__swsetup_r+0x34>
 800be54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be58:	81a3      	strh	r3, [r4, #12]
 800be5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be5e:	bd38      	pop	{r3, r4, r5, pc}
 800be60:	4618      	mov	r0, r3
 800be62:	f000 f98b 	bl	800c17c <__sinit>
 800be66:	e7c0      	b.n	800bdea <__swsetup_r+0x12>
 800be68:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800be6a:	b151      	cbz	r1, 800be82 <__swsetup_r+0xaa>
 800be6c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800be70:	4299      	cmp	r1, r3
 800be72:	d004      	beq.n	800be7e <__swsetup_r+0xa6>
 800be74:	4628      	mov	r0, r5
 800be76:	f000 fb29 	bl	800c4cc <_free_r>
 800be7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be7e:	2300      	movs	r3, #0
 800be80:	6323      	str	r3, [r4, #48]	; 0x30
 800be82:	2300      	movs	r3, #0
 800be84:	6920      	ldr	r0, [r4, #16]
 800be86:	6063      	str	r3, [r4, #4]
 800be88:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 800be8c:	6020      	str	r0, [r4, #0]
 800be8e:	e7c3      	b.n	800be18 <__swsetup_r+0x40>
 800be90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be94:	2309      	movs	r3, #9
 800be96:	602b      	str	r3, [r5, #0]
 800be98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be9c:	81a2      	strh	r2, [r4, #12]
 800be9e:	bd38      	pop	{r3, r4, r5, pc}
 800bea0:	200004ec 	.word	0x200004ec

0800bea4 <bzero>:
 800bea4:	460a      	mov	r2, r1
 800bea6:	2100      	movs	r1, #0
 800bea8:	f7fe be9e 	b.w	800abe8 <memset>

0800beac <_close_r>:
 800beac:	b538      	push	{r3, r4, r5, lr}
 800beae:	4c07      	ldr	r4, [pc, #28]	; (800becc <_close_r+0x20>)
 800beb0:	2300      	movs	r3, #0
 800beb2:	4605      	mov	r5, r0
 800beb4:	4608      	mov	r0, r1
 800beb6:	6023      	str	r3, [r4, #0]
 800beb8:	f001 fe62 	bl	800db80 <_close>
 800bebc:	1c43      	adds	r3, r0, #1
 800bebe:	d000      	beq.n	800bec2 <_close_r+0x16>
 800bec0:	bd38      	pop	{r3, r4, r5, pc}
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d0fb      	beq.n	800bec0 <_close_r+0x14>
 800bec8:	602b      	str	r3, [r5, #0]
 800beca:	bd38      	pop	{r3, r4, r5, pc}
 800becc:	20001638 	.word	0x20001638

0800bed0 <__sflush_r>:
 800bed0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beda:	460c      	mov	r4, r1
 800bedc:	0711      	lsls	r1, r2, #28
 800bede:	4680      	mov	r8, r0
 800bee0:	d444      	bmi.n	800bf6c <__sflush_r+0x9c>
 800bee2:	6862      	ldr	r2, [r4, #4]
 800bee4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bee8:	2a00      	cmp	r2, #0
 800beea:	81a3      	strh	r3, [r4, #12]
 800beec:	dd59      	ble.n	800bfa2 <__sflush_r+0xd2>
 800beee:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800bef0:	2d00      	cmp	r5, #0
 800bef2:	d053      	beq.n	800bf9c <__sflush_r+0xcc>
 800bef4:	2200      	movs	r2, #0
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	f8d8 6000 	ldr.w	r6, [r8]
 800befc:	69e1      	ldr	r1, [r4, #28]
 800befe:	f8c8 2000 	str.w	r2, [r8]
 800bf02:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 800bf06:	f040 8083 	bne.w	800c010 <__sflush_r+0x140>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	4640      	mov	r0, r8
 800bf0e:	47a8      	blx	r5
 800bf10:	1c42      	adds	r2, r0, #1
 800bf12:	d04a      	beq.n	800bfaa <__sflush_r+0xda>
 800bf14:	89a3      	ldrh	r3, [r4, #12]
 800bf16:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800bf18:	69e1      	ldr	r1, [r4, #28]
 800bf1a:	075b      	lsls	r3, r3, #29
 800bf1c:	d505      	bpl.n	800bf2a <__sflush_r+0x5a>
 800bf1e:	6862      	ldr	r2, [r4, #4]
 800bf20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bf22:	1a80      	subs	r0, r0, r2
 800bf24:	b10b      	cbz	r3, 800bf2a <__sflush_r+0x5a>
 800bf26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bf28:	1ac0      	subs	r0, r0, r3
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	4640      	mov	r0, r8
 800bf30:	47a8      	blx	r5
 800bf32:	1c47      	adds	r7, r0, #1
 800bf34:	d045      	beq.n	800bfc2 <__sflush_r+0xf2>
 800bf36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf3a:	6922      	ldr	r2, [r4, #16]
 800bf3c:	6022      	str	r2, [r4, #0]
 800bf3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf42:	2200      	movs	r2, #0
 800bf44:	81a3      	strh	r3, [r4, #12]
 800bf46:	04db      	lsls	r3, r3, #19
 800bf48:	6062      	str	r2, [r4, #4]
 800bf4a:	d500      	bpl.n	800bf4e <__sflush_r+0x7e>
 800bf4c:	6520      	str	r0, [r4, #80]	; 0x50
 800bf4e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bf50:	f8c8 6000 	str.w	r6, [r8]
 800bf54:	b311      	cbz	r1, 800bf9c <__sflush_r+0xcc>
 800bf56:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800bf5a:	4299      	cmp	r1, r3
 800bf5c:	d002      	beq.n	800bf64 <__sflush_r+0x94>
 800bf5e:	4640      	mov	r0, r8
 800bf60:	f000 fab4 	bl	800c4cc <_free_r>
 800bf64:	2000      	movs	r0, #0
 800bf66:	6320      	str	r0, [r4, #48]	; 0x30
 800bf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf6c:	6926      	ldr	r6, [r4, #16]
 800bf6e:	b1ae      	cbz	r6, 800bf9c <__sflush_r+0xcc>
 800bf70:	6825      	ldr	r5, [r4, #0]
 800bf72:	6026      	str	r6, [r4, #0]
 800bf74:	0792      	lsls	r2, r2, #30
 800bf76:	bf0c      	ite	eq
 800bf78:	6963      	ldreq	r3, [r4, #20]
 800bf7a:	2300      	movne	r3, #0
 800bf7c:	1bad      	subs	r5, r5, r6
 800bf7e:	60a3      	str	r3, [r4, #8]
 800bf80:	e00a      	b.n	800bf98 <__sflush_r+0xc8>
 800bf82:	462b      	mov	r3, r5
 800bf84:	4632      	mov	r2, r6
 800bf86:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800bf88:	69e1      	ldr	r1, [r4, #28]
 800bf8a:	4640      	mov	r0, r8
 800bf8c:	47b8      	blx	r7
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	eba5 0500 	sub.w	r5, r5, r0
 800bf94:	4406      	add	r6, r0
 800bf96:	dd2b      	ble.n	800bff0 <__sflush_r+0x120>
 800bf98:	2d00      	cmp	r5, #0
 800bf9a:	dcf2      	bgt.n	800bf82 <__sflush_r+0xb2>
 800bf9c:	2000      	movs	r0, #0
 800bf9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfa2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bfa4:	2a00      	cmp	r2, #0
 800bfa6:	dca2      	bgt.n	800beee <__sflush_r+0x1e>
 800bfa8:	e7f8      	b.n	800bf9c <__sflush_r+0xcc>
 800bfaa:	f8d8 3000 	ldr.w	r3, [r8]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d0b0      	beq.n	800bf14 <__sflush_r+0x44>
 800bfb2:	2b1d      	cmp	r3, #29
 800bfb4:	d001      	beq.n	800bfba <__sflush_r+0xea>
 800bfb6:	2b16      	cmp	r3, #22
 800bfb8:	d12c      	bne.n	800c014 <__sflush_r+0x144>
 800bfba:	f8c8 6000 	str.w	r6, [r8]
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	e7ed      	b.n	800bf9e <__sflush_r+0xce>
 800bfc2:	f8d8 1000 	ldr.w	r1, [r8]
 800bfc6:	291d      	cmp	r1, #29
 800bfc8:	d81a      	bhi.n	800c000 <__sflush_r+0x130>
 800bfca:	4b15      	ldr	r3, [pc, #84]	; (800c020 <__sflush_r+0x150>)
 800bfcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfd0:	40cb      	lsrs	r3, r1
 800bfd2:	43db      	mvns	r3, r3
 800bfd4:	f013 0301 	ands.w	r3, r3, #1
 800bfd8:	d114      	bne.n	800c004 <__sflush_r+0x134>
 800bfda:	6925      	ldr	r5, [r4, #16]
 800bfdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bfe0:	e9c4 5300 	strd	r5, r3, [r4]
 800bfe4:	04d5      	lsls	r5, r2, #19
 800bfe6:	81a2      	strh	r2, [r4, #12]
 800bfe8:	d5b1      	bpl.n	800bf4e <__sflush_r+0x7e>
 800bfea:	2900      	cmp	r1, #0
 800bfec:	d1af      	bne.n	800bf4e <__sflush_r+0x7e>
 800bfee:	e7ad      	b.n	800bf4c <__sflush_r+0x7c>
 800bff0:	89a3      	ldrh	r3, [r4, #12]
 800bff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bff6:	81a3      	strh	r3, [r4, #12]
 800bff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c000:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c008:	81a2      	strh	r2, [r4, #12]
 800c00a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c00e:	e7c6      	b.n	800bf9e <__sflush_r+0xce>
 800c010:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c012:	e782      	b.n	800bf1a <__sflush_r+0x4a>
 800c014:	89a3      	ldrh	r3, [r4, #12]
 800c016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c01a:	81a3      	strh	r3, [r4, #12]
 800c01c:	e7bf      	b.n	800bf9e <__sflush_r+0xce>
 800c01e:	bf00      	nop
 800c020:	20400001 	.word	0x20400001

0800c024 <_fflush_r>:
 800c024:	b538      	push	{r3, r4, r5, lr}
 800c026:	460d      	mov	r5, r1
 800c028:	4604      	mov	r4, r0
 800c02a:	b108      	cbz	r0, 800c030 <_fflush_r+0xc>
 800c02c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c02e:	b1a3      	cbz	r3, 800c05a <_fflush_r+0x36>
 800c030:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 800c034:	b1b8      	cbz	r0, 800c066 <_fflush_r+0x42>
 800c036:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c038:	07db      	lsls	r3, r3, #31
 800c03a:	d401      	bmi.n	800c040 <_fflush_r+0x1c>
 800c03c:	0581      	lsls	r1, r0, #22
 800c03e:	d51a      	bpl.n	800c076 <_fflush_r+0x52>
 800c040:	4620      	mov	r0, r4
 800c042:	4629      	mov	r1, r5
 800c044:	f7ff ff44 	bl	800bed0 <__sflush_r>
 800c048:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c04a:	07da      	lsls	r2, r3, #31
 800c04c:	4604      	mov	r4, r0
 800c04e:	d402      	bmi.n	800c056 <_fflush_r+0x32>
 800c050:	89ab      	ldrh	r3, [r5, #12]
 800c052:	059b      	lsls	r3, r3, #22
 800c054:	d50a      	bpl.n	800c06c <_fflush_r+0x48>
 800c056:	4620      	mov	r0, r4
 800c058:	bd38      	pop	{r3, r4, r5, pc}
 800c05a:	f000 f88f 	bl	800c17c <__sinit>
 800c05e:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 800c062:	2800      	cmp	r0, #0
 800c064:	d1e7      	bne.n	800c036 <_fflush_r+0x12>
 800c066:	4604      	mov	r4, r0
 800c068:	4620      	mov	r0, r4
 800c06a:	bd38      	pop	{r3, r4, r5, pc}
 800c06c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c06e:	f000 fd7b 	bl	800cb68 <__retarget_lock_release_recursive>
 800c072:	4620      	mov	r0, r4
 800c074:	bd38      	pop	{r3, r4, r5, pc}
 800c076:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c078:	f000 fd6e 	bl	800cb58 <__retarget_lock_acquire_recursive>
 800c07c:	e7e0      	b.n	800c040 <_fflush_r+0x1c>
 800c07e:	bf00      	nop

0800c080 <fflush>:
 800c080:	b120      	cbz	r0, 800c08c <fflush+0xc>
 800c082:	4b05      	ldr	r3, [pc, #20]	; (800c098 <fflush+0x18>)
 800c084:	4601      	mov	r1, r0
 800c086:	6818      	ldr	r0, [r3, #0]
 800c088:	f7ff bfcc 	b.w	800c024 <_fflush_r>
 800c08c:	4b03      	ldr	r3, [pc, #12]	; (800c09c <fflush+0x1c>)
 800c08e:	4904      	ldr	r1, [pc, #16]	; (800c0a0 <fflush+0x20>)
 800c090:	6818      	ldr	r0, [r3, #0]
 800c092:	f000 bcc7 	b.w	800ca24 <_fwalk_reent>
 800c096:	bf00      	nop
 800c098:	200004ec 	.word	0x200004ec
 800c09c:	0800e1b8 	.word	0x0800e1b8
 800c0a0:	0800c025 	.word	0x0800c025

0800c0a4 <std>:
 800c0a4:	b510      	push	{r4, lr}
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	4604      	mov	r4, r0
 800c0aa:	8181      	strh	r1, [r0, #12]
 800c0ac:	81c2      	strh	r2, [r0, #14]
 800c0ae:	e9c0 3300 	strd	r3, r3, [r0]
 800c0b2:	6083      	str	r3, [r0, #8]
 800c0b4:	6643      	str	r3, [r0, #100]	; 0x64
 800c0b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c0ba:	6183      	str	r3, [r0, #24]
 800c0bc:	4619      	mov	r1, r3
 800c0be:	2208      	movs	r2, #8
 800c0c0:	305c      	adds	r0, #92	; 0x5c
 800c0c2:	f7fe fd91 	bl	800abe8 <memset>
 800c0c6:	4807      	ldr	r0, [pc, #28]	; (800c0e4 <std+0x40>)
 800c0c8:	4907      	ldr	r1, [pc, #28]	; (800c0e8 <std+0x44>)
 800c0ca:	4a08      	ldr	r2, [pc, #32]	; (800c0ec <std+0x48>)
 800c0cc:	4b08      	ldr	r3, [pc, #32]	; (800c0f0 <std+0x4c>)
 800c0ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0d0:	e9c4 4007 	strd	r4, r0, [r4, #28]
 800c0d4:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
 800c0d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0e0:	f000 bd32 	b.w	800cb48 <__retarget_lock_init_recursive>
 800c0e4:	0800d1b5 	.word	0x0800d1b5
 800c0e8:	0800d1dd 	.word	0x0800d1dd
 800c0ec:	0800d219 	.word	0x0800d219
 800c0f0:	0800d239 	.word	0x0800d239

0800c0f4 <_cleanup_r>:
 800c0f4:	4901      	ldr	r1, [pc, #4]	; (800c0fc <_cleanup_r+0x8>)
 800c0f6:	f000 bc95 	b.w	800ca24 <_fwalk_reent>
 800c0fa:	bf00      	nop
 800c0fc:	0800d751 	.word	0x0800d751

0800c100 <__fp_lock>:
 800c100:	b508      	push	{r3, lr}
 800c102:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800c104:	07da      	lsls	r2, r3, #31
 800c106:	d402      	bmi.n	800c10e <__fp_lock+0xe>
 800c108:	8983      	ldrh	r3, [r0, #12]
 800c10a:	059b      	lsls	r3, r3, #22
 800c10c:	d501      	bpl.n	800c112 <__fp_lock+0x12>
 800c10e:	2000      	movs	r0, #0
 800c110:	bd08      	pop	{r3, pc}
 800c112:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800c114:	f000 fd20 	bl	800cb58 <__retarget_lock_acquire_recursive>
 800c118:	2000      	movs	r0, #0
 800c11a:	bd08      	pop	{r3, pc}

0800c11c <__fp_unlock>:
 800c11c:	b508      	push	{r3, lr}
 800c11e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800c120:	07da      	lsls	r2, r3, #31
 800c122:	d402      	bmi.n	800c12a <__fp_unlock+0xe>
 800c124:	8983      	ldrh	r3, [r0, #12]
 800c126:	059b      	lsls	r3, r3, #22
 800c128:	d501      	bpl.n	800c12e <__fp_unlock+0x12>
 800c12a:	2000      	movs	r0, #0
 800c12c:	bd08      	pop	{r3, pc}
 800c12e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800c130:	f000 fd1a 	bl	800cb68 <__retarget_lock_release_recursive>
 800c134:	2000      	movs	r0, #0
 800c136:	bd08      	pop	{r3, pc}

0800c138 <__sfmoreglue>:
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	1e4a      	subs	r2, r1, #1
 800c13c:	2568      	movs	r5, #104	; 0x68
 800c13e:	fb05 f502 	mul.w	r5, r5, r2
 800c142:	460e      	mov	r6, r1
 800c144:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c148:	f7fe f9ac 	bl	800a4a4 <_malloc_r>
 800c14c:	4604      	mov	r4, r0
 800c14e:	b140      	cbz	r0, 800c162 <__sfmoreglue+0x2a>
 800c150:	2100      	movs	r1, #0
 800c152:	300c      	adds	r0, #12
 800c154:	6066      	str	r6, [r4, #4]
 800c156:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c15a:	6021      	str	r1, [r4, #0]
 800c15c:	60a0      	str	r0, [r4, #8]
 800c15e:	f7fe fd43 	bl	800abe8 <memset>
 800c162:	4620      	mov	r0, r4
 800c164:	bd70      	pop	{r4, r5, r6, pc}
 800c166:	bf00      	nop

0800c168 <_cleanup>:
 800c168:	4b02      	ldr	r3, [pc, #8]	; (800c174 <_cleanup+0xc>)
 800c16a:	4903      	ldr	r1, [pc, #12]	; (800c178 <_cleanup+0x10>)
 800c16c:	6818      	ldr	r0, [r3, #0]
 800c16e:	f000 bc59 	b.w	800ca24 <_fwalk_reent>
 800c172:	bf00      	nop
 800c174:	0800e1b8 	.word	0x0800e1b8
 800c178:	0800d751 	.word	0x0800d751

0800c17c <__sinit>:
 800c17c:	b510      	push	{r4, lr}
 800c17e:	4604      	mov	r4, r0
 800c180:	4812      	ldr	r0, [pc, #72]	; (800c1cc <__sinit+0x50>)
 800c182:	f000 fce9 	bl	800cb58 <__retarget_lock_acquire_recursive>
 800c186:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c188:	b9d2      	cbnz	r2, 800c1c0 <__sinit+0x44>
 800c18a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800c18e:	4810      	ldr	r0, [pc, #64]	; (800c1d0 <__sinit+0x54>)
 800c190:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800c194:	2103      	movs	r1, #3
 800c196:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800c19a:	63e0      	str	r0, [r4, #60]	; 0x3c
 800c19c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
 800c1a0:	6860      	ldr	r0, [r4, #4]
 800c1a2:	2104      	movs	r1, #4
 800c1a4:	f7ff ff7e 	bl	800c0a4 <std>
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	2109      	movs	r1, #9
 800c1ac:	68a0      	ldr	r0, [r4, #8]
 800c1ae:	f7ff ff79 	bl	800c0a4 <std>
 800c1b2:	2202      	movs	r2, #2
 800c1b4:	2112      	movs	r1, #18
 800c1b6:	68e0      	ldr	r0, [r4, #12]
 800c1b8:	f7ff ff74 	bl	800c0a4 <std>
 800c1bc:	2301      	movs	r3, #1
 800c1be:	63a3      	str	r3, [r4, #56]	; 0x38
 800c1c0:	4802      	ldr	r0, [pc, #8]	; (800c1cc <__sinit+0x50>)
 800c1c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1c6:	f000 bccf 	b.w	800cb68 <__retarget_lock_release_recursive>
 800c1ca:	bf00      	nop
 800c1cc:	20001620 	.word	0x20001620
 800c1d0:	0800c0f5 	.word	0x0800c0f5

0800c1d4 <__sfp>:
 800c1d4:	b570      	push	{r4, r5, r6, lr}
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	4824      	ldr	r0, [pc, #144]	; (800c26c <__sfp+0x98>)
 800c1da:	f000 fcbd 	bl	800cb58 <__retarget_lock_acquire_recursive>
 800c1de:	4b24      	ldr	r3, [pc, #144]	; (800c270 <__sfp+0x9c>)
 800c1e0:	681d      	ldr	r5, [r3, #0]
 800c1e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c1e4:	b383      	cbz	r3, 800c248 <__sfp+0x74>
 800c1e6:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 800c1ea:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	d505      	bpl.n	800c1fe <__sfp+0x2a>
 800c1f2:	e025      	b.n	800c240 <__sfp+0x6c>
 800c1f4:	3b01      	subs	r3, #1
 800c1f6:	1c5a      	adds	r2, r3, #1
 800c1f8:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800c1fc:	d020      	beq.n	800c240 <__sfp+0x6c>
 800c1fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c202:	2a00      	cmp	r2, #0
 800c204:	d1f6      	bne.n	800c1f4 <__sfp+0x20>
 800c206:	2500      	movs	r5, #0
 800c208:	4b1a      	ldr	r3, [pc, #104]	; (800c274 <__sfp+0xa0>)
 800c20a:	60e3      	str	r3, [r4, #12]
 800c20c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c210:	6665      	str	r5, [r4, #100]	; 0x64
 800c212:	f000 fc99 	bl	800cb48 <__retarget_lock_init_recursive>
 800c216:	4815      	ldr	r0, [pc, #84]	; (800c26c <__sfp+0x98>)
 800c218:	f000 fca6 	bl	800cb68 <__retarget_lock_release_recursive>
 800c21c:	6025      	str	r5, [r4, #0]
 800c21e:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c222:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c226:	61a5      	str	r5, [r4, #24]
 800c228:	4629      	mov	r1, r5
 800c22a:	2208      	movs	r2, #8
 800c22c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c230:	f7fe fcda 	bl	800abe8 <memset>
 800c234:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 800c238:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 800c23c:	4620      	mov	r0, r4
 800c23e:	bd70      	pop	{r4, r5, r6, pc}
 800c240:	682c      	ldr	r4, [r5, #0]
 800c242:	b12c      	cbz	r4, 800c250 <__sfp+0x7c>
 800c244:	4625      	mov	r5, r4
 800c246:	e7d0      	b.n	800c1ea <__sfp+0x16>
 800c248:	4628      	mov	r0, r5
 800c24a:	f7ff ff97 	bl	800c17c <__sinit>
 800c24e:	e7ca      	b.n	800c1e6 <__sfp+0x12>
 800c250:	2104      	movs	r1, #4
 800c252:	4630      	mov	r0, r6
 800c254:	f7ff ff70 	bl	800c138 <__sfmoreglue>
 800c258:	4604      	mov	r4, r0
 800c25a:	6028      	str	r0, [r5, #0]
 800c25c:	2800      	cmp	r0, #0
 800c25e:	d1f1      	bne.n	800c244 <__sfp+0x70>
 800c260:	4802      	ldr	r0, [pc, #8]	; (800c26c <__sfp+0x98>)
 800c262:	f000 fc81 	bl	800cb68 <__retarget_lock_release_recursive>
 800c266:	230c      	movs	r3, #12
 800c268:	6033      	str	r3, [r6, #0]
 800c26a:	e7e7      	b.n	800c23c <__sfp+0x68>
 800c26c:	20001634 	.word	0x20001634
 800c270:	0800e1b8 	.word	0x0800e1b8
 800c274:	ffff0001 	.word	0xffff0001

0800c278 <__sfp_lock_acquire>:
 800c278:	4801      	ldr	r0, [pc, #4]	; (800c280 <__sfp_lock_acquire+0x8>)
 800c27a:	f000 bc6d 	b.w	800cb58 <__retarget_lock_acquire_recursive>
 800c27e:	bf00      	nop
 800c280:	20001634 	.word	0x20001634

0800c284 <__sfp_lock_release>:
 800c284:	4801      	ldr	r0, [pc, #4]	; (800c28c <__sfp_lock_release+0x8>)
 800c286:	f000 bc6f 	b.w	800cb68 <__retarget_lock_release_recursive>
 800c28a:	bf00      	nop
 800c28c:	20001634 	.word	0x20001634

0800c290 <__sinit_lock_acquire>:
 800c290:	4801      	ldr	r0, [pc, #4]	; (800c298 <__sinit_lock_acquire+0x8>)
 800c292:	f000 bc61 	b.w	800cb58 <__retarget_lock_acquire_recursive>
 800c296:	bf00      	nop
 800c298:	20001620 	.word	0x20001620

0800c29c <__sinit_lock_release>:
 800c29c:	4801      	ldr	r0, [pc, #4]	; (800c2a4 <__sinit_lock_release+0x8>)
 800c29e:	f000 bc63 	b.w	800cb68 <__retarget_lock_release_recursive>
 800c2a2:	bf00      	nop
 800c2a4:	20001620 	.word	0x20001620

0800c2a8 <__fp_lock_all>:
 800c2a8:	b508      	push	{r3, lr}
 800c2aa:	4805      	ldr	r0, [pc, #20]	; (800c2c0 <__fp_lock_all+0x18>)
 800c2ac:	f000 fc54 	bl	800cb58 <__retarget_lock_acquire_recursive>
 800c2b0:	4b04      	ldr	r3, [pc, #16]	; (800c2c4 <__fp_lock_all+0x1c>)
 800c2b2:	4905      	ldr	r1, [pc, #20]	; (800c2c8 <__fp_lock_all+0x20>)
 800c2b4:	6818      	ldr	r0, [r3, #0]
 800c2b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c2ba:	f000 bb8d 	b.w	800c9d8 <_fwalk>
 800c2be:	bf00      	nop
 800c2c0:	20001634 	.word	0x20001634
 800c2c4:	200004ec 	.word	0x200004ec
 800c2c8:	0800c101 	.word	0x0800c101

0800c2cc <__fp_unlock_all>:
 800c2cc:	b508      	push	{r3, lr}
 800c2ce:	4b05      	ldr	r3, [pc, #20]	; (800c2e4 <__fp_unlock_all+0x18>)
 800c2d0:	4905      	ldr	r1, [pc, #20]	; (800c2e8 <__fp_unlock_all+0x1c>)
 800c2d2:	6818      	ldr	r0, [r3, #0]
 800c2d4:	f000 fb80 	bl	800c9d8 <_fwalk>
 800c2d8:	4804      	ldr	r0, [pc, #16]	; (800c2ec <__fp_unlock_all+0x20>)
 800c2da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c2de:	f000 bc43 	b.w	800cb68 <__retarget_lock_release_recursive>
 800c2e2:	bf00      	nop
 800c2e4:	200004ec 	.word	0x200004ec
 800c2e8:	0800c11d 	.word	0x0800c11d
 800c2ec:	20001634 	.word	0x20001634

0800c2f0 <__fputwc>:
 800c2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2f4:	b082      	sub	sp, #8
 800c2f6:	4681      	mov	r9, r0
 800c2f8:	4688      	mov	r8, r1
 800c2fa:	4614      	mov	r4, r2
 800c2fc:	f000 fbdc 	bl	800cab8 <__locale_mb_cur_max>
 800c300:	2801      	cmp	r0, #1
 800c302:	d103      	bne.n	800c30c <__fputwc+0x1c>
 800c304:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800c308:	2bfe      	cmp	r3, #254	; 0xfe
 800c30a:	d933      	bls.n	800c374 <__fputwc+0x84>
 800c30c:	4642      	mov	r2, r8
 800c30e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800c312:	a901      	add	r1, sp, #4
 800c314:	4648      	mov	r0, r9
 800c316:	f001 f993 	bl	800d640 <_wcrtomb_r>
 800c31a:	1c42      	adds	r2, r0, #1
 800c31c:	4606      	mov	r6, r0
 800c31e:	d02f      	beq.n	800c380 <__fputwc+0x90>
 800c320:	b320      	cbz	r0, 800c36c <__fputwc+0x7c>
 800c322:	f89d c004 	ldrb.w	ip, [sp, #4]
 800c326:	2500      	movs	r5, #0
 800c328:	f10d 0a04 	add.w	sl, sp, #4
 800c32c:	e009      	b.n	800c342 <__fputwc+0x52>
 800c32e:	6823      	ldr	r3, [r4, #0]
 800c330:	1c5a      	adds	r2, r3, #1
 800c332:	6022      	str	r2, [r4, #0]
 800c334:	f883 c000 	strb.w	ip, [r3]
 800c338:	3501      	adds	r5, #1
 800c33a:	42b5      	cmp	r5, r6
 800c33c:	d216      	bcs.n	800c36c <__fputwc+0x7c>
 800c33e:	f815 c00a 	ldrb.w	ip, [r5, sl]
 800c342:	68a3      	ldr	r3, [r4, #8]
 800c344:	3b01      	subs	r3, #1
 800c346:	2b00      	cmp	r3, #0
 800c348:	60a3      	str	r3, [r4, #8]
 800c34a:	daf0      	bge.n	800c32e <__fputwc+0x3e>
 800c34c:	69a7      	ldr	r7, [r4, #24]
 800c34e:	42bb      	cmp	r3, r7
 800c350:	4661      	mov	r1, ip
 800c352:	4622      	mov	r2, r4
 800c354:	4648      	mov	r0, r9
 800c356:	db02      	blt.n	800c35e <__fputwc+0x6e>
 800c358:	f1bc 0f0a 	cmp.w	ip, #10
 800c35c:	d1e7      	bne.n	800c32e <__fputwc+0x3e>
 800c35e:	f001 f90f 	bl	800d580 <__swbuf_r>
 800c362:	1c43      	adds	r3, r0, #1
 800c364:	d1e8      	bne.n	800c338 <__fputwc+0x48>
 800c366:	b002      	add	sp, #8
 800c368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c36c:	4640      	mov	r0, r8
 800c36e:	b002      	add	sp, #8
 800c370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c374:	fa5f fc88 	uxtb.w	ip, r8
 800c378:	4606      	mov	r6, r0
 800c37a:	f88d c004 	strb.w	ip, [sp, #4]
 800c37e:	e7d2      	b.n	800c326 <__fputwc+0x36>
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c386:	81a3      	strh	r3, [r4, #12]
 800c388:	b002      	add	sp, #8
 800c38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c38e:	bf00      	nop

0800c390 <_fputwc_r>:
 800c390:	b530      	push	{r4, r5, lr}
 800c392:	4605      	mov	r5, r0
 800c394:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800c396:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800c39a:	07c0      	lsls	r0, r0, #31
 800c39c:	4614      	mov	r4, r2
 800c39e:	b083      	sub	sp, #12
 800c3a0:	b29a      	uxth	r2, r3
 800c3a2:	d401      	bmi.n	800c3a8 <_fputwc_r+0x18>
 800c3a4:	0590      	lsls	r0, r2, #22
 800c3a6:	d51c      	bpl.n	800c3e2 <_fputwc_r+0x52>
 800c3a8:	0490      	lsls	r0, r2, #18
 800c3aa:	d406      	bmi.n	800c3ba <_fputwc_r+0x2a>
 800c3ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c3b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c3b6:	81a3      	strh	r3, [r4, #12]
 800c3b8:	6662      	str	r2, [r4, #100]	; 0x64
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	4622      	mov	r2, r4
 800c3be:	f7ff ff97 	bl	800c2f0 <__fputwc>
 800c3c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3c4:	07da      	lsls	r2, r3, #31
 800c3c6:	4605      	mov	r5, r0
 800c3c8:	d402      	bmi.n	800c3d0 <_fputwc_r+0x40>
 800c3ca:	89a3      	ldrh	r3, [r4, #12]
 800c3cc:	059b      	lsls	r3, r3, #22
 800c3ce:	d502      	bpl.n	800c3d6 <_fputwc_r+0x46>
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	b003      	add	sp, #12
 800c3d4:	bd30      	pop	{r4, r5, pc}
 800c3d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3d8:	f000 fbc6 	bl	800cb68 <__retarget_lock_release_recursive>
 800c3dc:	4628      	mov	r0, r5
 800c3de:	b003      	add	sp, #12
 800c3e0:	bd30      	pop	{r4, r5, pc}
 800c3e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3e4:	9101      	str	r1, [sp, #4]
 800c3e6:	f000 fbb7 	bl	800cb58 <__retarget_lock_acquire_recursive>
 800c3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ee:	9901      	ldr	r1, [sp, #4]
 800c3f0:	b29a      	uxth	r2, r3
 800c3f2:	e7d9      	b.n	800c3a8 <_fputwc_r+0x18>

0800c3f4 <fputwc>:
 800c3f4:	4b0c      	ldr	r3, [pc, #48]	; (800c428 <fputwc+0x34>)
 800c3f6:	b570      	push	{r4, r5, r6, lr}
 800c3f8:	681c      	ldr	r4, [r3, #0]
 800c3fa:	4605      	mov	r5, r0
 800c3fc:	460e      	mov	r6, r1
 800c3fe:	b10c      	cbz	r4, 800c404 <fputwc+0x10>
 800c400:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c402:	b133      	cbz	r3, 800c412 <fputwc+0x1e>
 800c404:	4632      	mov	r2, r6
 800c406:	4629      	mov	r1, r5
 800c408:	4620      	mov	r0, r4
 800c40a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c40e:	f7ff bfbf 	b.w	800c390 <_fputwc_r>
 800c412:	4620      	mov	r0, r4
 800c414:	f7ff feb2 	bl	800c17c <__sinit>
 800c418:	4632      	mov	r2, r6
 800c41a:	4629      	mov	r1, r5
 800c41c:	4620      	mov	r0, r4
 800c41e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c422:	f7ff bfb5 	b.w	800c390 <_fputwc_r>
 800c426:	bf00      	nop
 800c428:	200004ec 	.word	0x200004ec

0800c42c <_malloc_trim_r>:
 800c42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c42e:	4f24      	ldr	r7, [pc, #144]	; (800c4c0 <_malloc_trim_r+0x94>)
 800c430:	460c      	mov	r4, r1
 800c432:	4606      	mov	r6, r0
 800c434:	f7fe fc22 	bl	800ac7c <__malloc_lock>
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	685d      	ldr	r5, [r3, #4]
 800c43c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 800c440:	310f      	adds	r1, #15
 800c442:	f025 0503 	bic.w	r5, r5, #3
 800c446:	4429      	add	r1, r5
 800c448:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800c44c:	f021 010f 	bic.w	r1, r1, #15
 800c450:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800c454:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800c458:	db07      	blt.n	800c46a <_malloc_trim_r+0x3e>
 800c45a:	2100      	movs	r1, #0
 800c45c:	4630      	mov	r0, r6
 800c45e:	f7fe fc19 	bl	800ac94 <_sbrk_r>
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	442b      	add	r3, r5
 800c466:	4298      	cmp	r0, r3
 800c468:	d004      	beq.n	800c474 <_malloc_trim_r+0x48>
 800c46a:	4630      	mov	r0, r6
 800c46c:	f7fe fc0c 	bl	800ac88 <__malloc_unlock>
 800c470:	2000      	movs	r0, #0
 800c472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c474:	4261      	negs	r1, r4
 800c476:	4630      	mov	r0, r6
 800c478:	f7fe fc0c 	bl	800ac94 <_sbrk_r>
 800c47c:	3001      	adds	r0, #1
 800c47e:	d00d      	beq.n	800c49c <_malloc_trim_r+0x70>
 800c480:	4b10      	ldr	r3, [pc, #64]	; (800c4c4 <_malloc_trim_r+0x98>)
 800c482:	68ba      	ldr	r2, [r7, #8]
 800c484:	6819      	ldr	r1, [r3, #0]
 800c486:	1b2d      	subs	r5, r5, r4
 800c488:	f045 0501 	orr.w	r5, r5, #1
 800c48c:	4630      	mov	r0, r6
 800c48e:	1b09      	subs	r1, r1, r4
 800c490:	6055      	str	r5, [r2, #4]
 800c492:	6019      	str	r1, [r3, #0]
 800c494:	f7fe fbf8 	bl	800ac88 <__malloc_unlock>
 800c498:	2001      	movs	r0, #1
 800c49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c49c:	2100      	movs	r1, #0
 800c49e:	4630      	mov	r0, r6
 800c4a0:	f7fe fbf8 	bl	800ac94 <_sbrk_r>
 800c4a4:	68ba      	ldr	r2, [r7, #8]
 800c4a6:	1a83      	subs	r3, r0, r2
 800c4a8:	2b0f      	cmp	r3, #15
 800c4aa:	ddde      	ble.n	800c46a <_malloc_trim_r+0x3e>
 800c4ac:	4c06      	ldr	r4, [pc, #24]	; (800c4c8 <_malloc_trim_r+0x9c>)
 800c4ae:	4905      	ldr	r1, [pc, #20]	; (800c4c4 <_malloc_trim_r+0x98>)
 800c4b0:	6824      	ldr	r4, [r4, #0]
 800c4b2:	f043 0301 	orr.w	r3, r3, #1
 800c4b6:	1b00      	subs	r0, r0, r4
 800c4b8:	6053      	str	r3, [r2, #4]
 800c4ba:	6008      	str	r0, [r1, #0]
 800c4bc:	e7d5      	b.n	800c46a <_malloc_trim_r+0x3e>
 800c4be:	bf00      	nop
 800c4c0:	20000918 	.word	0x20000918
 800c4c4:	20000f44 	.word	0x20000f44
 800c4c8:	20000d20 	.word	0x20000d20

0800c4cc <_free_r>:
 800c4cc:	2900      	cmp	r1, #0
 800c4ce:	d053      	beq.n	800c578 <_free_r+0xac>
 800c4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4d2:	460c      	mov	r4, r1
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	f7fe fbd1 	bl	800ac7c <__malloc_lock>
 800c4da:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800c4de:	4f71      	ldr	r7, [pc, #452]	; (800c6a4 <_free_r+0x1d8>)
 800c4e0:	f02c 0101 	bic.w	r1, ip, #1
 800c4e4:	f1a4 0508 	sub.w	r5, r4, #8
 800c4e8:	186b      	adds	r3, r5, r1
 800c4ea:	68b8      	ldr	r0, [r7, #8]
 800c4ec:	685a      	ldr	r2, [r3, #4]
 800c4ee:	4298      	cmp	r0, r3
 800c4f0:	f022 0203 	bic.w	r2, r2, #3
 800c4f4:	d053      	beq.n	800c59e <_free_r+0xd2>
 800c4f6:	f01c 0f01 	tst.w	ip, #1
 800c4fa:	605a      	str	r2, [r3, #4]
 800c4fc:	eb03 0002 	add.w	r0, r3, r2
 800c500:	d13b      	bne.n	800c57a <_free_r+0xae>
 800c502:	f854 cc08 	ldr.w	ip, [r4, #-8]
 800c506:	6840      	ldr	r0, [r0, #4]
 800c508:	eba5 050c 	sub.w	r5, r5, ip
 800c50c:	f107 0e08 	add.w	lr, r7, #8
 800c510:	68ac      	ldr	r4, [r5, #8]
 800c512:	4574      	cmp	r4, lr
 800c514:	4461      	add	r1, ip
 800c516:	f000 0001 	and.w	r0, r0, #1
 800c51a:	d075      	beq.n	800c608 <_free_r+0x13c>
 800c51c:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800c520:	f8c4 c00c 	str.w	ip, [r4, #12]
 800c524:	f8cc 4008 	str.w	r4, [ip, #8]
 800c528:	b360      	cbz	r0, 800c584 <_free_r+0xb8>
 800c52a:	f041 0301 	orr.w	r3, r1, #1
 800c52e:	606b      	str	r3, [r5, #4]
 800c530:	5069      	str	r1, [r5, r1]
 800c532:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c536:	d350      	bcc.n	800c5da <_free_r+0x10e>
 800c538:	0a4b      	lsrs	r3, r1, #9
 800c53a:	2b04      	cmp	r3, #4
 800c53c:	d870      	bhi.n	800c620 <_free_r+0x154>
 800c53e:	098b      	lsrs	r3, r1, #6
 800c540:	f103 0439 	add.w	r4, r3, #57	; 0x39
 800c544:	00e4      	lsls	r4, r4, #3
 800c546:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c54a:	1938      	adds	r0, r7, r4
 800c54c:	593b      	ldr	r3, [r7, r4]
 800c54e:	3808      	subs	r0, #8
 800c550:	4298      	cmp	r0, r3
 800c552:	d078      	beq.n	800c646 <_free_r+0x17a>
 800c554:	685a      	ldr	r2, [r3, #4]
 800c556:	f022 0203 	bic.w	r2, r2, #3
 800c55a:	428a      	cmp	r2, r1
 800c55c:	d971      	bls.n	800c642 <_free_r+0x176>
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	4298      	cmp	r0, r3
 800c562:	d1f7      	bne.n	800c554 <_free_r+0x88>
 800c564:	68c3      	ldr	r3, [r0, #12]
 800c566:	e9c5 0302 	strd	r0, r3, [r5, #8]
 800c56a:	609d      	str	r5, [r3, #8]
 800c56c:	60c5      	str	r5, [r0, #12]
 800c56e:	4630      	mov	r0, r6
 800c570:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c574:	f7fe bb88 	b.w	800ac88 <__malloc_unlock>
 800c578:	4770      	bx	lr
 800c57a:	6840      	ldr	r0, [r0, #4]
 800c57c:	f000 0001 	and.w	r0, r0, #1
 800c580:	2800      	cmp	r0, #0
 800c582:	d1d2      	bne.n	800c52a <_free_r+0x5e>
 800c584:	6898      	ldr	r0, [r3, #8]
 800c586:	4c48      	ldr	r4, [pc, #288]	; (800c6a8 <_free_r+0x1dc>)
 800c588:	4411      	add	r1, r2
 800c58a:	42a0      	cmp	r0, r4
 800c58c:	f041 0201 	orr.w	r2, r1, #1
 800c590:	d062      	beq.n	800c658 <_free_r+0x18c>
 800c592:	68db      	ldr	r3, [r3, #12]
 800c594:	60c3      	str	r3, [r0, #12]
 800c596:	6098      	str	r0, [r3, #8]
 800c598:	606a      	str	r2, [r5, #4]
 800c59a:	5069      	str	r1, [r5, r1]
 800c59c:	e7c9      	b.n	800c532 <_free_r+0x66>
 800c59e:	f01c 0f01 	tst.w	ip, #1
 800c5a2:	440a      	add	r2, r1
 800c5a4:	d107      	bne.n	800c5b6 <_free_r+0xea>
 800c5a6:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800c5aa:	1aed      	subs	r5, r5, r3
 800c5ac:	441a      	add	r2, r3
 800c5ae:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800c5b2:	60cb      	str	r3, [r1, #12]
 800c5b4:	6099      	str	r1, [r3, #8]
 800c5b6:	4b3d      	ldr	r3, [pc, #244]	; (800c6ac <_free_r+0x1e0>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f042 0101 	orr.w	r1, r2, #1
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	6069      	str	r1, [r5, #4]
 800c5c2:	60bd      	str	r5, [r7, #8]
 800c5c4:	d804      	bhi.n	800c5d0 <_free_r+0x104>
 800c5c6:	4b3a      	ldr	r3, [pc, #232]	; (800c6b0 <_free_r+0x1e4>)
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	6819      	ldr	r1, [r3, #0]
 800c5cc:	f7ff ff2e 	bl	800c42c <_malloc_trim_r>
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c5d6:	f7fe bb57 	b.w	800ac88 <__malloc_unlock>
 800c5da:	08c9      	lsrs	r1, r1, #3
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	1c4a      	adds	r2, r1, #1
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	1089      	asrs	r1, r1, #2
 800c5e4:	408b      	lsls	r3, r1
 800c5e6:	4303      	orrs	r3, r0
 800c5e8:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
 800c5ec:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 800c5f0:	607b      	str	r3, [r7, #4]
 800c5f2:	3908      	subs	r1, #8
 800c5f4:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c5f8:	f847 5032 	str.w	r5, [r7, r2, lsl #3]
 800c5fc:	60c5      	str	r5, [r0, #12]
 800c5fe:	4630      	mov	r0, r6
 800c600:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c604:	f7fe bb40 	b.w	800ac88 <__malloc_unlock>
 800c608:	2800      	cmp	r0, #0
 800c60a:	d145      	bne.n	800c698 <_free_r+0x1cc>
 800c60c:	440a      	add	r2, r1
 800c60e:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
 800c612:	f042 0001 	orr.w	r0, r2, #1
 800c616:	60cb      	str	r3, [r1, #12]
 800c618:	6099      	str	r1, [r3, #8]
 800c61a:	6068      	str	r0, [r5, #4]
 800c61c:	50aa      	str	r2, [r5, r2]
 800c61e:	e7d7      	b.n	800c5d0 <_free_r+0x104>
 800c620:	2b14      	cmp	r3, #20
 800c622:	d908      	bls.n	800c636 <_free_r+0x16a>
 800c624:	2b54      	cmp	r3, #84	; 0x54
 800c626:	d81e      	bhi.n	800c666 <_free_r+0x19a>
 800c628:	0b0b      	lsrs	r3, r1, #12
 800c62a:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800c62e:	00e4      	lsls	r4, r4, #3
 800c630:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 800c634:	e789      	b.n	800c54a <_free_r+0x7e>
 800c636:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 800c63a:	00e4      	lsls	r4, r4, #3
 800c63c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 800c640:	e783      	b.n	800c54a <_free_r+0x7e>
 800c642:	4618      	mov	r0, r3
 800c644:	e78e      	b.n	800c564 <_free_r+0x98>
 800c646:	1093      	asrs	r3, r2, #2
 800c648:	6879      	ldr	r1, [r7, #4]
 800c64a:	2201      	movs	r2, #1
 800c64c:	fa02 f303 	lsl.w	r3, r2, r3
 800c650:	430b      	orrs	r3, r1
 800c652:	607b      	str	r3, [r7, #4]
 800c654:	4603      	mov	r3, r0
 800c656:	e786      	b.n	800c566 <_free_r+0x9a>
 800c658:	e9c7 5504 	strd	r5, r5, [r7, #16]
 800c65c:	e9c5 0002 	strd	r0, r0, [r5, #8]
 800c660:	606a      	str	r2, [r5, #4]
 800c662:	5069      	str	r1, [r5, r1]
 800c664:	e7b4      	b.n	800c5d0 <_free_r+0x104>
 800c666:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800c66a:	d806      	bhi.n	800c67a <_free_r+0x1ae>
 800c66c:	0bcb      	lsrs	r3, r1, #15
 800c66e:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800c672:	00e4      	lsls	r4, r4, #3
 800c674:	f103 0277 	add.w	r2, r3, #119	; 0x77
 800c678:	e767      	b.n	800c54a <_free_r+0x7e>
 800c67a:	f240 5254 	movw	r2, #1364	; 0x554
 800c67e:	4293      	cmp	r3, r2
 800c680:	d806      	bhi.n	800c690 <_free_r+0x1c4>
 800c682:	0c8b      	lsrs	r3, r1, #18
 800c684:	f103 047d 	add.w	r4, r3, #125	; 0x7d
 800c688:	00e4      	lsls	r4, r4, #3
 800c68a:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800c68e:	e75c      	b.n	800c54a <_free_r+0x7e>
 800c690:	f44f 747e 	mov.w	r4, #1016	; 0x3f8
 800c694:	227e      	movs	r2, #126	; 0x7e
 800c696:	e758      	b.n	800c54a <_free_r+0x7e>
 800c698:	f041 0201 	orr.w	r2, r1, #1
 800c69c:	606a      	str	r2, [r5, #4]
 800c69e:	6019      	str	r1, [r3, #0]
 800c6a0:	e796      	b.n	800c5d0 <_free_r+0x104>
 800c6a2:	bf00      	nop
 800c6a4:	20000918 	.word	0x20000918
 800c6a8:	20000920 	.word	0x20000920
 800c6ac:	20000d24 	.word	0x20000d24
 800c6b0:	20000f74 	.word	0x20000f74

0800c6b4 <_fstat_r>:
 800c6b4:	b538      	push	{r3, r4, r5, lr}
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	4c07      	ldr	r4, [pc, #28]	; (800c6d8 <_fstat_r+0x24>)
 800c6ba:	4605      	mov	r5, r0
 800c6bc:	4611      	mov	r1, r2
 800c6be:	4618      	mov	r0, r3
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	6023      	str	r3, [r4, #0]
 800c6c4:	f001 fa64 	bl	800db90 <_fstat>
 800c6c8:	1c43      	adds	r3, r0, #1
 800c6ca:	d000      	beq.n	800c6ce <_fstat_r+0x1a>
 800c6cc:	bd38      	pop	{r3, r4, r5, pc}
 800c6ce:	6823      	ldr	r3, [r4, #0]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d0fb      	beq.n	800c6cc <_fstat_r+0x18>
 800c6d4:	602b      	str	r3, [r5, #0]
 800c6d6:	bd38      	pop	{r3, r4, r5, pc}
 800c6d8:	20001638 	.word	0x20001638

0800c6dc <__sfvwrite_r>:
 800c6dc:	6893      	ldr	r3, [r2, #8]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	f000 80e4 	beq.w	800c8ac <__sfvwrite_r+0x1d0>
 800c6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	460c      	mov	r4, r1
 800c6f0:	0719      	lsls	r1, r3, #28
 800c6f2:	b083      	sub	sp, #12
 800c6f4:	4682      	mov	sl, r0
 800c6f6:	4690      	mov	r8, r2
 800c6f8:	d535      	bpl.n	800c766 <__sfvwrite_r+0x8a>
 800c6fa:	6922      	ldr	r2, [r4, #16]
 800c6fc:	b39a      	cbz	r2, 800c766 <__sfvwrite_r+0x8a>
 800c6fe:	f013 0202 	ands.w	r2, r3, #2
 800c702:	f8d8 6000 	ldr.w	r6, [r8]
 800c706:	d03d      	beq.n	800c784 <__sfvwrite_r+0xa8>
 800c708:	2700      	movs	r7, #0
 800c70a:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800c70e:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800c712:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 800c9d4 <__sfvwrite_r+0x2f8>
 800c716:	463d      	mov	r5, r7
 800c718:	454d      	cmp	r5, r9
 800c71a:	462b      	mov	r3, r5
 800c71c:	463a      	mov	r2, r7
 800c71e:	bf28      	it	cs
 800c720:	464b      	movcs	r3, r9
 800c722:	4661      	mov	r1, ip
 800c724:	4650      	mov	r0, sl
 800c726:	b1d5      	cbz	r5, 800c75e <__sfvwrite_r+0x82>
 800c728:	47d8      	blx	fp
 800c72a:	2800      	cmp	r0, #0
 800c72c:	f340 80c6 	ble.w	800c8bc <__sfvwrite_r+0x1e0>
 800c730:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c734:	1a1b      	subs	r3, r3, r0
 800c736:	4407      	add	r7, r0
 800c738:	1a2d      	subs	r5, r5, r0
 800c73a:	f8c8 3008 	str.w	r3, [r8, #8]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	f000 80b0 	beq.w	800c8a4 <__sfvwrite_r+0x1c8>
 800c744:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800c748:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800c74c:	454d      	cmp	r5, r9
 800c74e:	462b      	mov	r3, r5
 800c750:	463a      	mov	r2, r7
 800c752:	bf28      	it	cs
 800c754:	464b      	movcs	r3, r9
 800c756:	4661      	mov	r1, ip
 800c758:	4650      	mov	r0, sl
 800c75a:	2d00      	cmp	r5, #0
 800c75c:	d1e4      	bne.n	800c728 <__sfvwrite_r+0x4c>
 800c75e:	e9d6 7500 	ldrd	r7, r5, [r6]
 800c762:	3608      	adds	r6, #8
 800c764:	e7d8      	b.n	800c718 <__sfvwrite_r+0x3c>
 800c766:	4621      	mov	r1, r4
 800c768:	4650      	mov	r0, sl
 800c76a:	f7ff fb35 	bl	800bdd8 <__swsetup_r>
 800c76e:	2800      	cmp	r0, #0
 800c770:	f040 812a 	bne.w	800c9c8 <__sfvwrite_r+0x2ec>
 800c774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c778:	f8d8 6000 	ldr.w	r6, [r8]
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	f013 0202 	ands.w	r2, r3, #2
 800c782:	d1c1      	bne.n	800c708 <__sfvwrite_r+0x2c>
 800c784:	f013 0901 	ands.w	r9, r3, #1
 800c788:	d15d      	bne.n	800c846 <__sfvwrite_r+0x16a>
 800c78a:	68a7      	ldr	r7, [r4, #8]
 800c78c:	6820      	ldr	r0, [r4, #0]
 800c78e:	464d      	mov	r5, r9
 800c790:	2d00      	cmp	r5, #0
 800c792:	d054      	beq.n	800c83e <__sfvwrite_r+0x162>
 800c794:	059a      	lsls	r2, r3, #22
 800c796:	f140 809b 	bpl.w	800c8d0 <__sfvwrite_r+0x1f4>
 800c79a:	42af      	cmp	r7, r5
 800c79c:	46bb      	mov	fp, r7
 800c79e:	f200 80d8 	bhi.w	800c952 <__sfvwrite_r+0x276>
 800c7a2:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800c7a6:	d02f      	beq.n	800c808 <__sfvwrite_r+0x12c>
 800c7a8:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
 800c7ac:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800c7b0:	eba0 0b01 	sub.w	fp, r0, r1
 800c7b4:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800c7b8:	1c68      	adds	r0, r5, #1
 800c7ba:	107f      	asrs	r7, r7, #1
 800c7bc:	4458      	add	r0, fp
 800c7be:	42b8      	cmp	r0, r7
 800c7c0:	463a      	mov	r2, r7
 800c7c2:	bf84      	itt	hi
 800c7c4:	4607      	movhi	r7, r0
 800c7c6:	463a      	movhi	r2, r7
 800c7c8:	055b      	lsls	r3, r3, #21
 800c7ca:	f140 80d3 	bpl.w	800c974 <__sfvwrite_r+0x298>
 800c7ce:	4611      	mov	r1, r2
 800c7d0:	4650      	mov	r0, sl
 800c7d2:	f7fd fe67 	bl	800a4a4 <_malloc_r>
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	f000 80f0 	beq.w	800c9bc <__sfvwrite_r+0x2e0>
 800c7dc:	465a      	mov	r2, fp
 800c7de:	6921      	ldr	r1, [r4, #16]
 800c7e0:	9001      	str	r0, [sp, #4]
 800c7e2:	f7fe f903 	bl	800a9ec <memcpy>
 800c7e6:	89a2      	ldrh	r2, [r4, #12]
 800c7e8:	9b01      	ldr	r3, [sp, #4]
 800c7ea:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c7ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c7f2:	81a2      	strh	r2, [r4, #12]
 800c7f4:	eba7 020b 	sub.w	r2, r7, fp
 800c7f8:	eb03 000b 	add.w	r0, r3, fp
 800c7fc:	6167      	str	r7, [r4, #20]
 800c7fe:	6123      	str	r3, [r4, #16]
 800c800:	6020      	str	r0, [r4, #0]
 800c802:	60a2      	str	r2, [r4, #8]
 800c804:	462f      	mov	r7, r5
 800c806:	46ab      	mov	fp, r5
 800c808:	465a      	mov	r2, fp
 800c80a:	4649      	mov	r1, r9
 800c80c:	f7fe f988 	bl	800ab20 <memmove>
 800c810:	68a2      	ldr	r2, [r4, #8]
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	1bd2      	subs	r2, r2, r7
 800c816:	445b      	add	r3, fp
 800c818:	462f      	mov	r7, r5
 800c81a:	60a2      	str	r2, [r4, #8]
 800c81c:	6023      	str	r3, [r4, #0]
 800c81e:	2500      	movs	r5, #0
 800c820:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c824:	1bdb      	subs	r3, r3, r7
 800c826:	44b9      	add	r9, r7
 800c828:	f8c8 3008 	str.w	r3, [r8, #8]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d039      	beq.n	800c8a4 <__sfvwrite_r+0x1c8>
 800c830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c834:	68a7      	ldr	r7, [r4, #8]
 800c836:	6820      	ldr	r0, [r4, #0]
 800c838:	b29b      	uxth	r3, r3
 800c83a:	2d00      	cmp	r5, #0
 800c83c:	d1aa      	bne.n	800c794 <__sfvwrite_r+0xb8>
 800c83e:	e9d6 9500 	ldrd	r9, r5, [r6]
 800c842:	3608      	adds	r6, #8
 800c844:	e7a4      	b.n	800c790 <__sfvwrite_r+0xb4>
 800c846:	4633      	mov	r3, r6
 800c848:	4691      	mov	r9, r2
 800c84a:	4610      	mov	r0, r2
 800c84c:	4617      	mov	r7, r2
 800c84e:	464e      	mov	r6, r9
 800c850:	469b      	mov	fp, r3
 800c852:	2f00      	cmp	r7, #0
 800c854:	d06b      	beq.n	800c92e <__sfvwrite_r+0x252>
 800c856:	2800      	cmp	r0, #0
 800c858:	d071      	beq.n	800c93e <__sfvwrite_r+0x262>
 800c85a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800c85e:	6820      	ldr	r0, [r4, #0]
 800c860:	45b9      	cmp	r9, r7
 800c862:	464b      	mov	r3, r9
 800c864:	bf28      	it	cs
 800c866:	463b      	movcs	r3, r7
 800c868:	4288      	cmp	r0, r1
 800c86a:	d903      	bls.n	800c874 <__sfvwrite_r+0x198>
 800c86c:	68a5      	ldr	r5, [r4, #8]
 800c86e:	4415      	add	r5, r2
 800c870:	42ab      	cmp	r3, r5
 800c872:	dc71      	bgt.n	800c958 <__sfvwrite_r+0x27c>
 800c874:	429a      	cmp	r2, r3
 800c876:	f300 8093 	bgt.w	800c9a0 <__sfvwrite_r+0x2c4>
 800c87a:	4613      	mov	r3, r2
 800c87c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c87e:	69e1      	ldr	r1, [r4, #28]
 800c880:	4632      	mov	r2, r6
 800c882:	4650      	mov	r0, sl
 800c884:	47a8      	blx	r5
 800c886:	1e05      	subs	r5, r0, #0
 800c888:	dd18      	ble.n	800c8bc <__sfvwrite_r+0x1e0>
 800c88a:	ebb9 0905 	subs.w	r9, r9, r5
 800c88e:	d00f      	beq.n	800c8b0 <__sfvwrite_r+0x1d4>
 800c890:	2001      	movs	r0, #1
 800c892:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c896:	1b5b      	subs	r3, r3, r5
 800c898:	442e      	add	r6, r5
 800c89a:	1b7f      	subs	r7, r7, r5
 800c89c:	f8c8 3008 	str.w	r3, [r8, #8]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1d6      	bne.n	800c852 <__sfvwrite_r+0x176>
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	b003      	add	sp, #12
 800c8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	4770      	bx	lr
 800c8b0:	4621      	mov	r1, r4
 800c8b2:	4650      	mov	r0, sl
 800c8b4:	f7ff fbb6 	bl	800c024 <_fflush_r>
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	d0ea      	beq.n	800c892 <__sfvwrite_r+0x1b6>
 800c8bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8c8:	81a3      	strh	r3, [r4, #12]
 800c8ca:	b003      	add	sp, #12
 800c8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8d0:	6923      	ldr	r3, [r4, #16]
 800c8d2:	4283      	cmp	r3, r0
 800c8d4:	d315      	bcc.n	800c902 <__sfvwrite_r+0x226>
 800c8d6:	6961      	ldr	r1, [r4, #20]
 800c8d8:	42a9      	cmp	r1, r5
 800c8da:	d812      	bhi.n	800c902 <__sfvwrite_r+0x226>
 800c8dc:	4b3c      	ldr	r3, [pc, #240]	; (800c9d0 <__sfvwrite_r+0x2f4>)
 800c8de:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800c8e0:	429d      	cmp	r5, r3
 800c8e2:	bf94      	ite	ls
 800c8e4:	462b      	movls	r3, r5
 800c8e6:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 800c8ea:	464a      	mov	r2, r9
 800c8ec:	fb93 f3f1 	sdiv	r3, r3, r1
 800c8f0:	4650      	mov	r0, sl
 800c8f2:	fb01 f303 	mul.w	r3, r1, r3
 800c8f6:	69e1      	ldr	r1, [r4, #28]
 800c8f8:	47b8      	blx	r7
 800c8fa:	1e07      	subs	r7, r0, #0
 800c8fc:	ddde      	ble.n	800c8bc <__sfvwrite_r+0x1e0>
 800c8fe:	1bed      	subs	r5, r5, r7
 800c900:	e78e      	b.n	800c820 <__sfvwrite_r+0x144>
 800c902:	42af      	cmp	r7, r5
 800c904:	bf28      	it	cs
 800c906:	462f      	movcs	r7, r5
 800c908:	463a      	mov	r2, r7
 800c90a:	4649      	mov	r1, r9
 800c90c:	f7fe f908 	bl	800ab20 <memmove>
 800c910:	68a3      	ldr	r3, [r4, #8]
 800c912:	6822      	ldr	r2, [r4, #0]
 800c914:	1bdb      	subs	r3, r3, r7
 800c916:	443a      	add	r2, r7
 800c918:	60a3      	str	r3, [r4, #8]
 800c91a:	6022      	str	r2, [r4, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d1ee      	bne.n	800c8fe <__sfvwrite_r+0x222>
 800c920:	4621      	mov	r1, r4
 800c922:	4650      	mov	r0, sl
 800c924:	f7ff fb7e 	bl	800c024 <_fflush_r>
 800c928:	2800      	cmp	r0, #0
 800c92a:	d0e8      	beq.n	800c8fe <__sfvwrite_r+0x222>
 800c92c:	e7c6      	b.n	800c8bc <__sfvwrite_r+0x1e0>
 800c92e:	f10b 0308 	add.w	r3, fp, #8
 800c932:	e953 6702 	ldrd	r6, r7, [r3, #-8]
 800c936:	469b      	mov	fp, r3
 800c938:	3308      	adds	r3, #8
 800c93a:	2f00      	cmp	r7, #0
 800c93c:	d0f9      	beq.n	800c932 <__sfvwrite_r+0x256>
 800c93e:	463a      	mov	r2, r7
 800c940:	210a      	movs	r1, #10
 800c942:	4630      	mov	r0, r6
 800c944:	f000 f9b4 	bl	800ccb0 <memchr>
 800c948:	b338      	cbz	r0, 800c99a <__sfvwrite_r+0x2be>
 800c94a:	3001      	adds	r0, #1
 800c94c:	eba0 0906 	sub.w	r9, r0, r6
 800c950:	e783      	b.n	800c85a <__sfvwrite_r+0x17e>
 800c952:	462f      	mov	r7, r5
 800c954:	46ab      	mov	fp, r5
 800c956:	e757      	b.n	800c808 <__sfvwrite_r+0x12c>
 800c958:	4631      	mov	r1, r6
 800c95a:	462a      	mov	r2, r5
 800c95c:	f7fe f8e0 	bl	800ab20 <memmove>
 800c960:	6823      	ldr	r3, [r4, #0]
 800c962:	442b      	add	r3, r5
 800c964:	6023      	str	r3, [r4, #0]
 800c966:	4621      	mov	r1, r4
 800c968:	4650      	mov	r0, sl
 800c96a:	f7ff fb5b 	bl	800c024 <_fflush_r>
 800c96e:	2800      	cmp	r0, #0
 800c970:	d08b      	beq.n	800c88a <__sfvwrite_r+0x1ae>
 800c972:	e7a3      	b.n	800c8bc <__sfvwrite_r+0x1e0>
 800c974:	4650      	mov	r0, sl
 800c976:	f000 fa17 	bl	800cda8 <_realloc_r>
 800c97a:	4603      	mov	r3, r0
 800c97c:	2800      	cmp	r0, #0
 800c97e:	f47f af39 	bne.w	800c7f4 <__sfvwrite_r+0x118>
 800c982:	6921      	ldr	r1, [r4, #16]
 800c984:	4650      	mov	r0, sl
 800c986:	f7ff fda1 	bl	800c4cc <_free_r>
 800c98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c98e:	220c      	movs	r2, #12
 800c990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c994:	f8ca 2000 	str.w	r2, [sl]
 800c998:	e792      	b.n	800c8c0 <__sfvwrite_r+0x1e4>
 800c99a:	f107 0901 	add.w	r9, r7, #1
 800c99e:	e75c      	b.n	800c85a <__sfvwrite_r+0x17e>
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	4631      	mov	r1, r6
 800c9a4:	9301      	str	r3, [sp, #4]
 800c9a6:	f7fe f8bb 	bl	800ab20 <memmove>
 800c9aa:	9b01      	ldr	r3, [sp, #4]
 800c9ac:	68a1      	ldr	r1, [r4, #8]
 800c9ae:	6822      	ldr	r2, [r4, #0]
 800c9b0:	1ac9      	subs	r1, r1, r3
 800c9b2:	441a      	add	r2, r3
 800c9b4:	60a1      	str	r1, [r4, #8]
 800c9b6:	6022      	str	r2, [r4, #0]
 800c9b8:	461d      	mov	r5, r3
 800c9ba:	e766      	b.n	800c88a <__sfvwrite_r+0x1ae>
 800c9bc:	230c      	movs	r3, #12
 800c9be:	f8ca 3000 	str.w	r3, [sl]
 800c9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9c6:	e77b      	b.n	800c8c0 <__sfvwrite_r+0x1e4>
 800c9c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9cc:	e76b      	b.n	800c8a6 <__sfvwrite_r+0x1ca>
 800c9ce:	bf00      	nop
 800c9d0:	7ffffffe 	.word	0x7ffffffe
 800c9d4:	7ffffc00 	.word	0x7ffffc00

0800c9d8 <_fwalk>:
 800c9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9dc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800c9e0:	d01b      	beq.n	800ca1a <_fwalk+0x42>
 800c9e2:	4688      	mov	r8, r1
 800c9e4:	2600      	movs	r6, #0
 800c9e6:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 800c9ea:	3d01      	subs	r5, #1
 800c9ec:	d40f      	bmi.n	800ca0e <_fwalk+0x36>
 800c9ee:	89a3      	ldrh	r3, [r4, #12]
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	d905      	bls.n	800ca06 <_fwalk+0x2e>
 800c9fa:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800c9fe:	3301      	adds	r3, #1
 800ca00:	d001      	beq.n	800ca06 <_fwalk+0x2e>
 800ca02:	47c0      	blx	r8
 800ca04:	4306      	orrs	r6, r0
 800ca06:	1c6b      	adds	r3, r5, #1
 800ca08:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800ca0c:	d1ef      	bne.n	800c9ee <_fwalk+0x16>
 800ca0e:	683f      	ldr	r7, [r7, #0]
 800ca10:	2f00      	cmp	r7, #0
 800ca12:	d1e8      	bne.n	800c9e6 <_fwalk+0xe>
 800ca14:	4630      	mov	r0, r6
 800ca16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca1a:	463e      	mov	r6, r7
 800ca1c:	4630      	mov	r0, r6
 800ca1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca22:	bf00      	nop

0800ca24 <_fwalk_reent>:
 800ca24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca28:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800ca2c:	d01f      	beq.n	800ca6e <_fwalk_reent+0x4a>
 800ca2e:	4688      	mov	r8, r1
 800ca30:	4606      	mov	r6, r0
 800ca32:	f04f 0900 	mov.w	r9, #0
 800ca36:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 800ca3a:	3d01      	subs	r5, #1
 800ca3c:	d411      	bmi.n	800ca62 <_fwalk_reent+0x3e>
 800ca3e:	89a3      	ldrh	r3, [r4, #12]
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800ca46:	4621      	mov	r1, r4
 800ca48:	4630      	mov	r0, r6
 800ca4a:	d906      	bls.n	800ca5a <_fwalk_reent+0x36>
 800ca4c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800ca50:	3301      	adds	r3, #1
 800ca52:	d002      	beq.n	800ca5a <_fwalk_reent+0x36>
 800ca54:	47c0      	blx	r8
 800ca56:	ea49 0900 	orr.w	r9, r9, r0
 800ca5a:	1c6b      	adds	r3, r5, #1
 800ca5c:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800ca60:	d1ed      	bne.n	800ca3e <_fwalk_reent+0x1a>
 800ca62:	683f      	ldr	r7, [r7, #0]
 800ca64:	2f00      	cmp	r7, #0
 800ca66:	d1e6      	bne.n	800ca36 <_fwalk_reent+0x12>
 800ca68:	4648      	mov	r0, r9
 800ca6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca6e:	46b9      	mov	r9, r7
 800ca70:	4648      	mov	r0, r9
 800ca72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca76:	bf00      	nop

0800ca78 <_setlocale_r>:
 800ca78:	b1b2      	cbz	r2, 800caa8 <_setlocale_r+0x30>
 800ca7a:	b510      	push	{r4, lr}
 800ca7c:	490b      	ldr	r1, [pc, #44]	; (800caac <_setlocale_r+0x34>)
 800ca7e:	4610      	mov	r0, r2
 800ca80:	4614      	mov	r4, r2
 800ca82:	f000 fbe1 	bl	800d248 <strcmp>
 800ca86:	b908      	cbnz	r0, 800ca8c <_setlocale_r+0x14>
 800ca88:	4809      	ldr	r0, [pc, #36]	; (800cab0 <_setlocale_r+0x38>)
 800ca8a:	bd10      	pop	{r4, pc}
 800ca8c:	4908      	ldr	r1, [pc, #32]	; (800cab0 <_setlocale_r+0x38>)
 800ca8e:	4620      	mov	r0, r4
 800ca90:	f000 fbda 	bl	800d248 <strcmp>
 800ca94:	2800      	cmp	r0, #0
 800ca96:	d0f7      	beq.n	800ca88 <_setlocale_r+0x10>
 800ca98:	4620      	mov	r0, r4
 800ca9a:	4906      	ldr	r1, [pc, #24]	; (800cab4 <_setlocale_r+0x3c>)
 800ca9c:	f000 fbd4 	bl	800d248 <strcmp>
 800caa0:	2800      	cmp	r0, #0
 800caa2:	d0f1      	beq.n	800ca88 <_setlocale_r+0x10>
 800caa4:	2000      	movs	r0, #0
 800caa6:	bd10      	pop	{r4, pc}
 800caa8:	4801      	ldr	r0, [pc, #4]	; (800cab0 <_setlocale_r+0x38>)
 800caaa:	4770      	bx	lr
 800caac:	0800e210 	.word	0x0800e210
 800cab0:	0800e20c 	.word	0x0800e20c
 800cab4:	0800e184 	.word	0x0800e184

0800cab8 <__locale_mb_cur_max>:
 800cab8:	4b04      	ldr	r3, [pc, #16]	; (800cacc <__locale_mb_cur_max+0x14>)
 800caba:	4a05      	ldr	r2, [pc, #20]	; (800cad0 <__locale_mb_cur_max+0x18>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	bf08      	it	eq
 800cac4:	4613      	moveq	r3, r2
 800cac6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800caca:	4770      	bx	lr
 800cacc:	200004ec 	.word	0x200004ec
 800cad0:	20000d28 	.word	0x20000d28

0800cad4 <__locale_ctype_ptr_l>:
 800cad4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop

0800cadc <__locale_ctype_ptr>:
 800cadc:	4b04      	ldr	r3, [pc, #16]	; (800caf0 <__locale_ctype_ptr+0x14>)
 800cade:	4a05      	ldr	r2, [pc, #20]	; (800caf4 <__locale_ctype_ptr+0x18>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	bf08      	it	eq
 800cae8:	4613      	moveq	r3, r2
 800caea:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800caee:	4770      	bx	lr
 800caf0:	200004ec 	.word	0x200004ec
 800caf4:	20000d28 	.word	0x20000d28

0800caf8 <setlocale>:
 800caf8:	4b02      	ldr	r3, [pc, #8]	; (800cb04 <setlocale+0xc>)
 800cafa:	460a      	mov	r2, r1
 800cafc:	4601      	mov	r1, r0
 800cafe:	6818      	ldr	r0, [r3, #0]
 800cb00:	f7ff bfba 	b.w	800ca78 <_setlocale_r>
 800cb04:	200004ec 	.word	0x200004ec

0800cb08 <__localeconv_l>:
 800cb08:	30f0      	adds	r0, #240	; 0xf0
 800cb0a:	4770      	bx	lr

0800cb0c <_localeconv_r>:
 800cb0c:	4a04      	ldr	r2, [pc, #16]	; (800cb20 <_localeconv_r+0x14>)
 800cb0e:	4b05      	ldr	r3, [pc, #20]	; (800cb24 <_localeconv_r+0x18>)
 800cb10:	6812      	ldr	r2, [r2, #0]
 800cb12:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800cb14:	2800      	cmp	r0, #0
 800cb16:	bf08      	it	eq
 800cb18:	4618      	moveq	r0, r3
 800cb1a:	30f0      	adds	r0, #240	; 0xf0
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop
 800cb20:	200004ec 	.word	0x200004ec
 800cb24:	20000d28 	.word	0x20000d28

0800cb28 <localeconv>:
 800cb28:	4a04      	ldr	r2, [pc, #16]	; (800cb3c <localeconv+0x14>)
 800cb2a:	4b05      	ldr	r3, [pc, #20]	; (800cb40 <localeconv+0x18>)
 800cb2c:	6812      	ldr	r2, [r2, #0]
 800cb2e:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800cb30:	2800      	cmp	r0, #0
 800cb32:	bf08      	it	eq
 800cb34:	4618      	moveq	r0, r3
 800cb36:	30f0      	adds	r0, #240	; 0xf0
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop
 800cb3c:	200004ec 	.word	0x200004ec
 800cb40:	20000d28 	.word	0x20000d28

0800cb44 <__retarget_lock_init>:
 800cb44:	4770      	bx	lr
 800cb46:	bf00      	nop

0800cb48 <__retarget_lock_init_recursive>:
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop

0800cb4c <__retarget_lock_close>:
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop

0800cb50 <__retarget_lock_close_recursive>:
 800cb50:	4770      	bx	lr
 800cb52:	bf00      	nop

0800cb54 <__retarget_lock_acquire>:
 800cb54:	4770      	bx	lr
 800cb56:	bf00      	nop

0800cb58 <__retarget_lock_acquire_recursive>:
 800cb58:	4770      	bx	lr
 800cb5a:	bf00      	nop

0800cb5c <__retarget_lock_try_acquire>:
 800cb5c:	2001      	movs	r0, #1
 800cb5e:	4770      	bx	lr

0800cb60 <__retarget_lock_try_acquire_recursive>:
 800cb60:	2001      	movs	r0, #1
 800cb62:	4770      	bx	lr

0800cb64 <__retarget_lock_release>:
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop

0800cb68 <__retarget_lock_release_recursive>:
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop

0800cb6c <__swhatbuf_r>:
 800cb6c:	b570      	push	{r4, r5, r6, lr}
 800cb6e:	460c      	mov	r4, r1
 800cb70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb74:	2900      	cmp	r1, #0
 800cb76:	b096      	sub	sp, #88	; 0x58
 800cb78:	4615      	mov	r5, r2
 800cb7a:	461e      	mov	r6, r3
 800cb7c:	da0f      	bge.n	800cb9e <__swhatbuf_r+0x32>
 800cb7e:	89a2      	ldrh	r2, [r4, #12]
 800cb80:	2300      	movs	r3, #0
 800cb82:	f012 0080 	ands.w	r0, r2, #128	; 0x80
 800cb86:	6033      	str	r3, [r6, #0]
 800cb88:	d104      	bne.n	800cb94 <__swhatbuf_r+0x28>
 800cb8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb8e:	602b      	str	r3, [r5, #0]
 800cb90:	b016      	add	sp, #88	; 0x58
 800cb92:	bd70      	pop	{r4, r5, r6, pc}
 800cb94:	2240      	movs	r2, #64	; 0x40
 800cb96:	4618      	mov	r0, r3
 800cb98:	602a      	str	r2, [r5, #0]
 800cb9a:	b016      	add	sp, #88	; 0x58
 800cb9c:	bd70      	pop	{r4, r5, r6, pc}
 800cb9e:	466a      	mov	r2, sp
 800cba0:	f7ff fd88 	bl	800c6b4 <_fstat_r>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	dbea      	blt.n	800cb7e <__swhatbuf_r+0x12>
 800cba8:	9b01      	ldr	r3, [sp, #4]
 800cbaa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800cbae:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800cbb2:	fab3 f383 	clz	r3, r3
 800cbb6:	095b      	lsrs	r3, r3, #5
 800cbb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cbbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800cbc0:	6033      	str	r3, [r6, #0]
 800cbc2:	602a      	str	r2, [r5, #0]
 800cbc4:	b016      	add	sp, #88	; 0x58
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}

0800cbc8 <__smakebuf_r>:
 800cbc8:	898a      	ldrh	r2, [r1, #12]
 800cbca:	0792      	lsls	r2, r2, #30
 800cbcc:	460b      	mov	r3, r1
 800cbce:	d506      	bpl.n	800cbde <__smakebuf_r+0x16>
 800cbd0:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cbd4:	2101      	movs	r1, #1
 800cbd6:	601a      	str	r2, [r3, #0]
 800cbd8:	e9c3 2104 	strd	r2, r1, [r3, #16]
 800cbdc:	4770      	bx	lr
 800cbde:	b570      	push	{r4, r5, r6, lr}
 800cbe0:	b082      	sub	sp, #8
 800cbe2:	ab01      	add	r3, sp, #4
 800cbe4:	466a      	mov	r2, sp
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	4605      	mov	r5, r0
 800cbea:	f7ff ffbf 	bl	800cb6c <__swhatbuf_r>
 800cbee:	9900      	ldr	r1, [sp, #0]
 800cbf0:	4606      	mov	r6, r0
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	f7fd fc56 	bl	800a4a4 <_malloc_r>
 800cbf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbfc:	b1d8      	cbz	r0, 800cc36 <__smakebuf_r+0x6e>
 800cbfe:	4916      	ldr	r1, [pc, #88]	; (800cc58 <__smakebuf_r+0x90>)
 800cc00:	63e9      	str	r1, [r5, #60]	; 0x3c
 800cc02:	9a01      	ldr	r2, [sp, #4]
 800cc04:	9900      	ldr	r1, [sp, #0]
 800cc06:	6020      	str	r0, [r4, #0]
 800cc08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc0c:	81a3      	strh	r3, [r4, #12]
 800cc0e:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800cc12:	b91a      	cbnz	r2, 800cc1c <__smakebuf_r+0x54>
 800cc14:	4333      	orrs	r3, r6
 800cc16:	81a3      	strh	r3, [r4, #12]
 800cc18:	b002      	add	sp, #8
 800cc1a:	bd70      	pop	{r4, r5, r6, pc}
 800cc1c:	4628      	mov	r0, r5
 800cc1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc22:	f000 fe05 	bl	800d830 <_isatty_r>
 800cc26:	b1a0      	cbz	r0, 800cc52 <__smakebuf_r+0x8a>
 800cc28:	89a3      	ldrh	r3, [r4, #12]
 800cc2a:	f023 0303 	bic.w	r3, r3, #3
 800cc2e:	f043 0301 	orr.w	r3, r3, #1
 800cc32:	b21b      	sxth	r3, r3
 800cc34:	e7ee      	b.n	800cc14 <__smakebuf_r+0x4c>
 800cc36:	059a      	lsls	r2, r3, #22
 800cc38:	d4ee      	bmi.n	800cc18 <__smakebuf_r+0x50>
 800cc3a:	f023 0303 	bic.w	r3, r3, #3
 800cc3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc42:	f043 0302 	orr.w	r3, r3, #2
 800cc46:	2101      	movs	r1, #1
 800cc48:	81a3      	strh	r3, [r4, #12]
 800cc4a:	6022      	str	r2, [r4, #0]
 800cc4c:	e9c4 2104 	strd	r2, r1, [r4, #16]
 800cc50:	e7e2      	b.n	800cc18 <__smakebuf_r+0x50>
 800cc52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc56:	e7dd      	b.n	800cc14 <__smakebuf_r+0x4c>
 800cc58:	0800c0f5 	.word	0x0800c0f5

0800cc5c <_mbtowc_r>:
 800cc5c:	b430      	push	{r4, r5}
 800cc5e:	4c06      	ldr	r4, [pc, #24]	; (800cc78 <_mbtowc_r+0x1c>)
 800cc60:	4d06      	ldr	r5, [pc, #24]	; (800cc7c <_mbtowc_r+0x20>)
 800cc62:	6824      	ldr	r4, [r4, #0]
 800cc64:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800cc66:	2c00      	cmp	r4, #0
 800cc68:	bf08      	it	eq
 800cc6a:	462c      	moveq	r4, r5
 800cc6c:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 800cc70:	46a4      	mov	ip, r4
 800cc72:	bc30      	pop	{r4, r5}
 800cc74:	4760      	bx	ip
 800cc76:	bf00      	nop
 800cc78:	200004ec 	.word	0x200004ec
 800cc7c:	20000d28 	.word	0x20000d28

0800cc80 <__ascii_mbtowc>:
 800cc80:	b082      	sub	sp, #8
 800cc82:	b149      	cbz	r1, 800cc98 <__ascii_mbtowc+0x18>
 800cc84:	b15a      	cbz	r2, 800cc9e <__ascii_mbtowc+0x1e>
 800cc86:	b16b      	cbz	r3, 800cca4 <__ascii_mbtowc+0x24>
 800cc88:	7813      	ldrb	r3, [r2, #0]
 800cc8a:	600b      	str	r3, [r1, #0]
 800cc8c:	7812      	ldrb	r2, [r2, #0]
 800cc8e:	1c10      	adds	r0, r2, #0
 800cc90:	bf18      	it	ne
 800cc92:	2001      	movne	r0, #1
 800cc94:	b002      	add	sp, #8
 800cc96:	4770      	bx	lr
 800cc98:	a901      	add	r1, sp, #4
 800cc9a:	2a00      	cmp	r2, #0
 800cc9c:	d1f3      	bne.n	800cc86 <__ascii_mbtowc+0x6>
 800cc9e:	4610      	mov	r0, r2
 800cca0:	b002      	add	sp, #8
 800cca2:	4770      	bx	lr
 800cca4:	f06f 0001 	mvn.w	r0, #1
 800cca8:	e7f4      	b.n	800cc94 <__ascii_mbtowc+0x14>
 800ccaa:	bf00      	nop
 800ccac:	0000      	movs	r0, r0
	...

0800ccb0 <memchr>:
 800ccb0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800ccb4:	2a10      	cmp	r2, #16
 800ccb6:	db2b      	blt.n	800cd10 <memchr+0x60>
 800ccb8:	f010 0f07 	tst.w	r0, #7
 800ccbc:	d008      	beq.n	800ccd0 <memchr+0x20>
 800ccbe:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ccc2:	3a01      	subs	r2, #1
 800ccc4:	428b      	cmp	r3, r1
 800ccc6:	d02d      	beq.n	800cd24 <memchr+0x74>
 800ccc8:	f010 0f07 	tst.w	r0, #7
 800cccc:	b342      	cbz	r2, 800cd20 <memchr+0x70>
 800ccce:	d1f6      	bne.n	800ccbe <memchr+0xe>
 800ccd0:	b4f0      	push	{r4, r5, r6, r7}
 800ccd2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800ccd6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800ccda:	f022 0407 	bic.w	r4, r2, #7
 800ccde:	f07f 0700 	mvns.w	r7, #0
 800cce2:	2300      	movs	r3, #0
 800cce4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800cce8:	3c08      	subs	r4, #8
 800ccea:	ea85 0501 	eor.w	r5, r5, r1
 800ccee:	ea86 0601 	eor.w	r6, r6, r1
 800ccf2:	fa85 f547 	uadd8	r5, r5, r7
 800ccf6:	faa3 f587 	sel	r5, r3, r7
 800ccfa:	fa86 f647 	uadd8	r6, r6, r7
 800ccfe:	faa5 f687 	sel	r6, r5, r7
 800cd02:	b98e      	cbnz	r6, 800cd28 <memchr+0x78>
 800cd04:	d1ee      	bne.n	800cce4 <memchr+0x34>
 800cd06:	bcf0      	pop	{r4, r5, r6, r7}
 800cd08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800cd0c:	f002 0207 	and.w	r2, r2, #7
 800cd10:	b132      	cbz	r2, 800cd20 <memchr+0x70>
 800cd12:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cd16:	3a01      	subs	r2, #1
 800cd18:	ea83 0301 	eor.w	r3, r3, r1
 800cd1c:	b113      	cbz	r3, 800cd24 <memchr+0x74>
 800cd1e:	d1f8      	bne.n	800cd12 <memchr+0x62>
 800cd20:	2000      	movs	r0, #0
 800cd22:	4770      	bx	lr
 800cd24:	3801      	subs	r0, #1
 800cd26:	4770      	bx	lr
 800cd28:	2d00      	cmp	r5, #0
 800cd2a:	bf06      	itte	eq
 800cd2c:	4635      	moveq	r5, r6
 800cd2e:	3803      	subeq	r0, #3
 800cd30:	3807      	subne	r0, #7
 800cd32:	f015 0f01 	tst.w	r5, #1
 800cd36:	d107      	bne.n	800cd48 <memchr+0x98>
 800cd38:	3001      	adds	r0, #1
 800cd3a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800cd3e:	bf02      	ittt	eq
 800cd40:	3001      	addeq	r0, #1
 800cd42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 800cd46:	3001      	addeq	r0, #1
 800cd48:	bcf0      	pop	{r4, r5, r6, r7}
 800cd4a:	3801      	subs	r0, #1
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop

0800cd50 <_open_r>:
 800cd50:	b570      	push	{r4, r5, r6, lr}
 800cd52:	460d      	mov	r5, r1
 800cd54:	4c08      	ldr	r4, [pc, #32]	; (800cd78 <_open_r+0x28>)
 800cd56:	4611      	mov	r1, r2
 800cd58:	4606      	mov	r6, r0
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	4628      	mov	r0, r5
 800cd5e:	2300      	movs	r3, #0
 800cd60:	6023      	str	r3, [r4, #0]
 800cd62:	f000 ff3d 	bl	800dbe0 <_open>
 800cd66:	1c43      	adds	r3, r0, #1
 800cd68:	d000      	beq.n	800cd6c <_open_r+0x1c>
 800cd6a:	bd70      	pop	{r4, r5, r6, pc}
 800cd6c:	6823      	ldr	r3, [r4, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d0fb      	beq.n	800cd6a <_open_r+0x1a>
 800cd72:	6033      	str	r3, [r6, #0]
 800cd74:	bd70      	pop	{r4, r5, r6, pc}
 800cd76:	bf00      	nop
 800cd78:	20001638 	.word	0x20001638

0800cd7c <_read_r>:
 800cd7c:	b570      	push	{r4, r5, r6, lr}
 800cd7e:	460d      	mov	r5, r1
 800cd80:	4c08      	ldr	r4, [pc, #32]	; (800cda4 <_read_r+0x28>)
 800cd82:	4611      	mov	r1, r2
 800cd84:	4606      	mov	r6, r0
 800cd86:	461a      	mov	r2, r3
 800cd88:	4628      	mov	r0, r5
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	6023      	str	r3, [r4, #0]
 800cd8e:	f000 ff2f 	bl	800dbf0 <_read>
 800cd92:	1c43      	adds	r3, r0, #1
 800cd94:	d000      	beq.n	800cd98 <_read_r+0x1c>
 800cd96:	bd70      	pop	{r4, r5, r6, pc}
 800cd98:	6823      	ldr	r3, [r4, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d0fb      	beq.n	800cd96 <_read_r+0x1a>
 800cd9e:	6033      	str	r3, [r6, #0]
 800cda0:	bd70      	pop	{r4, r5, r6, pc}
 800cda2:	bf00      	nop
 800cda4:	20001638 	.word	0x20001638

0800cda8 <_realloc_r>:
 800cda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdac:	4692      	mov	sl, r2
 800cdae:	b083      	sub	sp, #12
 800cdb0:	2900      	cmp	r1, #0
 800cdb2:	f000 80a1 	beq.w	800cef8 <_realloc_r+0x150>
 800cdb6:	460d      	mov	r5, r1
 800cdb8:	4680      	mov	r8, r0
 800cdba:	f10a 040b 	add.w	r4, sl, #11
 800cdbe:	f7fd ff5d 	bl	800ac7c <__malloc_lock>
 800cdc2:	f855 2c04 	ldr.w	r2, [r5, #-4]
 800cdc6:	2c16      	cmp	r4, #22
 800cdc8:	f022 0603 	bic.w	r6, r2, #3
 800cdcc:	f1a5 0708 	sub.w	r7, r5, #8
 800cdd0:	d83e      	bhi.n	800ce50 <_realloc_r+0xa8>
 800cdd2:	2410      	movs	r4, #16
 800cdd4:	4621      	mov	r1, r4
 800cdd6:	45a2      	cmp	sl, r4
 800cdd8:	d83f      	bhi.n	800ce5a <_realloc_r+0xb2>
 800cdda:	428e      	cmp	r6, r1
 800cddc:	eb07 0906 	add.w	r9, r7, r6
 800cde0:	da74      	bge.n	800cecc <_realloc_r+0x124>
 800cde2:	4bc7      	ldr	r3, [pc, #796]	; (800d100 <_realloc_r+0x358>)
 800cde4:	6898      	ldr	r0, [r3, #8]
 800cde6:	4548      	cmp	r0, r9
 800cde8:	f000 80aa 	beq.w	800cf40 <_realloc_r+0x198>
 800cdec:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800cdf0:	f020 0301 	bic.w	r3, r0, #1
 800cdf4:	444b      	add	r3, r9
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	07db      	lsls	r3, r3, #31
 800cdfa:	f140 8083 	bpl.w	800cf04 <_realloc_r+0x15c>
 800cdfe:	07d2      	lsls	r2, r2, #31
 800ce00:	d534      	bpl.n	800ce6c <_realloc_r+0xc4>
 800ce02:	4651      	mov	r1, sl
 800ce04:	4640      	mov	r0, r8
 800ce06:	f7fd fb4d 	bl	800a4a4 <_malloc_r>
 800ce0a:	4682      	mov	sl, r0
 800ce0c:	b1e0      	cbz	r0, 800ce48 <_realloc_r+0xa0>
 800ce0e:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800ce12:	f023 0301 	bic.w	r3, r3, #1
 800ce16:	443b      	add	r3, r7
 800ce18:	f1a0 0208 	sub.w	r2, r0, #8
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	f000 80f9 	beq.w	800d014 <_realloc_r+0x26c>
 800ce22:	1f32      	subs	r2, r6, #4
 800ce24:	2a24      	cmp	r2, #36	; 0x24
 800ce26:	f200 8107 	bhi.w	800d038 <_realloc_r+0x290>
 800ce2a:	2a13      	cmp	r2, #19
 800ce2c:	6829      	ldr	r1, [r5, #0]
 800ce2e:	f200 80e6 	bhi.w	800cffe <_realloc_r+0x256>
 800ce32:	4603      	mov	r3, r0
 800ce34:	462a      	mov	r2, r5
 800ce36:	6019      	str	r1, [r3, #0]
 800ce38:	6851      	ldr	r1, [r2, #4]
 800ce3a:	6059      	str	r1, [r3, #4]
 800ce3c:	6892      	ldr	r2, [r2, #8]
 800ce3e:	609a      	str	r2, [r3, #8]
 800ce40:	4629      	mov	r1, r5
 800ce42:	4640      	mov	r0, r8
 800ce44:	f7ff fb42 	bl	800c4cc <_free_r>
 800ce48:	4640      	mov	r0, r8
 800ce4a:	f7fd ff1d 	bl	800ac88 <__malloc_unlock>
 800ce4e:	e04f      	b.n	800cef0 <_realloc_r+0x148>
 800ce50:	f024 0407 	bic.w	r4, r4, #7
 800ce54:	2c00      	cmp	r4, #0
 800ce56:	4621      	mov	r1, r4
 800ce58:	dabd      	bge.n	800cdd6 <_realloc_r+0x2e>
 800ce5a:	f04f 0a00 	mov.w	sl, #0
 800ce5e:	230c      	movs	r3, #12
 800ce60:	4650      	mov	r0, sl
 800ce62:	f8c8 3000 	str.w	r3, [r8]
 800ce66:	b003      	add	sp, #12
 800ce68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce6c:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800ce70:	eba7 0b03 	sub.w	fp, r7, r3
 800ce74:	f8db 2004 	ldr.w	r2, [fp, #4]
 800ce78:	f022 0203 	bic.w	r2, r2, #3
 800ce7c:	18b3      	adds	r3, r6, r2
 800ce7e:	428b      	cmp	r3, r1
 800ce80:	dbbf      	blt.n	800ce02 <_realloc_r+0x5a>
 800ce82:	46da      	mov	sl, fp
 800ce84:	f8db 100c 	ldr.w	r1, [fp, #12]
 800ce88:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 800ce8c:	1f32      	subs	r2, r6, #4
 800ce8e:	2a24      	cmp	r2, #36	; 0x24
 800ce90:	60c1      	str	r1, [r0, #12]
 800ce92:	eb0b 0903 	add.w	r9, fp, r3
 800ce96:	6088      	str	r0, [r1, #8]
 800ce98:	f200 80c6 	bhi.w	800d028 <_realloc_r+0x280>
 800ce9c:	2a13      	cmp	r2, #19
 800ce9e:	6829      	ldr	r1, [r5, #0]
 800cea0:	f240 80c0 	bls.w	800d024 <_realloc_r+0x27c>
 800cea4:	f8cb 1008 	str.w	r1, [fp, #8]
 800cea8:	6869      	ldr	r1, [r5, #4]
 800ceaa:	f8cb 100c 	str.w	r1, [fp, #12]
 800ceae:	2a1b      	cmp	r2, #27
 800ceb0:	68a9      	ldr	r1, [r5, #8]
 800ceb2:	f200 80d8 	bhi.w	800d066 <_realloc_r+0x2be>
 800ceb6:	f10b 0210 	add.w	r2, fp, #16
 800ceba:	3508      	adds	r5, #8
 800cebc:	6011      	str	r1, [r2, #0]
 800cebe:	6869      	ldr	r1, [r5, #4]
 800cec0:	6051      	str	r1, [r2, #4]
 800cec2:	68a9      	ldr	r1, [r5, #8]
 800cec4:	6091      	str	r1, [r2, #8]
 800cec6:	461e      	mov	r6, r3
 800cec8:	465f      	mov	r7, fp
 800ceca:	4655      	mov	r5, sl
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	1b32      	subs	r2, r6, r4
 800ced0:	2a0f      	cmp	r2, #15
 800ced2:	f003 0301 	and.w	r3, r3, #1
 800ced6:	d822      	bhi.n	800cf1e <_realloc_r+0x176>
 800ced8:	4333      	orrs	r3, r6
 800ceda:	607b      	str	r3, [r7, #4]
 800cedc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cee0:	f043 0301 	orr.w	r3, r3, #1
 800cee4:	f8c9 3004 	str.w	r3, [r9, #4]
 800cee8:	4640      	mov	r0, r8
 800ceea:	f7fd fecd 	bl	800ac88 <__malloc_unlock>
 800ceee:	46aa      	mov	sl, r5
 800cef0:	4650      	mov	r0, sl
 800cef2:	b003      	add	sp, #12
 800cef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cef8:	4611      	mov	r1, r2
 800cefa:	b003      	add	sp, #12
 800cefc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf00:	f7fd bad0 	b.w	800a4a4 <_malloc_r>
 800cf04:	f020 0003 	bic.w	r0, r0, #3
 800cf08:	1833      	adds	r3, r6, r0
 800cf0a:	428b      	cmp	r3, r1
 800cf0c:	db61      	blt.n	800cfd2 <_realloc_r+0x22a>
 800cf0e:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 800cf12:	461e      	mov	r6, r3
 800cf14:	60ca      	str	r2, [r1, #12]
 800cf16:	eb07 0903 	add.w	r9, r7, r3
 800cf1a:	6091      	str	r1, [r2, #8]
 800cf1c:	e7d6      	b.n	800cecc <_realloc_r+0x124>
 800cf1e:	1939      	adds	r1, r7, r4
 800cf20:	4323      	orrs	r3, r4
 800cf22:	f042 0201 	orr.w	r2, r2, #1
 800cf26:	607b      	str	r3, [r7, #4]
 800cf28:	604a      	str	r2, [r1, #4]
 800cf2a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cf2e:	f043 0301 	orr.w	r3, r3, #1
 800cf32:	3108      	adds	r1, #8
 800cf34:	f8c9 3004 	str.w	r3, [r9, #4]
 800cf38:	4640      	mov	r0, r8
 800cf3a:	f7ff fac7 	bl	800c4cc <_free_r>
 800cf3e:	e7d3      	b.n	800cee8 <_realloc_r+0x140>
 800cf40:	6840      	ldr	r0, [r0, #4]
 800cf42:	f020 0903 	bic.w	r9, r0, #3
 800cf46:	44b1      	add	r9, r6
 800cf48:	f104 0010 	add.w	r0, r4, #16
 800cf4c:	4581      	cmp	r9, r0
 800cf4e:	da77      	bge.n	800d040 <_realloc_r+0x298>
 800cf50:	07d2      	lsls	r2, r2, #31
 800cf52:	f53f af56 	bmi.w	800ce02 <_realloc_r+0x5a>
 800cf56:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800cf5a:	eba7 0b02 	sub.w	fp, r7, r2
 800cf5e:	f8db 2004 	ldr.w	r2, [fp, #4]
 800cf62:	f022 0203 	bic.w	r2, r2, #3
 800cf66:	4491      	add	r9, r2
 800cf68:	4548      	cmp	r0, r9
 800cf6a:	dc87      	bgt.n	800ce7c <_realloc_r+0xd4>
 800cf6c:	46da      	mov	sl, fp
 800cf6e:	f8db 100c 	ldr.w	r1, [fp, #12]
 800cf72:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 800cf76:	1f32      	subs	r2, r6, #4
 800cf78:	2a24      	cmp	r2, #36	; 0x24
 800cf7a:	60c1      	str	r1, [r0, #12]
 800cf7c:	6088      	str	r0, [r1, #8]
 800cf7e:	f200 80a1 	bhi.w	800d0c4 <_realloc_r+0x31c>
 800cf82:	2a13      	cmp	r2, #19
 800cf84:	6829      	ldr	r1, [r5, #0]
 800cf86:	f240 809b 	bls.w	800d0c0 <_realloc_r+0x318>
 800cf8a:	f8cb 1008 	str.w	r1, [fp, #8]
 800cf8e:	6869      	ldr	r1, [r5, #4]
 800cf90:	f8cb 100c 	str.w	r1, [fp, #12]
 800cf94:	2a1b      	cmp	r2, #27
 800cf96:	68a9      	ldr	r1, [r5, #8]
 800cf98:	f200 809b 	bhi.w	800d0d2 <_realloc_r+0x32a>
 800cf9c:	f10b 0210 	add.w	r2, fp, #16
 800cfa0:	3508      	adds	r5, #8
 800cfa2:	6011      	str	r1, [r2, #0]
 800cfa4:	6869      	ldr	r1, [r5, #4]
 800cfa6:	6051      	str	r1, [r2, #4]
 800cfa8:	68a9      	ldr	r1, [r5, #8]
 800cfaa:	6091      	str	r1, [r2, #8]
 800cfac:	eb0b 0104 	add.w	r1, fp, r4
 800cfb0:	eba9 0204 	sub.w	r2, r9, r4
 800cfb4:	f042 0201 	orr.w	r2, r2, #1
 800cfb8:	6099      	str	r1, [r3, #8]
 800cfba:	604a      	str	r2, [r1, #4]
 800cfbc:	f8db 3004 	ldr.w	r3, [fp, #4]
 800cfc0:	f003 0301 	and.w	r3, r3, #1
 800cfc4:	431c      	orrs	r4, r3
 800cfc6:	4640      	mov	r0, r8
 800cfc8:	f8cb 4004 	str.w	r4, [fp, #4]
 800cfcc:	f7fd fe5c 	bl	800ac88 <__malloc_unlock>
 800cfd0:	e78e      	b.n	800cef0 <_realloc_r+0x148>
 800cfd2:	07d3      	lsls	r3, r2, #31
 800cfd4:	f53f af15 	bmi.w	800ce02 <_realloc_r+0x5a>
 800cfd8:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800cfdc:	eba7 0b03 	sub.w	fp, r7, r3
 800cfe0:	f8db 2004 	ldr.w	r2, [fp, #4]
 800cfe4:	f022 0203 	bic.w	r2, r2, #3
 800cfe8:	4410      	add	r0, r2
 800cfea:	1983      	adds	r3, r0, r6
 800cfec:	428b      	cmp	r3, r1
 800cfee:	f6ff af45 	blt.w	800ce7c <_realloc_r+0xd4>
 800cff2:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 800cff6:	46da      	mov	sl, fp
 800cff8:	60ca      	str	r2, [r1, #12]
 800cffa:	6091      	str	r1, [r2, #8]
 800cffc:	e742      	b.n	800ce84 <_realloc_r+0xdc>
 800cffe:	6001      	str	r1, [r0, #0]
 800d000:	686b      	ldr	r3, [r5, #4]
 800d002:	6043      	str	r3, [r0, #4]
 800d004:	2a1b      	cmp	r2, #27
 800d006:	d83a      	bhi.n	800d07e <_realloc_r+0x2d6>
 800d008:	f105 0208 	add.w	r2, r5, #8
 800d00c:	f100 0308 	add.w	r3, r0, #8
 800d010:	68a9      	ldr	r1, [r5, #8]
 800d012:	e710      	b.n	800ce36 <_realloc_r+0x8e>
 800d014:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800d018:	f023 0303 	bic.w	r3, r3, #3
 800d01c:	441e      	add	r6, r3
 800d01e:	eb07 0906 	add.w	r9, r7, r6
 800d022:	e753      	b.n	800cecc <_realloc_r+0x124>
 800d024:	4652      	mov	r2, sl
 800d026:	e749      	b.n	800cebc <_realloc_r+0x114>
 800d028:	4629      	mov	r1, r5
 800d02a:	4650      	mov	r0, sl
 800d02c:	461e      	mov	r6, r3
 800d02e:	465f      	mov	r7, fp
 800d030:	f7fd fd76 	bl	800ab20 <memmove>
 800d034:	4655      	mov	r5, sl
 800d036:	e749      	b.n	800cecc <_realloc_r+0x124>
 800d038:	4629      	mov	r1, r5
 800d03a:	f7fd fd71 	bl	800ab20 <memmove>
 800d03e:	e6ff      	b.n	800ce40 <_realloc_r+0x98>
 800d040:	4427      	add	r7, r4
 800d042:	eba9 0904 	sub.w	r9, r9, r4
 800d046:	f049 0201 	orr.w	r2, r9, #1
 800d04a:	609f      	str	r7, [r3, #8]
 800d04c:	607a      	str	r2, [r7, #4]
 800d04e:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800d052:	f003 0301 	and.w	r3, r3, #1
 800d056:	431c      	orrs	r4, r3
 800d058:	4640      	mov	r0, r8
 800d05a:	f845 4c04 	str.w	r4, [r5, #-4]
 800d05e:	f7fd fe13 	bl	800ac88 <__malloc_unlock>
 800d062:	46aa      	mov	sl, r5
 800d064:	e744      	b.n	800cef0 <_realloc_r+0x148>
 800d066:	f8cb 1010 	str.w	r1, [fp, #16]
 800d06a:	68e9      	ldr	r1, [r5, #12]
 800d06c:	f8cb 1014 	str.w	r1, [fp, #20]
 800d070:	2a24      	cmp	r2, #36	; 0x24
 800d072:	d010      	beq.n	800d096 <_realloc_r+0x2ee>
 800d074:	6929      	ldr	r1, [r5, #16]
 800d076:	f10b 0218 	add.w	r2, fp, #24
 800d07a:	3510      	adds	r5, #16
 800d07c:	e71e      	b.n	800cebc <_realloc_r+0x114>
 800d07e:	68ab      	ldr	r3, [r5, #8]
 800d080:	6083      	str	r3, [r0, #8]
 800d082:	68eb      	ldr	r3, [r5, #12]
 800d084:	60c3      	str	r3, [r0, #12]
 800d086:	2a24      	cmp	r2, #36	; 0x24
 800d088:	d010      	beq.n	800d0ac <_realloc_r+0x304>
 800d08a:	f105 0210 	add.w	r2, r5, #16
 800d08e:	f100 0310 	add.w	r3, r0, #16
 800d092:	6929      	ldr	r1, [r5, #16]
 800d094:	e6cf      	b.n	800ce36 <_realloc_r+0x8e>
 800d096:	692a      	ldr	r2, [r5, #16]
 800d098:	f8cb 2018 	str.w	r2, [fp, #24]
 800d09c:	696a      	ldr	r2, [r5, #20]
 800d09e:	f8cb 201c 	str.w	r2, [fp, #28]
 800d0a2:	69a9      	ldr	r1, [r5, #24]
 800d0a4:	f10b 0220 	add.w	r2, fp, #32
 800d0a8:	3518      	adds	r5, #24
 800d0aa:	e707      	b.n	800cebc <_realloc_r+0x114>
 800d0ac:	692b      	ldr	r3, [r5, #16]
 800d0ae:	6103      	str	r3, [r0, #16]
 800d0b0:	696b      	ldr	r3, [r5, #20]
 800d0b2:	6143      	str	r3, [r0, #20]
 800d0b4:	69a9      	ldr	r1, [r5, #24]
 800d0b6:	f105 0218 	add.w	r2, r5, #24
 800d0ba:	f100 0318 	add.w	r3, r0, #24
 800d0be:	e6ba      	b.n	800ce36 <_realloc_r+0x8e>
 800d0c0:	4652      	mov	r2, sl
 800d0c2:	e76e      	b.n	800cfa2 <_realloc_r+0x1fa>
 800d0c4:	4629      	mov	r1, r5
 800d0c6:	4650      	mov	r0, sl
 800d0c8:	9301      	str	r3, [sp, #4]
 800d0ca:	f7fd fd29 	bl	800ab20 <memmove>
 800d0ce:	9b01      	ldr	r3, [sp, #4]
 800d0d0:	e76c      	b.n	800cfac <_realloc_r+0x204>
 800d0d2:	f8cb 1010 	str.w	r1, [fp, #16]
 800d0d6:	68e9      	ldr	r1, [r5, #12]
 800d0d8:	f8cb 1014 	str.w	r1, [fp, #20]
 800d0dc:	2a24      	cmp	r2, #36	; 0x24
 800d0de:	d004      	beq.n	800d0ea <_realloc_r+0x342>
 800d0e0:	6929      	ldr	r1, [r5, #16]
 800d0e2:	f10b 0218 	add.w	r2, fp, #24
 800d0e6:	3510      	adds	r5, #16
 800d0e8:	e75b      	b.n	800cfa2 <_realloc_r+0x1fa>
 800d0ea:	692a      	ldr	r2, [r5, #16]
 800d0ec:	f8cb 2018 	str.w	r2, [fp, #24]
 800d0f0:	696a      	ldr	r2, [r5, #20]
 800d0f2:	f8cb 201c 	str.w	r2, [fp, #28]
 800d0f6:	69a9      	ldr	r1, [r5, #24]
 800d0f8:	f10b 0220 	add.w	r2, fp, #32
 800d0fc:	3518      	adds	r5, #24
 800d0fe:	e750      	b.n	800cfa2 <_realloc_r+0x1fa>
 800d100:	20000918 	.word	0x20000918

0800d104 <cleanup_glue>:
 800d104:	b538      	push	{r3, r4, r5, lr}
 800d106:	460c      	mov	r4, r1
 800d108:	6809      	ldr	r1, [r1, #0]
 800d10a:	4605      	mov	r5, r0
 800d10c:	b929      	cbnz	r1, 800d11a <cleanup_glue+0x16>
 800d10e:	4621      	mov	r1, r4
 800d110:	4628      	mov	r0, r5
 800d112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d116:	f7ff b9d9 	b.w	800c4cc <_free_r>
 800d11a:	f7ff fff3 	bl	800d104 <cleanup_glue>
 800d11e:	4621      	mov	r1, r4
 800d120:	4628      	mov	r0, r5
 800d122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d126:	f7ff b9d1 	b.w	800c4cc <_free_r>
 800d12a:	bf00      	nop

0800d12c <_reclaim_reent>:
 800d12c:	4b20      	ldr	r3, [pc, #128]	; (800d1b0 <_reclaim_reent+0x84>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4283      	cmp	r3, r0
 800d132:	d03b      	beq.n	800d1ac <_reclaim_reent+0x80>
 800d134:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d136:	b570      	push	{r4, r5, r6, lr}
 800d138:	4605      	mov	r5, r0
 800d13a:	b18b      	cbz	r3, 800d160 <_reclaim_reent+0x34>
 800d13c:	2600      	movs	r6, #0
 800d13e:	5999      	ldr	r1, [r3, r6]
 800d140:	b139      	cbz	r1, 800d152 <_reclaim_reent+0x26>
 800d142:	680c      	ldr	r4, [r1, #0]
 800d144:	4628      	mov	r0, r5
 800d146:	f7ff f9c1 	bl	800c4cc <_free_r>
 800d14a:	4621      	mov	r1, r4
 800d14c:	2c00      	cmp	r4, #0
 800d14e:	d1f8      	bne.n	800d142 <_reclaim_reent+0x16>
 800d150:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800d152:	3604      	adds	r6, #4
 800d154:	2e80      	cmp	r6, #128	; 0x80
 800d156:	d1f2      	bne.n	800d13e <_reclaim_reent+0x12>
 800d158:	4619      	mov	r1, r3
 800d15a:	4628      	mov	r0, r5
 800d15c:	f7ff f9b6 	bl	800c4cc <_free_r>
 800d160:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800d162:	b111      	cbz	r1, 800d16a <_reclaim_reent+0x3e>
 800d164:	4628      	mov	r0, r5
 800d166:	f7ff f9b1 	bl	800c4cc <_free_r>
 800d16a:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 800d16e:	b151      	cbz	r1, 800d186 <_reclaim_reent+0x5a>
 800d170:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 800d174:	42b1      	cmp	r1, r6
 800d176:	d006      	beq.n	800d186 <_reclaim_reent+0x5a>
 800d178:	680c      	ldr	r4, [r1, #0]
 800d17a:	4628      	mov	r0, r5
 800d17c:	f7ff f9a6 	bl	800c4cc <_free_r>
 800d180:	42a6      	cmp	r6, r4
 800d182:	4621      	mov	r1, r4
 800d184:	d1f8      	bne.n	800d178 <_reclaim_reent+0x4c>
 800d186:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800d188:	b111      	cbz	r1, 800d190 <_reclaim_reent+0x64>
 800d18a:	4628      	mov	r0, r5
 800d18c:	f7ff f99e 	bl	800c4cc <_free_r>
 800d190:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d192:	b153      	cbz	r3, 800d1aa <_reclaim_reent+0x7e>
 800d194:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800d196:	4628      	mov	r0, r5
 800d198:	4798      	blx	r3
 800d19a:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 800d19e:	b121      	cbz	r1, 800d1aa <_reclaim_reent+0x7e>
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1a6:	f7ff bfad 	b.w	800d104 <cleanup_glue>
 800d1aa:	bd70      	pop	{r4, r5, r6, pc}
 800d1ac:	4770      	bx	lr
 800d1ae:	bf00      	nop
 800d1b0:	200004ec 	.word	0x200004ec

0800d1b4 <__sread>:
 800d1b4:	b510      	push	{r4, lr}
 800d1b6:	460c      	mov	r4, r1
 800d1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1bc:	f7ff fdde 	bl	800cd7c <_read_r>
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	db03      	blt.n	800d1cc <__sread+0x18>
 800d1c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d1c6:	4403      	add	r3, r0
 800d1c8:	6523      	str	r3, [r4, #80]	; 0x50
 800d1ca:	bd10      	pop	{r4, pc}
 800d1cc:	89a3      	ldrh	r3, [r4, #12]
 800d1ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d1d2:	81a3      	strh	r3, [r4, #12]
 800d1d4:	bd10      	pop	{r4, pc}
 800d1d6:	bf00      	nop

0800d1d8 <__seofread>:
 800d1d8:	2000      	movs	r0, #0
 800d1da:	4770      	bx	lr

0800d1dc <__swrite>:
 800d1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e0:	4616      	mov	r6, r2
 800d1e2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1e6:	461f      	mov	r7, r3
 800d1e8:	05d3      	lsls	r3, r2, #23
 800d1ea:	460c      	mov	r4, r1
 800d1ec:	4605      	mov	r5, r0
 800d1ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1f2:	d507      	bpl.n	800d204 <__swrite+0x28>
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	2302      	movs	r3, #2
 800d1f8:	f000 fb2c 	bl	800d854 <_lseek_r>
 800d1fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d204:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d208:	81a2      	strh	r2, [r4, #12]
 800d20a:	463b      	mov	r3, r7
 800d20c:	4632      	mov	r2, r6
 800d20e:	4628      	mov	r0, r5
 800d210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d214:	f000 ba86 	b.w	800d724 <_write_r>

0800d218 <__sseek>:
 800d218:	b510      	push	{r4, lr}
 800d21a:	460c      	mov	r4, r1
 800d21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d220:	f000 fb18 	bl	800d854 <_lseek_r>
 800d224:	89a3      	ldrh	r3, [r4, #12]
 800d226:	1c42      	adds	r2, r0, #1
 800d228:	bf0e      	itee	eq
 800d22a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d22e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d232:	6520      	strne	r0, [r4, #80]	; 0x50
 800d234:	81a3      	strh	r3, [r4, #12]
 800d236:	bd10      	pop	{r4, pc}

0800d238 <__sclose>:
 800d238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d23c:	f7fe be36 	b.w	800beac <_close_r>
 800d240:	eba2 0003 	sub.w	r0, r2, r3
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop

0800d248 <strcmp>:
 800d248:	7802      	ldrb	r2, [r0, #0]
 800d24a:	780b      	ldrb	r3, [r1, #0]
 800d24c:	2a01      	cmp	r2, #1
 800d24e:	bf28      	it	cs
 800d250:	429a      	cmpcs	r2, r3
 800d252:	d1f5      	bne.n	800d240 <__sclose+0x8>
 800d254:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 800d258:	ea40 0401 	orr.w	r4, r0, r1
 800d25c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d260:	f06f 0c00 	mvn.w	ip, #0
 800d264:	ea4f 7244 	mov.w	r2, r4, lsl #29
 800d268:	b312      	cbz	r2, 800d2b0 <strcmp+0x68>
 800d26a:	ea80 0401 	eor.w	r4, r0, r1
 800d26e:	f014 0f07 	tst.w	r4, #7
 800d272:	d16a      	bne.n	800d34a <strcmp+0x102>
 800d274:	f000 0407 	and.w	r4, r0, #7
 800d278:	f020 0007 	bic.w	r0, r0, #7
 800d27c:	f004 0503 	and.w	r5, r4, #3
 800d280:	f021 0107 	bic.w	r1, r1, #7
 800d284:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800d288:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800d28c:	f014 0f04 	tst.w	r4, #4
 800d290:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 800d294:	fa0c f405 	lsl.w	r4, ip, r5
 800d298:	ea62 0204 	orn	r2, r2, r4
 800d29c:	ea66 0604 	orn	r6, r6, r4
 800d2a0:	d00a      	beq.n	800d2b8 <strcmp+0x70>
 800d2a2:	ea63 0304 	orn	r3, r3, r4
 800d2a6:	4662      	mov	r2, ip
 800d2a8:	ea67 0704 	orn	r7, r7, r4
 800d2ac:	4666      	mov	r6, ip
 800d2ae:	e003      	b.n	800d2b8 <strcmp+0x70>
 800d2b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800d2b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 800d2b8:	fa82 f54c 	uadd8	r5, r2, ip
 800d2bc:	ea82 0406 	eor.w	r4, r2, r6
 800d2c0:	faa4 f48c 	sel	r4, r4, ip
 800d2c4:	bb6c      	cbnz	r4, 800d322 <strcmp+0xda>
 800d2c6:	fa83 f54c 	uadd8	r5, r3, ip
 800d2ca:	ea83 0507 	eor.w	r5, r3, r7
 800d2ce:	faa5 f58c 	sel	r5, r5, ip
 800d2d2:	b995      	cbnz	r5, 800d2fa <strcmp+0xb2>
 800d2d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 800d2d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800d2dc:	fa82 f54c 	uadd8	r5, r2, ip
 800d2e0:	ea82 0406 	eor.w	r4, r2, r6
 800d2e4:	faa4 f48c 	sel	r4, r4, ip
 800d2e8:	fa83 f54c 	uadd8	r5, r3, ip
 800d2ec:	ea83 0507 	eor.w	r5, r3, r7
 800d2f0:	faa5 f58c 	sel	r5, r5, ip
 800d2f4:	4325      	orrs	r5, r4
 800d2f6:	d0db      	beq.n	800d2b0 <strcmp+0x68>
 800d2f8:	b99c      	cbnz	r4, 800d322 <strcmp+0xda>
 800d2fa:	ba2d      	rev	r5, r5
 800d2fc:	fab5 f485 	clz	r4, r5
 800d300:	f024 0407 	bic.w	r4, r4, #7
 800d304:	fa27 f104 	lsr.w	r1, r7, r4
 800d308:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d30c:	fa23 f304 	lsr.w	r3, r3, r4
 800d310:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800d314:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800d318:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800d31c:	eba0 0001 	sub.w	r0, r0, r1
 800d320:	4770      	bx	lr
 800d322:	ba24      	rev	r4, r4
 800d324:	fab4 f484 	clz	r4, r4
 800d328:	f024 0407 	bic.w	r4, r4, #7
 800d32c:	fa26 f104 	lsr.w	r1, r6, r4
 800d330:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d334:	fa22 f204 	lsr.w	r2, r2, r4
 800d338:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800d33c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800d340:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800d344:	eba0 0001 	sub.w	r0, r0, r1
 800d348:	4770      	bx	lr
 800d34a:	f014 0f03 	tst.w	r4, #3
 800d34e:	d13c      	bne.n	800d3ca <strcmp+0x182>
 800d350:	f010 0403 	ands.w	r4, r0, #3
 800d354:	d128      	bne.n	800d3a8 <strcmp+0x160>
 800d356:	f850 2b08 	ldr.w	r2, [r0], #8
 800d35a:	f851 3b08 	ldr.w	r3, [r1], #8
 800d35e:	fa82 f54c 	uadd8	r5, r2, ip
 800d362:	ea82 0503 	eor.w	r5, r2, r3
 800d366:	faa5 f58c 	sel	r5, r5, ip
 800d36a:	b95d      	cbnz	r5, 800d384 <strcmp+0x13c>
 800d36c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800d370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d374:	fa82 f54c 	uadd8	r5, r2, ip
 800d378:	ea82 0503 	eor.w	r5, r2, r3
 800d37c:	faa5 f58c 	sel	r5, r5, ip
 800d380:	2d00      	cmp	r5, #0
 800d382:	d0e8      	beq.n	800d356 <strcmp+0x10e>
 800d384:	ba2d      	rev	r5, r5
 800d386:	fab5 f485 	clz	r4, r5
 800d38a:	f024 0407 	bic.w	r4, r4, #7
 800d38e:	fa23 f104 	lsr.w	r1, r3, r4
 800d392:	fa22 f204 	lsr.w	r2, r2, r4
 800d396:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800d39a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800d39e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800d3a2:	eba0 0001 	sub.w	r0, r0, r1
 800d3a6:	4770      	bx	lr
 800d3a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800d3ac:	f020 0003 	bic.w	r0, r0, #3
 800d3b0:	f850 2b08 	ldr.w	r2, [r0], #8
 800d3b4:	f021 0103 	bic.w	r1, r1, #3
 800d3b8:	f851 3b08 	ldr.w	r3, [r1], #8
 800d3bc:	fa0c f404 	lsl.w	r4, ip, r4
 800d3c0:	ea62 0204 	orn	r2, r2, r4
 800d3c4:	ea63 0304 	orn	r3, r3, r4
 800d3c8:	e7c9      	b.n	800d35e <strcmp+0x116>
 800d3ca:	f010 0403 	ands.w	r4, r0, #3
 800d3ce:	d01a      	beq.n	800d406 <strcmp+0x1be>
 800d3d0:	eba1 0104 	sub.w	r1, r1, r4
 800d3d4:	f020 0003 	bic.w	r0, r0, #3
 800d3d8:	07e4      	lsls	r4, r4, #31
 800d3da:	f850 2b04 	ldr.w	r2, [r0], #4
 800d3de:	d006      	beq.n	800d3ee <strcmp+0x1a6>
 800d3e0:	d20f      	bcs.n	800d402 <strcmp+0x1ba>
 800d3e2:	788b      	ldrb	r3, [r1, #2]
 800d3e4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 800d3e8:	1ae4      	subs	r4, r4, r3
 800d3ea:	d106      	bne.n	800d3fa <strcmp+0x1b2>
 800d3ec:	b12b      	cbz	r3, 800d3fa <strcmp+0x1b2>
 800d3ee:	78cb      	ldrb	r3, [r1, #3]
 800d3f0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 800d3f4:	1ae4      	subs	r4, r4, r3
 800d3f6:	d100      	bne.n	800d3fa <strcmp+0x1b2>
 800d3f8:	b91b      	cbnz	r3, 800d402 <strcmp+0x1ba>
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	f85d 4b10 	ldr.w	r4, [sp], #16
 800d400:	4770      	bx	lr
 800d402:	f101 0104 	add.w	r1, r1, #4
 800d406:	f850 2b04 	ldr.w	r2, [r0], #4
 800d40a:	07cc      	lsls	r4, r1, #31
 800d40c:	f021 0103 	bic.w	r1, r1, #3
 800d410:	f851 3b04 	ldr.w	r3, [r1], #4
 800d414:	d848      	bhi.n	800d4a8 <strcmp+0x260>
 800d416:	d224      	bcs.n	800d462 <strcmp+0x21a>
 800d418:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800d41c:	fa82 f54c 	uadd8	r5, r2, ip
 800d420:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 800d424:	faa5 f58c 	sel	r5, r5, ip
 800d428:	d10a      	bne.n	800d440 <strcmp+0x1f8>
 800d42a:	b965      	cbnz	r5, 800d446 <strcmp+0x1fe>
 800d42c:	f851 3b04 	ldr.w	r3, [r1], #4
 800d430:	ea84 0402 	eor.w	r4, r4, r2
 800d434:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 800d438:	d10e      	bne.n	800d458 <strcmp+0x210>
 800d43a:	f850 2b04 	ldr.w	r2, [r0], #4
 800d43e:	e7eb      	b.n	800d418 <strcmp+0x1d0>
 800d440:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800d444:	e055      	b.n	800d4f2 <strcmp+0x2aa>
 800d446:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800d44a:	d14d      	bne.n	800d4e8 <strcmp+0x2a0>
 800d44c:	7808      	ldrb	r0, [r1, #0]
 800d44e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800d452:	f1c0 0000 	rsb	r0, r0, #0
 800d456:	4770      	bx	lr
 800d458:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800d45c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800d460:	e047      	b.n	800d4f2 <strcmp+0x2aa>
 800d462:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 800d466:	fa82 f54c 	uadd8	r5, r2, ip
 800d46a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800d46e:	faa5 f58c 	sel	r5, r5, ip
 800d472:	d10a      	bne.n	800d48a <strcmp+0x242>
 800d474:	b965      	cbnz	r5, 800d490 <strcmp+0x248>
 800d476:	f851 3b04 	ldr.w	r3, [r1], #4
 800d47a:	ea84 0402 	eor.w	r4, r4, r2
 800d47e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 800d482:	d10c      	bne.n	800d49e <strcmp+0x256>
 800d484:	f850 2b04 	ldr.w	r2, [r0], #4
 800d488:	e7eb      	b.n	800d462 <strcmp+0x21a>
 800d48a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d48e:	e030      	b.n	800d4f2 <strcmp+0x2aa>
 800d490:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 800d494:	d128      	bne.n	800d4e8 <strcmp+0x2a0>
 800d496:	880b      	ldrh	r3, [r1, #0]
 800d498:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d49c:	e029      	b.n	800d4f2 <strcmp+0x2aa>
 800d49e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d4a2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 800d4a6:	e024      	b.n	800d4f2 <strcmp+0x2aa>
 800d4a8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800d4ac:	fa82 f54c 	uadd8	r5, r2, ip
 800d4b0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 800d4b4:	faa5 f58c 	sel	r5, r5, ip
 800d4b8:	d10a      	bne.n	800d4d0 <strcmp+0x288>
 800d4ba:	b965      	cbnz	r5, 800d4d6 <strcmp+0x28e>
 800d4bc:	f851 3b04 	ldr.w	r3, [r1], #4
 800d4c0:	ea84 0402 	eor.w	r4, r4, r2
 800d4c4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 800d4c8:	d109      	bne.n	800d4de <strcmp+0x296>
 800d4ca:	f850 2b04 	ldr.w	r2, [r0], #4
 800d4ce:	e7eb      	b.n	800d4a8 <strcmp+0x260>
 800d4d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800d4d4:	e00d      	b.n	800d4f2 <strcmp+0x2aa>
 800d4d6:	f015 0fff 	tst.w	r5, #255	; 0xff
 800d4da:	d105      	bne.n	800d4e8 <strcmp+0x2a0>
 800d4dc:	680b      	ldr	r3, [r1, #0]
 800d4de:	ea4f 2212 	mov.w	r2, r2, lsr #8
 800d4e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d4e6:	e004      	b.n	800d4f2 <strcmp+0x2aa>
 800d4e8:	f04f 0000 	mov.w	r0, #0
 800d4ec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800d4f0:	4770      	bx	lr
 800d4f2:	ba12      	rev	r2, r2
 800d4f4:	ba1b      	rev	r3, r3
 800d4f6:	fa82 f44c 	uadd8	r4, r2, ip
 800d4fa:	ea82 0403 	eor.w	r4, r2, r3
 800d4fe:	faa4 f58c 	sel	r5, r4, ip
 800d502:	fab5 f485 	clz	r4, r5
 800d506:	fa02 f204 	lsl.w	r2, r2, r4
 800d50a:	fa03 f304 	lsl.w	r3, r3, r4
 800d50e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 800d512:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800d516:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800d51a:	4770      	bx	lr

0800d51c <strncpy>:
 800d51c:	ea40 0301 	orr.w	r3, r0, r1
 800d520:	079b      	lsls	r3, r3, #30
 800d522:	b470      	push	{r4, r5, r6}
 800d524:	d12a      	bne.n	800d57c <strncpy+0x60>
 800d526:	2a03      	cmp	r2, #3
 800d528:	d928      	bls.n	800d57c <strncpy+0x60>
 800d52a:	460c      	mov	r4, r1
 800d52c:	4603      	mov	r3, r0
 800d52e:	4621      	mov	r1, r4
 800d530:	f854 6b04 	ldr.w	r6, [r4], #4
 800d534:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 800d538:	ea25 0506 	bic.w	r5, r5, r6
 800d53c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 800d540:	d106      	bne.n	800d550 <strncpy+0x34>
 800d542:	3a04      	subs	r2, #4
 800d544:	2a03      	cmp	r2, #3
 800d546:	f843 6b04 	str.w	r6, [r3], #4
 800d54a:	4621      	mov	r1, r4
 800d54c:	d8ef      	bhi.n	800d52e <strncpy+0x12>
 800d54e:	b19a      	cbz	r2, 800d578 <strncpy+0x5c>
 800d550:	780c      	ldrb	r4, [r1, #0]
 800d552:	701c      	strb	r4, [r3, #0]
 800d554:	3a01      	subs	r2, #1
 800d556:	3301      	adds	r3, #1
 800d558:	b13c      	cbz	r4, 800d56a <strncpy+0x4e>
 800d55a:	b16a      	cbz	r2, 800d578 <strncpy+0x5c>
 800d55c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d560:	f803 4b01 	strb.w	r4, [r3], #1
 800d564:	3a01      	subs	r2, #1
 800d566:	2c00      	cmp	r4, #0
 800d568:	d1f7      	bne.n	800d55a <strncpy+0x3e>
 800d56a:	b12a      	cbz	r2, 800d578 <strncpy+0x5c>
 800d56c:	441a      	add	r2, r3
 800d56e:	2100      	movs	r1, #0
 800d570:	f803 1b01 	strb.w	r1, [r3], #1
 800d574:	4293      	cmp	r3, r2
 800d576:	d1fb      	bne.n	800d570 <strncpy+0x54>
 800d578:	bc70      	pop	{r4, r5, r6}
 800d57a:	4770      	bx	lr
 800d57c:	4603      	mov	r3, r0
 800d57e:	e7e6      	b.n	800d54e <strncpy+0x32>

0800d580 <__swbuf_r>:
 800d580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d582:	460d      	mov	r5, r1
 800d584:	4614      	mov	r4, r2
 800d586:	4606      	mov	r6, r0
 800d588:	b110      	cbz	r0, 800d590 <__swbuf_r+0x10>
 800d58a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d043      	beq.n	800d618 <__swbuf_r+0x98>
 800d590:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d594:	69a3      	ldr	r3, [r4, #24]
 800d596:	60a3      	str	r3, [r4, #8]
 800d598:	b291      	uxth	r1, r2
 800d59a:	0708      	lsls	r0, r1, #28
 800d59c:	d51b      	bpl.n	800d5d6 <__swbuf_r+0x56>
 800d59e:	6923      	ldr	r3, [r4, #16]
 800d5a0:	b1cb      	cbz	r3, 800d5d6 <__swbuf_r+0x56>
 800d5a2:	b2ed      	uxtb	r5, r5
 800d5a4:	0489      	lsls	r1, r1, #18
 800d5a6:	462f      	mov	r7, r5
 800d5a8:	d522      	bpl.n	800d5f0 <__swbuf_r+0x70>
 800d5aa:	6822      	ldr	r2, [r4, #0]
 800d5ac:	6961      	ldr	r1, [r4, #20]
 800d5ae:	1ad3      	subs	r3, r2, r3
 800d5b0:	4299      	cmp	r1, r3
 800d5b2:	dd29      	ble.n	800d608 <__swbuf_r+0x88>
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	68a1      	ldr	r1, [r4, #8]
 800d5b8:	1c50      	adds	r0, r2, #1
 800d5ba:	3901      	subs	r1, #1
 800d5bc:	60a1      	str	r1, [r4, #8]
 800d5be:	6020      	str	r0, [r4, #0]
 800d5c0:	7015      	strb	r5, [r2, #0]
 800d5c2:	6962      	ldr	r2, [r4, #20]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d02a      	beq.n	800d61e <__swbuf_r+0x9e>
 800d5c8:	89a3      	ldrh	r3, [r4, #12]
 800d5ca:	07db      	lsls	r3, r3, #31
 800d5cc:	d501      	bpl.n	800d5d2 <__swbuf_r+0x52>
 800d5ce:	2d0a      	cmp	r5, #10
 800d5d0:	d025      	beq.n	800d61e <__swbuf_r+0x9e>
 800d5d2:	4638      	mov	r0, r7
 800d5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5d6:	4621      	mov	r1, r4
 800d5d8:	4630      	mov	r0, r6
 800d5da:	f7fe fbfd 	bl	800bdd8 <__swsetup_r>
 800d5de:	bb20      	cbnz	r0, 800d62a <__swbuf_r+0xaa>
 800d5e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5e4:	6923      	ldr	r3, [r4, #16]
 800d5e6:	b291      	uxth	r1, r2
 800d5e8:	b2ed      	uxtb	r5, r5
 800d5ea:	0489      	lsls	r1, r1, #18
 800d5ec:	462f      	mov	r7, r5
 800d5ee:	d4dc      	bmi.n	800d5aa <__swbuf_r+0x2a>
 800d5f0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d5f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d5f6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800d5fa:	81a2      	strh	r2, [r4, #12]
 800d5fc:	6822      	ldr	r2, [r4, #0]
 800d5fe:	6661      	str	r1, [r4, #100]	; 0x64
 800d600:	6961      	ldr	r1, [r4, #20]
 800d602:	1ad3      	subs	r3, r2, r3
 800d604:	4299      	cmp	r1, r3
 800d606:	dcd5      	bgt.n	800d5b4 <__swbuf_r+0x34>
 800d608:	4621      	mov	r1, r4
 800d60a:	4630      	mov	r0, r6
 800d60c:	f7fe fd0a 	bl	800c024 <_fflush_r>
 800d610:	b958      	cbnz	r0, 800d62a <__swbuf_r+0xaa>
 800d612:	6822      	ldr	r2, [r4, #0]
 800d614:	2301      	movs	r3, #1
 800d616:	e7ce      	b.n	800d5b6 <__swbuf_r+0x36>
 800d618:	f7fe fdb0 	bl	800c17c <__sinit>
 800d61c:	e7b8      	b.n	800d590 <__swbuf_r+0x10>
 800d61e:	4621      	mov	r1, r4
 800d620:	4630      	mov	r0, r6
 800d622:	f7fe fcff 	bl	800c024 <_fflush_r>
 800d626:	2800      	cmp	r0, #0
 800d628:	d0d3      	beq.n	800d5d2 <__swbuf_r+0x52>
 800d62a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d62e:	e7d0      	b.n	800d5d2 <__swbuf_r+0x52>

0800d630 <__swbuf>:
 800d630:	4b02      	ldr	r3, [pc, #8]	; (800d63c <__swbuf+0xc>)
 800d632:	460a      	mov	r2, r1
 800d634:	4601      	mov	r1, r0
 800d636:	6818      	ldr	r0, [r3, #0]
 800d638:	f7ff bfa2 	b.w	800d580 <__swbuf_r>
 800d63c:	200004ec 	.word	0x200004ec

0800d640 <_wcrtomb_r>:
 800d640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d642:	4c11      	ldr	r4, [pc, #68]	; (800d688 <_wcrtomb_r+0x48>)
 800d644:	6824      	ldr	r4, [r4, #0]
 800d646:	b085      	sub	sp, #20
 800d648:	4606      	mov	r6, r0
 800d64a:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800d64c:	461f      	mov	r7, r3
 800d64e:	b151      	cbz	r1, 800d666 <_wcrtomb_r+0x26>
 800d650:	4d0e      	ldr	r5, [pc, #56]	; (800d68c <_wcrtomb_r+0x4c>)
 800d652:	2c00      	cmp	r4, #0
 800d654:	bf08      	it	eq
 800d656:	462c      	moveq	r4, r5
 800d658:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800d65c:	47a0      	blx	r4
 800d65e:	1c43      	adds	r3, r0, #1
 800d660:	d00c      	beq.n	800d67c <_wcrtomb_r+0x3c>
 800d662:	b005      	add	sp, #20
 800d664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d666:	4a09      	ldr	r2, [pc, #36]	; (800d68c <_wcrtomb_r+0x4c>)
 800d668:	2c00      	cmp	r4, #0
 800d66a:	bf08      	it	eq
 800d66c:	4614      	moveq	r4, r2
 800d66e:	460a      	mov	r2, r1
 800d670:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800d674:	a901      	add	r1, sp, #4
 800d676:	47a0      	blx	r4
 800d678:	1c43      	adds	r3, r0, #1
 800d67a:	d1f2      	bne.n	800d662 <_wcrtomb_r+0x22>
 800d67c:	2200      	movs	r2, #0
 800d67e:	238a      	movs	r3, #138	; 0x8a
 800d680:	603a      	str	r2, [r7, #0]
 800d682:	6033      	str	r3, [r6, #0]
 800d684:	b005      	add	sp, #20
 800d686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d688:	200004ec 	.word	0x200004ec
 800d68c:	20000d28 	.word	0x20000d28

0800d690 <wcrtomb>:
 800d690:	4b12      	ldr	r3, [pc, #72]	; (800d6dc <wcrtomb+0x4c>)
 800d692:	b570      	push	{r4, r5, r6, lr}
 800d694:	681c      	ldr	r4, [r3, #0]
 800d696:	4615      	mov	r5, r2
 800d698:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d69a:	4a11      	ldr	r2, [pc, #68]	; (800d6e0 <wcrtomb+0x50>)
 800d69c:	b084      	sub	sp, #16
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	bf08      	it	eq
 800d6a2:	4613      	moveq	r3, r2
 800d6a4:	b150      	cbz	r0, 800d6bc <wcrtomb+0x2c>
 800d6a6:	460a      	mov	r2, r1
 800d6a8:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 800d6ac:	4601      	mov	r1, r0
 800d6ae:	462b      	mov	r3, r5
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	47b0      	blx	r6
 800d6b4:	1c43      	adds	r3, r0, #1
 800d6b6:	d00a      	beq.n	800d6ce <wcrtomb+0x3e>
 800d6b8:	b004      	add	sp, #16
 800d6ba:	bd70      	pop	{r4, r5, r6, pc}
 800d6bc:	4602      	mov	r2, r0
 800d6be:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 800d6c2:	a901      	add	r1, sp, #4
 800d6c4:	462b      	mov	r3, r5
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	47b0      	blx	r6
 800d6ca:	1c43      	adds	r3, r0, #1
 800d6cc:	d1f4      	bne.n	800d6b8 <wcrtomb+0x28>
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	238a      	movs	r3, #138	; 0x8a
 800d6d2:	602a      	str	r2, [r5, #0]
 800d6d4:	6023      	str	r3, [r4, #0]
 800d6d6:	b004      	add	sp, #16
 800d6d8:	bd70      	pop	{r4, r5, r6, pc}
 800d6da:	bf00      	nop
 800d6dc:	200004ec 	.word	0x200004ec
 800d6e0:	20000d28 	.word	0x20000d28

0800d6e4 <_wctomb_r>:
 800d6e4:	b430      	push	{r4, r5}
 800d6e6:	4c06      	ldr	r4, [pc, #24]	; (800d700 <_wctomb_r+0x1c>)
 800d6e8:	4d06      	ldr	r5, [pc, #24]	; (800d704 <_wctomb_r+0x20>)
 800d6ea:	6824      	ldr	r4, [r4, #0]
 800d6ec:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800d6ee:	2c00      	cmp	r4, #0
 800d6f0:	bf08      	it	eq
 800d6f2:	462c      	moveq	r4, r5
 800d6f4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800d6f8:	46a4      	mov	ip, r4
 800d6fa:	bc30      	pop	{r4, r5}
 800d6fc:	4760      	bx	ip
 800d6fe:	bf00      	nop
 800d700:	200004ec 	.word	0x200004ec
 800d704:	20000d28 	.word	0x20000d28

0800d708 <__ascii_wctomb>:
 800d708:	b121      	cbz	r1, 800d714 <__ascii_wctomb+0xc>
 800d70a:	2aff      	cmp	r2, #255	; 0xff
 800d70c:	d804      	bhi.n	800d718 <__ascii_wctomb+0x10>
 800d70e:	700a      	strb	r2, [r1, #0]
 800d710:	2001      	movs	r0, #1
 800d712:	4770      	bx	lr
 800d714:	4608      	mov	r0, r1
 800d716:	4770      	bx	lr
 800d718:	238a      	movs	r3, #138	; 0x8a
 800d71a:	6003      	str	r3, [r0, #0]
 800d71c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop

0800d724 <_write_r>:
 800d724:	b570      	push	{r4, r5, r6, lr}
 800d726:	460d      	mov	r5, r1
 800d728:	4c08      	ldr	r4, [pc, #32]	; (800d74c <_write_r+0x28>)
 800d72a:	4611      	mov	r1, r2
 800d72c:	4606      	mov	r6, r0
 800d72e:	461a      	mov	r2, r3
 800d730:	4628      	mov	r0, r5
 800d732:	2300      	movs	r3, #0
 800d734:	6023      	str	r3, [r4, #0]
 800d736:	f000 fa63 	bl	800dc00 <_write>
 800d73a:	1c43      	adds	r3, r0, #1
 800d73c:	d000      	beq.n	800d740 <_write_r+0x1c>
 800d73e:	bd70      	pop	{r4, r5, r6, pc}
 800d740:	6823      	ldr	r3, [r4, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d0fb      	beq.n	800d73e <_write_r+0x1a>
 800d746:	6033      	str	r3, [r6, #0]
 800d748:	bd70      	pop	{r4, r5, r6, pc}
 800d74a:	bf00      	nop
 800d74c:	20001638 	.word	0x20001638

0800d750 <_fclose_r>:
 800d750:	b570      	push	{r4, r5, r6, lr}
 800d752:	2900      	cmp	r1, #0
 800d754:	d048      	beq.n	800d7e8 <_fclose_r+0x98>
 800d756:	4605      	mov	r5, r0
 800d758:	460c      	mov	r4, r1
 800d75a:	b110      	cbz	r0, 800d762 <_fclose_r+0x12>
 800d75c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d048      	beq.n	800d7f4 <_fclose_r+0xa4>
 800d762:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d768:	07d0      	lsls	r0, r2, #31
 800d76a:	d440      	bmi.n	800d7ee <_fclose_r+0x9e>
 800d76c:	0599      	lsls	r1, r3, #22
 800d76e:	d530      	bpl.n	800d7d2 <_fclose_r+0x82>
 800d770:	4621      	mov	r1, r4
 800d772:	4628      	mov	r0, r5
 800d774:	f7fe fbac 	bl	800bed0 <__sflush_r>
 800d778:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d77a:	4606      	mov	r6, r0
 800d77c:	b133      	cbz	r3, 800d78c <_fclose_r+0x3c>
 800d77e:	69e1      	ldr	r1, [r4, #28]
 800d780:	4628      	mov	r0, r5
 800d782:	4798      	blx	r3
 800d784:	2800      	cmp	r0, #0
 800d786:	bfb8      	it	lt
 800d788:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 800d78c:	89a3      	ldrh	r3, [r4, #12]
 800d78e:	061a      	lsls	r2, r3, #24
 800d790:	d43c      	bmi.n	800d80c <_fclose_r+0xbc>
 800d792:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d794:	b141      	cbz	r1, 800d7a8 <_fclose_r+0x58>
 800d796:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d79a:	4299      	cmp	r1, r3
 800d79c:	d002      	beq.n	800d7a4 <_fclose_r+0x54>
 800d79e:	4628      	mov	r0, r5
 800d7a0:	f7fe fe94 	bl	800c4cc <_free_r>
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	6323      	str	r3, [r4, #48]	; 0x30
 800d7a8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d7aa:	b121      	cbz	r1, 800d7b6 <_fclose_r+0x66>
 800d7ac:	4628      	mov	r0, r5
 800d7ae:	f7fe fe8d 	bl	800c4cc <_free_r>
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	6463      	str	r3, [r4, #68]	; 0x44
 800d7b6:	f7fe fd5f 	bl	800c278 <__sfp_lock_acquire>
 800d7ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7bc:	2200      	movs	r2, #0
 800d7be:	07db      	lsls	r3, r3, #31
 800d7c0:	81a2      	strh	r2, [r4, #12]
 800d7c2:	d51f      	bpl.n	800d804 <_fclose_r+0xb4>
 800d7c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7c6:	f7ff f9c3 	bl	800cb50 <__retarget_lock_close_recursive>
 800d7ca:	f7fe fd5b 	bl	800c284 <__sfp_lock_release>
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	bd70      	pop	{r4, r5, r6, pc}
 800d7d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7d4:	f7ff f9c0 	bl	800cb58 <__retarget_lock_acquire_recursive>
 800d7d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d1c7      	bne.n	800d770 <_fclose_r+0x20>
 800d7e0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800d7e2:	f016 0601 	ands.w	r6, r6, #1
 800d7e6:	d016      	beq.n	800d816 <_fclose_r+0xc6>
 800d7e8:	2600      	movs	r6, #0
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	bd70      	pop	{r4, r5, r6, pc}
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d0fa      	beq.n	800d7e8 <_fclose_r+0x98>
 800d7f2:	e7bd      	b.n	800d770 <_fclose_r+0x20>
 800d7f4:	f7fe fcc2 	bl	800c17c <__sinit>
 800d7f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d7fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7fe:	07d0      	lsls	r0, r2, #31
 800d800:	d4f5      	bmi.n	800d7ee <_fclose_r+0x9e>
 800d802:	e7b3      	b.n	800d76c <_fclose_r+0x1c>
 800d804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d806:	f7ff f9af 	bl	800cb68 <__retarget_lock_release_recursive>
 800d80a:	e7db      	b.n	800d7c4 <_fclose_r+0x74>
 800d80c:	6921      	ldr	r1, [r4, #16]
 800d80e:	4628      	mov	r0, r5
 800d810:	f7fe fe5c 	bl	800c4cc <_free_r>
 800d814:	e7bd      	b.n	800d792 <_fclose_r+0x42>
 800d816:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d818:	f7ff f9a6 	bl	800cb68 <__retarget_lock_release_recursive>
 800d81c:	4630      	mov	r0, r6
 800d81e:	bd70      	pop	{r4, r5, r6, pc}

0800d820 <fclose>:
 800d820:	4b02      	ldr	r3, [pc, #8]	; (800d82c <fclose+0xc>)
 800d822:	4601      	mov	r1, r0
 800d824:	6818      	ldr	r0, [r3, #0]
 800d826:	f7ff bf93 	b.w	800d750 <_fclose_r>
 800d82a:	bf00      	nop
 800d82c:	200004ec 	.word	0x200004ec

0800d830 <_isatty_r>:
 800d830:	b538      	push	{r3, r4, r5, lr}
 800d832:	4c07      	ldr	r4, [pc, #28]	; (800d850 <_isatty_r+0x20>)
 800d834:	2300      	movs	r3, #0
 800d836:	4605      	mov	r5, r0
 800d838:	4608      	mov	r0, r1
 800d83a:	6023      	str	r3, [r4, #0]
 800d83c:	f000 f9b8 	bl	800dbb0 <_isatty>
 800d840:	1c43      	adds	r3, r0, #1
 800d842:	d000      	beq.n	800d846 <_isatty_r+0x16>
 800d844:	bd38      	pop	{r3, r4, r5, pc}
 800d846:	6823      	ldr	r3, [r4, #0]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d0fb      	beq.n	800d844 <_isatty_r+0x14>
 800d84c:	602b      	str	r3, [r5, #0]
 800d84e:	bd38      	pop	{r3, r4, r5, pc}
 800d850:	20001638 	.word	0x20001638

0800d854 <_lseek_r>:
 800d854:	b570      	push	{r4, r5, r6, lr}
 800d856:	460d      	mov	r5, r1
 800d858:	4c08      	ldr	r4, [pc, #32]	; (800d87c <_lseek_r+0x28>)
 800d85a:	4611      	mov	r1, r2
 800d85c:	4606      	mov	r6, r0
 800d85e:	461a      	mov	r2, r3
 800d860:	4628      	mov	r0, r5
 800d862:	2300      	movs	r3, #0
 800d864:	6023      	str	r3, [r4, #0]
 800d866:	f000 f9b3 	bl	800dbd0 <_lseek>
 800d86a:	1c43      	adds	r3, r0, #1
 800d86c:	d000      	beq.n	800d870 <_lseek_r+0x1c>
 800d86e:	bd70      	pop	{r4, r5, r6, pc}
 800d870:	6823      	ldr	r3, [r4, #0]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d0fb      	beq.n	800d86e <_lseek_r+0x1a>
 800d876:	6033      	str	r3, [r6, #0]
 800d878:	bd70      	pop	{r4, r5, r6, pc}
 800d87a:	bf00      	nop
 800d87c:	20001638 	.word	0x20001638

0800d880 <__aeabi_uldivmod>:
 800d880:	b953      	cbnz	r3, 800d898 <__aeabi_uldivmod+0x18>
 800d882:	b94a      	cbnz	r2, 800d898 <__aeabi_uldivmod+0x18>
 800d884:	2900      	cmp	r1, #0
 800d886:	bf08      	it	eq
 800d888:	2800      	cmpeq	r0, #0
 800d88a:	bf1c      	itt	ne
 800d88c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800d890:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800d894:	f000 b972 	b.w	800db7c <__aeabi_idiv0>
 800d898:	f1ad 0c08 	sub.w	ip, sp, #8
 800d89c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800d8a0:	f000 f806 	bl	800d8b0 <__udivmoddi4>
 800d8a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d8a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8ac:	b004      	add	sp, #16
 800d8ae:	4770      	bx	lr

0800d8b0 <__udivmoddi4>:
 800d8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8b4:	9e08      	ldr	r6, [sp, #32]
 800d8b6:	4604      	mov	r4, r0
 800d8b8:	4688      	mov	r8, r1
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d14b      	bne.n	800d956 <__udivmoddi4+0xa6>
 800d8be:	428a      	cmp	r2, r1
 800d8c0:	4615      	mov	r5, r2
 800d8c2:	d967      	bls.n	800d994 <__udivmoddi4+0xe4>
 800d8c4:	fab2 f282 	clz	r2, r2
 800d8c8:	b14a      	cbz	r2, 800d8de <__udivmoddi4+0x2e>
 800d8ca:	f1c2 0720 	rsb	r7, r2, #32
 800d8ce:	fa01 f302 	lsl.w	r3, r1, r2
 800d8d2:	fa20 f707 	lsr.w	r7, r0, r7
 800d8d6:	4095      	lsls	r5, r2
 800d8d8:	ea47 0803 	orr.w	r8, r7, r3
 800d8dc:	4094      	lsls	r4, r2
 800d8de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800d8e2:	0c23      	lsrs	r3, r4, #16
 800d8e4:	fbb8 f7fe 	udiv	r7, r8, lr
 800d8e8:	fa1f fc85 	uxth.w	ip, r5
 800d8ec:	fb0e 8817 	mls	r8, lr, r7, r8
 800d8f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800d8f4:	fb07 f10c 	mul.w	r1, r7, ip
 800d8f8:	4299      	cmp	r1, r3
 800d8fa:	d909      	bls.n	800d910 <__udivmoddi4+0x60>
 800d8fc:	18eb      	adds	r3, r5, r3
 800d8fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800d902:	f080 811b 	bcs.w	800db3c <__udivmoddi4+0x28c>
 800d906:	4299      	cmp	r1, r3
 800d908:	f240 8118 	bls.w	800db3c <__udivmoddi4+0x28c>
 800d90c:	3f02      	subs	r7, #2
 800d90e:	442b      	add	r3, r5
 800d910:	1a5b      	subs	r3, r3, r1
 800d912:	b2a4      	uxth	r4, r4
 800d914:	fbb3 f0fe 	udiv	r0, r3, lr
 800d918:	fb0e 3310 	mls	r3, lr, r0, r3
 800d91c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800d920:	fb00 fc0c 	mul.w	ip, r0, ip
 800d924:	45a4      	cmp	ip, r4
 800d926:	d909      	bls.n	800d93c <__udivmoddi4+0x8c>
 800d928:	192c      	adds	r4, r5, r4
 800d92a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d92e:	f080 8107 	bcs.w	800db40 <__udivmoddi4+0x290>
 800d932:	45a4      	cmp	ip, r4
 800d934:	f240 8104 	bls.w	800db40 <__udivmoddi4+0x290>
 800d938:	3802      	subs	r0, #2
 800d93a:	442c      	add	r4, r5
 800d93c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800d940:	eba4 040c 	sub.w	r4, r4, ip
 800d944:	2700      	movs	r7, #0
 800d946:	b11e      	cbz	r6, 800d950 <__udivmoddi4+0xa0>
 800d948:	40d4      	lsrs	r4, r2
 800d94a:	2300      	movs	r3, #0
 800d94c:	e9c6 4300 	strd	r4, r3, [r6]
 800d950:	4639      	mov	r1, r7
 800d952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d956:	428b      	cmp	r3, r1
 800d958:	d909      	bls.n	800d96e <__udivmoddi4+0xbe>
 800d95a:	2e00      	cmp	r6, #0
 800d95c:	f000 80eb 	beq.w	800db36 <__udivmoddi4+0x286>
 800d960:	2700      	movs	r7, #0
 800d962:	e9c6 0100 	strd	r0, r1, [r6]
 800d966:	4638      	mov	r0, r7
 800d968:	4639      	mov	r1, r7
 800d96a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d96e:	fab3 f783 	clz	r7, r3
 800d972:	2f00      	cmp	r7, #0
 800d974:	d147      	bne.n	800da06 <__udivmoddi4+0x156>
 800d976:	428b      	cmp	r3, r1
 800d978:	d302      	bcc.n	800d980 <__udivmoddi4+0xd0>
 800d97a:	4282      	cmp	r2, r0
 800d97c:	f200 80fa 	bhi.w	800db74 <__udivmoddi4+0x2c4>
 800d980:	1a84      	subs	r4, r0, r2
 800d982:	eb61 0303 	sbc.w	r3, r1, r3
 800d986:	2001      	movs	r0, #1
 800d988:	4698      	mov	r8, r3
 800d98a:	2e00      	cmp	r6, #0
 800d98c:	d0e0      	beq.n	800d950 <__udivmoddi4+0xa0>
 800d98e:	e9c6 4800 	strd	r4, r8, [r6]
 800d992:	e7dd      	b.n	800d950 <__udivmoddi4+0xa0>
 800d994:	b902      	cbnz	r2, 800d998 <__udivmoddi4+0xe8>
 800d996:	deff      	udf	#255	; 0xff
 800d998:	fab2 f282 	clz	r2, r2
 800d99c:	2a00      	cmp	r2, #0
 800d99e:	f040 808f 	bne.w	800dac0 <__udivmoddi4+0x210>
 800d9a2:	1b49      	subs	r1, r1, r5
 800d9a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800d9a8:	fa1f f885 	uxth.w	r8, r5
 800d9ac:	2701      	movs	r7, #1
 800d9ae:	fbb1 fcfe 	udiv	ip, r1, lr
 800d9b2:	0c23      	lsrs	r3, r4, #16
 800d9b4:	fb0e 111c 	mls	r1, lr, ip, r1
 800d9b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d9bc:	fb08 f10c 	mul.w	r1, r8, ip
 800d9c0:	4299      	cmp	r1, r3
 800d9c2:	d907      	bls.n	800d9d4 <__udivmoddi4+0x124>
 800d9c4:	18eb      	adds	r3, r5, r3
 800d9c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800d9ca:	d202      	bcs.n	800d9d2 <__udivmoddi4+0x122>
 800d9cc:	4299      	cmp	r1, r3
 800d9ce:	f200 80cd 	bhi.w	800db6c <__udivmoddi4+0x2bc>
 800d9d2:	4684      	mov	ip, r0
 800d9d4:	1a59      	subs	r1, r3, r1
 800d9d6:	b2a3      	uxth	r3, r4
 800d9d8:	fbb1 f0fe 	udiv	r0, r1, lr
 800d9dc:	fb0e 1410 	mls	r4, lr, r0, r1
 800d9e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800d9e4:	fb08 f800 	mul.w	r8, r8, r0
 800d9e8:	45a0      	cmp	r8, r4
 800d9ea:	d907      	bls.n	800d9fc <__udivmoddi4+0x14c>
 800d9ec:	192c      	adds	r4, r5, r4
 800d9ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d9f2:	d202      	bcs.n	800d9fa <__udivmoddi4+0x14a>
 800d9f4:	45a0      	cmp	r8, r4
 800d9f6:	f200 80b6 	bhi.w	800db66 <__udivmoddi4+0x2b6>
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	eba4 0408 	sub.w	r4, r4, r8
 800da00:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800da04:	e79f      	b.n	800d946 <__udivmoddi4+0x96>
 800da06:	f1c7 0c20 	rsb	ip, r7, #32
 800da0a:	40bb      	lsls	r3, r7
 800da0c:	fa22 fe0c 	lsr.w	lr, r2, ip
 800da10:	ea4e 0e03 	orr.w	lr, lr, r3
 800da14:	fa01 f407 	lsl.w	r4, r1, r7
 800da18:	fa20 f50c 	lsr.w	r5, r0, ip
 800da1c:	fa21 f30c 	lsr.w	r3, r1, ip
 800da20:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800da24:	4325      	orrs	r5, r4
 800da26:	fbb3 f9f8 	udiv	r9, r3, r8
 800da2a:	0c2c      	lsrs	r4, r5, #16
 800da2c:	fb08 3319 	mls	r3, r8, r9, r3
 800da30:	fa1f fa8e 	uxth.w	sl, lr
 800da34:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800da38:	fb09 f40a 	mul.w	r4, r9, sl
 800da3c:	429c      	cmp	r4, r3
 800da3e:	fa02 f207 	lsl.w	r2, r2, r7
 800da42:	fa00 f107 	lsl.w	r1, r0, r7
 800da46:	d90b      	bls.n	800da60 <__udivmoddi4+0x1b0>
 800da48:	eb1e 0303 	adds.w	r3, lr, r3
 800da4c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800da50:	f080 8087 	bcs.w	800db62 <__udivmoddi4+0x2b2>
 800da54:	429c      	cmp	r4, r3
 800da56:	f240 8084 	bls.w	800db62 <__udivmoddi4+0x2b2>
 800da5a:	f1a9 0902 	sub.w	r9, r9, #2
 800da5e:	4473      	add	r3, lr
 800da60:	1b1b      	subs	r3, r3, r4
 800da62:	b2ad      	uxth	r5, r5
 800da64:	fbb3 f0f8 	udiv	r0, r3, r8
 800da68:	fb08 3310 	mls	r3, r8, r0, r3
 800da6c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800da70:	fb00 fa0a 	mul.w	sl, r0, sl
 800da74:	45a2      	cmp	sl, r4
 800da76:	d908      	bls.n	800da8a <__udivmoddi4+0x1da>
 800da78:	eb1e 0404 	adds.w	r4, lr, r4
 800da7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800da80:	d26b      	bcs.n	800db5a <__udivmoddi4+0x2aa>
 800da82:	45a2      	cmp	sl, r4
 800da84:	d969      	bls.n	800db5a <__udivmoddi4+0x2aa>
 800da86:	3802      	subs	r0, #2
 800da88:	4474      	add	r4, lr
 800da8a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800da8e:	fba0 8902 	umull	r8, r9, r0, r2
 800da92:	eba4 040a 	sub.w	r4, r4, sl
 800da96:	454c      	cmp	r4, r9
 800da98:	46c2      	mov	sl, r8
 800da9a:	464b      	mov	r3, r9
 800da9c:	d354      	bcc.n	800db48 <__udivmoddi4+0x298>
 800da9e:	d051      	beq.n	800db44 <__udivmoddi4+0x294>
 800daa0:	2e00      	cmp	r6, #0
 800daa2:	d069      	beq.n	800db78 <__udivmoddi4+0x2c8>
 800daa4:	ebb1 050a 	subs.w	r5, r1, sl
 800daa8:	eb64 0403 	sbc.w	r4, r4, r3
 800daac:	fa04 fc0c 	lsl.w	ip, r4, ip
 800dab0:	40fd      	lsrs	r5, r7
 800dab2:	40fc      	lsrs	r4, r7
 800dab4:	ea4c 0505 	orr.w	r5, ip, r5
 800dab8:	e9c6 5400 	strd	r5, r4, [r6]
 800dabc:	2700      	movs	r7, #0
 800dabe:	e747      	b.n	800d950 <__udivmoddi4+0xa0>
 800dac0:	f1c2 0320 	rsb	r3, r2, #32
 800dac4:	fa20 f703 	lsr.w	r7, r0, r3
 800dac8:	4095      	lsls	r5, r2
 800daca:	fa01 f002 	lsl.w	r0, r1, r2
 800dace:	fa21 f303 	lsr.w	r3, r1, r3
 800dad2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800dad6:	4338      	orrs	r0, r7
 800dad8:	0c01      	lsrs	r1, r0, #16
 800dada:	fbb3 f7fe 	udiv	r7, r3, lr
 800dade:	fa1f f885 	uxth.w	r8, r5
 800dae2:	fb0e 3317 	mls	r3, lr, r7, r3
 800dae6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800daea:	fb07 f308 	mul.w	r3, r7, r8
 800daee:	428b      	cmp	r3, r1
 800daf0:	fa04 f402 	lsl.w	r4, r4, r2
 800daf4:	d907      	bls.n	800db06 <__udivmoddi4+0x256>
 800daf6:	1869      	adds	r1, r5, r1
 800daf8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800dafc:	d22f      	bcs.n	800db5e <__udivmoddi4+0x2ae>
 800dafe:	428b      	cmp	r3, r1
 800db00:	d92d      	bls.n	800db5e <__udivmoddi4+0x2ae>
 800db02:	3f02      	subs	r7, #2
 800db04:	4429      	add	r1, r5
 800db06:	1acb      	subs	r3, r1, r3
 800db08:	b281      	uxth	r1, r0
 800db0a:	fbb3 f0fe 	udiv	r0, r3, lr
 800db0e:	fb0e 3310 	mls	r3, lr, r0, r3
 800db12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800db16:	fb00 f308 	mul.w	r3, r0, r8
 800db1a:	428b      	cmp	r3, r1
 800db1c:	d907      	bls.n	800db2e <__udivmoddi4+0x27e>
 800db1e:	1869      	adds	r1, r5, r1
 800db20:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800db24:	d217      	bcs.n	800db56 <__udivmoddi4+0x2a6>
 800db26:	428b      	cmp	r3, r1
 800db28:	d915      	bls.n	800db56 <__udivmoddi4+0x2a6>
 800db2a:	3802      	subs	r0, #2
 800db2c:	4429      	add	r1, r5
 800db2e:	1ac9      	subs	r1, r1, r3
 800db30:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800db34:	e73b      	b.n	800d9ae <__udivmoddi4+0xfe>
 800db36:	4637      	mov	r7, r6
 800db38:	4630      	mov	r0, r6
 800db3a:	e709      	b.n	800d950 <__udivmoddi4+0xa0>
 800db3c:	4607      	mov	r7, r0
 800db3e:	e6e7      	b.n	800d910 <__udivmoddi4+0x60>
 800db40:	4618      	mov	r0, r3
 800db42:	e6fb      	b.n	800d93c <__udivmoddi4+0x8c>
 800db44:	4541      	cmp	r1, r8
 800db46:	d2ab      	bcs.n	800daa0 <__udivmoddi4+0x1f0>
 800db48:	ebb8 0a02 	subs.w	sl, r8, r2
 800db4c:	eb69 020e 	sbc.w	r2, r9, lr
 800db50:	3801      	subs	r0, #1
 800db52:	4613      	mov	r3, r2
 800db54:	e7a4      	b.n	800daa0 <__udivmoddi4+0x1f0>
 800db56:	4660      	mov	r0, ip
 800db58:	e7e9      	b.n	800db2e <__udivmoddi4+0x27e>
 800db5a:	4618      	mov	r0, r3
 800db5c:	e795      	b.n	800da8a <__udivmoddi4+0x1da>
 800db5e:	4667      	mov	r7, ip
 800db60:	e7d1      	b.n	800db06 <__udivmoddi4+0x256>
 800db62:	4681      	mov	r9, r0
 800db64:	e77c      	b.n	800da60 <__udivmoddi4+0x1b0>
 800db66:	3802      	subs	r0, #2
 800db68:	442c      	add	r4, r5
 800db6a:	e747      	b.n	800d9fc <__udivmoddi4+0x14c>
 800db6c:	f1ac 0c02 	sub.w	ip, ip, #2
 800db70:	442b      	add	r3, r5
 800db72:	e72f      	b.n	800d9d4 <__udivmoddi4+0x124>
 800db74:	4638      	mov	r0, r7
 800db76:	e708      	b.n	800d98a <__udivmoddi4+0xda>
 800db78:	4637      	mov	r7, r6
 800db7a:	e6e9      	b.n	800d950 <__udivmoddi4+0xa0>

0800db7c <__aeabi_idiv0>:
 800db7c:	4770      	bx	lr
 800db7e:	bf00      	nop

0800db80 <_close>:
 800db80:	4b02      	ldr	r3, [pc, #8]	; (800db8c <_close+0xc>)
 800db82:	2258      	movs	r2, #88	; 0x58
 800db84:	601a      	str	r2, [r3, #0]
 800db86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db8a:	4770      	bx	lr
 800db8c:	20001638 	.word	0x20001638

0800db90 <_fstat>:
 800db90:	4b02      	ldr	r3, [pc, #8]	; (800db9c <_fstat+0xc>)
 800db92:	2258      	movs	r2, #88	; 0x58
 800db94:	601a      	str	r2, [r3, #0]
 800db96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db9a:	4770      	bx	lr
 800db9c:	20001638 	.word	0x20001638

0800dba0 <_getpid>:
 800dba0:	4b02      	ldr	r3, [pc, #8]	; (800dbac <_getpid+0xc>)
 800dba2:	2258      	movs	r2, #88	; 0x58
 800dba4:	601a      	str	r2, [r3, #0]
 800dba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbaa:	4770      	bx	lr
 800dbac:	20001638 	.word	0x20001638

0800dbb0 <_isatty>:
 800dbb0:	4b02      	ldr	r3, [pc, #8]	; (800dbbc <_isatty+0xc>)
 800dbb2:	2258      	movs	r2, #88	; 0x58
 800dbb4:	601a      	str	r2, [r3, #0]
 800dbb6:	2000      	movs	r0, #0
 800dbb8:	4770      	bx	lr
 800dbba:	bf00      	nop
 800dbbc:	20001638 	.word	0x20001638

0800dbc0 <_kill>:
 800dbc0:	4b02      	ldr	r3, [pc, #8]	; (800dbcc <_kill+0xc>)
 800dbc2:	2258      	movs	r2, #88	; 0x58
 800dbc4:	601a      	str	r2, [r3, #0]
 800dbc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbca:	4770      	bx	lr
 800dbcc:	20001638 	.word	0x20001638

0800dbd0 <_lseek>:
 800dbd0:	4b02      	ldr	r3, [pc, #8]	; (800dbdc <_lseek+0xc>)
 800dbd2:	2258      	movs	r2, #88	; 0x58
 800dbd4:	601a      	str	r2, [r3, #0]
 800dbd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbda:	4770      	bx	lr
 800dbdc:	20001638 	.word	0x20001638

0800dbe0 <_open>:
 800dbe0:	4b02      	ldr	r3, [pc, #8]	; (800dbec <_open+0xc>)
 800dbe2:	2258      	movs	r2, #88	; 0x58
 800dbe4:	601a      	str	r2, [r3, #0]
 800dbe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbea:	4770      	bx	lr
 800dbec:	20001638 	.word	0x20001638

0800dbf0 <_read>:
 800dbf0:	4b02      	ldr	r3, [pc, #8]	; (800dbfc <_read+0xc>)
 800dbf2:	2258      	movs	r2, #88	; 0x58
 800dbf4:	601a      	str	r2, [r3, #0]
 800dbf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbfa:	4770      	bx	lr
 800dbfc:	20001638 	.word	0x20001638

0800dc00 <_write>:
 800dc00:	4b02      	ldr	r3, [pc, #8]	; (800dc0c <_write+0xc>)
 800dc02:	2258      	movs	r2, #88	; 0x58
 800dc04:	601a      	str	r2, [r3, #0]
 800dc06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc0a:	4770      	bx	lr
 800dc0c:	20001638 	.word	0x20001638

0800dc10 <_exit>:
 800dc10:	e7fe      	b.n	800dc10 <_exit>
 800dc12:	bf00      	nop
 800dc14:	0e0900c1 	.word	0x0e0900c1
 800dc18:	1698c012 	.word	0x1698c012
 800dc1c:	10000683 	.word	0x10000683
 800dc20:	0000000a 	.word	0x0000000a
 800dc24:	0e0900c1 	.word	0x0e0900c1
 800dc28:	1698c012 	.word	0x1698c012
 800dc2c:	10000683 	.word	0x10000683
 800dc30:	0000000a 	.word	0x0000000a
 800dc34:	10000000 	.word	0x10000000
 800dc38:	00000093 	.word	0x00000093
 800dc3c:	00000110 	.word	0x00000110

0800dc40 <DeviceDescriptor>:
 800dc40:	01100112 40000002 0058058b 02010010     .......@..X.....
 800dc50:	00000100                                ....

0800dc54 <ConfigurationDescriptor>:
 800dc54:	003e0209 80000102 00040932 02020100     ..>.....2.......
 800dc64:	24050001 04011000 05060224 01000624     ...$....$...$...
 800dc74:	03810507 09ff0008 02000104 0000000a     ................
 800dc84:	02030507 07050040 40028205 00000500     ....@......@....

0800dc94 <LanguageString>:
 800dc94:	04090304 00000000                       ........

0800dc9c <ProductString>:
 800dc9c:	00490320 00460000 00580000 00200000      .I...F...X... .
 800dcac:	00430000 00440000 00430000 00000000     ..C...D...C.....
 800dcbc:	00000000                                ....

0800dcc0 <ManufacturerString>:
 800dcc0:	00490358 006e0000 00660000 00690000     X.I...n...f...i.
 800dcd0:	006e0000 00650000 006f0000 006e0000     ..n...e...o...n.
 800dce0:	00200000 00540000 00650000 00630000     .. ...T...e...c.
 800dcf0:	00680000 006e0000 006f0000 006c0000     ..h...n...o...l.
 800dd00:	006f0000 00670000 00690000 00650000     ..o...g...i...e.
 800dd10:	00730000 00000000 00000000              ..s.........

0800dd1c <b64str.6030>:
 800dd1c:	44434241 48474645 4c4b4a49 504f4e4d     ABCDEFGHIJKLMNOP
 800dd2c:	54535251 58575655 62615a59 66656463     QRSTUVWXYZabcdef
 800dd3c:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
 800dd4c:	7a797877 33323130 37363534 5f2d3938     wxyz0123456789-_

0800dd5c <b64>:
 800dd5c:	ffffffff ffffffff ffffffff ffffffff     ................
 800dd6c:	ffffffff ffffffff ffffffff ffffffff     ................
 800dd7c:	ffffffff ffffffff ffffffff ffff3eff     .............>..
 800dd8c:	37363534 3b3a3938 ffff3d3c ffffffff     456789:;<=......
 800dd9c:	020100ff 06050403 0a090807 0e0d0c0b     ................
 800ddac:	1211100f 16151413 ff191817 3fffffff     ...............?
 800ddbc:	1c1b1aff 201f1e1d 24232221 28272625     ....... !"#$%&'(
 800ddcc:	2c2b2a29 302f2e2d ff333231 ffffffff     )*+,-./0123.....
 800dddc:	ffffffff ffffffff ffffffff ffffffff     ................
 800ddec:	ffffffff ffffffff ffffffff ffffffff     ................
 800ddfc:	ffffffff ffffffff ffffffff ffffffff     ................
 800de0c:	ffffffff ffffffff ffffffff ffffffff     ................
 800de1c:	ffffffff ffffffff ffffffff ffffffff     ................
 800de2c:	ffffffff ffffffff ffffffff ffffffff     ................
 800de3c:	ffffffff ffffffff ffffffff ffffffff     ................
 800de4c:	ffffffff ffffffff ffffffff ffffffff     ................

0800de5c <__stack_chk_guard>:
 800de5c:	deadbeef                                ....

0800de60 <Driver_USBD0>:
 800de60:	08001545 08001c31 08001849 08001555     E...1...I...U...
 800de70:	0800156d 08001be9 080015dd 0800186d     m...........m...
 800de80:	08001705 080015f5 08001585 08001af1     ................
 800de90:	08001b39 080016b1 0800181d 08001831     9...........1...
 800dea0:	000020a1 00020000 73696854 754a7349     . ......ThisIsJu
 800deb0:	54417473 74726968 6f775479 65747942     stAThirtyTwoByte
 800dec0:	65655373 2e2e2e64                       sSeed...

0800dec8 <__func__.7105>:
 800dec8:	646e6172 79626d6f 5f736574 736c6173     randombytes_sals
 800ded8:	58303261 725f434d 6f646e61 6e695f6d     a20XMC_random_in
 800dee8:	00007469                                it..

0800deec <__func__.7130>:
 800deec:	646e6172 79626d6f 5f736574 736c6173     randombytes_sals
 800defc:	58303261 725f434d 6f646e61 75625f6d     a20XMC_random_bu
 800df0c:	00000066                                f...

0800df10 <__func__.7139>:
 800df10:	646e6172 79626d6f 5f736574 736c6173     randombytes_sals
 800df20:	58303261 725f434d 6f646e61 65675f6d     a20XMC_random_ge
 800df30:	726f7774 00000064 736c6173 58303261     tword...salsa20X
 800df40:	0000434d 65727473 6e2e6d61 65636e6f     MC..stream.nonce
 800df50:	203d2120 6e697528 5f343674 30202974      != (uint64_t) 0
 800df60:	00000055 646e6172 79626d6f 5f736574     U...randombytes_
 800df70:	736c6173 58303261 725f434d 6f646e61     salsa20XMC_rando
 800df80:	00632e6d 20746572 30203d3d 616c6200     m.c.ret == 0.bla
 800df90:	6232656b                                 ke2b.

0800df95 <__func__.6147>:
 800df95:	70797263 675f6f74 72656e65 61686369     crypto_genericha
 800dfa5:	625f6873 656b616c 665f6232 6c616e69     sh_blake2b_final
 800dfb5:	74756f00 206e656c 55203d3c 38544e49     .outlen <= UINT8
 800dfc5:	58414d5f 79726300 5f6f7470 656e6567     _MAX.crypto_gene
 800dfd5:	68636972 2f687361 6b616c62 2f623265     richash/blake2b/
 800dfe5:	2f666572 656e6567 68636972 5f687361     ref/generichash_
 800dff5:	6b616c62 2e623265                        blake2b.c.

0800dfff <nonce.6423>:
 800dfff:	7362694c 7569646f 4752446d              LibsodiumDRG

0800e00b <__func__.6434>:
 800e00b:	646e6172 79626d6f 00736574 5f667562     randombytes.buf_
 800e01b:	206e656c 53203d3c 5f455a49 0058414d     len <= SIZE_MAX.
 800e02b:	646e6172 79626d6f 2f736574 646e6172     randombytes/rand
 800e03b:	79626d6f 2e736574                        ombytes.c.

0800e045 <__func__.7060>:
 800e045:	65666173 6165725f 79730064 6e617273     safe_read.sysran
 800e055:	006d6f64 657a6973 28203e20 657a6973     dom.size > (size
 800e065:	2029745f 72005530 6f646e61 7479626d     _t) 0U.randombyt
 800e075:	732f7365 61727379 6d6f646e 6e61722f     es/sysrandom/ran
 800e085:	626d6f64 73657479 7379735f 646e6172     dombytes_sysrand
 800e095:	632e6d6f 7a697300 3d3c2065 49535320     om.c.size <= SSI
 800e0a5:	4d5f455a 2f005841 2f766564 6e617275     ZE_MAX./dev/uran
 800e0b5:	006d6f64 7665642f 6e61722f 006d6f64     dom./dev/random.
 800e0c5:	                                         ...

0800e0c8 <blake2b_IV>:
 800e0c8:	f3bcc908 6a09e667 84caa73b bb67ae85     ....g..j;.....g.
 800e0d8:	fe94f82b 3c6ef372 5f1d36f1 a54ff53a     +...r.n<.6._:.O.
 800e0e8:	ade682d1 510e527f 2b3e6c1f 9b05688c     .....R.Q.l>+.h..
 800e0f8:	fb41bd6b 1f83d9ab 137e2179 5be0cd19     k.A.....y!~....[

0800e108 <__func__.6571>:
 800e108:	70797263 675f6f74 72656e65 61686369     crypto_genericha
 800e118:	625f6873 656b616c 5f5f6232 616e6966     sh_blake2b__fina
 800e128:	2d53006c 6675623e 206e656c 42203d3c     l.S->buflen <= B
 800e138:	454b414c 425f4232 4b434f4c 45545942     LAKE2B_BLOCKBYTE
 800e148:	72630053 6f747079 6e65675f 63697265     S.crypto_generic
 800e158:	68736168 616c622f 6232656b 6665722f     hash/blake2b/ref
 800e168:	616c622f 6232656b 6665722d 0000632e     /blake2b-ref.c..
 800e178:	7566202c 6974636e 203a6e6f 00000000     , function: ....
 800e188:	65737361 6f697472 2522206e 66202273     assertion "%s" f
 800e198:	656c6961 66203a64 20656c69 22732522     ailed: file "%s"
 800e1a8:	696c202c 2520656e 25732564 00000a73     , line %d%s%s...

0800e1b8 <_global_impure_ptr>:
 800e1b8:	200004f0 33323130 37363534 42413938     ... 0123456789AB
 800e1c8:	46454443 00000000 33323130 37363534     CDEF....01234567
 800e1d8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
 800e1e8:	0000296c                                l)..

0800e1ec <blanks.7308>:
 800e1ec:	20202020 20202020 20202020 20202020                     

0800e1fc <zeroes.7309>:
 800e1fc:	30303030 30303030 30303030 30303030     0000000000000000
 800e20c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0800e21c <_ctype_>:
 800e21c:	20202000 20202020 28282020 20282828     .         ((((( 
 800e22c:	20202020 20202020 20202020 20202020                     
 800e23c:	10108820 10101010 10101010 10101010      ...............
 800e24c:	04040410 04040404 10040404 10101010     ................
 800e25c:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800e26c:	01010101 01010101 01010101 10101010     ................
 800e27c:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800e28c:	02020202 02020202 02020202 10101010     ................
 800e29c:	00000020 00000000 00000000 00000000      ...............
	...
