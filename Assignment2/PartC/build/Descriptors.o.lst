   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"Descriptors.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.CALLBACK_USB_GetDescriptor,"ax",%progbits
  17              		.align	1
  18              		.global	CALLBACK_USB_GetDescriptor
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	CALLBACK_USB_GetDescriptor:
  25              	.LFB193:
  26              		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2014.
   4:Descriptors.c **** 
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****            www.lufa-lib.org
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2014  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting
  17:Descriptors.c ****   documentation, and that the name of the author not be used in
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaims all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  41:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  42:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  43:Descriptors.c ****  *  process begins.
  44:Descriptors.c ****  */
  45:Descriptors.c **** const USB_Descriptor_Device_t DeviceDescriptor =
  46:Descriptors.c **** {
  47:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  48:Descriptors.c **** 
  49:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(1,1,0),
  50:Descriptors.c **** 	.Class                  = CDC_CSCP_CDCClass,
  51:Descriptors.c **** 	.SubClass               = CDC_CSCP_NoSpecificSubclass,
  52:Descriptors.c **** 	.Protocol               = CDC_CSCP_NoSpecificProtocol,
  53:Descriptors.c **** 
  54:Descriptors.c **** 	.Endpoint0Size          = 64,
  55:Descriptors.c **** 
  56:Descriptors.c **** 	.VendorID               = 0x058B,
  57:Descriptors.c **** 	.ProductID              = 0x0058,
  58:Descriptors.c **** 	.ReleaseNumber          = VERSION_BCD(0,1,0),
  59:Descriptors.c **** 
  60:Descriptors.c **** 	.ManufacturerStrIndex   = STRING_ID_Manufacturer,
  61:Descriptors.c **** 	.ProductStrIndex        = STRING_ID_Product,
  62:Descriptors.c **** 	.SerialNumStrIndex      = USE_INTERNAL_SERIAL,
  63:Descriptors.c **** 
  64:Descriptors.c **** 	.NumberOfConfigurations = 1
  65:Descriptors.c **** };
  66:Descriptors.c **** 
  67:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the usa
  68:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
  69:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
  70:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
  71:Descriptors.c ****  */
  72:Descriptors.c **** const USB_Descriptor_Configuration_t ConfigurationDescriptor =
  73:Descriptors.c **** {
  74:Descriptors.c **** 	.Config =
  75:Descriptors.c **** 		{
  76:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
  77:Descriptors.c **** 
  78:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
  79:Descriptors.c **** 			.TotalInterfaces        = 2,
  80:Descriptors.c **** 
  81:Descriptors.c **** 			.ConfigurationNumber    = 1,
  82:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
  83:Descriptors.c **** 
  84:Descriptors.c **** 			.ConfigAttributes       = USB_CONFIG_ATTR_RESERVED,
  85:Descriptors.c **** 
  86:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
  87:Descriptors.c **** 		},
  88:Descriptors.c **** 
  89:Descriptors.c **** 	.CDC_CCI_Interface =
  90:Descriptors.c **** 		{
  91:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
  92:Descriptors.c **** 
  93:Descriptors.c **** 			.InterfaceNumber        = INTERFACE_ID_CDC_CCI,
  94:Descriptors.c **** 			.AlternateSetting       = 0,
  95:Descriptors.c **** 
  96:Descriptors.c **** 			.TotalEndpoints         = 1,
  97:Descriptors.c **** 
  98:Descriptors.c **** 			.Class                  = CDC_CSCP_CDCClass,
  99:Descriptors.c **** 			.SubClass               = CDC_CSCP_ACMSubclass,
 100:Descriptors.c **** 			.Protocol               = CDC_CSCP_ATCommandProtocol,
 101:Descriptors.c **** 
 102:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 103:Descriptors.c **** 		},
 104:Descriptors.c **** 
 105:Descriptors.c **** 	.CDC_Functional_Header =
 106:Descriptors.c **** 		{
 107:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalHeader_t), .Type = DTYPE_
 108:Descriptors.c **** 			.Subtype                = CDC_DSUBTYPE_CSInterface_Header,
 109:Descriptors.c **** 
 110:Descriptors.c **** 			.CDCSpecification       = VERSION_BCD(1,1,0),
 111:Descriptors.c **** 		},
 112:Descriptors.c **** 
 113:Descriptors.c **** 	.CDC_Functional_ACM =
 114:Descriptors.c **** 		{
 115:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalACM_t), .Type = DTYPE_CSI
 116:Descriptors.c **** 			.Subtype                = CDC_DSUBTYPE_CSInterface_ACM,
 117:Descriptors.c **** 
 118:Descriptors.c **** 			.Capabilities           = 0x06,
 119:Descriptors.c **** 		},
 120:Descriptors.c **** 
 121:Descriptors.c **** 	.CDC_Functional_Union =
 122:Descriptors.c **** 		{
 123:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalUnion_t), .Type = DTYPE_C
 124:Descriptors.c **** 			.Subtype                = CDC_DSUBTYPE_CSInterface_Union,
 125:Descriptors.c **** 
 126:Descriptors.c **** 			.MasterInterfaceNumber  = INTERFACE_ID_CDC_CCI,
 127:Descriptors.c **** 			.SlaveInterfaceNumber   = INTERFACE_ID_CDC_DCI,
 128:Descriptors.c **** 		},
 129:Descriptors.c **** 
 130:Descriptors.c **** 	.CDC_NotificationEndpoint =
 131:Descriptors.c **** 		{
 132:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 133:Descriptors.c **** 
 134:Descriptors.c **** 			.EndpointAddress        = CDC_NOTIFICATION_EPADDR,
 135:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 136:Descriptors.c **** 			.EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 137:Descriptors.c **** 			.PollingIntervalMS      = 0xFF
 138:Descriptors.c **** 		},
 139:Descriptors.c **** 
 140:Descriptors.c **** 	.CDC_DCI_Interface =
 141:Descriptors.c **** 		{
 142:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 143:Descriptors.c **** 
 144:Descriptors.c **** 			.InterfaceNumber        = INTERFACE_ID_CDC_DCI,
 145:Descriptors.c **** 			.AlternateSetting       = 0,
 146:Descriptors.c **** 
 147:Descriptors.c **** 			.TotalEndpoints         = 2,
 148:Descriptors.c **** 
 149:Descriptors.c **** 			.Class                  = CDC_CSCP_CDCDataClass,
 150:Descriptors.c **** 			.SubClass               = CDC_CSCP_NoDataSubclass,
 151:Descriptors.c **** 			.Protocol               = CDC_CSCP_NoDataProtocol,
 152:Descriptors.c **** 
 153:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 154:Descriptors.c **** 		},
 155:Descriptors.c **** 
 156:Descriptors.c **** 	.CDC_DataOutEndpoint =
 157:Descriptors.c **** 		{
 158:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 159:Descriptors.c **** 
 160:Descriptors.c **** 			.EndpointAddress        = CDC_RX_EPADDR,
 161:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 162:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 163:Descriptors.c **** 			.PollingIntervalMS      = 0x05
 164:Descriptors.c **** 		},
 165:Descriptors.c **** 
 166:Descriptors.c **** 	.CDC_DataInEndpoint =
 167:Descriptors.c **** 		{
 168:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 169:Descriptors.c **** 
 170:Descriptors.c **** 			.EndpointAddress        = CDC_TX_EPADDR,
 171:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 172:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 173:Descriptors.c **** 			.PollingIntervalMS      = 0x05
 174:Descriptors.c **** 		}
 175:Descriptors.c **** };
 176:Descriptors.c **** 
 177:Descriptors.c **** /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the h
 178:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 179:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 180:Descriptors.c ****  */
 181:Descriptors.c **** const USB_Descriptor_String_t LanguageString = USB_STRING_DESCRIPTOR_ARRAY(LANGUAGE_ID_ENG);
 182:Descriptors.c **** 
 183:Descriptors.c **** /** Manufacturer descriptor string. This is a Unicode string containing the manufacturer's details 
 184:Descriptors.c ****  *  form, and is read out upon request by the host when the appropriate string ID is requested, lis
 185:Descriptors.c ****  *  Descriptor.
 186:Descriptors.c ****  */
 187:Descriptors.c **** const USB_Descriptor_String_t ManufacturerString = USB_STRING_DESCRIPTOR(L"Infineon Technologies");
 188:Descriptors.c **** 
 189:Descriptors.c **** 
 190:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 191:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 192:Descriptors.c ****  *  Descriptor.
 193:Descriptors.c ****  */
 194:Descriptors.c **** const USB_Descriptor_String_t ProductString = USB_STRING_DESCRIPTOR(L"IFX CDC");
 195:Descriptors.c **** 
 196:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 197:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 198:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 199:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 200:Descriptors.c ****  *  USB host.
 201:Descriptors.c ****  */
 202:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 203:Descriptors.c ****                                     const uint8_t wIndex,
 204:Descriptors.c ****                                     const void** const DescriptorAddress)
 205:Descriptors.c **** {
  27              		.loc 1 205 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 206:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
 207:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 208:Descriptors.c **** 
 209:Descriptors.c **** 	const void* Address = NULL;
 210:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 211:Descriptors.c **** 
 212:Descriptors.c **** 	switch (DescriptorType)
  33              		.loc 1 212 0
  34 0000 030A     		lsrs	r3, r0, #8
  35 0002 022B     		cmp	r3, #2
  36 0004 0AD0     		beq	.L3
  37 0006 032B     		cmp	r3, #3
  38 0008 0BD0     		beq	.L4
  39 000a 012B     		cmp	r3, #1
  40 000c 02D0     		beq	.L13
 210:Descriptors.c **** 
  41              		.loc 1 210 0
  42 000e 0020     		movs	r0, #0
  43              	.LVL1:
 209:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
  44              		.loc 1 209 0
  45 0010 0346     		mov	r3, r0
  46 0012 01E0     		b	.L2
  47              	.LVL2:
  48              	.L13:
 213:Descriptors.c **** 	{
 214:Descriptors.c **** 		case DTYPE_Device:
 215:Descriptors.c **** 			Address = &DeviceDescriptor;
 216:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  49              		.loc 1 216 0
  50 0014 1220     		movs	r0, #18
  51              	.LVL3:
 215:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  52              		.loc 1 215 0
  53 0016 0C4B     		ldr	r3, .L14
  54              	.LVL4:
  55              	.L2:
 217:Descriptors.c **** 			break;
 218:Descriptors.c **** 		case DTYPE_Configuration:
 219:Descriptors.c **** 			Address = &ConfigurationDescriptor;
 220:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
 221:Descriptors.c **** 			break;
 222:Descriptors.c **** 		case DTYPE_String:
 223:Descriptors.c **** 			switch (DescriptorNumber)
 224:Descriptors.c **** 			{
 225:Descriptors.c **** 				case STRING_ID_Language:
 226:Descriptors.c **** 					Address = &LanguageString;
 227:Descriptors.c **** 					Size    = LanguageString.Header.Size;
 228:Descriptors.c **** 					break;
 229:Descriptors.c **** 				case STRING_ID_Manufacturer:
 230:Descriptors.c **** 					Address = &ManufacturerString;
 231:Descriptors.c **** 					Size    = ManufacturerString.Header.Size;
 232:Descriptors.c **** 					break;
 233:Descriptors.c **** 				case STRING_ID_Product:
 234:Descriptors.c **** 					Address = &ProductString;
 235:Descriptors.c **** 					Size    = ProductString.Header.Size;
 236:Descriptors.c **** 					break;
 237:Descriptors.c **** 			}
 238:Descriptors.c **** 			break;
 239:Descriptors.c **** 	}
 240:Descriptors.c **** 
 241:Descriptors.c **** 	*DescriptorAddress = Address;
  56              		.loc 1 241 0
  57 0018 1360     		str	r3, [r2]
 242:Descriptors.c **** 	return Size;
 243:Descriptors.c **** }
  58              		.loc 1 243 0
  59 001a 7047     		bx	lr
  60              	.LVL5:
  61              	.L3:
 220:Descriptors.c **** 			break;
  62              		.loc 1 220 0
  63 001c 3E20     		movs	r0, #62
  64              	.LVL6:
 219:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  65              		.loc 1 219 0
  66 001e 0B4B     		ldr	r3, .L14+4
 221:Descriptors.c **** 		case DTYPE_String:
  67              		.loc 1 221 0
  68 0020 FAE7     		b	.L2
  69              	.LVL7:
  70              	.L4:
 223:Descriptors.c **** 			{
  71              		.loc 1 223 0
  72 0022 C0B2     		uxtb	r0, r0
  73              	.LVL8:
  74 0024 0128     		cmp	r0, #1
  75 0026 08D0     		beq	.L6
  76 0028 20B1     		cbz	r0, .L7
  77 002a 0228     		cmp	r0, #2
  78 002c 08D0     		beq	.L8
 210:Descriptors.c **** 
  79              		.loc 1 210 0
  80 002e 0020     		movs	r0, #0
  81              	.LVL9:
 209:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
  82              		.loc 1 209 0
  83 0030 0346     		mov	r3, r0
  84 0032 F1E7     		b	.L2
  85              	.L7:
 227:Descriptors.c **** 					break;
  86              		.loc 1 227 0
  87 0034 0420     		movs	r0, #4
 226:Descriptors.c **** 					Size    = LanguageString.Header.Size;
  88              		.loc 1 226 0
  89 0036 064B     		ldr	r3, .L14+8
  90 0038 EEE7     		b	.L2
  91              	.L6:
  92              	.LVL10:
 231:Descriptors.c **** 					break;
  93              		.loc 1 231 0
  94 003a 5820     		movs	r0, #88
 230:Descriptors.c **** 					Size    = ManufacturerString.Header.Size;
  95              		.loc 1 230 0
  96 003c 054B     		ldr	r3, .L14+12
 232:Descriptors.c **** 				case STRING_ID_Product:
  97              		.loc 1 232 0
  98 003e EBE7     		b	.L2
  99              	.LVL11:
 100              	.L8:
 235:Descriptors.c **** 					break;
 101              		.loc 1 235 0
 102 0040 2020     		movs	r0, #32
 234:Descriptors.c **** 					Size    = ProductString.Header.Size;
 103              		.loc 1 234 0
 104 0042 054B     		ldr	r3, .L14+16
 236:Descriptors.c **** 			}
 105              		.loc 1 236 0
 106 0044 E8E7     		b	.L2
 107              	.L15:
 108 0046 00BF     		.align	2
 109              	.L14:
 110 0048 00000000 		.word	.LANCHOR0
 111 004c 14000000 		.word	.LANCHOR0+20
 112 0050 54000000 		.word	.LANCHOR0+84
 113 0054 80000000 		.word	.LANCHOR0+128
 114 0058 5C000000 		.word	.LANCHOR0+92
 115              		.cfi_endproc
 116              	.LFE193:
 118              		.global	ProductString
 119              		.global	ManufacturerString
 120              		.global	LanguageString
 121              		.global	ConfigurationDescriptor
 122              		.global	DeviceDescriptor
 123              		.section	.rodata
 124              		.align	2
 125              		.set	.LANCHOR0,. + 0
 128              	DeviceDescriptor:
 129 0000 12       		.byte	18
 130 0001 01       		.byte	1
 131 0002 1001     		.short	272
 132 0004 02       		.byte	2
 133 0005 00       		.byte	0
 134 0006 00       		.byte	0
 135 0007 40       		.byte	64
 136 0008 8B05     		.short	1419
 137 000a 5800     		.short	88
 138 000c 1000     		.short	16
 139 000e 01       		.byte	1
 140 000f 02       		.byte	2
 141 0010 00       		.byte	0
 142 0011 01       		.byte	1
 143 0012 0000     		.space	2
 146              	ConfigurationDescriptor:
 147 0014 09       		.byte	9
 148 0015 02       		.byte	2
 149 0016 3E00     		.short	62
 150 0018 02       		.byte	2
 151 0019 01       		.byte	1
 152 001a 00       		.byte	0
 153 001b 80       		.byte	-128
 154 001c 32       		.byte	50
 155 001d 09       		.byte	9
 156 001e 04       		.byte	4
 157 001f 00       		.byte	0
 158 0020 00       		.byte	0
 159 0021 01       		.byte	1
 160 0022 02       		.byte	2
 161 0023 02       		.byte	2
 162 0024 01       		.byte	1
 163 0025 00       		.byte	0
 164 0026 05       		.byte	5
 165 0027 24       		.byte	36
 166 0028 00       		.byte	0
 167 0029 1001     		.2byte	272
 168 002b 04       		.byte	4
 169 002c 24       		.byte	36
 170 002d 02       		.byte	2
 171 002e 06       		.byte	6
 172 002f 05       		.byte	5
 173 0030 24       		.byte	36
 174 0031 06       		.byte	6
 175 0032 00       		.byte	0
 176 0033 01       		.byte	1
 177 0034 07       		.byte	7
 178 0035 05       		.byte	5
 179 0036 81       		.byte	-127
 180 0037 03       		.byte	3
 181 0038 0800     		.short	8
 182 003a FF       		.byte	-1
 183 003b 09       		.byte	9
 184 003c 04       		.byte	4
 185 003d 01       		.byte	1
 186 003e 00       		.byte	0
 187 003f 02       		.byte	2
 188 0040 0A       		.byte	10
 189 0041 00       		.byte	0
 190 0042 00       		.byte	0
 191 0043 00       		.byte	0
 192 0044 07       		.byte	7
 193 0045 05       		.byte	5
 194 0046 03       		.byte	3
 195 0047 02       		.byte	2
 196 0048 4000     		.short	64
 197 004a 05       		.byte	5
 198 004b 07       		.byte	7
 199 004c 05       		.byte	5
 200 004d 82       		.byte	-126
 201 004e 02       		.byte	2
 202 004f 4000     		.2byte	64
 203 0051 05       		.byte	5
 204 0052 0000     		.space	2
 207              	LanguageString:
 208 0054 04       		.byte	4
 209 0055 03       		.byte	3
 210 0056 09040000 		.4byte	1033
 211 005a 0000     		.space	2
 214              	ProductString:
 215 005c 20       		.byte	32
 216 005d 03       		.byte	3
 217 005e 49000000 		.ascii	"I\000\000\000F\000\000\000X\000\000\000 \000\000\000"
 217      46000000 
 217      58000000 
 217      20000000 
 218 006e 43000000 		.ascii	"C\000\000\000D\000\000\000C\000\000\000\000\000\000"
 218      44000000 
 218      43000000 
 218      000000
 219 007d 00       		.ascii	"\000"
 220 007e 0000     		.space	2
 223              	ManufacturerString:
 224 0080 58       		.byte	88
 225 0081 03       		.byte	3
 226 0082 49000000 		.ascii	"I\000\000\000n\000\000\000f\000\000\000i\000\000\000"
 226      6E000000 
 226      66000000 
 226      69000000 
 227 0092 6E000000 		.ascii	"n\000\000\000e\000\000\000o\000\000\000n\000\000\000"
 227      65000000 
 227      6F000000 
 227      6E000000 
 228 00a2 20000000 		.ascii	" \000\000\000T\000\000\000e\000\000\000c\000\000\000"
 228      54000000 
 228      65000000 
 228      63000000 
 229 00b2 68000000 		.ascii	"h\000\000\000n\000\000\000o\000\000\000l\000\000\000"
 229      6E000000 
 229      6F000000 
 229      6C000000 
 230 00c2 6F000000 		.ascii	"o\000\000\000g\000\000\000i\000\000\000e\000\000\000"
 230      67000000 
 230      69000000 
 230      65000000 
 231 00d2 73000000 		.ascii	"s\000\000\000\000\000\000\000"
 231      00000000 
 232              		.text
 233              	.Letext0:
 234              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 235              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 236              		.file 4 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 237              		.file 5 "/usr/arm-none-eabi/include/sys/lock.h"
 238              		.file 6 "/usr/arm-none-eabi/include/sys/_types.h"
 239              		.file 7 "/usr/arm-none-eabi/include/sys/reent.h"
 240              		.file 8 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/CMSIS/Include/core_cm4.h"
 241              		.file 9 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/CMSIS/Infineon/XMC4500_series/Include/system_X
 242              		.file 10 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/CMSIS/Infineon/XMC4500_series/Include/XMC4500
 243              		.file 11 "/usr/arm-none-eabi/include/stdlib.h"
 244              		.file 12 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/XMCLib/inc/xmc_usbd_regs.h"
 245              		.file 13 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/XMCLib/inc/xmc_usbd.h"
 246              		.file 14 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Core/XMC4000/U
 247              		.file 15 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Core/XMC4000/.
 248              		.file 16 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Core/XMC4000/.
 249              		.file 17 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Core/XMC4000/.
 250              		.file 18 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Core/USBTask.h
 251              		.file 19 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Class/Device/.
 252              		.file 20 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Descriptors.c
     /tmp/ccOC458V.s:17     .text.CALLBACK_USB_GetDescriptor:0000000000000000 $t
     /tmp/ccOC458V.s:24     .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor
     /tmp/ccOC458V.s:110    .text.CALLBACK_USB_GetDescriptor:0000000000000048 $d
     /tmp/ccOC458V.s:214    .rodata:000000000000005c ProductString
     /tmp/ccOC458V.s:223    .rodata:0000000000000080 ManufacturerString
     /tmp/ccOC458V.s:207    .rodata:0000000000000054 LanguageString
     /tmp/ccOC458V.s:146    .rodata:0000000000000014 ConfigurationDescriptor
     /tmp/ccOC458V.s:128    .rodata:0000000000000000 DeviceDescriptor
     /tmp/ccOC458V.s:124    .rodata:0000000000000000 $d
                           .group:0000000000000000 wm4.0.36326cb9f2f282db52d0a8f4d7f6f490
                           .group:0000000000000000 wm4.USB.h.376.cfdb9ecb25c70fec676f585dede264a7
                           .group:0000000000000000 wm4.Common.h.60.c2f00e237f5994003db83c2422602b22
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.cdefs.h.47.14fad0b327eb9dcf106599b738d85132
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.BoardTypes.h.52.ca64813ccee737bcc2115eab5e075fdb
                           .group:0000000000000000 wm4.CompilerSpecific.h.55.4a5e5ff77cd35e49c89cf2115251aee0
                           .group:0000000000000000 wm4.Attributes.h.56.73b3ee26b0836c2dec569a5fa6f1b355
                           .group:0000000000000000 wm4.xmc_device.h.61.ba2d082e12f51240746cffdd60d42b81
                           .group:0000000000000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:0000000000000000 wm4.core_cm4.h.32.6c6eb1c8daeca23ce7ba79c8e8120d52
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.91b63349961c35637933e4fba51b867b
                           .group:0000000000000000 wm4.core_cm4.h.172.fdd5a388a160bb6ff767b7d7ee212268
                           .group:0000000000000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:0000000000000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:0000000000000000 wm4.xmc_device.h.1460.8860499b404961ffcfbb8d1fefcb2146
                           .group:0000000000000000 wm4.xmc_common.h.92.3f4336a80569affab05a81145b87c2fc
                           .group:0000000000000000 wm4.Endianness.h.57.3ac00c5468f4b91b806a0e6dba047e9c
                           .group:0000000000000000 wm4.Common.h.105.4b937a9cc9dcdb26c3f07541b0b763a8
                           .group:0000000000000000 wm4.USBController.h.49.cbfc73805155b6fff6267400af3f4eec
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:0000000000000000 wm4.xmc_usbd_regs.h.80.57c6c85fa0ecbc9f8327ce445aebb9bc
                           .group:0000000000000000 wm4.xmc4_scu.h.83.0449f5880ac071460ec1a8072311ea51
                           .group:0000000000000000 wm4.xmc_usbd.h.122.ce57a9e6a9da48ee33ece02813c49593
                           .group:0000000000000000 wm4.USBController_XMC4000.h.71.902f2653e09cb8b25245faa82cc6b907
                           .group:0000000000000000 wm4.StdDescriptors.h.73.7d17e8be7a73b855fc0f8827303b7597
                           .group:0000000000000000 wm4.Endpoint.h.73.3734de3e84ab23fb43d81f41fba620ec
                           .group:0000000000000000 wm4.Device_XMC4000.h.86.6803bdd99d84e764a570256c87a24d0a
                           .group:0000000000000000 wm4.StdRequestType.h.50.461dce94a3ee1fa9ff31ec5f28bd9699
                           .group:0000000000000000 wm4.ConfigDescriptors.h.51.0d67ebf453774188abf5a503ba8f6735
                           .group:0000000000000000 wm4.CDCClass.h.61.0d41ba255f7ce6f076fd610d8396dd1f
                           .group:0000000000000000 wm4.CDCClassCommon.h.72.14ca578d8547e19a8a0c0d2d328483bd
                           .group:0000000000000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:0000000000000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:0000000000000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:0000000000000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:0000000000000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:0000000000000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:0000000000000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:0000000000000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:0000000000000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:0000000000000000 wm4.HIDClass.h.62.6bb32c59177b21a83b8e65c5a1b0a615
                           .group:0000000000000000 wm4.HIDReportData.h.47.f13f4956396e0bec70835fe634fcc24d
                           .group:0000000000000000 wm4.HIDParser.h.88.4b86fe94cb8d01713592cdd0391b606b
                           .group:0000000000000000 wm4.HIDClassCommon.h.71.a60cdf9d7cd69289f43dde215b509193
                           .group:0000000000000000 wm4.MassStorageClass.h.61.e9235f3bd090b77f36343f082ef93107
                           .group:0000000000000000 wm4.MassStorageClassCommon.h.51.6aefecf288eb3c3c6c9bde61e26dd765
                           .group:0000000000000000 wm4.Descriptors.h.44.84a4fd312957d0d42fb6aaa001850ba4

NO UNDEFINED SYMBOLS
