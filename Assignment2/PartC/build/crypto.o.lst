   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"crypto.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.encrypt,"ax",%progbits
  17              		.align	1
  18              		.global	encrypt
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	encrypt:
  25              	.LFB0:
  26              		.file 1 "crypto.c"
   1:crypto.c      **** /* Source file for the homebrewn crypto used in assignment 2
   2:crypto.c      ****  *
   3:crypto.c      ****  * Copyright 2018 TUM
   4:crypto.c      ****  * Created: 2018-11-15 Florian Wilde <florian.wilde@tum.de>
   5:crypto.c      ****  **************************************************************************************************
   6:crypto.c      **** 
   7:crypto.c      **** #include <stdint.h>
   8:crypto.c      **** #include <string.h>
   9:crypto.c      **** #include <malloc.h>
  10:crypto.c      **** #include "crypto.h"
  11:crypto.c      **** 
  12:crypto.c      **** uint8_t encrypt(uint8_t *ciphertext[],
  13:crypto.c      ****                 const uint8_t *plaintext, const size_t plaintext_len,
  14:crypto.c      ****                 const uint8_t *nonce, const uint8_t *key ) {
  27              		.loc 1 14 0
  28              		.cfi_startproc
  29              		@ args = 4, pretend = 0, frame = 136
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 A3B0     		sub	sp, sp, #140
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 160
  43 0004 0546     		mov	r5, r0
  44 0006 1446     		mov	r4, r2
  45 0008 1F46     		mov	r7, r3
  46 000a 289E     		ldr	r6, [sp, #160]
  47              		.loc 1 14 0
  48 000c 124B     		ldr	r3, .L7
  49              	.LVL1:
  50 000e 1B68     		ldr	r3, [r3]
  51 0010 2193     		str	r3, [sp, #132]
  15:crypto.c      ****   /* Encrypt like the most popular app with over 30 million users worldwide did
  16:crypto.c      ****      cf. https://www.ssl.com/article/nq-vault-app-not-as-secure-as-advertised/  */
  17:crypto.c      ****   uint8_t buf[128];
  18:crypto.c      ****   memcpy(buf, plaintext, plaintext_len);
  52              		.loc 1 18 0
  53 0012 01A8     		add	r0, sp, #4
  54              	.LVL2:
  55 0014 FFF7FEFF 		bl	memcpy
  56              	.LVL3:
  57              	.LBB2:
  19:crypto.c      ****   for(uint8_t i=0; i<128; i++) buf[i] ^= key[nonce[0] % 8];
  58              		.loc 1 19 0
  59 0018 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
  60 001a 03F00703 		and	r3, r3, #7
  61 001e F05C     		ldrb	r0, [r6, r3]	@ zero_extendqisi2
  62 0020 0DF10303 		add	r3, sp, #3
  63 0024 0DF18301 		add	r1, sp, #131
  64              	.LVL4:
  65              	.L2:
  66              		.loc 1 19 0 is_stmt 0 discriminator 3
  67 0028 13F8012F 		ldrb	r2, [r3, #1]!	@ zero_extendqisi2
  68              	.LVL5:
  69 002c 4240     		eors	r2, r2, r0
  70 002e 1A70     		strb	r2, [r3]
  71              	.LVL6:
  72 0030 8B42     		cmp	r3, r1
  73 0032 F9D1     		bne	.L2
  74              	.LBE2:
  20:crypto.c      ****   *ciphertext = malloc(plaintext_len);
  75              		.loc 1 20 0 is_stmt 1
  76 0034 2046     		mov	r0, r4
  77 0036 FFF7FEFF 		bl	malloc
  78              	.LVL7:
  79 003a 2860     		str	r0, [r5]
  21:crypto.c      ****   memcpy(*ciphertext, buf, plaintext_len);
  80              		.loc 1 21 0
  81 003c 2246     		mov	r2, r4
  82 003e 01A9     		add	r1, sp, #4
  83 0040 FFF7FEFF 		bl	memcpy
  84              	.LVL8:
  22:crypto.c      ****   return 0;
  23:crypto.c      **** }
  85              		.loc 1 23 0
  86 0044 0020     		movs	r0, #0
  87 0046 219A     		ldr	r2, [sp, #132]
  88 0048 034B     		ldr	r3, .L7
  89 004a 1B68     		ldr	r3, [r3]
  90 004c 9A42     		cmp	r2, r3
  91 004e 01D1     		bne	.L6
  92 0050 23B0     		add	sp, sp, #140
  93              	.LCFI2:
  94              		.cfi_remember_state
  95              		.cfi_def_cfa_offset 20
  96              		@ sp needed
  97 0052 F0BD     		pop	{r4, r5, r6, r7, pc}
  98              	.LVL9:
  99              	.L6:
 100              	.LCFI3:
 101              		.cfi_restore_state
 102 0054 FFF7FEFF 		bl	__stack_chk_fail
 103              	.LVL10:
 104              	.L8:
 105              		.align	2
 106              	.L7:
 107 0058 00000000 		.word	__stack_chk_guard
 108              		.cfi_endproc
 109              	.LFE0:
 111              		.section	.text.getCiphertextLength,"ax",%progbits
 112              		.align	1
 113              		.global	getCiphertextLength
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 117              		.fpu fpv4-sp-d16
 119              	getCiphertextLength:
 120              	.LFB1:
  24:crypto.c      **** 
  25:crypto.c      **** size_t getCiphertextLength(const size_t plaintext_len) {
 121              		.loc 1 25 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126              	.LVL11:
  26:crypto.c      ****   return plaintext_len;
  27:crypto.c      **** }
 127              		.loc 1 27 0
 128 0000 7047     		bx	lr
 129              		.cfi_endproc
 130              	.LFE1:
 132              		.text
 133              	.Letext0:
 134              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 135              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 136              		.file 4 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 137              		.file 5 "/usr/arm-none-eabi/include/sys/lock.h"
 138              		.file 6 "/usr/arm-none-eabi/include/sys/_types.h"
 139              		.file 7 "/usr/arm-none-eabi/include/sys/reent.h"
 140              		.file 8 "<built-in>"
 141              		.file 9 "/usr/arm-none-eabi/include/malloc.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 crypto.c
     /tmp/ccXwUEPh.s:17     .text.encrypt:0000000000000000 $t
     /tmp/ccXwUEPh.s:24     .text.encrypt:0000000000000000 encrypt
     /tmp/ccXwUEPh.s:107    .text.encrypt:0000000000000058 $d
     /tmp/ccXwUEPh.s:112    .text.getCiphertextLength:0000000000000000 $t
     /tmp/ccXwUEPh.s:119    .text.getCiphertextLength:0000000000000000 getCiphertextLength
                           .group:0000000000000000 wm4.0.36326cb9f2f282db52d0a8f4d7f6f490
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:0000000000000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.cdefs.h.47.14fad0b327eb9dcf106599b738d85132
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.malloc.h.4.62bd13b8107d5245f60bd92bb5994838
                           .group:0000000000000000 wm4.malloc.h.152.f5d1d9a9aabeac59da0ef41ede16d2b0
                           .group:0000000000000000 wm4.crypto.h.8.3c7e0671468cbc28e07567ab2d290f6b

UNDEFINED SYMBOLS
memcpy
malloc
__stack_chk_fail
__stack_chk_guard
