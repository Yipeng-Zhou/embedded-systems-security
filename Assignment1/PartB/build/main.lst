
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015e0  08000000  0c000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  00020430  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  00020430  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  00020430  2**0
                  CONTENTS
  5 .data         00000430  20000000  0c0015e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000018  20000430  0c001a10  00020430  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  00020430  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000000  30000000  30000000  00020430  2**0
                  CONTENTS
 10 .debug_aranges 00000170  00000000  00000000  00020430  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00003d5f  00000000  00000000  000205a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000095c  00000000  00000000  000242ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001111  00000000  00000000  00024c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000054c  00000000  00000000  00025d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00072018  00000000  00000000  000262b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00000984  00000000  00000000  000982d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000110  00000000  00000000  00098c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .build_attributes 000001b9  00000000  00000000  00098d64  2**0
                  CONTENTS, READONLY
 19 .debug_macro  00017f25  00000000  00000000  00098f1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	4d 03 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     M...............
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0015e0 	.word	0x0c0015e0
 800024c:	20000000 	.word	0x20000000
 8000250:	00000430 	.word	0x00000430
 8000254:	0c001a10 	.word	0x0c001a10
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c0015e0 	.word	0x0c0015e0
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c0015e0 	.word	0x0c0015e0
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000430 	.word	0x20000430
 800027c:	00000014 	.word	0x00000014
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	080010f5 	.word	0x080010f5
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	080014fd 	.word	0x080014fd
    ldr  r0, =main
 80002ac:	08000bd9 	.word	0x08000bd9

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	6039      	str	r1, [r7, #0]
 80002be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	db0a      	blt.n	80002de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	490c      	ldr	r1, [pc, #48]	; (8000300 <__NVIC_SetPriority+0x4c>)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	0092      	lsls	r2, r2, #2
 80002d4:	b2d2      	uxtb	r2, r2
 80002d6:	440b      	add	r3, r1
 80002d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002dc:	e00a      	b.n	80002f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4908      	ldr	r1, [pc, #32]	; (8000304 <__NVIC_SetPriority+0x50>)
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	f003 030f 	and.w	r3, r3, #15
 80002ea:	3b04      	subs	r3, #4
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	440b      	add	r3, r1
 80002f2:	761a      	strb	r2, [r3, #24]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	e000e100 	.word	0xe000e100
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3b01      	subs	r3, #1
 8000314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000318:	d301      	bcc.n	800031e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800031a:	2301      	movs	r3, #1
 800031c:	e00f      	b.n	800033e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <SysTick_Config+0x40>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3b01      	subs	r3, #1
 8000324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000326:	213f      	movs	r1, #63	; 0x3f
 8000328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800032c:	f7ff ffc2 	bl	80002b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <SysTick_Config+0x40>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <SysTick_Config+0x40>)
 8000338:	2207      	movs	r2, #7
 800033a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800033c:	2300      	movs	r3, #0
}
 800033e:	4618      	mov	r0, r3
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	e000e010 	.word	0xe000e010

0800034c <SysTick_Handler>:


//counter
uint32_t volatile msTicks = 0;
void SysTick_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
        msTicks++;
 8000350:	4b04      	ldr	r3, [pc, #16]	; (8000364 <SysTick_Handler+0x18>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	3301      	adds	r3, #1
 8000356:	4a03      	ldr	r2, [pc, #12]	; (8000364 <SysTick_Handler+0x18>)
 8000358:	6013      	str	r3, [r2, #0]
}
 800035a:	bf00      	nop
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	20000430 	.word	0x20000430

08000368 <On>:

//turn on led
void On(uint32_t time)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
        uint32_t curTicks = msTicks;
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <On+0x38>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	60fb      	str	r3, [r7, #12]
        while(msTicks - curTicks <= time)
 8000376:	e006      	b.n	8000386 <On+0x1e>
        {
                PORT1->OMR = PORT1_OMR_PS1_Msk;
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <On+0x3c>)
 800037a:	2202      	movs	r2, #2
 800037c:	605a      	str	r2, [r3, #4]
                PORT1->OMR = ~PORT1_OMR_PR1_Msk;
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <On+0x3c>)
 8000380:	f46f 3200 	mvn.w	r2, #131072	; 0x20000
 8000384:	605a      	str	r2, [r3, #4]
        while(msTicks - curTicks <= time)
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <On+0x38>)
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	429a      	cmp	r2, r3
 8000392:	d2f1      	bcs.n	8000378 <On+0x10>
        }
}
 8000394:	bf00      	nop
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	20000430 	.word	0x20000430
 80003a4:	48028100 	.word	0x48028100

080003a8 <Off>:

//turn off led
void Off(uint32_t time)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
        uint32_t curTicks = msTicks;
 80003b0:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <Off+0x38>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	60fb      	str	r3, [r7, #12]
        while(msTicks - curTicks <= time)
 80003b6:	e006      	b.n	80003c6 <Off+0x1e>
        {
                PORT1->OMR = PORT1_OMR_PS1_Msk;
 80003b8:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <Off+0x3c>)
 80003ba:	2202      	movs	r2, #2
 80003bc:	605a      	str	r2, [r3, #4]
                PORT1->OMR = PORT1_OMR_PR1_Msk;
 80003be:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <Off+0x3c>)
 80003c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80003c4:	605a      	str	r2, [r3, #4]
        while(msTicks - curTicks <= time)
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <Off+0x38>)
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	1ad3      	subs	r3, r2, r3
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d2f1      	bcs.n	80003b8 <Off+0x10>
        }
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	20000430 	.word	0x20000430
 80003e4:	48028100 	.word	0x48028100

080003e8 <AMorse>:

//alphabet morse
void AMorse(char x)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
	switch(x)
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	3b41      	subs	r3, #65	; 0x41
 80003f6:	2b12      	cmp	r3, #18
 80003f8:	f200 80a6 	bhi.w	8000548 <AMorse+0x160>
 80003fc:	a201      	add	r2, pc, #4	; (adr r2, 8000404 <AMorse+0x1c>)
 80003fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000402:	bf00      	nop
 8000404:	08000495 	.word	0x08000495
 8000408:	08000549 	.word	0x08000549
 800040c:	08000465 	.word	0x08000465
 8000410:	08000549 	.word	0x08000549
 8000414:	08000541 	.word	0x08000541
 8000418:	08000549 	.word	0x08000549
 800041c:	08000549 	.word	0x08000549
 8000420:	08000549 	.word	0x08000549
 8000424:	08000451 	.word	0x08000451
 8000428:	08000549 	.word	0x08000549
 800042c:	08000549 	.word	0x08000549
 8000430:	08000549 	.word	0x08000549
 8000434:	080004c1 	.word	0x080004c1
 8000438:	080004ab 	.word	0x080004ab
 800043c:	080004d9 	.word	0x080004d9
 8000440:	08000549 	.word	0x08000549
 8000444:	08000549 	.word	0x08000549
 8000448:	080004ff 	.word	0x080004ff
 800044c:	08000521 	.word	0x08000521
	{
		case 'I':
			On(100);
 8000450:	2064      	movs	r0, #100	; 0x64
 8000452:	f7ff ff89 	bl	8000368 <On>
			Off(100);
 8000456:	2064      	movs	r0, #100	; 0x64
 8000458:	f7ff ffa6 	bl	80003a8 <Off>
			On(100);
 800045c:	2064      	movs	r0, #100	; 0x64
 800045e:	f7ff ff83 	bl	8000368 <On>
			break;
 8000462:	e071      	b.n	8000548 <AMorse+0x160>
		case 'C':
			On(300);
 8000464:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000468:	f7ff ff7e 	bl	8000368 <On>
                        Off(100);
 800046c:	2064      	movs	r0, #100	; 0x64
 800046e:	f7ff ff9b 	bl	80003a8 <Off>
                        On(100);
 8000472:	2064      	movs	r0, #100	; 0x64
 8000474:	f7ff ff78 	bl	8000368 <On>
                        Off(100);
 8000478:	2064      	movs	r0, #100	; 0x64
 800047a:	f7ff ff95 	bl	80003a8 <Off>
                        On(300);
 800047e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000482:	f7ff ff71 	bl	8000368 <On>
                        Off(100);
 8000486:	2064      	movs	r0, #100	; 0x64
 8000488:	f7ff ff8e 	bl	80003a8 <Off>
                        On(100);
 800048c:	2064      	movs	r0, #100	; 0x64
 800048e:	f7ff ff6b 	bl	8000368 <On>
			break;
 8000492:	e059      	b.n	8000548 <AMorse+0x160>
		case 'A':
			On(100);
 8000494:	2064      	movs	r0, #100	; 0x64
 8000496:	f7ff ff67 	bl	8000368 <On>
                        Off(100);
 800049a:	2064      	movs	r0, #100	; 0x64
 800049c:	f7ff ff84 	bl	80003a8 <Off>
                        On(300);
 80004a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004a4:	f7ff ff60 	bl	8000368 <On>
			break;
 80004a8:	e04e      	b.n	8000548 <AMorse+0x160>
		case 'N':
                        On(300);
 80004aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004ae:	f7ff ff5b 	bl	8000368 <On>
                        Off(100);
 80004b2:	2064      	movs	r0, #100	; 0x64
 80004b4:	f7ff ff78 	bl	80003a8 <Off>
                        On(100);
 80004b8:	2064      	movs	r0, #100	; 0x64
 80004ba:	f7ff ff55 	bl	8000368 <On>
			break;
 80004be:	e043      	b.n	8000548 <AMorse+0x160>
		case 'M':
	                On(300);
 80004c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004c4:	f7ff ff50 	bl	8000368 <On>
                        Off(100);
 80004c8:	2064      	movs	r0, #100	; 0x64
 80004ca:	f7ff ff6d 	bl	80003a8 <Off>
                        On(300);
 80004ce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004d2:	f7ff ff49 	bl	8000368 <On>
			break;
 80004d6:	e037      	b.n	8000548 <AMorse+0x160>
		case 'O':
                        On(300);
 80004d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004dc:	f7ff ff44 	bl	8000368 <On>
                        Off(100);
 80004e0:	2064      	movs	r0, #100	; 0x64
 80004e2:	f7ff ff61 	bl	80003a8 <Off>
                        On(300);
 80004e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004ea:	f7ff ff3d 	bl	8000368 <On>
                        Off(100);
 80004ee:	2064      	movs	r0, #100	; 0x64
 80004f0:	f7ff ff5a 	bl	80003a8 <Off>
                        On(300);
 80004f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004f8:	f7ff ff36 	bl	8000368 <On>
			break;
 80004fc:	e024      	b.n	8000548 <AMorse+0x160>
		case 'R':
                       	On(100);
 80004fe:	2064      	movs	r0, #100	; 0x64
 8000500:	f7ff ff32 	bl	8000368 <On>
                        Off(100);
 8000504:	2064      	movs	r0, #100	; 0x64
 8000506:	f7ff ff4f 	bl	80003a8 <Off>
                        On(300);
 800050a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800050e:	f7ff ff2b 	bl	8000368 <On>
                        Off(100);
 8000512:	2064      	movs	r0, #100	; 0x64
 8000514:	f7ff ff48 	bl	80003a8 <Off>
                        On(100);
 8000518:	2064      	movs	r0, #100	; 0x64
 800051a:	f7ff ff25 	bl	8000368 <On>
			break;
 800051e:	e013      	b.n	8000548 <AMorse+0x160>
		case 'S':
                        On(100);
 8000520:	2064      	movs	r0, #100	; 0x64
 8000522:	f7ff ff21 	bl	8000368 <On>
                        Off(100);
 8000526:	2064      	movs	r0, #100	; 0x64
 8000528:	f7ff ff3e 	bl	80003a8 <Off>
                        On(100);
 800052c:	2064      	movs	r0, #100	; 0x64
 800052e:	f7ff ff1b 	bl	8000368 <On>
                        Off(100);
 8000532:	2064      	movs	r0, #100	; 0x64
 8000534:	f7ff ff38 	bl	80003a8 <Off>
                        On(100);
 8000538:	2064      	movs	r0, #100	; 0x64
 800053a:	f7ff ff15 	bl	8000368 <On>
			break;
 800053e:	e003      	b.n	8000548 <AMorse+0x160>
		case 'E':
			On(100);
 8000540:	2064      	movs	r0, #100	; 0x64
 8000542:	f7ff ff11 	bl	8000368 <On>
			break;
 8000546:	bf00      	nop
	}
}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <DMorse>:

//digit morse
void DMorse(uint32_t x)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	switch(x)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2b09      	cmp	r3, #9
 800055c:	f200 8149 	bhi.w	80007f2 <DMorse+0x2a2>
 8000560:	a201      	add	r2, pc, #4	; (adr r2, 8000568 <DMorse+0x18>)
 8000562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000566:	bf00      	nop
 8000568:	08000591 	.word	0x08000591
 800056c:	080005d3 	.word	0x080005d3
 8000570:	08000613 	.word	0x08000613
 8000574:	08000651 	.word	0x08000651
 8000578:	0800068d 	.word	0x0800068d
 800057c:	080006c7 	.word	0x080006c7
 8000580:	080006ff 	.word	0x080006ff
 8000584:	08000739 	.word	0x08000739
 8000588:	08000775 	.word	0x08000775
 800058c:	080007b3 	.word	0x080007b3
	{
		case 0:
			On(300);
 8000590:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000594:	f7ff fee8 	bl	8000368 <On>
			Off(100);
 8000598:	2064      	movs	r0, #100	; 0x64
 800059a:	f7ff ff05 	bl	80003a8 <Off>
			On(300);
 800059e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005a2:	f7ff fee1 	bl	8000368 <On>
			Off(100);
 80005a6:	2064      	movs	r0, #100	; 0x64
 80005a8:	f7ff fefe 	bl	80003a8 <Off>
			On(300);
 80005ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005b0:	f7ff feda 	bl	8000368 <On>
			Off(100);
 80005b4:	2064      	movs	r0, #100	; 0x64
 80005b6:	f7ff fef7 	bl	80003a8 <Off>
			On(300);
 80005ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005be:	f7ff fed3 	bl	8000368 <On>
			Off(100);
 80005c2:	2064      	movs	r0, #100	; 0x64
 80005c4:	f7ff fef0 	bl	80003a8 <Off>
			On(300);
 80005c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005cc:	f7ff fecc 	bl	8000368 <On>
			break;
 80005d0:	e10f      	b.n	80007f2 <DMorse+0x2a2>
		case 1:
			On(100);
 80005d2:	2064      	movs	r0, #100	; 0x64
 80005d4:	f7ff fec8 	bl	8000368 <On>
			Off(100);
 80005d8:	2064      	movs	r0, #100	; 0x64
 80005da:	f7ff fee5 	bl	80003a8 <Off>
			On(300);
 80005de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005e2:	f7ff fec1 	bl	8000368 <On>
			Off(100);
 80005e6:	2064      	movs	r0, #100	; 0x64
 80005e8:	f7ff fede 	bl	80003a8 <Off>
	               	On(300);
 80005ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005f0:	f7ff feba 	bl	8000368 <On>
                        Off(100);
 80005f4:	2064      	movs	r0, #100	; 0x64
 80005f6:	f7ff fed7 	bl	80003a8 <Off>
			On(300);
 80005fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005fe:	f7ff feb3 	bl	8000368 <On>
                        Off(100);
 8000602:	2064      	movs	r0, #100	; 0x64
 8000604:	f7ff fed0 	bl	80003a8 <Off>
			On(300);
 8000608:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800060c:	f7ff feac 	bl	8000368 <On>
                        break;
 8000610:	e0ef      	b.n	80007f2 <DMorse+0x2a2>
                case 2:
                        On(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f7ff fea8 	bl	8000368 <On>
                        Off(100);
 8000618:	2064      	movs	r0, #100	; 0x64
 800061a:	f7ff fec5 	bl	80003a8 <Off>
                        On(100);
 800061e:	2064      	movs	r0, #100	; 0x64
 8000620:	f7ff fea2 	bl	8000368 <On>
                        Off(100);
 8000624:	2064      	movs	r0, #100	; 0x64
 8000626:	f7ff febf 	bl	80003a8 <Off>
                        On(300);
 800062a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800062e:	f7ff fe9b 	bl	8000368 <On>
                        Off(100);
 8000632:	2064      	movs	r0, #100	; 0x64
 8000634:	f7ff feb8 	bl	80003a8 <Off>
                        On(300);
 8000638:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800063c:	f7ff fe94 	bl	8000368 <On>
                        Off(100);
 8000640:	2064      	movs	r0, #100	; 0x64
 8000642:	f7ff feb1 	bl	80003a8 <Off>
                        On(300);
 8000646:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800064a:	f7ff fe8d 	bl	8000368 <On>
                        break;
 800064e:	e0d0      	b.n	80007f2 <DMorse+0x2a2>
                case 3:
                        On(100);
 8000650:	2064      	movs	r0, #100	; 0x64
 8000652:	f7ff fe89 	bl	8000368 <On>
                        Off(100);
 8000656:	2064      	movs	r0, #100	; 0x64
 8000658:	f7ff fea6 	bl	80003a8 <Off>
                        On(100);
 800065c:	2064      	movs	r0, #100	; 0x64
 800065e:	f7ff fe83 	bl	8000368 <On>
                        Off(100);
 8000662:	2064      	movs	r0, #100	; 0x64
 8000664:	f7ff fea0 	bl	80003a8 <Off>
                        On(100);
 8000668:	2064      	movs	r0, #100	; 0x64
 800066a:	f7ff fe7d 	bl	8000368 <On>
                        Off(100);
 800066e:	2064      	movs	r0, #100	; 0x64
 8000670:	f7ff fe9a 	bl	80003a8 <Off>
                        On(300);
 8000674:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000678:	f7ff fe76 	bl	8000368 <On>
                        Off(100);
 800067c:	2064      	movs	r0, #100	; 0x64
 800067e:	f7ff fe93 	bl	80003a8 <Off>
                        On(300);
 8000682:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000686:	f7ff fe6f 	bl	8000368 <On>
                        break;
 800068a:	e0b2      	b.n	80007f2 <DMorse+0x2a2>
                case 4:
                        On(100);
 800068c:	2064      	movs	r0, #100	; 0x64
 800068e:	f7ff fe6b 	bl	8000368 <On>
                        Off(100);
 8000692:	2064      	movs	r0, #100	; 0x64
 8000694:	f7ff fe88 	bl	80003a8 <Off>
                        On(100);
 8000698:	2064      	movs	r0, #100	; 0x64
 800069a:	f7ff fe65 	bl	8000368 <On>
                        Off(100);
 800069e:	2064      	movs	r0, #100	; 0x64
 80006a0:	f7ff fe82 	bl	80003a8 <Off>
                        On(100);
 80006a4:	2064      	movs	r0, #100	; 0x64
 80006a6:	f7ff fe5f 	bl	8000368 <On>
                        Off(100);
 80006aa:	2064      	movs	r0, #100	; 0x64
 80006ac:	f7ff fe7c 	bl	80003a8 <Off>
                        On(100);
 80006b0:	2064      	movs	r0, #100	; 0x64
 80006b2:	f7ff fe59 	bl	8000368 <On>
                        Off(100);
 80006b6:	2064      	movs	r0, #100	; 0x64
 80006b8:	f7ff fe76 	bl	80003a8 <Off>
                        On(300);
 80006bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006c0:	f7ff fe52 	bl	8000368 <On>
                        break;
 80006c4:	e095      	b.n	80007f2 <DMorse+0x2a2>
                case 5:
                        On(100);
 80006c6:	2064      	movs	r0, #100	; 0x64
 80006c8:	f7ff fe4e 	bl	8000368 <On>
                        Off(100);
 80006cc:	2064      	movs	r0, #100	; 0x64
 80006ce:	f7ff fe6b 	bl	80003a8 <Off>
                        On(100);
 80006d2:	2064      	movs	r0, #100	; 0x64
 80006d4:	f7ff fe48 	bl	8000368 <On>
                        Off(100);
 80006d8:	2064      	movs	r0, #100	; 0x64
 80006da:	f7ff fe65 	bl	80003a8 <Off>
                        On(100);
 80006de:	2064      	movs	r0, #100	; 0x64
 80006e0:	f7ff fe42 	bl	8000368 <On>
                        Off(100);
 80006e4:	2064      	movs	r0, #100	; 0x64
 80006e6:	f7ff fe5f 	bl	80003a8 <Off>
                        On(100);
 80006ea:	2064      	movs	r0, #100	; 0x64
 80006ec:	f7ff fe3c 	bl	8000368 <On>
                        Off(100);
 80006f0:	2064      	movs	r0, #100	; 0x64
 80006f2:	f7ff fe59 	bl	80003a8 <Off>
                        On(100);
 80006f6:	2064      	movs	r0, #100	; 0x64
 80006f8:	f7ff fe36 	bl	8000368 <On>
                        break;
 80006fc:	e079      	b.n	80007f2 <DMorse+0x2a2>
                case 6:
                        On(300);
 80006fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000702:	f7ff fe31 	bl	8000368 <On>
                        Off(100);
 8000706:	2064      	movs	r0, #100	; 0x64
 8000708:	f7ff fe4e 	bl	80003a8 <Off>
                        On(100);
 800070c:	2064      	movs	r0, #100	; 0x64
 800070e:	f7ff fe2b 	bl	8000368 <On>
                        Off(100);
 8000712:	2064      	movs	r0, #100	; 0x64
 8000714:	f7ff fe48 	bl	80003a8 <Off>
                        On(100);
 8000718:	2064      	movs	r0, #100	; 0x64
 800071a:	f7ff fe25 	bl	8000368 <On>
                        Off(100);
 800071e:	2064      	movs	r0, #100	; 0x64
 8000720:	f7ff fe42 	bl	80003a8 <Off>
                        On(100);
 8000724:	2064      	movs	r0, #100	; 0x64
 8000726:	f7ff fe1f 	bl	8000368 <On>
                        Off(100);
 800072a:	2064      	movs	r0, #100	; 0x64
 800072c:	f7ff fe3c 	bl	80003a8 <Off>
                        On(100);
 8000730:	2064      	movs	r0, #100	; 0x64
 8000732:	f7ff fe19 	bl	8000368 <On>
                        break;
 8000736:	e05c      	b.n	80007f2 <DMorse+0x2a2>
                case 7:
                        On(300);
 8000738:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800073c:	f7ff fe14 	bl	8000368 <On>
                        Off(100);
 8000740:	2064      	movs	r0, #100	; 0x64
 8000742:	f7ff fe31 	bl	80003a8 <Off>
                        On(300);
 8000746:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800074a:	f7ff fe0d 	bl	8000368 <On>
                        Off(100);
 800074e:	2064      	movs	r0, #100	; 0x64
 8000750:	f7ff fe2a 	bl	80003a8 <Off>
                        On(100);
 8000754:	2064      	movs	r0, #100	; 0x64
 8000756:	f7ff fe07 	bl	8000368 <On>
                        Off(100);
 800075a:	2064      	movs	r0, #100	; 0x64
 800075c:	f7ff fe24 	bl	80003a8 <Off>
                        On(100);
 8000760:	2064      	movs	r0, #100	; 0x64
 8000762:	f7ff fe01 	bl	8000368 <On>
                        Off(100);
 8000766:	2064      	movs	r0, #100	; 0x64
 8000768:	f7ff fe1e 	bl	80003a8 <Off>
                        On(100);
 800076c:	2064      	movs	r0, #100	; 0x64
 800076e:	f7ff fdfb 	bl	8000368 <On>
                        break;
 8000772:	e03e      	b.n	80007f2 <DMorse+0x2a2>
                case 8:
                        On(300);
 8000774:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000778:	f7ff fdf6 	bl	8000368 <On>
                        Off(100);
 800077c:	2064      	movs	r0, #100	; 0x64
 800077e:	f7ff fe13 	bl	80003a8 <Off>
                        On(300);
 8000782:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000786:	f7ff fdef 	bl	8000368 <On>
                        Off(100);
 800078a:	2064      	movs	r0, #100	; 0x64
 800078c:	f7ff fe0c 	bl	80003a8 <Off>
                        On(300);
 8000790:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000794:	f7ff fde8 	bl	8000368 <On>
                        Off(100);
 8000798:	2064      	movs	r0, #100	; 0x64
 800079a:	f7ff fe05 	bl	80003a8 <Off>
                        On(100);
 800079e:	2064      	movs	r0, #100	; 0x64
 80007a0:	f7ff fde2 	bl	8000368 <On>
                        Off(100);
 80007a4:	2064      	movs	r0, #100	; 0x64
 80007a6:	f7ff fdff 	bl	80003a8 <Off>
                        On(100);
 80007aa:	2064      	movs	r0, #100	; 0x64
 80007ac:	f7ff fddc 	bl	8000368 <On>
                        break;
 80007b0:	e01f      	b.n	80007f2 <DMorse+0x2a2>
                case 9:
                        On(300);
 80007b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007b6:	f7ff fdd7 	bl	8000368 <On>
                        Off(100);
 80007ba:	2064      	movs	r0, #100	; 0x64
 80007bc:	f7ff fdf4 	bl	80003a8 <Off>
                        On(300);
 80007c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007c4:	f7ff fdd0 	bl	8000368 <On>
                        Off(100);
 80007c8:	2064      	movs	r0, #100	; 0x64
 80007ca:	f7ff fded 	bl	80003a8 <Off>
                        On(300);
 80007ce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007d2:	f7ff fdc9 	bl	8000368 <On>
                        Off(100);
 80007d6:	2064      	movs	r0, #100	; 0x64
 80007d8:	f7ff fde6 	bl	80003a8 <Off>
                        On(300);
 80007dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007e0:	f7ff fdc2 	bl	8000368 <On>
                        Off(100);
 80007e4:	2064      	movs	r0, #100	; 0x64
 80007e6:	f7ff fddf 	bl	80003a8 <Off>
                        On(100);
 80007ea:	2064      	movs	r0, #100	; 0x64
 80007ec:	f7ff fdbc 	bl	8000368 <On>
                        break;	
 80007f0:	bf00      	nop
	}
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop

080007fc <PressDownTimer>:

//save press-down time
uint32_t pdTimes[2] = {0};
uint32_t* point = pdTimes + 1;
void PressDownTimer(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
        if(point == pdTimes)
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <PressDownTimer+0x3c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a0d      	ldr	r2, [pc, #52]	; (800083c <PressDownTimer+0x40>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d108      	bne.n	800081c <PressDownTimer+0x20>
        {
                point = pdTimes + 1;
 800080a:	4a0d      	ldr	r2, [pc, #52]	; (8000840 <PressDownTimer+0x44>)
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <PressDownTimer+0x3c>)
 800080e:	601a      	str	r2, [r3, #0]
                *point = msTicks;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <PressDownTimer+0x3c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a0b      	ldr	r2, [pc, #44]	; (8000844 <PressDownTimer+0x48>)
 8000816:	6812      	ldr	r2, [r2, #0]
 8000818:	601a      	str	r2, [r3, #0]
	else
        {
                point = pdTimes;
                *point = msTicks;
        }
}
 800081a:	e007      	b.n	800082c <PressDownTimer+0x30>
                point = pdTimes;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <PressDownTimer+0x3c>)
 800081e:	4a07      	ldr	r2, [pc, #28]	; (800083c <PressDownTimer+0x40>)
 8000820:	601a      	str	r2, [r3, #0]
                *point = msTicks;
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <PressDownTimer+0x3c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a07      	ldr	r2, [pc, #28]	; (8000844 <PressDownTimer+0x48>)
 8000828:	6812      	ldr	r2, [r2, #0]
 800082a:	601a      	str	r2, [r3, #0]
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000000 	.word	0x20000000
 800083c:	20000434 	.word	0x20000434
 8000840:	20000438 	.word	0x20000438
 8000844:	20000430 	.word	0x20000430

08000848 <DCMorse>:

//send digital morse code
void DCMorse(uint32_t x)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	uint32_t digit[8] = {0};
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	2220      	movs	r2, #32
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fe73 	bl	8001544 <memset>
	digit[7] = (x / 1) % 10;
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	4bd0      	ldr	r3, [pc, #832]	; (8000ba4 <DCMorse+0x35c>)
 8000862:	fba3 2301 	umull	r2, r3, r3, r1
 8000866:	08da      	lsrs	r2, r3, #3
 8000868:	4613      	mov	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	1aca      	subs	r2, r1, r3
 8000872:	627a      	str	r2, [r7, #36]	; 0x24
	digit[6] = (x / 10) % 10;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4acb      	ldr	r2, [pc, #812]	; (8000ba4 <DCMorse+0x35c>)
 8000878:	fba2 2303 	umull	r2, r3, r2, r3
 800087c:	08d9      	lsrs	r1, r3, #3
 800087e:	4bc9      	ldr	r3, [pc, #804]	; (8000ba4 <DCMorse+0x35c>)
 8000880:	fba3 2301 	umull	r2, r3, r3, r1
 8000884:	08da      	lsrs	r2, r3, #3
 8000886:	4613      	mov	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4413      	add	r3, r2
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	1aca      	subs	r2, r1, r3
 8000890:	623a      	str	r2, [r7, #32]
	digit[5] = (x / 100) % 10;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4ac4      	ldr	r2, [pc, #784]	; (8000ba8 <DCMorse+0x360>)
 8000896:	fba2 2303 	umull	r2, r3, r2, r3
 800089a:	0959      	lsrs	r1, r3, #5
 800089c:	4bc1      	ldr	r3, [pc, #772]	; (8000ba4 <DCMorse+0x35c>)
 800089e:	fba3 2301 	umull	r2, r3, r3, r1
 80008a2:	08da      	lsrs	r2, r3, #3
 80008a4:	4613      	mov	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4413      	add	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	1aca      	subs	r2, r1, r3
 80008ae:	61fa      	str	r2, [r7, #28]
	digit[4] = (x / 1000) % 10;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4abe      	ldr	r2, [pc, #760]	; (8000bac <DCMorse+0x364>)
 80008b4:	fba2 2303 	umull	r2, r3, r2, r3
 80008b8:	0999      	lsrs	r1, r3, #6
 80008ba:	4bba      	ldr	r3, [pc, #744]	; (8000ba4 <DCMorse+0x35c>)
 80008bc:	fba3 2301 	umull	r2, r3, r3, r1
 80008c0:	08da      	lsrs	r2, r3, #3
 80008c2:	4613      	mov	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	4413      	add	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	1aca      	subs	r2, r1, r3
 80008cc:	61ba      	str	r2, [r7, #24]
	digit[3] = (x / 10000) % 10;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4ab7      	ldr	r2, [pc, #732]	; (8000bb0 <DCMorse+0x368>)
 80008d2:	fba2 2303 	umull	r2, r3, r2, r3
 80008d6:	0b59      	lsrs	r1, r3, #13
 80008d8:	4bb2      	ldr	r3, [pc, #712]	; (8000ba4 <DCMorse+0x35c>)
 80008da:	fba3 2301 	umull	r2, r3, r3, r1
 80008de:	08da      	lsrs	r2, r3, #3
 80008e0:	4613      	mov	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4413      	add	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	1aca      	subs	r2, r1, r3
 80008ea:	617a      	str	r2, [r7, #20]
	digit[2] = (x / 100000) % 10;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	095b      	lsrs	r3, r3, #5
 80008f0:	4ab0      	ldr	r2, [pc, #704]	; (8000bb4 <DCMorse+0x36c>)
 80008f2:	fba2 2303 	umull	r2, r3, r2, r3
 80008f6:	09d9      	lsrs	r1, r3, #7
 80008f8:	4baa      	ldr	r3, [pc, #680]	; (8000ba4 <DCMorse+0x35c>)
 80008fa:	fba3 2301 	umull	r2, r3, r3, r1
 80008fe:	08da      	lsrs	r2, r3, #3
 8000900:	4613      	mov	r3, r2
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	4413      	add	r3, r2
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	1aca      	subs	r2, r1, r3
 800090a:	613a      	str	r2, [r7, #16]
	digit[1] = (x / 1000000) % 10;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4aaa      	ldr	r2, [pc, #680]	; (8000bb8 <DCMorse+0x370>)
 8000910:	fba2 2303 	umull	r2, r3, r2, r3
 8000914:	0c99      	lsrs	r1, r3, #18
 8000916:	4ba3      	ldr	r3, [pc, #652]	; (8000ba4 <DCMorse+0x35c>)
 8000918:	fba3 2301 	umull	r2, r3, r3, r1
 800091c:	08da      	lsrs	r2, r3, #3
 800091e:	4613      	mov	r3, r2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	4413      	add	r3, r2
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	1aca      	subs	r2, r1, r3
 8000928:	60fa      	str	r2, [r7, #12]
	digit[0] = (x / 10000000) % 10;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4aa3      	ldr	r2, [pc, #652]	; (8000bbc <DCMorse+0x374>)
 800092e:	fba2 2303 	umull	r2, r3, r2, r3
 8000932:	0d99      	lsrs	r1, r3, #22
 8000934:	4b9b      	ldr	r3, [pc, #620]	; (8000ba4 <DCMorse+0x35c>)
 8000936:	fba3 2301 	umull	r2, r3, r3, r1
 800093a:	08da      	lsrs	r2, r3, #3
 800093c:	4613      	mov	r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	4413      	add	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	1aca      	subs	r2, r1, r3
 8000946:	60ba      	str	r2, [r7, #8]

	if(digit[0] != 0)
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d03f      	beq.n	80009ce <DCMorse+0x186>
	{
		DMorse(digit[0]);
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fdfd 	bl	8000550 <DMorse>
		Off(300);
 8000956:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800095a:	f7ff fd25 	bl	80003a8 <Off>
		DMorse(digit[1]);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fdf5 	bl	8000550 <DMorse>
		Off(300);
 8000966:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800096a:	f7ff fd1d 	bl	80003a8 <Off>
		DMorse(digit[2]);
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fded 	bl	8000550 <DMorse>
		Off(300);
 8000976:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800097a:	f7ff fd15 	bl	80003a8 <Off>
		DMorse(digit[3]);
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fde5 	bl	8000550 <DMorse>
		Off(300);
 8000986:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800098a:	f7ff fd0d 	bl	80003a8 <Off>
		DMorse(digit[4]);
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fddd 	bl	8000550 <DMorse>
		Off(300);
 8000996:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800099a:	f7ff fd05 	bl	80003a8 <Off>
		DMorse(digit[5]);
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fdd5 	bl	8000550 <DMorse>
		Off(300);
 80009a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009aa:	f7ff fcfd 	bl	80003a8 <Off>
		DMorse(digit[6]);
 80009ae:	6a3b      	ldr	r3, [r7, #32]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fdcd 	bl	8000550 <DMorse>
		Off(300);
 80009b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009ba:	f7ff fcf5 	bl	80003a8 <Off>
		DMorse(digit[7]);
 80009be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fdc5 	bl	8000550 <DMorse>
		Off(1);
 80009c6:	2001      	movs	r0, #1
 80009c8:	f7ff fcee 	bl	80003a8 <Off>
	else
	{	
		DMorse(digit[7]);
		Off(1);
	}
}
 80009cc:	e0ff      	b.n	8000bce <DCMorse+0x386>
	else if(digit[1] != 0)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d037      	beq.n	8000a44 <DCMorse+0x1fc>
               	DMorse(digit[1]);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fdba 	bl	8000550 <DMorse>
                Off(300);
 80009dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009e0:	f7ff fce2 	bl	80003a8 <Off>
                DMorse(digit[2]);
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fdb2 	bl	8000550 <DMorse>
                Off(300);
 80009ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009f0:	f7ff fcda 	bl	80003a8 <Off>
                DMorse(digit[3]);
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fdaa 	bl	8000550 <DMorse>
                Off(300);
 80009fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a00:	f7ff fcd2 	bl	80003a8 <Off>
                DMorse(digit[4]);
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fda2 	bl	8000550 <DMorse>
                Off(300);
 8000a0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a10:	f7ff fcca 	bl	80003a8 <Off>
                DMorse(digit[5]);
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fd9a 	bl	8000550 <DMorse>
                Off(300);
 8000a1c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a20:	f7ff fcc2 	bl	80003a8 <Off>
                DMorse(digit[6]);
 8000a24:	6a3b      	ldr	r3, [r7, #32]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fd92 	bl	8000550 <DMorse>
                Off(300);
 8000a2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a30:	f7ff fcba 	bl	80003a8 <Off>
                DMorse(digit[7]);
 8000a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fd8a 	bl	8000550 <DMorse>
                Off(1);
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f7ff fcb3 	bl	80003a8 <Off>
}
 8000a42:	e0c4      	b.n	8000bce <DCMorse+0x386>
	else if(digit[2] != 0)
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d02f      	beq.n	8000aaa <DCMorse+0x262>
                DMorse(digit[2]);
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fd7f 	bl	8000550 <DMorse>
                Off(300);
 8000a52:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a56:	f7ff fca7 	bl	80003a8 <Off>
                DMorse(digit[3]);
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fd77 	bl	8000550 <DMorse>
                Off(300);
 8000a62:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a66:	f7ff fc9f 	bl	80003a8 <Off>
                DMorse(digit[4]);
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fd6f 	bl	8000550 <DMorse>
                Off(300);
 8000a72:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a76:	f7ff fc97 	bl	80003a8 <Off>
                DMorse(digit[5]);
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fd67 	bl	8000550 <DMorse>
                Off(300);
 8000a82:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a86:	f7ff fc8f 	bl	80003a8 <Off>
                DMorse(digit[6]);
 8000a8a:	6a3b      	ldr	r3, [r7, #32]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fd5f 	bl	8000550 <DMorse>
                Off(300);
 8000a92:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a96:	f7ff fc87 	bl	80003a8 <Off>
                DMorse(digit[7]);
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fd57 	bl	8000550 <DMorse>
                Off(1);
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f7ff fc80 	bl	80003a8 <Off>
}
 8000aa8:	e091      	b.n	8000bce <DCMorse+0x386>
	else if(digit[3] != 0)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d027      	beq.n	8000b00 <DCMorse+0x2b8>
                DMorse(digit[3]);
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fd4c 	bl	8000550 <DMorse>
                Off(300);
 8000ab8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000abc:	f7ff fc74 	bl	80003a8 <Off>
                DMorse(digit[4]);
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fd44 	bl	8000550 <DMorse>
                Off(300);
 8000ac8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000acc:	f7ff fc6c 	bl	80003a8 <Off>
                DMorse(digit[5]);
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd3c 	bl	8000550 <DMorse>
                Off(300);
 8000ad8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000adc:	f7ff fc64 	bl	80003a8 <Off>
                DMorse(digit[6]);
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fd34 	bl	8000550 <DMorse>
                Off(300);
 8000ae8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000aec:	f7ff fc5c 	bl	80003a8 <Off>
                DMorse(digit[7]);
 8000af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fd2c 	bl	8000550 <DMorse>
                Off(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fc55 	bl	80003a8 <Off>
}
 8000afe:	e066      	b.n	8000bce <DCMorse+0x386>
	else if(digit[4] != 0)
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d01f      	beq.n	8000b46 <DCMorse+0x2fe>
                DMorse(digit[4]);
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fd21 	bl	8000550 <DMorse>
                Off(300);
 8000b0e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b12:	f7ff fc49 	bl	80003a8 <Off>
                DMorse(digit[5]);
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fd19 	bl	8000550 <DMorse>
                Off(300);
 8000b1e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b22:	f7ff fc41 	bl	80003a8 <Off>
                DMorse(digit[6]);
 8000b26:	6a3b      	ldr	r3, [r7, #32]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fd11 	bl	8000550 <DMorse>
                Off(300);
 8000b2e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b32:	f7ff fc39 	bl	80003a8 <Off>
                DMorse(digit[7]);
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fd09 	bl	8000550 <DMorse>
                Off(1);
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f7ff fc32 	bl	80003a8 <Off>
}
 8000b44:	e043      	b.n	8000bce <DCMorse+0x386>
	else if(digit[5] != 0)
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d017      	beq.n	8000b7c <DCMorse+0x334>
                DMorse(digit[5]);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fcfe 	bl	8000550 <DMorse>
                Off(300);
 8000b54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b58:	f7ff fc26 	bl	80003a8 <Off>
                DMorse(digit[6]);
 8000b5c:	6a3b      	ldr	r3, [r7, #32]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fcf6 	bl	8000550 <DMorse>
                Off(300);
 8000b64:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b68:	f7ff fc1e 	bl	80003a8 <Off>
                DMorse(digit[7]);
 8000b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fcee 	bl	8000550 <DMorse>
                Off(1);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff fc17 	bl	80003a8 <Off>
}
 8000b7a:	e028      	b.n	8000bce <DCMorse+0x386>
	else if(digit[6] != 0)
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d01e      	beq.n	8000bc0 <DCMorse+0x378>
                DMorse(digit[6]);
 8000b82:	6a3b      	ldr	r3, [r7, #32]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fce3 	bl	8000550 <DMorse>
                Off(300);
 8000b8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b8e:	f7ff fc0b 	bl	80003a8 <Off>
                DMorse(digit[7]);
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fcdb 	bl	8000550 <DMorse>
                Off(1);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff fc04 	bl	80003a8 <Off>
}
 8000ba0:	e015      	b.n	8000bce <DCMorse+0x386>
 8000ba2:	bf00      	nop
 8000ba4:	cccccccd 	.word	0xcccccccd
 8000ba8:	51eb851f 	.word	0x51eb851f
 8000bac:	10624dd3 	.word	0x10624dd3
 8000bb0:	d1b71759 	.word	0xd1b71759
 8000bb4:	0a7c5ac5 	.word	0x0a7c5ac5
 8000bb8:	431bde83 	.word	0x431bde83
 8000bbc:	6b5fca6b 	.word	0x6b5fca6b
		DMorse(digit[7]);
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fcc4 	bl	8000550 <DMorse>
		Off(1);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f7ff fbed 	bl	80003a8 <Off>
}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop

08000bd8 <main>:

int main(void)
{	
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	uint32_t timedistance = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]

	//setup SysTick
        SysTick_Config (SystemCoreClock / 1000);
 8000be2:	4b53      	ldr	r3, [pc, #332]	; (8000d30 <main+0x158>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a53      	ldr	r2, [pc, #332]	; (8000d34 <main+0x15c>)
 8000be8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bec:	099b      	lsrs	r3, r3, #6
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fb8a 	bl	8000308 <SysTick_Config>

	//configure led
        static const uint8_t PP_GPO = 0b10000;
        PORT1->IOCR0 = (PORT1->IOCR0 & ~PORT1_IOCR0_PC1_Msk) | (PP_GPO << PORT1_IOCR0_PC1_Pos);
 8000bf4:	4b50      	ldr	r3, [pc, #320]	; (8000d38 <main+0x160>)
 8000bf6:	691b      	ldr	r3, [r3, #16]
 8000bf8:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8000bfc:	4a4f      	ldr	r2, [pc, #316]	; (8000d3c <main+0x164>)
 8000bfe:	7812      	ldrb	r2, [r2, #0]
 8000c00:	02d2      	lsls	r2, r2, #11
 8000c02:	4611      	mov	r1, r2
 8000c04:	4a4c      	ldr	r2, [pc, #304]	; (8000d38 <main+0x160>)
 8000c06:	430b      	orrs	r3, r1
 8000c08:	6113      	str	r3, [r2, #16]
        PORT1->PDR0 = PORT1_PDR0_PD1_Msk;
 8000c0a:	4b4b      	ldr	r3, [pc, #300]	; (8000d38 <main+0x160>)
 8000c0c:	2270      	movs	r2, #112	; 0x70
 8000c0e:	641a      	str	r2, [r3, #64]	; 0x40
	
	//configure button
        static const uint8_t PP_GPI = 0b000;
        PORT1->IOCR12 = (PORT1->IOCR12 & ~PORT1_IOCR12_PC14_Msk) | (PP_GPI << PORT1_IOCR12_PC14_Pos);
 8000c10:	4b49      	ldr	r3, [pc, #292]	; (8000d38 <main+0x160>)
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8000c18:	4a49      	ldr	r2, [pc, #292]	; (8000d40 <main+0x168>)
 8000c1a:	7812      	ldrb	r2, [r2, #0]
 8000c1c:	04d2      	lsls	r2, r2, #19
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4a45      	ldr	r2, [pc, #276]	; (8000d38 <main+0x160>)
 8000c22:	430b      	orrs	r3, r1
 8000c24:	61d3      	str	r3, [r2, #28]
        PORT1->IOCR12 = (PORT1->IOCR12 & ~PORT1_IOCR12_PC15_Msk) | (PP_GPI << PORT1_IOCR12_PC15_Pos);
 8000c26:	4b44      	ldr	r3, [pc, #272]	; (8000d38 <main+0x160>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8000c2e:	4a44      	ldr	r2, [pc, #272]	; (8000d40 <main+0x168>)
 8000c30:	7812      	ldrb	r2, [r2, #0]
 8000c32:	06d2      	lsls	r2, r2, #27
 8000c34:	4611      	mov	r1, r2
 8000c36:	4a40      	ldr	r2, [pc, #256]	; (8000d38 <main+0x160>)
 8000c38:	430b      	orrs	r3, r1
 8000c3a:	61d3      	str	r3, [r2, #28]


        while(1)
        {
           	if(((PORT1->IN >> 14) & 0x1U) == 0)
 8000c3c:	4b3e      	ldr	r3, [pc, #248]	; (8000d38 <main+0x160>)
 8000c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c40:	0b9b      	lsrs	r3, r3, #14
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d140      	bne.n	8000ccc <main+0xf4>
                {
               		PressDownTimer();
 8000c4a:	f7ff fdd7 	bl	80007fc <PressDownTimer>

               	 	AMorse('I');
 8000c4e:	2049      	movs	r0, #73	; 0x49
 8000c50:	f7ff fbca 	bl	80003e8 <AMorse>
                	Off(700);
 8000c54:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000c58:	f7ff fba6 	bl	80003a8 <Off>
                	AMorse('C');
 8000c5c:	2043      	movs	r0, #67	; 0x43
 8000c5e:	f7ff fbc3 	bl	80003e8 <AMorse>
                	Off(300);
 8000c62:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c66:	f7ff fb9f 	bl	80003a8 <Off>
			AMorse('A');
 8000c6a:	2041      	movs	r0, #65	; 0x41
 8000c6c:	f7ff fbbc 	bl	80003e8 <AMorse>
			Off(300);
 8000c70:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c74:	f7ff fb98 	bl	80003a8 <Off>
			AMorse('N');
 8000c78:	204e      	movs	r0, #78	; 0x4e
 8000c7a:	f7ff fbb5 	bl	80003e8 <AMorse>
			Off(700);
 8000c7e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000c82:	f7ff fb91 	bl	80003a8 <Off>
			AMorse('M');
 8000c86:	204d      	movs	r0, #77	; 0x4d
 8000c88:	f7ff fbae 	bl	80003e8 <AMorse>
			Off(300);
 8000c8c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c90:	f7ff fb8a 	bl	80003a8 <Off>
			AMorse('O');
 8000c94:	204f      	movs	r0, #79	; 0x4f
 8000c96:	f7ff fba7 	bl	80003e8 <AMorse>
			Off(300);
 8000c9a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c9e:	f7ff fb83 	bl	80003a8 <Off>
			AMorse('R');
 8000ca2:	2052      	movs	r0, #82	; 0x52
 8000ca4:	f7ff fba0 	bl	80003e8 <AMorse>
                        Off(300);
 8000ca8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cac:	f7ff fb7c 	bl	80003a8 <Off>
			AMorse('S');
 8000cb0:	2053      	movs	r0, #83	; 0x53
 8000cb2:	f7ff fb99 	bl	80003e8 <AMorse>
                        Off(300);
 8000cb6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cba:	f7ff fb75 	bl	80003a8 <Off>
			AMorse('E');
 8000cbe:	2045      	movs	r0, #69	; 0x45
 8000cc0:	f7ff fb92 	bl	80003e8 <AMorse>
                        Off(700);
 8000cc4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000cc8:	f7ff fb6e 	bl	80003a8 <Off>
		}

		if(((PORT1->IN >> 15) & 0x1U) == 0)
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <main+0x160>)
 8000cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd0:	0bdb      	lsrs	r3, r3, #15
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1b0      	bne.n	8000c3c <main+0x64>
		{
			if(pdTimes[0] == 0 && pdTimes[1] == 0)
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <main+0x16c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10a      	bne.n	8000cf8 <main+0x120>
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <main+0x16c>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d106      	bne.n	8000cf8 <main+0x120>
			{
				DMorse(0);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff fc30 	bl	8000550 <DMorse>
				Off(1);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff fb59 	bl	80003a8 <Off>
 8000cf6:	e019      	b.n	8000d2c <main+0x154>
			}
			else if(pdTimes[0] != 0 && pdTimes[1] == 0)
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <main+0x16c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d009      	beq.n	8000d14 <main+0x13c>
 8000d00:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <main+0x16c>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d105      	bne.n	8000d14 <main+0x13c>
			{
				DCMorse(pdTimes[0]);
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <main+0x16c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fd9b 	bl	8000848 <DCMorse>
 8000d12:	e00b      	b.n	8000d2c <main+0x154>
			}
			else
			{	
				timedistance = abs(pdTimes[1] - pdTimes[0]);
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <main+0x16c>)
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <main+0x16c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	bfb8      	it	lt
 8000d22:	425b      	neglt	r3, r3
 8000d24:	607b      	str	r3, [r7, #4]
				DCMorse(timedistance);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff fd8e 	bl	8000848 <DCMorse>
           	if(((PORT1->IN >> 14) & 0x1U) == 0)
 8000d2c:	e786      	b.n	8000c3c <main+0x64>
 8000d2e:	bf00      	nop
 8000d30:	2000ffc0 	.word	0x2000ffc0
 8000d34:	10624dd3 	.word	0x10624dd3
 8000d38:	48028100 	.word	0x48028100
 8000d3c:	080015d8 	.word	0x080015d8
 8000d40:	080015d9 	.word	0x080015d9
 8000d44:	20000434 	.word	0x20000434

08000d48 <XMC_PRIOARRAY_GetHead>:

/*
 *
 */
__STATIC_INLINE int32_t XMC_PRIOARRAY_GetHead(XMC_PRIOARRAY_t *prioarray)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_PRIOARRAY_Init: NULL pointer", prioarray != NULL);
  return prioarray->items[prioarray->size].next;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	440b      	add	r3, r1
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	689b      	ldr	r3, [r3, #8]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <XMC_PRIOARRAY_GetItemPriority>:

/*
 *
 */
__STATIC_INLINE int32_t XMC_PRIOARRAY_GetItemPriority(XMC_PRIOARRAY_t *prioarray, int32_t item)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_PRIOARRAY_GetItemPriority: item out of range", (item >= 0) && (item < prioarray->size));
  return prioarray->items[item].priority;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6859      	ldr	r1, [r3, #4]
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	4613      	mov	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4413      	add	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	681b      	ldr	r3, [r3, #0]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <XMC_PRIOARRAY_GetItemNext>:

/*
 *
 */
__STATIC_INLINE int32_t XMC_PRIOARRAY_GetItemNext(XMC_PRIOARRAY_t *prioarray, int32_t item)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_PRIOARRAY_GetItemNext: item out of range", (item >= 0) && (item < prioarray->size));
  return prioarray->items[item].next;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6859      	ldr	r1, [r3, #4]
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	4613      	mov	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4413      	add	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	440b      	add	r3, r1
 8000db4:	689b      	ldr	r3, [r3, #8]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <XMC_LIST_Init>:
  }
}
#endif

void XMC_LIST_Init(XMC_LIST_t *list)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  *list = NULL;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <XMC_LIST_GetHead>:

void *XMC_LIST_GetHead(XMC_LIST_t *list)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  return *list;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <XMC_LIST_GetTail>:

void *XMC_LIST_GetTail(XMC_LIST_t *list)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  struct list *tail;
  
  if (*list == NULL) 
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <XMC_LIST_GetTail+0x16>
  {
    tail = NULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	e00a      	b.n	8000e20 <XMC_LIST_GetTail+0x2c>
  }
  else
  {
    for (tail = (struct list *)*list; tail->next != NULL; tail = tail->next)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	e002      	b.n	8000e18 <XMC_LIST_GetTail+0x24>
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1f8      	bne.n	8000e12 <XMC_LIST_GetTail+0x1e>
    {
      /* Loop through the list */
    }  
  }
  
  return tail;    
 8000e20:	68fb      	ldr	r3, [r7, #12]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <XMC_LIST_Add>:

void XMC_LIST_Add(XMC_LIST_t *list, void *item)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
  struct list *tail;
  
  ((struct list *)item)->next = NULL;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
  tail = (struct list *)XMC_LIST_GetTail(list);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffd8 	bl	8000df4 <XMC_LIST_GetTail>
 8000e44:	60f8      	str	r0, [r7, #12]
  
  if (tail == NULL) 
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d103      	bne.n	8000e54 <XMC_LIST_Add+0x26>
  {
    *list = item;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	601a      	str	r2, [r3, #0]
  } 
  else 
  {
    tail->next = (struct list *)item;
  }
}
 8000e52:	e002      	b.n	8000e5a <XMC_LIST_Add+0x2c>
    tail->next = (struct list *)item;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	601a      	str	r2, [r3, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <XMC_LIST_Remove>:

void XMC_LIST_Remove(XMC_LIST_t *list, void *item)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b085      	sub	sp, #20
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
  struct list *right, *left;
  
  if (*list != NULL) 
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d022      	beq.n	8000eba <XMC_LIST_Remove+0x58>
  {
    left = NULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
    for(right = (struct list *)*list; right != NULL; right = right->next)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	e019      	b.n	8000eb4 <XMC_LIST_Remove+0x52>
    {
      if(right == item) 
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d110      	bne.n	8000eaa <XMC_LIST_Remove+0x48>
      {
        if(left == NULL) 
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d104      	bne.n	8000e98 <XMC_LIST_Remove+0x36>
        {
          /* First on list */
          *list = right->next;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	e003      	b.n	8000ea0 <XMC_LIST_Remove+0x3e>
        } 
        else 
        {
          /* Not first on list */
          left->next = right->next;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	601a      	str	r2, [r3, #0]
        }
        right->next = NULL;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
        break;
 8000ea6:	bf00      	nop
      }
      left = right;
    }
  }
}
 8000ea8:	e007      	b.n	8000eba <XMC_LIST_Remove+0x58>
      left = right;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	60bb      	str	r3, [r7, #8]
    for(right = (struct list *)*list; right != NULL; right = right->next)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1e2      	bne.n	8000e80 <XMC_LIST_Remove+0x1e>
}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <XMC_LIST_Insert>:

void XMC_LIST_Insert(XMC_LIST_t *list, void *prev_item, void *new_item)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b085      	sub	sp, #20
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
  if (prev_item == NULL) 
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d107      	bne.n	8000ee8 <XMC_LIST_Insert+0x22>
  {
	((struct list *)new_item)->next = (struct list *)*list;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	601a      	str	r2, [r3, #0]
	*list = new_item;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	601a      	str	r2, [r3, #0]
  else 
  {
    ((struct list *)new_item)->next = ((struct list *)prev_item)->next;
    ((struct list *)prev_item)->next = (struct list *)new_item;
  }
}
 8000ee6:	e006      	b.n	8000ef6 <XMC_LIST_Insert+0x30>
    ((struct list *)new_item)->next = ((struct list *)prev_item)->next;
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	601a      	str	r2, [r3, #0]
    ((struct list *)prev_item)->next = (struct list *)new_item;
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	601a      	str	r2, [r3, #0]
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <XMC_PRIOARRAY_Init>:

void XMC_PRIOARRAY_Init(XMC_PRIOARRAY_t *prioarray)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_PRIOARRAY_Init: NULL pointer", prioarray != NULL);

  /* Initialize head, next points to tail, previous to NULL and the priority is MININT */
  prioarray->items[prioarray->size].next = prioarray->size + 1;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6859      	ldr	r1, [r3, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	4603      	mov	r3, r0
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4403      	add	r3, r0
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	440b      	add	r3, r1
 8000f22:	3201      	adds	r2, #1
 8000f24:	609a      	str	r2, [r3, #8]
  prioarray->items[prioarray->size].previous = -1;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	460b      	mov	r3, r1
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	440b      	add	r3, r1
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f3e:	605a      	str	r2, [r3, #4]
  prioarray->items[prioarray->size].priority = INT32_MAX;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	440b      	add	r3, r1
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000f58:	601a      	str	r2, [r3, #0]

  /* Initialize tail, next points to NULL, previous is the head and the priority is MAXINT */
  prioarray->items[prioarray->size + 1].next = -1;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6859      	ldr	r1, [r3, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	4613      	mov	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f72:	609a      	str	r2, [r3, #8]
  prioarray->items[prioarray->size + 1].previous = prioarray->size;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6859      	ldr	r1, [r3, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	4613      	mov	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	6812      	ldr	r2, [r2, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
  prioarray->items[prioarray->size + 1].priority = INT32_MIN;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6859      	ldr	r1, [r3, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	4613      	mov	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4413      	add	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000fa6:	601a      	str	r2, [r3, #0]

}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <XMC_PRIOARRAY_Add>:

void XMC_PRIOARRAY_Add(XMC_PRIOARRAY_t *prioarray, int32_t item, int32_t priority)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  int32_t next;
  int32_t previous;

  XMC_ASSERT("XMC_PRIOARRAY_Add: item out of range", (item >= 0) && (item < prioarray->size));
  
  next = XMC_PRIOARRAY_GetHead(prioarray);
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f7ff fec1 	bl	8000d48 <XMC_PRIOARRAY_GetHead>
 8000fc6:	6178      	str	r0, [r7, #20]
  while (XMC_PRIOARRAY_GetItemPriority(prioarray, next) > priority)
 8000fc8:	e004      	b.n	8000fd4 <XMC_PRIOARRAY_Add+0x20>
  {
    next = XMC_PRIOARRAY_GetItemNext(prioarray, next);
 8000fca:	6979      	ldr	r1, [r7, #20]
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f7ff fee4 	bl	8000d9a <XMC_PRIOARRAY_GetItemNext>
 8000fd2:	6178      	str	r0, [r7, #20]
  while (XMC_PRIOARRAY_GetItemPriority(prioarray, next) > priority)
 8000fd4:	6979      	ldr	r1, [r7, #20]
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f7ff fecb 	bl	8000d72 <XMC_PRIOARRAY_GetItemPriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	dbf2      	blt.n	8000fca <XMC_PRIOARRAY_Add+0x16>
  }

  previous = prioarray->items[next].previous;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6859      	ldr	r1, [r3, #4]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	613b      	str	r3, [r7, #16]

  prioarray->items[item].next = next;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6859      	ldr	r1, [r3, #4]
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	4613      	mov	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	609a      	str	r2, [r3, #8]
  prioarray->items[item].previous = previous;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6859      	ldr	r1, [r3, #4]
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	605a      	str	r2, [r3, #4]
  prioarray->items[item].priority = priority;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6859      	ldr	r1, [r3, #4]
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	4613      	mov	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	601a      	str	r2, [r3, #0]

  prioarray->items[previous].next = item;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6859      	ldr	r1, [r3, #4]
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	609a      	str	r2, [r3, #8]
  prioarray->items[next].previous = item;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6859      	ldr	r1, [r3, #4]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	605a      	str	r2, [r3, #4]
}
 800105c:	bf00      	nop
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <XMC_PRIOARRAY_Remove>:

void XMC_PRIOARRAY_Remove(XMC_PRIOARRAY_t *prioarray, int32_t item)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  int32_t next;
  int32_t previous;

  XMC_ASSERT("XMC_PRIOARRAY_Add: item out of range", (item >= 0) && (item < prioarray->size));
  
  next = prioarray->items[item].next;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6859      	ldr	r1, [r3, #4]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	4613      	mov	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	60fb      	str	r3, [r7, #12]
  previous = prioarray->items[item].previous;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6859      	ldr	r1, [r3, #4]
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	60bb      	str	r3, [r7, #8]

  prioarray->items[previous].next = next;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6859      	ldr	r1, [r3, #4]
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	4613      	mov	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	609a      	str	r2, [r3, #8]
  prioarray->items[next].previous = previous;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6859      	ldr	r1, [r3, #4]
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	605a      	str	r2, [r3, #4]
}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b085      	sub	sp, #20
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	e003      	b.n	80010e0 <delay+0x16>
  {
    __NOP();
 80010d8:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3301      	adds	r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d8f7      	bhi.n	80010d8 <delay+0xe>
  }
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80010f4:	b598      	push	{r3, r4, r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <SystemInit+0x20>)
 80010fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80010fe:	4614      	mov	r4, r2
 8001100:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001102:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8001106:	f000 f807 	bl	8001118 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 800110a:	f000 f83d 	bl	8001188 <SystemCoreClockSetup>
}
 800110e:	bf00      	nop
 8001110:	bd98      	pop	{r3, r4, r7, pc}
 8001112:	bf00      	nop
 8001114:	2000ffc4 	.word	0x2000ffc4

08001118 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800111e:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <SystemCoreSetup+0x64>)
 8001122:	4a17      	ldr	r2, [pc, #92]	; (8001180 <SystemCoreSetup+0x68>)
 8001124:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 800112a:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <SystemCoreSetup+0x64>)
 800112e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <SystemCoreSetup+0x64>)
 8001134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <SystemCoreSetup+0x64>)
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	4a0e      	ldr	r2, [pc, #56]	; (800117c <SystemCoreSetup+0x64>)
 8001142:	f023 0308 	bic.w	r3, r3, #8
 8001146:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <SystemCoreSetup+0x6c>)
 800114a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800114e:	3314      	adds	r3, #20
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f023 030f 	bic.w	r3, r3, #15
 800115a:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f043 0303 	orr.w	r3, r3, #3
 8001162:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <SystemCoreSetup+0x6c>)
 8001166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800116a:	3314      	adds	r3, #20
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	601a      	str	r2, [r3, #0]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00
 8001180:	08000000 	.word	0x08000000
 8001184:	58001000 	.word	0x58001000

08001188 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 800118c:	4b75      	ldr	r3, [pc, #468]	; (8001364 <SystemCoreClockSetup+0x1dc>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d10c      	bne.n	80011b2 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8001198:	4b72      	ldr	r3, [pc, #456]	; (8001364 <SystemCoreClockSetup+0x1dc>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4a71      	ldr	r2, [pc, #452]	; (8001364 <SystemCoreClockSetup+0x1dc>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80011a4:	bf00      	nop
 80011a6:	4b6f      	ldr	r3, [pc, #444]	; (8001364 <SystemCoreClockSetup+0x1dc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f9      	beq.n	80011a6 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80011b2:	4b6d      	ldr	r3, [pc, #436]	; (8001368 <SystemCoreClockSetup+0x1e0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d009      	beq.n	80011d2 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80011be:	4b6a      	ldr	r3, [pc, #424]	; (8001368 <SystemCoreClockSetup+0x1e0>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	4a69      	ldr	r2, [pc, #420]	; (8001368 <SystemCoreClockSetup+0x1e0>)
 80011c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c8:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80011ca:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80011ce:	f7ff ff7c 	bl	80010ca <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80011d2:	4b66      	ldr	r3, [pc, #408]	; (800136c <SystemCoreClockSetup+0x1e4>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	4a65      	ldr	r2, [pc, #404]	; (800136c <SystemCoreClockSetup+0x1e4>)
 80011d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011dc:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80011de:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80011e2:	f7ff ff72 	bl	80010ca <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80011e6:	4b61      	ldr	r3, [pc, #388]	; (800136c <SystemCoreClockSetup+0x1e4>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4a60      	ldr	r2, [pc, #384]	; (800136c <SystemCoreClockSetup+0x1e4>)
 80011ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f0:	f023 0302 	bic.w	r3, r3, #2
 80011f4:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80011f6:	4b5e      	ldr	r3, [pc, #376]	; (8001370 <SystemCoreClockSetup+0x1e8>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d029      	beq.n	8001256 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8001202:	4b5b      	ldr	r3, [pc, #364]	; (8001370 <SystemCoreClockSetup+0x1e8>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	4a5a      	ldr	r2, [pc, #360]	; (8001370 <SystemCoreClockSetup+0x1e8>)
 8001208:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800120c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001210:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8001212:	f000 f927 	bl	8001464 <OSCHP_GetFrequency>
 8001216:	4602      	mov	r2, r0
 8001218:	4b56      	ldr	r3, [pc, #344]	; (8001374 <SystemCoreClockSetup+0x1ec>)
 800121a:	fba3 2302 	umull	r2, r3, r3, r2
 800121e:	0d1b      	lsrs	r3, r3, #20
 8001220:	3b01      	subs	r3, #1
 8001222:	041a      	lsls	r2, r3, #16
 8001224:	4b52      	ldr	r3, [pc, #328]	; (8001370 <SystemCoreClockSetup+0x1e8>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4951      	ldr	r1, [pc, #324]	; (8001370 <SystemCoreClockSetup+0x1e8>)
 800122a:	4313      	orrs	r3, r2
 800122c:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 800122e:	4b4f      	ldr	r3, [pc, #316]	; (800136c <SystemCoreClockSetup+0x1e4>)
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	4a4e      	ldr	r2, [pc, #312]	; (800136c <SystemCoreClockSetup+0x1e4>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800123a:	4b4c      	ldr	r3, [pc, #304]	; (800136c <SystemCoreClockSetup+0x1e4>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	4a4b      	ldr	r2, [pc, #300]	; (800136c <SystemCoreClockSetup+0x1e4>)
 8001240:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001244:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8001246:	bf00      	nop
 8001248:	4b48      	ldr	r3, [pc, #288]	; (800136c <SystemCoreClockSetup+0x1e4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001250:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8001254:	d1f8      	bne.n	8001248 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001256:	4b45      	ldr	r3, [pc, #276]	; (800136c <SystemCoreClockSetup+0x1e4>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	4a44      	ldr	r2, [pc, #272]	; (800136c <SystemCoreClockSetup+0x1e4>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8001262:	4b42      	ldr	r3, [pc, #264]	; (800136c <SystemCoreClockSetup+0x1e4>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	4a41      	ldr	r2, [pc, #260]	; (800136c <SystemCoreClockSetup+0x1e4>)
 8001268:	f043 0310 	orr.w	r3, r3, #16
 800126c:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800126e:	4b3f      	ldr	r3, [pc, #252]	; (800136c <SystemCoreClockSetup+0x1e4>)
 8001270:	4a41      	ldr	r2, [pc, #260]	; (8001378 <SystemCoreClockSetup+0x1f0>)
 8001272:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8001274:	4b3d      	ldr	r3, [pc, #244]	; (800136c <SystemCoreClockSetup+0x1e4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	4a3c      	ldr	r2, [pc, #240]	; (800136c <SystemCoreClockSetup+0x1e4>)
 800127a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800127e:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8001280:	4b3a      	ldr	r3, [pc, #232]	; (800136c <SystemCoreClockSetup+0x1e4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4a39      	ldr	r2, [pc, #228]	; (800136c <SystemCoreClockSetup+0x1e4>)
 8001286:	f023 0310 	bic.w	r3, r3, #16
 800128a:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 800128c:	4b37      	ldr	r3, [pc, #220]	; (800136c <SystemCoreClockSetup+0x1e4>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	4a36      	ldr	r2, [pc, #216]	; (800136c <SystemCoreClockSetup+0x1e4>)
 8001292:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001296:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001298:	bf00      	nop
 800129a:	4b34      	ldr	r3, [pc, #208]	; (800136c <SystemCoreClockSetup+0x1e4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f9      	beq.n	800129a <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80012a6:	4b31      	ldr	r3, [pc, #196]	; (800136c <SystemCoreClockSetup+0x1e4>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4a30      	ldr	r2, [pc, #192]	; (800136c <SystemCoreClockSetup+0x1e4>)
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80012b2:	bf00      	nop
 80012b4:	4b2d      	ldr	r3, [pc, #180]	; (800136c <SystemCoreClockSetup+0x1e4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f9      	bne.n	80012b4 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80012c0:	4b2e      	ldr	r3, [pc, #184]	; (800137c <SystemCoreClockSetup+0x1f4>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	4a2d      	ldr	r2, [pc, #180]	; (800137c <SystemCoreClockSetup+0x1f4>)
 80012c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ca:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80012cc:	4b2b      	ldr	r3, [pc, #172]	; (800137c <SystemCoreClockSetup+0x1f4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80012d2:	4b2a      	ldr	r3, [pc, #168]	; (800137c <SystemCoreClockSetup+0x1f4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80012d8:	4b28      	ldr	r3, [pc, #160]	; (800137c <SystemCoreClockSetup+0x1f4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80012de:	4b27      	ldr	r3, [pc, #156]	; (800137c <SystemCoreClockSetup+0x1f4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 80012e4:	4b25      	ldr	r3, [pc, #148]	; (800137c <SystemCoreClockSetup+0x1f4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <SystemCoreClockSetup+0x1f4>)
 80012ec:	2203      	movs	r2, #3
 80012ee:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80012f0:	4b1e      	ldr	r3, [pc, #120]	; (800136c <SystemCoreClockSetup+0x1e4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	4a1d      	ldr	r2, [pc, #116]	; (800136c <SystemCoreClockSetup+0x1e4>)
 80012f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012fa:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <SystemCoreClockSetup+0x1e4>)
 80012fe:	4a20      	ldr	r2, [pc, #128]	; (8001380 <SystemCoreClockSetup+0x1f8>)
 8001300:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8001302:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001306:	f7ff fee0 	bl	80010ca <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800130a:	bf00      	nop
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <SystemCoreClockSetup+0x1e4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f9      	beq.n	800130c <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <SystemCoreClockSetup+0x1e4>)
 800131a:	4a1a      	ldr	r2, [pc, #104]	; (8001384 <SystemCoreClockSetup+0x1fc>)
 800131c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 800131e:	f241 1094 	movw	r0, #4500	; 0x1194
 8001322:	f7ff fed2 	bl	80010ca <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001326:	bf00      	nop
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <SystemCoreClockSetup+0x1e4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f9      	beq.n	8001328 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <SystemCoreClockSetup+0x1e4>)
 8001336:	4a14      	ldr	r2, [pc, #80]	; (8001388 <SystemCoreClockSetup+0x200>)
 8001338:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 800133a:	f241 7070 	movw	r0, #6000	; 0x1770
 800133e:	f7ff fec4 	bl	80010ca <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001342:	bf00      	nop
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <SystemCoreClockSetup+0x1e4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f9      	beq.n	8001344 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <SystemCoreClockSetup+0x204>)
 8001352:	2205      	movs	r2, #5
 8001354:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <SystemCoreClockSetup+0x1f4>)
 8001358:	2200      	movs	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 800135c:	f000 f818 	bl	8001390 <SystemCoreClockUpdate>
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	50004200 	.word	0x50004200
 8001368:	50004400 	.word	0x50004400
 800136c:	50004710 	.word	0x50004710
 8001370:	50004700 	.word	0x50004700
 8001374:	6b5fca6b 	.word	0x6b5fca6b
 8001378:	01134f00 	.word	0x01134f00
 800137c:	50004600 	.word	0x50004600
 8001380:	01074f00 	.word	0x01074f00
 8001384:	01044f00 	.word	0x01044f00
 8001388:	01034f00 	.word	0x01034f00
 800138c:	50004160 	.word	0x50004160

08001390 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8001396:	4b2f      	ldr	r3, [pc, #188]	; (8001454 <SystemCoreClockUpdate+0xc4>)
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d03e      	beq.n	8001420 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <SystemCoreClockUpdate+0xc8>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80013ae:	4b2b      	ldr	r3, [pc, #172]	; (800145c <SystemCoreClockUpdate+0xcc>)
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e002      	b.n	80013ba <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80013b4:	f000 f856 	bl	8001464 <OSCHP_GetFrequency>
 80013b8:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80013ba:	4b27      	ldr	r3, [pc, #156]	; (8001458 <SystemCoreClockUpdate+0xc8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d020      	beq.n	8001408 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <SystemCoreClockUpdate+0xc8>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	0e1b      	lsrs	r3, r3, #24
 80013cc:	f003 030f 	and.w	r3, r3, #15
 80013d0:	3301      	adds	r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80013d4:	4b20      	ldr	r3, [pc, #128]	; (8001458 <SystemCoreClockUpdate+0xc8>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013de:	3301      	adds	r3, #1
 80013e0:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <SystemCoreClockUpdate+0xc8>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	0c1b      	lsrs	r3, r3, #16
 80013e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013ec:	3301      	adds	r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	fb02 f303 	mul.w	r3, r2, r3
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	e00d      	b.n	8001424 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <SystemCoreClockUpdate+0xc8>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001410:	3301      	adds	r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	fbb2 f3f3 	udiv	r3, r2, r3
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	e001      	b.n	8001424 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <SystemCoreClockUpdate+0xcc>)
 8001422:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <SystemCoreClockUpdate+0xc4>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	3301      	adds	r3, #1
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <SystemCoreClockUpdate+0xc4>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	3301      	adds	r3, #1
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	fbb2 f3f3 	udiv	r3, r2, r3
 8001444:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8001446:	4a06      	ldr	r2, [pc, #24]	; (8001460 <SystemCoreClockUpdate+0xd0>)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	50004600 	.word	0x50004600
 8001458:	50004710 	.word	0x50004710
 800145c:	016e3600 	.word	0x016e3600
 8001460:	2000ffc0 	.word	0x2000ffc0

08001464 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8001468:	4b02      	ldr	r3, [pc, #8]	; (8001474 <OSCHP_GetFrequency+0x10>)
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	00b71b00 	.word	0x00b71b00

08001478 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <_sbrk+0x5c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <_sbrk+0x5c>)
 800148a:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <_sbrk+0x60>)
 800148c:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_sbrk+0x5c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3303      	adds	r3, #3
 8001498:	f023 0303 	bic.w	r3, r3, #3
 800149c:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <_sbrk+0x5c>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <_sbrk+0x64>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d207      	bcs.n	80014bc <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <_sbrk+0x5c>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <_sbrk+0x5c>)
 80014b6:	6013      	str	r3, [r2, #0]
    return (base);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	e006      	b.n	80014ca <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 80014bc:	f000 f818 	bl	80014f0 <__errno>
 80014c0:	4602      	mov	r2, r0
 80014c2:	230c      	movs	r3, #12
 80014c4:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000440 	.word	0x20000440
 80014d8:	20000448 	.word	0x20000448
 80014dc:	2000ffc0 	.word	0x2000ffc0

080014e0 <_init>:

/* Init */
void _init(void)
{}
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <__errno>:
 80014f0:	4b01      	ldr	r3, [pc, #4]	; (80014f8 <__errno+0x8>)
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000004 	.word	0x20000004

080014fc <__libc_init_array>:
 80014fc:	b570      	push	{r4, r5, r6, lr}
 80014fe:	4e0d      	ldr	r6, [pc, #52]	; (8001534 <__libc_init_array+0x38>)
 8001500:	4d0d      	ldr	r5, [pc, #52]	; (8001538 <__libc_init_array+0x3c>)
 8001502:	1b76      	subs	r6, r6, r5
 8001504:	10b6      	asrs	r6, r6, #2
 8001506:	d006      	beq.n	8001516 <__libc_init_array+0x1a>
 8001508:	2400      	movs	r4, #0
 800150a:	3401      	adds	r4, #1
 800150c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001510:	4798      	blx	r3
 8001512:	42a6      	cmp	r6, r4
 8001514:	d1f9      	bne.n	800150a <__libc_init_array+0xe>
 8001516:	4e09      	ldr	r6, [pc, #36]	; (800153c <__libc_init_array+0x40>)
 8001518:	4d09      	ldr	r5, [pc, #36]	; (8001540 <__libc_init_array+0x44>)
 800151a:	1b76      	subs	r6, r6, r5
 800151c:	f7ff ffe0 	bl	80014e0 <_init>
 8001520:	10b6      	asrs	r6, r6, #2
 8001522:	d006      	beq.n	8001532 <__libc_init_array+0x36>
 8001524:	2400      	movs	r4, #0
 8001526:	3401      	adds	r4, #1
 8001528:	f855 3b04 	ldr.w	r3, [r5], #4
 800152c:	4798      	blx	r3
 800152e:	42a6      	cmp	r6, r4
 8001530:	d1f9      	bne.n	8001526 <__libc_init_array+0x2a>
 8001532:	bd70      	pop	{r4, r5, r6, pc}
 8001534:	20000430 	.word	0x20000430
 8001538:	20000430 	.word	0x20000430
 800153c:	20000430 	.word	0x20000430
 8001540:	20000430 	.word	0x20000430

08001544 <memset>:
 8001544:	b4f0      	push	{r4, r5, r6, r7}
 8001546:	0786      	lsls	r6, r0, #30
 8001548:	d043      	beq.n	80015d2 <memset+0x8e>
 800154a:	1e54      	subs	r4, r2, #1
 800154c:	2a00      	cmp	r2, #0
 800154e:	d03e      	beq.n	80015ce <memset+0x8a>
 8001550:	b2ca      	uxtb	r2, r1
 8001552:	4603      	mov	r3, r0
 8001554:	e002      	b.n	800155c <memset+0x18>
 8001556:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800155a:	d338      	bcc.n	80015ce <memset+0x8a>
 800155c:	f803 2b01 	strb.w	r2, [r3], #1
 8001560:	079d      	lsls	r5, r3, #30
 8001562:	d1f8      	bne.n	8001556 <memset+0x12>
 8001564:	2c03      	cmp	r4, #3
 8001566:	d92b      	bls.n	80015c0 <memset+0x7c>
 8001568:	b2cd      	uxtb	r5, r1
 800156a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800156e:	2c0f      	cmp	r4, #15
 8001570:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001574:	d916      	bls.n	80015a4 <memset+0x60>
 8001576:	f1a4 0710 	sub.w	r7, r4, #16
 800157a:	093f      	lsrs	r7, r7, #4
 800157c:	f103 0620 	add.w	r6, r3, #32
 8001580:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8001584:	f103 0210 	add.w	r2, r3, #16
 8001588:	e942 5504 	strd	r5, r5, [r2, #-16]
 800158c:	e942 5502 	strd	r5, r5, [r2, #-8]
 8001590:	3210      	adds	r2, #16
 8001592:	42b2      	cmp	r2, r6
 8001594:	d1f8      	bne.n	8001588 <memset+0x44>
 8001596:	f004 040f 	and.w	r4, r4, #15
 800159a:	3701      	adds	r7, #1
 800159c:	2c03      	cmp	r4, #3
 800159e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80015a2:	d90d      	bls.n	80015c0 <memset+0x7c>
 80015a4:	461e      	mov	r6, r3
 80015a6:	4622      	mov	r2, r4
 80015a8:	3a04      	subs	r2, #4
 80015aa:	2a03      	cmp	r2, #3
 80015ac:	f846 5b04 	str.w	r5, [r6], #4
 80015b0:	d8fa      	bhi.n	80015a8 <memset+0x64>
 80015b2:	1f22      	subs	r2, r4, #4
 80015b4:	f022 0203 	bic.w	r2, r2, #3
 80015b8:	3204      	adds	r2, #4
 80015ba:	4413      	add	r3, r2
 80015bc:	f004 0403 	and.w	r4, r4, #3
 80015c0:	b12c      	cbz	r4, 80015ce <memset+0x8a>
 80015c2:	b2c9      	uxtb	r1, r1
 80015c4:	441c      	add	r4, r3
 80015c6:	f803 1b01 	strb.w	r1, [r3], #1
 80015ca:	429c      	cmp	r4, r3
 80015cc:	d1fb      	bne.n	80015c6 <memset+0x82>
 80015ce:	bcf0      	pop	{r4, r5, r6, r7}
 80015d0:	4770      	bx	lr
 80015d2:	4614      	mov	r4, r2
 80015d4:	4603      	mov	r3, r0
 80015d6:	e7c5      	b.n	8001564 <memset+0x20>

080015d8 <PP_GPO.8592>:
 80015d8:	                                             .

080015d9 <PP_GPI.8593>:
 80015d9:	0000                                         ...

080015dc <_global_impure_ptr>:
 80015dc:	0008 2000                                   ... 
