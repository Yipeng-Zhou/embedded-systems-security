
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b40  08000000  0c000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  00020430  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  00020430  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  00020430  2**0
                  CONTENTS
  5 .data         00000430  20000000  0c000b40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000008  20000430  0c000f70  00020430  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  00020430  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000000  30000000  30000000  00020430  2**0
                  CONTENTS
 10 .debug_aranges 00000138  00000000  00000000  00020430  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00003a33  00000000  00000000  00020568  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000088a  00000000  00000000  00023f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000f1c  00000000  00000000  00024825  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000003f0  00000000  00000000  00025744  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000718d7  00000000  00000000  00025b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000070c  00000000  00000000  0009740b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000000d8  00000000  00000000  00097b17  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .build_attributes 0000018b  00000000  00000000  00097bef  2**0
                  CONTENTS, READONLY
 19 .debug_macro  00017e9c  00000000  00000000  00097d7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c000b40 	.word	0x0c000b40
 800024c:	20000000 	.word	0x20000000
 8000250:	00000430 	.word	0x00000430
 8000254:	0c000f70 	.word	0x0c000f70
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c000b40 	.word	0x0c000b40
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c000b40 	.word	0x0c000b40
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000430 	.word	0x20000430
 800027c:	00000008 	.word	0x00000008
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	080006e9 	.word	0x080006e9
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	08000af1 	.word	0x08000af1
    ldr  r0, =main
 80002ac:	080002b3 	.word	0x080002b3

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>

080002b2 <main>:

void initCCU4(void);
void connectLED(void);

int main(void)
{
 80002b2:	b580      	push	{r7, lr}
 80002b4:	af00      	add	r7, sp, #0
	initCCU4();
 80002b6:	f000 f801 	bl	80002bc <initCCU4>

	while(1);
 80002ba:	e7fe      	b.n	80002ba <main+0x8>

080002bc <initCCU4>:
	return 0;
}

void initCCU4()
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	SCU_RESET -> PRCLR0 = SCU_RESET_PRCLR0_CCU40RS_Msk;
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <initCCU4+0x44>)
 80002c2:	2204      	movs	r2, #4
 80002c4:	615a      	str	r2, [r3, #20]
	SCU_CLK -> CLKSET = SCU_CLK_CLKSET_CCUCEN_Msk;
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <initCCU4+0x48>)
 80002c8:	2210      	movs	r2, #16
 80002ca:	605a      	str	r2, [r3, #4]
	CCU40 -> GIDLC = CCU4_GIDLC_SPRB_Msk;
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <initCCU4+0x4c>)
 80002ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002d2:	60da      	str	r2, [r3, #12]
	CCU40_CC42 -> PRS = 0XFFFF;
 80002d4:	4b0d      	ldr	r3, [pc, #52]	; (800030c <initCCU4+0x50>)
 80002d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002da:	635a      	str	r2, [r3, #52]	; 0x34
	CCU40_CC42 -> CRS = (1 - 0.1) * 0XFFFF;
 80002dc:	4b0b      	ldr	r3, [pc, #44]	; (800030c <initCCU4+0x50>)
 80002de:	f24e 6265 	movw	r2, #58981	; 0xe665
 80002e2:	63da      	str	r2, [r3, #60]	; 0x3c
	CCU40 -> GCSS = CCU4_GCSS_S2SE_Msk;
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <initCCU4+0x4c>)
 80002e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002ea:	611a      	str	r2, [r3, #16]
	connectLED();
 80002ec:	f000 f810 	bl	8000310 <connectLED>
	CCU40 -> GIDLC = CCU4_GIDLC_CS2I_Msk;
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <initCCU4+0x4c>)
 80002f2:	2204      	movs	r2, #4
 80002f4:	60da      	str	r2, [r3, #12]
	CCU40_CC42 -> TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <initCCU4+0x50>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	60da      	str	r2, [r3, #12]
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	50004400 	.word	0x50004400
 8000304:	50004600 	.word	0x50004600
 8000308:	4000c000 	.word	0x4000c000
 800030c:	4000c300 	.word	0x4000c300

08000310 <connectLED>:

void connectLED()
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	static const uint8_t PP_ALT3 = 0b10011;
	PORT1 -> IOCR0 = (PORT1 -> IOCR0 & ~PORT1_IOCR0_PC1_Msk) | (PP_ALT3 << PORT1_IOCR0_PC1_Pos);
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <connectLED+0x24>)
 8000316:	691b      	ldr	r3, [r3, #16]
 8000318:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 800031c:	4a06      	ldr	r2, [pc, #24]	; (8000338 <connectLED+0x28>)
 800031e:	7812      	ldrb	r2, [r2, #0]
 8000320:	02d2      	lsls	r2, r2, #11
 8000322:	4611      	mov	r1, r2
 8000324:	4a03      	ldr	r2, [pc, #12]	; (8000334 <connectLED+0x24>)
 8000326:	430b      	orrs	r3, r1
 8000328:	6113      	str	r3, [r2, #16]
}
 800032a:	bf00      	nop
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	48028100 	.word	0x48028100
 8000338:	08000b38 	.word	0x08000b38

0800033c <XMC_PRIOARRAY_GetHead>:

/*
 *
 */
__STATIC_INLINE int32_t XMC_PRIOARRAY_GetHead(XMC_PRIOARRAY_t *prioarray)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_PRIOARRAY_Init: NULL pointer", prioarray != NULL);
  return prioarray->items[prioarray->size].next;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	685a      	ldr	r2, [r3, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4619      	mov	r1, r3
 800034e:	460b      	mov	r3, r1
 8000350:	005b      	lsls	r3, r3, #1
 8000352:	440b      	add	r3, r1
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	4413      	add	r3, r2
 8000358:	689b      	ldr	r3, [r3, #8]
}
 800035a:	4618      	mov	r0, r3
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr

08000366 <XMC_PRIOARRAY_GetItemPriority>:

/*
 *
 */
__STATIC_INLINE int32_t XMC_PRIOARRAY_GetItemPriority(XMC_PRIOARRAY_t *prioarray, int32_t item)
{
 8000366:	b480      	push	{r7}
 8000368:	b083      	sub	sp, #12
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
 800036e:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_PRIOARRAY_GetItemPriority: item out of range", (item >= 0) && (item < prioarray->size));
  return prioarray->items[item].priority;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	6859      	ldr	r1, [r3, #4]
 8000374:	683a      	ldr	r2, [r7, #0]
 8000376:	4613      	mov	r3, r2
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	4413      	add	r3, r2
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	440b      	add	r3, r1
 8000380:	681b      	ldr	r3, [r3, #0]
}
 8000382:	4618      	mov	r0, r3
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr

0800038e <XMC_PRIOARRAY_GetItemNext>:

/*
 *
 */
__STATIC_INLINE int32_t XMC_PRIOARRAY_GetItemNext(XMC_PRIOARRAY_t *prioarray, int32_t item)
{
 800038e:	b480      	push	{r7}
 8000390:	b083      	sub	sp, #12
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
 8000396:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_PRIOARRAY_GetItemNext: item out of range", (item >= 0) && (item < prioarray->size));
  return prioarray->items[item].next;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	6859      	ldr	r1, [r3, #4]
 800039c:	683a      	ldr	r2, [r7, #0]
 800039e:	4613      	mov	r3, r2
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	4413      	add	r3, r2
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	440b      	add	r3, r1
 80003a8:	689b      	ldr	r3, [r3, #8]
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <XMC_LIST_Init>:
  }
}
#endif

void XMC_LIST_Init(XMC_LIST_t *list)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
  *list = NULL;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <XMC_LIST_GetHead>:

void *XMC_LIST_GetHead(XMC_LIST_t *list)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  return *list;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <XMC_LIST_GetTail>:

void *XMC_LIST_GetTail(XMC_LIST_t *list)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  struct list *tail;
  
  if (*list == NULL) 
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d102      	bne.n	80003fe <XMC_LIST_GetTail+0x16>
  {
    tail = NULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	e00a      	b.n	8000414 <XMC_LIST_GetTail+0x2c>
  }
  else
  {
    for (tail = (struct list *)*list; tail->next != NULL; tail = tail->next)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	e002      	b.n	800040c <XMC_LIST_GetTail+0x24>
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1f8      	bne.n	8000406 <XMC_LIST_GetTail+0x1e>
    {
      /* Loop through the list */
    }  
  }
  
  return tail;    
 8000414:	68fb      	ldr	r3, [r7, #12]
}
 8000416:	4618      	mov	r0, r3
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <XMC_LIST_Add>:

void XMC_LIST_Add(XMC_LIST_t *list, void *item)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b084      	sub	sp, #16
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
 800042a:	6039      	str	r1, [r7, #0]
  struct list *tail;
  
  ((struct list *)item)->next = NULL;
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
  tail = (struct list *)XMC_LIST_GetTail(list);
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f7ff ffd8 	bl	80003e8 <XMC_LIST_GetTail>
 8000438:	60f8      	str	r0, [r7, #12]
  
  if (tail == NULL) 
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d103      	bne.n	8000448 <XMC_LIST_Add+0x26>
  {
    *list = item;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	683a      	ldr	r2, [r7, #0]
 8000444:	601a      	str	r2, [r3, #0]
  } 
  else 
  {
    tail->next = (struct list *)item;
  }
}
 8000446:	e002      	b.n	800044e <XMC_LIST_Add+0x2c>
    tail->next = (struct list *)item;
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	683a      	ldr	r2, [r7, #0]
 800044c:	601a      	str	r2, [r3, #0]
}
 800044e:	bf00      	nop
 8000450:	3710      	adds	r7, #16
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <XMC_LIST_Remove>:

void XMC_LIST_Remove(XMC_LIST_t *list, void *item)
{
 8000456:	b480      	push	{r7}
 8000458:	b085      	sub	sp, #20
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]
  struct list *right, *left;
  
  if (*list != NULL) 
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d022      	beq.n	80004ae <XMC_LIST_Remove+0x58>
  {
    left = NULL;
 8000468:	2300      	movs	r3, #0
 800046a:	60bb      	str	r3, [r7, #8]
    for(right = (struct list *)*list; right != NULL; right = right->next)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	e019      	b.n	80004a8 <XMC_LIST_Remove+0x52>
    {
      if(right == item) 
 8000474:	68fa      	ldr	r2, [r7, #12]
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	429a      	cmp	r2, r3
 800047a:	d110      	bne.n	800049e <XMC_LIST_Remove+0x48>
      {
        if(left == NULL) 
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d104      	bne.n	800048c <XMC_LIST_Remove+0x36>
        {
          /* First on list */
          *list = right->next;
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	e003      	b.n	8000494 <XMC_LIST_Remove+0x3e>
        } 
        else 
        {
          /* Not first on list */
          left->next = right->next;
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	601a      	str	r2, [r3, #0]
        }
        right->next = NULL;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
        break;
 800049a:	bf00      	nop
      }
      left = right;
    }
  }
}
 800049c:	e007      	b.n	80004ae <XMC_LIST_Remove+0x58>
      left = right;
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	60bb      	str	r3, [r7, #8]
    for(right = (struct list *)*list; right != NULL; right = right->next)
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d1e2      	bne.n	8000474 <XMC_LIST_Remove+0x1e>
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr

080004ba <XMC_LIST_Insert>:

void XMC_LIST_Insert(XMC_LIST_t *list, void *prev_item, void *new_item)
{
 80004ba:	b480      	push	{r7}
 80004bc:	b085      	sub	sp, #20
 80004be:	af00      	add	r7, sp, #0
 80004c0:	60f8      	str	r0, [r7, #12]
 80004c2:	60b9      	str	r1, [r7, #8]
 80004c4:	607a      	str	r2, [r7, #4]
  if (prev_item == NULL) 
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d107      	bne.n	80004dc <XMC_LIST_Insert+0x22>
  {
	((struct list *)new_item)->next = (struct list *)*list;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	601a      	str	r2, [r3, #0]
	*list = new_item;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	601a      	str	r2, [r3, #0]
  else 
  {
    ((struct list *)new_item)->next = ((struct list *)prev_item)->next;
    ((struct list *)prev_item)->next = (struct list *)new_item;
  }
}
 80004da:	e006      	b.n	80004ea <XMC_LIST_Insert+0x30>
    ((struct list *)new_item)->next = ((struct list *)prev_item)->next;
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	601a      	str	r2, [r3, #0]
    ((struct list *)prev_item)->next = (struct list *)new_item;
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	601a      	str	r2, [r3, #0]
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr

080004f6 <XMC_PRIOARRAY_Init>:

void XMC_PRIOARRAY_Init(XMC_PRIOARRAY_t *prioarray)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_PRIOARRAY_Init: NULL pointer", prioarray != NULL);

  /* Initialize head, next points to tail, previous to NULL and the priority is MININT */
  prioarray->items[prioarray->size].next = prioarray->size + 1;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6859      	ldr	r1, [r3, #4]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4618      	mov	r0, r3
 800050c:	4603      	mov	r3, r0
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	4403      	add	r3, r0
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	440b      	add	r3, r1
 8000516:	3201      	adds	r2, #1
 8000518:	609a      	str	r2, [r3, #8]
  prioarray->items[prioarray->size].previous = -1;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	685a      	ldr	r2, [r3, #4]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4619      	mov	r1, r3
 8000524:	460b      	mov	r3, r1
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	440b      	add	r3, r1
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	4413      	add	r3, r2
 800052e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000532:	605a      	str	r2, [r3, #4]
  prioarray->items[prioarray->size].priority = INT32_MAX;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	685a      	ldr	r2, [r3, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	460b      	mov	r3, r1
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	440b      	add	r3, r1
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	4413      	add	r3, r2
 8000548:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800054c:	601a      	str	r2, [r3, #0]

  /* Initialize tail, next points to NULL, previous is the head and the priority is MAXINT */
  prioarray->items[prioarray->size + 1].next = -1;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6859      	ldr	r1, [r3, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	4613      	mov	r3, r2
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	4413      	add	r3, r2
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	440b      	add	r3, r1
 8000562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000566:	609a      	str	r2, [r3, #8]
  prioarray->items[prioarray->size + 1].previous = prioarray->size;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	6859      	ldr	r1, [r3, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	1c5a      	adds	r2, r3, #1
 8000572:	4613      	mov	r3, r2
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	4413      	add	r3, r2
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	440b      	add	r3, r1
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	6812      	ldr	r2, [r2, #0]
 8000580:	605a      	str	r2, [r3, #4]
  prioarray->items[prioarray->size + 1].priority = INT32_MIN;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6859      	ldr	r1, [r3, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	1c5a      	adds	r2, r3, #1
 800058c:	4613      	mov	r3, r2
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	4413      	add	r3, r2
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	440b      	add	r3, r1
 8000596:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800059a:	601a      	str	r2, [r3, #0]

}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <XMC_PRIOARRAY_Add>:

void XMC_PRIOARRAY_Add(XMC_PRIOARRAY_t *prioarray, int32_t item, int32_t priority)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  int32_t next;
  int32_t previous;

  XMC_ASSERT("XMC_PRIOARRAY_Add: item out of range", (item >= 0) && (item < prioarray->size));
  
  next = XMC_PRIOARRAY_GetHead(prioarray);
 80005b4:	68f8      	ldr	r0, [r7, #12]
 80005b6:	f7ff fec1 	bl	800033c <XMC_PRIOARRAY_GetHead>
 80005ba:	6178      	str	r0, [r7, #20]
  while (XMC_PRIOARRAY_GetItemPriority(prioarray, next) > priority)
 80005bc:	e004      	b.n	80005c8 <XMC_PRIOARRAY_Add+0x20>
  {
    next = XMC_PRIOARRAY_GetItemNext(prioarray, next);
 80005be:	6979      	ldr	r1, [r7, #20]
 80005c0:	68f8      	ldr	r0, [r7, #12]
 80005c2:	f7ff fee4 	bl	800038e <XMC_PRIOARRAY_GetItemNext>
 80005c6:	6178      	str	r0, [r7, #20]
  while (XMC_PRIOARRAY_GetItemPriority(prioarray, next) > priority)
 80005c8:	6979      	ldr	r1, [r7, #20]
 80005ca:	68f8      	ldr	r0, [r7, #12]
 80005cc:	f7ff fecb 	bl	8000366 <XMC_PRIOARRAY_GetItemPriority>
 80005d0:	4602      	mov	r2, r0
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4293      	cmp	r3, r2
 80005d6:	dbf2      	blt.n	80005be <XMC_PRIOARRAY_Add+0x16>
  }

  previous = prioarray->items[next].previous;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	6859      	ldr	r1, [r3, #4]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	4613      	mov	r3, r2
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	4413      	add	r3, r2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	440b      	add	r3, r1
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	613b      	str	r3, [r7, #16]

  prioarray->items[item].next = next;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	6859      	ldr	r1, [r3, #4]
 80005f0:	68ba      	ldr	r2, [r7, #8]
 80005f2:	4613      	mov	r3, r2
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	4413      	add	r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	440b      	add	r3, r1
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	609a      	str	r2, [r3, #8]
  prioarray->items[item].previous = previous;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	6859      	ldr	r1, [r3, #4]
 8000604:	68ba      	ldr	r2, [r7, #8]
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	440b      	add	r3, r1
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	605a      	str	r2, [r3, #4]
  prioarray->items[item].priority = priority;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	6859      	ldr	r1, [r3, #4]
 8000618:	68ba      	ldr	r2, [r7, #8]
 800061a:	4613      	mov	r3, r2
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	4413      	add	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	440b      	add	r3, r1
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	601a      	str	r2, [r3, #0]

  prioarray->items[previous].next = item;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	6859      	ldr	r1, [r3, #4]
 800062c:	693a      	ldr	r2, [r7, #16]
 800062e:	4613      	mov	r3, r2
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	4413      	add	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	440b      	add	r3, r1
 8000638:	68ba      	ldr	r2, [r7, #8]
 800063a:	609a      	str	r2, [r3, #8]
  prioarray->items[next].previous = item;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	6859      	ldr	r1, [r3, #4]
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	4613      	mov	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	4413      	add	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	440b      	add	r3, r1
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	605a      	str	r2, [r3, #4]
}
 8000650:	bf00      	nop
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <XMC_PRIOARRAY_Remove>:

void XMC_PRIOARRAY_Remove(XMC_PRIOARRAY_t *prioarray, int32_t item)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
  int32_t next;
  int32_t previous;

  XMC_ASSERT("XMC_PRIOARRAY_Add: item out of range", (item >= 0) && (item < prioarray->size));
  
  next = prioarray->items[item].next;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6859      	ldr	r1, [r3, #4]
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	440b      	add	r3, r1
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	60fb      	str	r3, [r7, #12]
  previous = prioarray->items[item].previous;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6859      	ldr	r1, [r3, #4]
 800067a:	683a      	ldr	r2, [r7, #0]
 800067c:	4613      	mov	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	4413      	add	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	440b      	add	r3, r1
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	60bb      	str	r3, [r7, #8]

  prioarray->items[previous].next = next;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6859      	ldr	r1, [r3, #4]
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	4613      	mov	r3, r2
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	4413      	add	r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	440b      	add	r3, r1
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	609a      	str	r2, [r3, #8]
  prioarray->items[next].previous = previous;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6859      	ldr	r1, [r3, #4]
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	4613      	mov	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	440b      	add	r3, r1
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	605a      	str	r2, [r3, #4]
}
 80006b2:	bf00      	nop
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 80006be:	b480      	push	{r7}
 80006c0:	b085      	sub	sp, #20
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	e003      	b.n	80006d4 <delay+0x16>
  {
    __NOP();
 80006cc:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d8f7      	bhi.n	80006cc <delay+0xe>
  }
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80006e8:	b598      	push	{r3, r4, r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80006ec:	4a06      	ldr	r2, [pc, #24]	; (8000708 <SystemInit+0x20>)
 80006ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80006f2:	4614      	mov	r4, r2
 80006f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80006fa:	f000 f807 	bl	800070c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80006fe:	f000 f83d 	bl	800077c <SystemCoreClockSetup>
}
 8000702:	bf00      	nop
 8000704:	bd98      	pop	{r3, r4, r7, pc}
 8000706:	bf00      	nop
 8000708:	2000ffc4 	.word	0x2000ffc4

0800070c <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000712:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <SystemCoreSetup+0x64>)
 8000716:	4a17      	ldr	r2, [pc, #92]	; (8000774 <SystemCoreSetup+0x68>)
 8000718:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800071a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 800071e:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <SystemCoreSetup+0x64>)
 8000722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <SystemCoreSetup+0x64>)
 8000728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800072c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <SystemCoreSetup+0x64>)
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <SystemCoreSetup+0x64>)
 8000736:	f023 0308 	bic.w	r3, r3, #8
 800073a:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <SystemCoreSetup+0x6c>)
 800073e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000742:	3314      	adds	r3, #20
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f023 030f 	bic.w	r3, r3, #15
 800074e:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f043 0303 	orr.w	r3, r3, #3
 8000756:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <SystemCoreSetup+0x6c>)
 800075a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800075e:	3314      	adds	r3, #20
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	601a      	str	r2, [r3, #0]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000ed00 	.word	0xe000ed00
 8000774:	08000000 	.word	0x08000000
 8000778:	58001000 	.word	0x58001000

0800077c <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000780:	4b75      	ldr	r3, [pc, #468]	; (8000958 <SystemCoreClockSetup+0x1dc>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	2b00      	cmp	r3, #0
 800078a:	d10c      	bne.n	80007a6 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 800078c:	4b72      	ldr	r3, [pc, #456]	; (8000958 <SystemCoreClockSetup+0x1dc>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	4a71      	ldr	r2, [pc, #452]	; (8000958 <SystemCoreClockSetup+0x1dc>)
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000798:	bf00      	nop
 800079a:	4b6f      	ldr	r3, [pc, #444]	; (8000958 <SystemCoreClockSetup+0x1dc>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0f9      	beq.n	800079a <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80007a6:	4b6d      	ldr	r3, [pc, #436]	; (800095c <SystemCoreClockSetup+0x1e0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d009      	beq.n	80007c6 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80007b2:	4b6a      	ldr	r3, [pc, #424]	; (800095c <SystemCoreClockSetup+0x1e0>)
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	4a69      	ldr	r2, [pc, #420]	; (800095c <SystemCoreClockSetup+0x1e0>)
 80007b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007bc:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80007be:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80007c2:	f7ff ff7c 	bl	80006be <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80007c6:	4b66      	ldr	r3, [pc, #408]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	4a65      	ldr	r2, [pc, #404]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 80007cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007d0:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80007d2:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80007d6:	f7ff ff72 	bl	80006be <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80007da:	4b61      	ldr	r3, [pc, #388]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	4a60      	ldr	r2, [pc, #384]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 80007e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007e4:	f023 0302 	bic.w	r3, r3, #2
 80007e8:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80007ea:	4b5e      	ldr	r3, [pc, #376]	; (8000964 <SystemCoreClockSetup+0x1e8>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d029      	beq.n	800084a <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80007f6:	4b5b      	ldr	r3, [pc, #364]	; (8000964 <SystemCoreClockSetup+0x1e8>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	4a5a      	ldr	r2, [pc, #360]	; (8000964 <SystemCoreClockSetup+0x1e8>)
 80007fc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000800:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000804:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8000806:	f000 f927 	bl	8000a58 <OSCHP_GetFrequency>
 800080a:	4602      	mov	r2, r0
 800080c:	4b56      	ldr	r3, [pc, #344]	; (8000968 <SystemCoreClockSetup+0x1ec>)
 800080e:	fba3 2302 	umull	r2, r3, r3, r2
 8000812:	0d1b      	lsrs	r3, r3, #20
 8000814:	3b01      	subs	r3, #1
 8000816:	041a      	lsls	r2, r3, #16
 8000818:	4b52      	ldr	r3, [pc, #328]	; (8000964 <SystemCoreClockSetup+0x1e8>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	4951      	ldr	r1, [pc, #324]	; (8000964 <SystemCoreClockSetup+0x1e8>)
 800081e:	4313      	orrs	r3, r2
 8000820:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8000822:	4b4f      	ldr	r3, [pc, #316]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	4a4e      	ldr	r2, [pc, #312]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 8000828:	f023 0301 	bic.w	r3, r3, #1
 800082c:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800082e:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	4a4b      	ldr	r2, [pc, #300]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 8000834:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000838:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 800083a:	bf00      	nop
 800083c:	4b48      	ldr	r3, [pc, #288]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000844:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000848:	d1f8      	bne.n	800083c <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 800084a:	4b45      	ldr	r3, [pc, #276]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	4a44      	ldr	r2, [pc, #272]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8000856:	4b42      	ldr	r3, [pc, #264]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	4a41      	ldr	r2, [pc, #260]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 800085c:	f043 0310 	orr.w	r3, r3, #16
 8000860:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000862:	4b3f      	ldr	r3, [pc, #252]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 8000864:	4a41      	ldr	r2, [pc, #260]	; (800096c <SystemCoreClockSetup+0x1f0>)
 8000866:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000868:	4b3d      	ldr	r3, [pc, #244]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	4a3c      	ldr	r2, [pc, #240]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 800086e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000872:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000874:	4b3a      	ldr	r3, [pc, #232]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	4a39      	ldr	r2, [pc, #228]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 800087a:	f023 0310 	bic.w	r3, r3, #16
 800087e:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000880:	4b37      	ldr	r3, [pc, #220]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	4a36      	ldr	r2, [pc, #216]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 8000886:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800088a:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800088c:	bf00      	nop
 800088e:	4b34      	ldr	r3, [pc, #208]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	2b00      	cmp	r3, #0
 8000898:	d0f9      	beq.n	800088e <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800089a:	4b31      	ldr	r3, [pc, #196]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	4a30      	ldr	r2, [pc, #192]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 80008a0:	f023 0301 	bic.w	r3, r3, #1
 80008a4:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80008a6:	bf00      	nop
 80008a8:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1f9      	bne.n	80008a8 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80008b4:	4b2e      	ldr	r3, [pc, #184]	; (8000970 <SystemCoreClockSetup+0x1f4>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	4a2d      	ldr	r2, [pc, #180]	; (8000970 <SystemCoreClockSetup+0x1f4>)
 80008ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008be:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80008c0:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <SystemCoreClockSetup+0x1f4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80008c6:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <SystemCoreClockSetup+0x1f4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80008cc:	4b28      	ldr	r3, [pc, #160]	; (8000970 <SystemCoreClockSetup+0x1f4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80008d2:	4b27      	ldr	r3, [pc, #156]	; (8000970 <SystemCoreClockSetup+0x1f4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <SystemCoreClockSetup+0x1f4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 80008de:	4b24      	ldr	r3, [pc, #144]	; (8000970 <SystemCoreClockSetup+0x1f4>)
 80008e0:	2203      	movs	r2, #3
 80008e2:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 80008ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008ee:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 80008f2:	4a20      	ldr	r2, [pc, #128]	; (8000974 <SystemCoreClockSetup+0x1f8>)
 80008f4:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 80008f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008fa:	f7ff fee0 	bl	80006be <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80008fe:	bf00      	nop
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	2b00      	cmp	r3, #0
 800090a:	d0f9      	beq.n	8000900 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 800090e:	4a1a      	ldr	r2, [pc, #104]	; (8000978 <SystemCoreClockSetup+0x1fc>)
 8000910:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8000912:	f241 1094 	movw	r0, #4500	; 0x1194
 8000916:	f7ff fed2 	bl	80006be <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800091a:	bf00      	nop
 800091c:	4b10      	ldr	r3, [pc, #64]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f003 0304 	and.w	r3, r3, #4
 8000924:	2b00      	cmp	r3, #0
 8000926:	d0f9      	beq.n	800091c <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 800092a:	4a14      	ldr	r2, [pc, #80]	; (800097c <SystemCoreClockSetup+0x200>)
 800092c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 800092e:	f241 7070 	movw	r0, #6000	; 0x1770
 8000932:	f7ff fec4 	bl	80006be <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000936:	bf00      	nop
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <SystemCoreClockSetup+0x1e4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0f9      	beq.n	8000938 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <SystemCoreClockSetup+0x204>)
 8000946:	2205      	movs	r2, #5
 8000948:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <SystemCoreClockSetup+0x1f4>)
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8000950:	f000 f818 	bl	8000984 <SystemCoreClockUpdate>
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	50004200 	.word	0x50004200
 800095c:	50004400 	.word	0x50004400
 8000960:	50004710 	.word	0x50004710
 8000964:	50004700 	.word	0x50004700
 8000968:	6b5fca6b 	.word	0x6b5fca6b
 800096c:	01134f00 	.word	0x01134f00
 8000970:	50004600 	.word	0x50004600
 8000974:	01074f00 	.word	0x01074f00
 8000978:	01044f00 	.word	0x01044f00
 800097c:	01034f00 	.word	0x01034f00
 8000980:	50004160 	.word	0x50004160

08000984 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800098a:	4b2f      	ldr	r3, [pc, #188]	; (8000a48 <SystemCoreClockUpdate+0xc4>)
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000992:	2b00      	cmp	r3, #0
 8000994:	d03e      	beq.n	8000a14 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8000996:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <SystemCoreClockUpdate+0xc8>)
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80009a2:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <SystemCoreClockUpdate+0xcc>)
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	e002      	b.n	80009ae <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80009a8:	f000 f856 	bl	8000a58 <OSCHP_GetFrequency>
 80009ac:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80009ae:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <SystemCoreClockUpdate+0xc8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d020      	beq.n	80009fc <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80009ba:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <SystemCoreClockUpdate+0xc8>)
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	0e1b      	lsrs	r3, r3, #24
 80009c0:	f003 030f 	and.w	r3, r3, #15
 80009c4:	3301      	adds	r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <SystemCoreClockUpdate+0xc8>)
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009d2:	3301      	adds	r3, #1
 80009d4:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <SystemCoreClockUpdate+0xc8>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	0c1b      	lsrs	r3, r3, #16
 80009dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009e0:	3301      	adds	r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	fb02 f303 	mul.w	r3, r2, r3
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	fb02 f303 	mul.w	r3, r2, r3
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	e00d      	b.n	8000a18 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <SystemCoreClockUpdate+0xc8>)
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a04:	3301      	adds	r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	e001      	b.n	8000a18 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <SystemCoreClockUpdate+0xcc>)
 8000a16:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <SystemCoreClockUpdate+0xc4>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	3301      	adds	r3, #1
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a26:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <SystemCoreClockUpdate+0xc4>)
 8000a2a:	691b      	ldr	r3, [r3, #16]
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	3301      	adds	r3, #1
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a38:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000a3a:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <SystemCoreClockUpdate+0xd0>)
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	50004600 	.word	0x50004600
 8000a4c:	50004710 	.word	0x50004710
 8000a50:	016e3600 	.word	0x016e3600
 8000a54:	2000ffc0 	.word	0x2000ffc0

08000a58 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8000a5c:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <OSCHP_GetFrequency+0x10>)
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	00b71b00 	.word	0x00b71b00

08000a6c <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <_sbrk+0x5c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d102      	bne.n	8000a82 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <_sbrk+0x5c>)
 8000a7e:	4a13      	ldr	r2, [pc, #76]	; (8000acc <_sbrk+0x60>)
 8000a80:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <_sbrk+0x5c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3303      	adds	r3, #3
 8000a8c:	f023 0303 	bic.w	r3, r3, #3
 8000a90:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <_sbrk+0x5c>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <_sbrk+0x64>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d207      	bcs.n	8000ab0 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <_sbrk+0x5c>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <_sbrk+0x5c>)
 8000aaa:	6013      	str	r3, [r2, #0]
    return (base);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	e006      	b.n	8000abe <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8000ab0:	f000 f818 	bl	8000ae4 <__errno>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000434 	.word	0x20000434
 8000acc:	20000438 	.word	0x20000438
 8000ad0:	2000ffc0 	.word	0x2000ffc0

08000ad4 <_init>:

/* Init */
void _init(void)
{}
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <__errno>:
 8000ae4:	4b01      	ldr	r3, [pc, #4]	; (8000aec <__errno+0x8>)
 8000ae6:	6818      	ldr	r0, [r3, #0]
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000000 	.word	0x20000000

08000af0 <__libc_init_array>:
 8000af0:	b570      	push	{r4, r5, r6, lr}
 8000af2:	4e0d      	ldr	r6, [pc, #52]	; (8000b28 <__libc_init_array+0x38>)
 8000af4:	4d0d      	ldr	r5, [pc, #52]	; (8000b2c <__libc_init_array+0x3c>)
 8000af6:	1b76      	subs	r6, r6, r5
 8000af8:	10b6      	asrs	r6, r6, #2
 8000afa:	d006      	beq.n	8000b0a <__libc_init_array+0x1a>
 8000afc:	2400      	movs	r4, #0
 8000afe:	3401      	adds	r4, #1
 8000b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b04:	4798      	blx	r3
 8000b06:	42a6      	cmp	r6, r4
 8000b08:	d1f9      	bne.n	8000afe <__libc_init_array+0xe>
 8000b0a:	4e09      	ldr	r6, [pc, #36]	; (8000b30 <__libc_init_array+0x40>)
 8000b0c:	4d09      	ldr	r5, [pc, #36]	; (8000b34 <__libc_init_array+0x44>)
 8000b0e:	1b76      	subs	r6, r6, r5
 8000b10:	f7ff ffe0 	bl	8000ad4 <_init>
 8000b14:	10b6      	asrs	r6, r6, #2
 8000b16:	d006      	beq.n	8000b26 <__libc_init_array+0x36>
 8000b18:	2400      	movs	r4, #0
 8000b1a:	3401      	adds	r4, #1
 8000b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b20:	4798      	blx	r3
 8000b22:	42a6      	cmp	r6, r4
 8000b24:	d1f9      	bne.n	8000b1a <__libc_init_array+0x2a>
 8000b26:	bd70      	pop	{r4, r5, r6, pc}
 8000b28:	20000430 	.word	0x20000430
 8000b2c:	20000430 	.word	0x20000430
 8000b30:	20000430 	.word	0x20000430
 8000b34:	20000430 	.word	0x20000430

08000b38 <PP_ALT3.8140>:
 8000b38:	00000013                                ....

08000b3c <_global_impure_ptr>:
 8000b3c:	20000008                                ... 
